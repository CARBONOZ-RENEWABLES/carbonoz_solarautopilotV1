<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <!-- Added Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="<%= ingress_path %>/css/results.css">
  
</head>
<body>
   <!-- Add hamburger menu button -->
   <button class="mobile-toggle" id="mobileToggle">
    <span></span>
    <span></span>
    <span></span>
</button>
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
</div>
<div id="pageContent">
    <!-- Sidebar -->
 
    <%- include('partials/sidebar') %>
      
    <!-- Main Content -->
    <main class="main-content">
        <div class="container mx-auto px-4 py-8">
            <!-- Header Section -->
            <header class="mb-8">
              <p class="text-gray-600"><%= formattedDate %></p>
              
              <!-- Zone Selection -->
              <div class="mt-4 flex flex-wrap items-center gap-3">
                <label for="zoneSelect" class="font-medium text-gray-700">Zone:</label>
                <select id="zoneSelect" class="p-2 border rounded-md bg-white shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                  <% zones.zones.forEach(function(zone) { %>
                    <option value="<%= zone.code %>" <%= zone.code === selectedZone ? 'selected' : '' %>><%= zone.zoneName %></option>
                  <% }); %>
                </select>
                <button id="saveZoneBtn" class=""></button>
              </div>
            </header>
        
            <% if (isLoading) { %>
              <div class="flex justify-center items-center h-64">
                <div class="text-center">
                  <div class="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                  <p class="mt-4 text-lg text-gray-700">Loading emissions data...</p>
                </div>
              </div>
            <% } else if (error) { %>
              <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
                <p><%= error %></p>
              </div>
            <% } else { %>
              <!-- Period Filter Buttons -->
              <div class="mb-6 flex flex-wrap gap-2">
                <button class="period-btn px-5 py-2 rounded-lg shadow transition-all" data-period="today">Today</button>
                <button class="period-btn px-5 py-2 rounded-lg shadow transition-all" data-period="week">Week</button>
                <button class="period-btn px-5 py-2 rounded-lg shadow transition-all" data-period="month">Month</button>
                <button class="period-btn px-5 py-2 rounded-lg shadow transition-all" data-period="quarter">Quarter</button>
                <button class="period-btn px-5 py-2 rounded-lg shadow transition-all" data-period="year">Year</button>
              </div>
        
              <!-- Summary Cards -->
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <!-- Unavoidable Emissions Card with icon -->
                <div class="bg-white rounded-xl shadow-md p-6">
                  <div class="flex items-center justify-between mb-2">
                    <h3 class="text-lg font-semibold text-gray-700">Unavoidable Emissions</h3>
                    <i class="fas fa-industry text-red-500 text-2xl"></i>
                  </div>
                  <p class="text-3xl font-bold text-red-500" id="unavoidableEmissions"><%= unavoidableEmissions.toFixed(2) %> kg</p>
                  <p class="text-sm text-gray-500 mt-1">Carbon from grid usage</p>
                </div>
                
                <!-- Avoided Emissions Card with icon -->
                <div class="bg-white rounded-xl shadow-md p-6">
                  <div class="flex items-center justify-between mb-2">
                    <h3 class="text-lg font-semibold text-gray-700">Avoided Emissions</h3>
                    <i class="fas fa-leaf text-green-500 text-2xl"></i>
                  </div>
                  <p class="text-3xl font-bold text-green-600" id="avoidedEmissions"><%= avoidedEmissions.toFixed(2) %> kg</p>
                  <p class="text-sm text-gray-500 mt-1">Carbon saved by solar production</p>
                </div>
                
                <!-- Self-Sufficiency Score Card with icon and progress bar -->
                <div class="bg-white rounded-xl shadow-md p-6">
                  <div class="flex items-center justify-between mb-2">
                    <h3 class="text-lg font-semibold text-gray-700">Self-Sufficiency Score</h3>
                    <i class="fas fa-solar-panel text-blue-500 text-2xl"></i>
                  </div>
                  <p class="text-3xl font-bold text-blue-600" id="selfSufficiencyScore"><%= selfSufficiencyScore.toFixed(1) %>%</p>
                  
                  <!-- Added progress bar -->
                  <div class="w-full bg-gray-200 rounded-full h-2.5 mt-2 mb-2">
                    <div id="selfSufficiencyProgress" class="bg-blue-600 h-2.5 rounded-full" style="width: <%= selfSufficiencyScore %>%"></div>
                  </div>
                  
                  <p class="text-sm text-gray-500 mt-1">Percentage of energy from solar</p>
                </div>
              </div>
        
              <!-- Charts Section -->
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Emissions Chart -->
                <div class="bg-white rounded-xl shadow-md p-6">
                  <h3 class="text-xl font-semibold text-gray-800 mb-4">Emissions Comparison</h3>
                  <div class="h-64">
                    <canvas id="emissionsChart"></canvas>
                  </div>
                </div>
                
                <!-- Energy Sources Chart -->
                <div class="bg-white rounded-xl shadow-md p-6">
                  <h3 class="text-xl font-semibold text-gray-800 mb-4">Energy Sources</h3>
                  <div class="h-64">
                    <canvas id="energySourcesChart"></canvas>
                  </div>
                </div>
        
                <!-- Carbon Intensity Chart -->
                <div class="bg-white rounded-xl shadow-md p-6">
                  <h3 class="text-xl font-semibold text-gray-800 mb-4">Carbon Intensity</h3>
                  <div class="h-64">
                    <canvas id="carbonIntensityChart"></canvas>
                  </div>
                </div>
                
                <!-- Self-Sufficiency Score Chart -->
                <div class="bg-white rounded-xl shadow-md p-6">
                  <h3 class="text-xl font-semibold text-gray-800 mb-4">Self-Sufficiency Score</h3>
                  <div class="h-64">
                    <canvas id="selfSufficiencyChart"></canvas>
                  </div>
                </div>
              </div>
        
              <!-- Detailed Data Table -->
              <div class="mt-8 bg-white rounded-xl shadow-md p-6">
                <div class="flex justify-between items-center mb-4">
                  <h3 class="text-xl font-semibold text-gray-800">Detailed Results</h3>
                  
                  <!-- Added CSV export button with yellow background -->
                  <button id="exportCSVBtn" class="px-4 py-2 custom-button rounded-md shadow transition flex items-center">
                    <i class="fas fa-file-csv mr-2"></i> Export CSV
                  </button>
                </div>
                
                <!-- Added table filter inputs -->
                <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label for="dateFilter" class="block text-sm font-medium text-gray-700 mb-1">Filter by Date</label>
                    <input type="date" id="dateFilter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                  </div>
                  <div>
                    <label for="carbonIntensityFilter" class="block text-sm font-medium text-gray-700 mb-1">Min Carbon Intensity</label>
                    <input type="number" id="carbonIntensityFilter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="Min gCO2eq/kWh">
                  </div>
                  <div>
                    <label for="selfSufficiencyFilter" class="block text-sm font-medium text-gray-700 mb-1">Min Self-Sufficiency</label>
                    <input type="number" id="selfSufficiencyFilter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="Min %">
                  </div>
                </div>
                
                <div class="mb-4 flex justify-between items-center">
                  <div class="flex items-center">
                    <span class="text-sm text-gray-700">Show 
                      <select id="pageSizeSelect" class="mx-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                      </select>
                      entries
                    </span>
                  </div>
                  <button id="clearFiltersBtn" class="px-3 py-1 text-sm custom-button rounded hover:bg-gray-300 transition">
                    Clear Filters
                  </button>
                </div>
                
                <div class="overflow-x-auto">
                  <table id="resultsTable" class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                      <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="date">
                          Date <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="carbonIntensity">
                          Carbon Intensity <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="gridEnergy">
                          Grid Energy <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="solarEnergy">
                          Solar Energy <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="unavoidableEmissions">
                          Unavoidable Emissions <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="avoidedEmissions">
                          Avoided Emissions <i class="fas fa-sort ml-1"></i>
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="selfSufficiencyScore">
                          Self-Sufficiency <i class="fas fa-sort ml-1"></i>
                        </th>
                      </tr>
                    </thead>
                    <tbody id="resultsTableBody" class="bg-white divide-y divide-gray-200">
                      <!-- Table rows will be inserted here by JavaScript -->
                    </tbody>
                  </table>
                </div>
                
                <!-- Added pagination controls with yellow buttons -->
                <div class="mt-4 flex justify-between items-center">
                  <div id="tableInfo" class="text-sm text-gray-700">
                    Showing <span id="showingStart">1</span> to <span id="showingEnd">10</span> of <span id="totalEntries">0</span> entries
                  </div>
                  <div class="flex space-x-2">
                    <button id="prevPageBtn" class="px-3 py-1 custom-button rounded transition disabled:opacity-50 disabled:cursor-not-allowed">
                      <i class="fas fa-chevron-left"></i> Previous
                    </button>
                    <div id="paginationNumbers" class="flex space-x-1">
                      <!-- Page numbers will be inserted here -->
                    </div>
                    <button id="nextPageBtn" class="px-3 py-1 custom-button rounded transition disabled:opacity-50 disabled:cursor-not-allowed">
                      Next <i class="fas fa-chevron-right"></i>
                    </button>
                  </div>
                </div>
              </div>
            <% } %>
          </div>
    </main>
</div>
  
<script>
  // Store the periods data from the server
  const periodsData = <%- JSON.stringify(periods) %>;
  let currentPeriod = 'today';
  let charts = {};
  
  // Table pagination and filtering variables
  let tableData = [];
  let filteredData = [];
  let currentPage = 1;
  let pageSize = 10;
  let sortColumn = 'date';
  let sortDirection = 'desc';

  // Function to format dates
  function formatDate(dateString) {
    return moment(dateString).format('MMM D, YYYY');
  }

  // Function to update the summary cards
  function updateSummaryCards(data) {
// Calculate aggregated values for the current period
let unavoidableEmissionsTotal = data.reduce((sum, day) => sum + day.unavoidableEmissions, 0);
let avoidedEmissionsTotal = data.reduce((sum, day) => sum + day.avoidedEmissions, 0);
let avgSelfSufficiencyScore = data.reduce((sum, day) => sum + day.selfSufficiencyScore, 0) / Math.max(1, data.length);

// Update the displayed values
document.getElementById('unavoidableEmissions').textContent = unavoidableEmissionsTotal.toFixed(2) + ' kg';
document.getElementById('avoidedEmissions').textContent = avoidedEmissionsTotal.toFixed(2) + ' kg';

// Update self-sufficiency score with color coding
const selfSufficiencyElement = document.getElementById('selfSufficiencyScore');
selfSufficiencyElement.textContent = avgSelfSufficiencyScore.toFixed(1) + '%';
selfSufficiencyElement.className = 'text-3xl font-bold ' + getSelfSufficiencyTextColor(avgSelfSufficiencyScore);

// Update progress bar width and color
const progressBar = document.getElementById('selfSufficiencyProgress');
progressBar.style.width = avgSelfSufficiencyScore + '%';
progressBar.className = 'h-2.5 rounded-full ' + getSelfSufficiencyColor(avgSelfSufficiencyScore);
}

  // Function to update the emissions chart
  function updateEmissionsChart(data) {
    const ctx = document.getElementById('emissionsChart').getContext('2d');
    
    // Prepare the data
    const labels = data.map(day => formatDate(day.date));
    const unavoidableEmissions = data.map(day => day.unavoidableEmissions);
    const avoidedEmissions = data.map(day => day.avoidedEmissions);
    
    // Destroy existing chart if it exists
    if (charts.emissions) charts.emissions.destroy();
    
    // Create the new chart
    charts.emissions = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'Unavoidable Emissions (kg)',
            data: unavoidableEmissions,
            backgroundColor: 'rgba(239, 68, 68, 0.7)',
            borderColor: 'rgba(239, 68, 68, 1)',
            borderWidth: 1
          },
          {
            label: 'Avoided Emissions (kg)',
            data: avoidedEmissions,
            backgroundColor: 'rgba(16, 185, 129, 0.7)',
            borderColor: 'rgba(16, 185, 129, 1)',
            borderWidth: 1
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top',
          },
          tooltip: {
            mode: 'index',
            intersect: false
          }
        },
        scales: {
          x: {
            stacked: true,
            display: data.length <= 14 // Only show x-axis labels if there are few data points
          },
          y: {
            stacked: false,
            beginAtZero: true,
            title: {
              display: true,
              text: 'Emissions (kg CO2)'
            }
          }
        }
      }
    });
  }

  // Function to update the energy sources chart
  function updateEnergySourcesChart(data) {
    const ctx = document.getElementById('energySourcesChart').getContext('2d');
    
    // Prepare the data
    const labels = data.map(day => formatDate(day.date));
    const gridEnergy = data.map(day => day.gridEnergy);
    const solarEnergy = data.map(day => day.solarEnergy);
    
    // Destroy existing chart if it exists
    if (charts.energySources) charts.energySources.destroy();
    
    // Create the new chart
    charts.energySources = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'Grid Energy (kWh)',
            data: gridEnergy,
            backgroundColor: 'rgba(59, 130, 246, 0.7)',
            borderColor: 'rgba(59, 130, 246, 1)',
            borderWidth: 1
          },
          {
            label: 'Solar Energy (kWh)',
            data: solarEnergy,
            backgroundColor: 'rgba(251, 191, 36, 0.7)',
            borderColor: 'rgba(251, 191, 36, 1)',
            borderWidth: 1
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top',
          },
          tooltip: {
            mode: 'index',
            intersect: false
          }
        },
        scales: {
          x: {
            stacked: true,
            display: data.length <= 14 // Only show x-axis labels if there are few data points
          },
          y: {
            stacked: true,
            beginAtZero: true,
            title: {
              display: true,
              text: 'Energy (kWh)'
            }
          }
        }
      }
    });
  }

  // Function to update the carbon intensity chart
  function updateCarbonIntensityChart(data) {
    const ctx = document.getElementById('carbonIntensityChart').getContext('2d');
    
    // Prepare the data
    const labels = data.map(day => formatDate(day.date));
    const carbonIntensity = data.map(day => day.carbonIntensity);
    
    // Destroy existing chart if it exists
    if (charts.carbonIntensity) charts.carbonIntensity.destroy();
    
    // Create the new chart
    charts.carbonIntensity = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'Carbon Intensity (gCO2eq/kWh)',
            data: carbonIntensity,
            backgroundColor: 'rgba(22, 49, 226, 0.2)',
            borderColor: 'rgb(0, 36, 237)',
            borderWidth: 2,
            tension: 0.1,
            fill: true
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top',
          }
        },
        scales: {
          x: {
            display: data.length <= 14 // Only show x-axis labels if there are few data points
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Carbon Intensity (gCO2eq/kWh)'
            }
          }
        }
      }
    });
  }

 // Update the self-sufficiency chart function to include color gradients
function updateSelfSufficiencyChart(data) {
const ctx = document.getElementById('selfSufficiencyChart').getContext('2d');

// Prepare the data
const labels = data.map(day => formatDate(day.date));
const selfSufficiencyScores = data.map(day => day.selfSufficiencyScore);

// Create color gradient for the area under the line
const gradient = ctx.createLinearGradient(0, 0, 0, 400);
gradient.addColorStop(0, 'rgba(16, 185, 129, 0.7)');  // Green at top (100%)
gradient.addColorStop(0.4, 'rgba(251, 191, 36, 0.7)'); // Yellow at middle (60%)
gradient.addColorStop(1, 'rgba(239, 68, 68, 0.7)');   // Red at bottom (0%)

// Destroy existing chart if it exists
if (charts.selfSufficiency) charts.selfSufficiency.destroy();

// Create the new chart
charts.selfSufficiency = new Chart(ctx, {
  type: 'line',
  data: {
    labels: labels,
    datasets: [
      {
        label: 'Self-Sufficiency Score (%)',
        data: selfSufficiencyScores,
        backgroundColor: gradient,
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 2,
        tension: 0.1,
        fill: true
      }
    ]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top',
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            const score = context.raw;
            let label = score.toFixed(1) + '%';
            
            // Add rating text based on score
            if (score >= 80) label += ' (Excellent)';
            else if (score >= 60) label += ' (Good)';
            else if (score >= 40) label += ' (Moderate)';
            else if (score >= 20) label += ' (Poor)';
            else label += ' (Very Poor)';
            
            return label;
          }
        }
      }
    },
    scales: {
      x: {
        display: data.length <= 14 // Only show x-axis labels if there are few data points
      },
      y: {
        beginAtZero: true,
        max: 100,
        title: {
          display: true,
          text: 'Self-Sufficiency (%)'
        }
      }
    }
  }
});
}
  // Function to filter table data based on input filters
  function filterTableData() {
    const dateFilter = document.getElementById('dateFilter').value;
    const carbonIntensityFilter = parseFloat(document.getElementById('carbonIntensityFilter').value) || 0;
    const selfSufficiencyFilter = parseFloat(document.getElementById('selfSufficiencyFilter').value) || 0;
    
    filteredData = tableData.filter(row => {
      // Date filter
      const dateMatch = !dateFilter || moment(row.date).format('YYYY-MM-DD') === dateFilter;
      
      // Carbon intensity filter
      const carbonMatch = row.carbonIntensity >= carbonIntensityFilter;
      
      // Self-sufficiency filter
      const sufficiencyMatch = row.selfSufficiencyScore >= selfSufficiencyFilter;
      
      return dateMatch && carbonMatch && sufficiencyMatch;
    });
    
    // Reset to first page when filters change
    currentPage = 1;
    
    // Sort the filtered data
    sortTableData();
    
    // Update the table with the filtered and sorted data
    updateTablePagination();
  }

  // Function to sort table data
  function sortTableData() {
    filteredData.sort((a, b) => {
      let valA = a[sortColumn];
      let valB = b[sortColumn];
      
      // Special handling for date values
      if (sortColumn === 'date') {
        valA = new Date(valA).getTime();
        valB = new Date(valB).getTime();
      }
      
      if (valA < valB) {
        return sortDirection === 'asc' ? -1 : 1;
      }
      if (valA > valB) {
        return sortDirection === 'asc' ? 1 : -1;
      }
      return 0;
    });
  }

  // Function to update the table pagination
  function updateTablePagination() {
    // Calculate pagination values
    const totalEntries = filteredData.length;
    const totalPages = Math.ceil(totalEntries / pageSize);
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = Math.min(startIndex + pageSize, totalEntries);
    
    // Update pagination display
    document.getElementById('showingStart').textContent = totalEntries > 0 ? startIndex + 1 : 0;
    document.getElementById('showingEnd').textContent = endIndex;
    document.getElementById('totalEntries').textContent = totalEntries;
    
    // Enable/disable pagination buttons
    document.getElementById('prevPageBtn').disabled = currentPage <= 1;
    document.getElementById('nextPageBtn').disabled = currentPage >= totalPages;
    
    // Generate pagination numbers
    const paginationContainer = document.getElementById('paginationNumbers');
    paginationContainer.innerHTML = '';
    
    // Determine which page numbers to show
    const pagesToShow = [];
    if (totalPages <= 7) {
      // Show all pages if 7 or fewer
      for (let i = 1; i <= totalPages; i++) {
        pagesToShow.push(i);
      }
    } else {
      // Show current page, 2 before, 2 after, first and last
      pagesToShow.push(1);
      if (currentPage > 3) pagesToShow.push('...');
      
      const start = Math.max(2, currentPage - 1);
      const end = Math.min(currentPage + 1, totalPages - 1);
      
      for (let i = start; i <= end; i++) {
        pagesToShow.push(i);
      }
      
      if (currentPage < totalPages - 2) pagesToShow.push('...');
      if (totalPages > 1) pagesToShow.push(totalPages);
    }
    
    // Create the page number buttons
    pagesToShow.forEach(page => {
      if (page === '...') {
        const ellipsis = document.createElement('span');
        ellipsis.textContent = '...';
        ellipsis.className = 'px-3 py-1 text-gray-700';
        paginationContainer.appendChild(ellipsis);
      } else {
        const pageBtn = document.createElement('button');
        pageBtn.textContent = page;
        pageBtn.className = 'px-3 py-1 rounded transition';
        
        if (page === currentPage) {
          pageBtn.classList.add('bg-blue-600', 'text-white');
        } else {
          pageBtn.classList.add('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
        }
        
        pageBtn.addEventListener('click', () => {
          currentPage = page;
          updateTablePagination();
        });
        
        paginationContainer.appendChild(pageBtn);
      }
    });
    
    // Update the table with the current page data
    updateDataTable(filteredData.slice(startIndex, endIndex));
  }


  // Function to get color based on self-sufficiency score
function getSelfSufficiencyColor(score) {
if (score >= 80) return 'bg-green-600'; // Excellent - Dark Green
if (score >= 60) return 'bg-green-400'; // Good - Light Green
if (score >= 40) return 'bg-yellow-400'; // Moderate - Yellow
if (score >= 20) return 'bg-orange-400'; // Poor - Orange
return 'bg-red-600'; // Very Poor - Red
}

// Function to get text color for self-sufficiency score
function getSelfSufficiencyTextColor(score) {
if (score >= 60) return 'text-green-600'; // Green text for good scores
if (score >= 40) return 'text-yellow-600'; // Yellow text for moderate scores
if (score >= 20) return 'text-orange-600'; // Orange text for poor scores
return 'text-red-600'; // Red text for very poor scores
}

  
// Update the data table function to include color-coded self-sufficiency cells
function updateDataTable(data) {
const tableBody = document.getElementById('resultsTableBody');
tableBody.innerHTML = '';

data.forEach(day => {
  const row = document.createElement('tr');
  row.className = 'hover:bg-gray-50';
  
  // Create cells for each data point
  row.innerHTML = `
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatDate(day.date)}</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${day.carbonIntensity.toFixed(1)} gCO2eq/kWh</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${day.gridEnergy.toFixed(2)} kWh</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${day.solarEnergy.toFixed(2)} kWh</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${day.unavoidableEmissions.toFixed(2)} kg</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${day.avoidedEmissions.toFixed(2)} kg</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm">
      <div class="flex items-center">
        <span class="mr-2 ${getSelfSufficiencyTextColor(day.selfSufficiencyScore)} font-medium">${day.selfSufficiencyScore.toFixed(1)}%</span>
        <div class="w-24 bg-gray-200 rounded-full h-1.5">
          <div class="${getSelfSufficiencyColor(day.selfSufficiencyScore)} h-1.5 rounded-full" style="width: ${day.selfSufficiencyScore}%"></div>
        </div>
      </div>
    </td>
  `;
  
  tableBody.appendChild(row);
});
}

  // Function to export table data to CSV
  function exportTableToCSV() {
    // Create CSV headers
    const headers = ['Date', 'Carbon Intensity (gCO2eq/kWh)', 'Grid Energy (kWh)', 'Solar Energy (kWh)', 
                    'Unavoidable Emissions (kg)', 'Avoided Emissions (kg)', 'Self-Sufficiency (%)'];
    
    // Convert data to CSV format
    let csvContent = headers.join(',') + '\n';
    
   // Export to CSV function continues...
filteredData.forEach(row => {
  const rowData = [
    moment(row.date).format('YYYY-MM-DD'),
    row.carbonIntensity.toFixed(1),
    row.gridEnergy.toFixed(2),
    row.solarEnergy.toFixed(2),
    row.unavoidableEmissions.toFixed(2),
    row.avoidedEmissions.toFixed(2),
    row.selfSufficiencyScore.toFixed(1)
  ];
  csvContent += rowData.join(',') + '\n';
});

// Create a download link for the CSV file
const encodedUri = encodeURI('data:text/csv;charset=utf-8,' + csvContent);
const link = document.createElement('a');
link.setAttribute('href', encodedUri);
link.setAttribute('download', `emissions_data_${moment().format('YYYY-MM-DD')}.csv`);
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}

// Function to update all charts and data displays
function updateDisplayForPeriod(periodName) {
// Get data for the selected period
const periodData = periodsData[periodName];

if (!periodData || !periodData.length) {
  console.error('No data available for period:', periodName);
  return;
}

// Update the period buttons styling
document.querySelectorAll('.period-btn').forEach(btn => {
  if (btn.dataset.period === periodName) {
    btn.classList.add('bg-blue-600', 'text-white');
    btn.classList.remove('bg-gray-200', 'text-gray-700');
  } else {
    btn.classList.remove('bg-blue-600', 'text-white');
    btn.classList.add('bg-gray-200', 'text-gray-700');
  }
});

// Update all visual elements with the new data
updateSummaryCards(periodData);
updateEmissionsChart(periodData);
updateEnergySourcesChart(periodData);
updateCarbonIntensityChart(periodData);
updateSelfSufficiencyChart(periodData);

// Update the table data
tableData = [...periodData];
filteredData = [...tableData];
sortTableData();
updateTablePagination();
}

// Event listeners for period buttons
document.querySelectorAll('.period-btn').forEach(btn => {
btn.addEventListener('click', () => {
  currentPeriod = btn.dataset.period;
  updateDisplayForPeriod(currentPeriod);
});
});

// Event listeners for table sorting
document.querySelectorAll('th[data-sort]').forEach(th => {
th.addEventListener('click', () => {
  const column = th.dataset.sort;
  
  // If clicking the same column, toggle direction
  if (sortColumn === column) {
    sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
  } else {
    // New column, default to descending for date, ascending for others
    sortColumn = column;
    sortDirection = column === 'date' ? 'desc' : 'asc';
  }
  
  // Update the sort indicators in the UI
  document.querySelectorAll('th[data-sort] i').forEach(icon => {
    icon.className = 'fas fa-sort ml-1';
  });
  
  const sortIcon = th.querySelector('i');
  sortIcon.className = `fas fa-sort-${sortDirection === 'asc' ? 'up' : 'down'} ml-1`;
  
  // Sort and update the table
  sortTableData();
  updateTablePagination();
});
});

// Event listeners for pagination controls
document.getElementById('prevPageBtn').addEventListener('click', () => {
if (currentPage > 1) {
  currentPage--;
  updateTablePagination();
}
});

document.getElementById('nextPageBtn').addEventListener('click', () => {
const totalPages = Math.ceil(filteredData.length / pageSize);
if (currentPage < totalPages) {
  currentPage++;
  updateTablePagination();
}
});

// Event listener for page size select
document.getElementById('pageSizeSelect').addEventListener('change', (e) => {
pageSize = parseInt(e.target.value);
currentPage = 1; // Reset to first page
updateTablePagination();
});

// Event listeners for table filters
document.getElementById('dateFilter').addEventListener('change', filterTableData);
document.getElementById('carbonIntensityFilter').addEventListener('input', filterTableData);
document.getElementById('selfSufficiencyFilter').addEventListener('input', filterTableData);

// Event listener for clear filters button
document.getElementById('clearFiltersBtn').addEventListener('click', () => {
document.getElementById('dateFilter').value = '';
document.getElementById('carbonIntensityFilter').value = '';
document.getElementById('selfSufficiencyFilter').value = '';

filteredData = [...tableData];
currentPage = 1;
updateTablePagination();
});

// Event listener for CSV export button
document.getElementById('exportCSVBtn').addEventListener('click', exportTableToCSV);

// Event listener for zone selection
document.getElementById('saveZoneBtn').addEventListener('click', () => {
const selectedZone = document.getElementById('zoneSelect').value;
window.location.href = `/?zone=${selectedZone}`;
});

// Initialize the dashboard with the default period
document.addEventListener('DOMContentLoaded', () => {
// Set default period button as active
const defaultPeriodBtn = document.querySelector(`.period-btn[data-period="${currentPeriod}"]`);
if (defaultPeriodBtn) {
  defaultPeriodBtn.classList.add('bg-blue-600', 'text-white');
  defaultPeriodBtn.classList.remove('bg-gray-200', 'text-gray-700');
}

// Set default sort column indicator
const defaultSortHeader = document.querySelector(`th[data-sort="${sortColumn}"]`);
if (defaultSortHeader) {
  const sortIcon = defaultSortHeader.querySelector('i');
  sortIcon.className = `fas fa-sort-${sortDirection === 'asc' ? 'up' : 'down'} ml-1`;
}

// Initial update of all visual elements
updateDisplayForPeriod(currentPeriod);
});
</script>

<script>
// Add JavaScript to handle the period buttons and apply the active class
document.addEventListener('DOMContentLoaded', function() {
  const periodBtns = document.querySelectorAll('.period-btn');
  
  // Set default active button
  if (periodBtns.length > 0) {
    periodBtns[0].classList.add('active');
  }
  
  periodBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      // Remove active class from all buttons
      periodBtns.forEach(b => b.classList.remove('active'));
      
      // Add active class to clicked button
      this.classList.add('active');
    });
  });
});
</script>

<script>
  // Add JavaScript to handle the period buttons and apply the active class
  document.addEventListener('DOMContentLoaded', function() {
    const periodBtns = document.querySelectorAll('.period-btn');
    
    // Set default active button
    if (periodBtns.length > 0) {
      periodBtns[0].classList.add('active');
    }
    
    periodBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        // Remove active class from all buttons
        periodBtns.forEach(b => b.classList.remove('active'));
        
        // Add active class to clicked button
        this.classList.add('active');
      });
    });
  });
</script>
<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>
