<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot </title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    body {
  font-family: 'Inter', sans-serif;
  background: var(--bg-color);
}
:root {
    --primary-color: #DEAF0B;
    --bg-color: #f5f6fa;
    --text-color: #2f3640;
    --icon-color: #636e72;
    --green: #4CAF50;
    --red: #F44336;
    --blue: #2196F3;
    --amber: #FFC107;
    --gray: #757575;
   }
   
   body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    
   }
    /* Sidebar styles */
    .sidebar {
        width: 280px;
        height: 100vh;
        background-color: white;
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        transition: width 0.3s ease;
    }
   
           .logo-container {
               padding: 1.5rem;
               border-bottom: 1px solid #e5e7eb;
               display: flex;
               align-items: center;
               gap: 0.75rem;
           }
   
           .logo-icon {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
   }
   
   .logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
   }
   
   .logo-text .highlight {
    color: var(--primary-color);
    margin-left: 10px;
   }
   
   
   nav {
    flex-grow: 1;
   }
   
   nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
   }
   nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
   }
   
   nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
   }
   nav li:hover {
    background-color: var(--bg-color);
   }
   
   nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
   }
   
   .bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
   }
   
   .toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
   }
   
   .toggle-text {
    margin-right: 10px;
   }
   
   .toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
   }
   .toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
   }
   
   .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .toggle-switch.active::before {
    transform: translateX(25px);
   }
   
   .sidebar.collapsed .logo-text,
   .sidebar.collapsed .search,
   .sidebar.collapsed nav li span,
   .sidebar.collapsed .toggle-text {
    display: none;
   }
   
   .sidebar.collapsed .logo {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li i {
    margin-right: 0;
   }
           /* Main content styles */
           .main-content {
               flex: 1;
               margin-left: 280px;
               padding: 2rem;
           }
   
           .content-header {
               margin-bottom: 2rem;
           }
   
           .content-header h2 {
               font-size: 1.875rem;
               font-weight: 700;
               color: #111827;
           }
   
           .metrics-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
               gap: 1.5rem;
               margin-bottom: 2rem;
           }
   
           .metric-card {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .metric-title {
               font-size: 0.875rem;
               font-weight: 600;
               color: #4b5563;
               margin-bottom: 0.5rem;
           }
   
           .metric-value {
               font-size: 1.5rem;
               font-weight: 700;
               margin-bottom: 0.25rem;
           }
   
           .metric-subtitle {
               font-size: 0.875rem;
               color: #6b7280;
           }
   
           .chart-container {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               margin-bottom: 2rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .chart-wrapper {
               height: 400px;
               margin-top: 1rem;
           }
   
           .period-buttons {
               display: flex;
               gap: 0.75rem;
               margin-bottom: 1rem;
           }
   
           .period-btn {
               padding: 0.5rem 1rem;
               border: none;
               background-color: #e5e7eb;
               color: #4b5563;
               border-radius: 6px;
               cursor: pointer;
               font-weight: 500;
               transition: all 0.2s;
           }
   
           .period-btn:hover {
               background-color: #d1d5db;
           }
   
           .period-btn.active {
               background-color: #DEAF0B;
               color: white;
           }
   
           /* Toggle styles */
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .slider {
               position: absolute;
               cursor: pointer;
               top: 0;
               left: 0;
               right: 0;
               bottom: 0;
               background-color: #e5e7eb;
               transition: .4s;
               border-radius: 34px;
           }
   
           .slider:before {
               position: absolute;
               content: "";
               height: 16px;
               width: 16px;
               left: 4px;
               bottom: 4px;
               background-color: white;
               transition: .4s;
               border-radius: 50%;
           }
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           /* Updated and new styles */
           .bottom-controls {
               padding: 1.5rem;
               border-top: 1px solid #e5e7eb;
           }
   
           .control-item {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 1rem;
           }
   
           .control-label {
               font-size: 0.875rem;
               color: #4b5563;
           }
   
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
   }
   
   .sidebar.collapsed {
    width: 80px;
   }
   
   .logo {
    display: flex;
    align-items: center;
    padding: 20px;
   }
   
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           .total-emissions {
               font-size: 1.25rem;
               font-weight: 600;
               margin-bottom: 1rem;
               color: #374151;
           }
   
           .summary-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 1rem;
               margin-bottom: 2rem;
           }
   
           .summary-item {
               background-color: white;
               border-radius: 8px;
               padding: 1rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .summary-label {
               font-size: 0.875rem;
               color: #6b7280;
               display: block;
               margin-bottom: 0.5rem;
           }
   
           .summary-value {
               font-size: 1.25rem;
               font-weight: 600;
           }
   
       
   
           /* Responsive styles */
           @media (max-width: 768px) {
               .sidebar {
                   width: 100%;
                   height: auto;
                   position: static;
                   border-right: none;
                   border-bottom: 1px solid #e5e7eb;
               }
   
               .main-content {
                   margin-left: 0;
               }
   
               body.collapsed-sidebar .sidebar {
                   display: none;
               }
   
               body.collapsed-sidebar .main-content {
                   margin-left: 0;
               }
   
               .metrics-grid,
               .summary-grid {
                   grid-template-columns: 1fr;
               }
   
               .period-buttons {
                   flex-wrap: wrap;
               }
   
               .period-btn {
                   flex: 1 0 calc(50% - 0.375rem);
                   margin-bottom: 0.75rem;
               }
           }

/* loading css */

.loading-overlay {
 position: fixed;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 background-color: #f8f9fa;
 display: flex;
 justify-content: center;
 align-items: center;
 z-index: 9999;
}

.loading-spinner {
 width: 50px;
 height: 50px;
 border: 5px solid #e0e0e0;
 border-top: 5px solid #3498db;
 border-radius: 50%;
 animation: spin 1s linear infinite;
}

@keyframes spin {
 0% { transform: rotate(0deg); }
 100% { transform: rotate(360deg); }
}

.dashboard-column {
flex-basis: calc(33.33333% - 2px);
margin-right: 2px;
margin-bottom: 2px;
}

@media only screen and (max-width: 128em) {
.dashboard-column {
 flex-basis: calc(50% - 2px);
}
}

@media only screen and (max-width: 62em) {
.dashboard-column {
 flex-basis: calc(100% - 2px);
}
}

.dashboard-column .card {
border: 0;
}

.dashboard-column .card .iframe-moving {
display: block;
height: 100%;
min-height: 33em;
position: relative;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-moving {
 min-height: 107em;
}
}
.dashboard-column .card .iframe-overview {
display: block;
height: 100%;
min-height: 22em;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-overview {
 min-height: 18em;
}
}

.dashboard-column .card .iframe-battery-power {
display: block;
height: 60%;
min-height: 18em;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-battery-power {
 min-height: 15em;
}
}

.dashboard-column .card .iframe-battery-soc {
display: block;
height: 40%;
min-height: 14em;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-battery-soc {
 min-height: 12em;
}
}

/* Dark mode styles */
body.dark-mode {
    background-color: rgba(24, 27, 31, 1);
 color: #f5f6fa;
}

.dark-mode .main-content{
    background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
}

.dark-mode .sidebar {
    background-color: rgba(24, 27, 31, 1);
}

.dark-mode .sidebar .logo-icon {
 color: #2f3640;
}

.dark-mode .sidebar .logo-text {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li:hover {
 background-color: #383838;
}

.dark-mode .sidebar nav li a {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li i {
 color: #dcdde1;
}

.dark-mode .toggle-sidebar,
.dark-mode .toggle-dark-mode {
 color: #f5f6fa;
}

.dark-mode .toggle-switch {
    background-color: var(--primary-color);
}

.dark-mode .toggle-switch.active {
 background-color: var(--primary-color);
}

.dark-mode header {
    background-color: rgb(17, 18, 23);
}

.dark-mode .content-card {
    background-color: rgba(24, 27, 31, 1);
 color: #fff;
}


.dark-mode .loading-overlay{
    background-color: rgba(24, 27, 31, 1);
}

/* ========== SIGNIFICANTLY IMPROVED MOBILE RESPONSIVE STYLES ========== */
@media (max-width: 768px) {
    /* Sidebar base styles */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 280px;
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        z-index: 1000;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        box-shadow: none;
    }

    .sidebar.active {
        transform: translateX(0);
        box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
    }

    /* Improved hamburger button */
    .mobile-toggle {
        display: block;
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 1001;
        background: none;
        border: none;
        cursor: pointer;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 8px;
    }

    .mobile-toggle span {
        display: block;
        width: 24px;
        height: 2px;
        background-color: var(--text-color);
        margin: 5px auto;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    .mobile-toggle.active span:nth-child(1) {
        transform: translateY(7px) rotate(45deg);
    }

    .mobile-toggle.active span:nth-child(2) {
        opacity: 0;
    }

    .mobile-toggle.active span:nth-child(3) {
        transform: translateY(-7px) rotate(-45deg);
    }

    /* Improved nav items */
    .sidebar nav ul {
        padding: 1rem 0;
    }

    .sidebar nav li {
        padding: 0.875rem 1.5rem;
        margin: 0.25rem 1rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
    }

    .sidebar nav li a {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 1rem;
        color: var(--text-color);
    }

    .sidebar nav li i {
        font-size: 1.25rem;
        min-width: 24px;
        text-align: center;
    }

    .sidebar nav li:active {
        background-color: rgba(0, 0, 0, 0.05);
    }

    /* Improved overlay */
    .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        z-index: 999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .sidebar-overlay.active {
        display: block;
        opacity: 1;
    }

    /* ========== MAIN CONTAINER MOBILE OPTIMIZATIONS ========== */
    
    /* Main content area - dramatically improved */
    .main-content {
        margin-left: 0 !important;
        padding: 0.5rem !important;
        padding-top: 4rem !important; /* Space for hamburger menu */
        min-height: 100vh;
        width: 100%;
        overflow-x: hidden;
    }
    
    /* Container - much better mobile sizing */
    .main-content .container {
        padding: 0.5rem !important;
        max-width: 100% !important;
        margin: 0 !important;
        width: 100%;
    }
    
    /* Navigation pills - better mobile layout */
    .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
        flex-direction: column !important;
        gap: 0.5rem !important;
        padding: 0.75rem 0.5rem !important;
        margin-bottom: 1rem !important;
        background-color: #f8f9fa;
        border-radius: 8px;
        overflow: visible !important;
        white-space: normal !important;
    }
    
    .main-content .nav-link {
        padding: 0.75rem 1rem !important;
        text-align: center;
        border-radius: 6px;
        background-color: white;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 0.25rem;
        min-height: 48px; /* Better touch targets */
        display: flex !important;
        align-items: center;
        justify-content: center;
        width: 100%;
        white-space: nowrap;
        font-size: 0.9rem;
    }
    
    /* Header - much better mobile layout */
    .header {
        padding: 1rem 0.75rem !important;
        margin-bottom: 1rem !important;
        border-radius: 8px;
    }
    
    .header h1 {
        font-size: 1.5rem !important;
        margin-bottom: 1rem !important;
        text-align: center;
        word-break: break-word;
    }
    
    .header-controls {
        flex-direction: column !important;
        gap: 1rem !important;
        align-items: stretch !important;
    }
    
    .inverter-selector {
        width: 100% !important;
        flex-direction: column !important;
        align-items: stretch !important;
        gap: 0.75rem !important;
    }
    
    .inverter-selector label {
        text-align: center;
        font-weight: 600;
        font-size: 1rem;
    }
    
    .inverter-selector select {
        width: 100% !important;
        min-width: auto !important;
        padding: 0.875rem 1rem !important;
        font-size: 1rem !important;
        border-radius: 8px;
    }
    
    .inverter-type-indicator {
        align-self: center;
        padding: 0.75rem 1rem !important;
        font-size: 0.9rem !important;
        border-radius: 8px;
        text-align: center;
        width: fit-content;
    }
    
    .refresh-btn {
        width: 100% !important;
        padding: 0.875rem 1.5rem !important;
        font-size: 1rem !important;
        justify-content: center !important;
        min-height: 48px;
        border-radius: 8px;
    }
    
    /* Learner status - better mobile display */
    .learner-status {
        padding: 1rem 0.75rem !important;
        margin-bottom: 1rem !important;
        border-radius: 8px;
        text-align: center;
        font-size: 0.9rem;
    }
    
    /* Settings grid - single column for mobile */
    .settings-grid {
        grid-template-columns: 1fr !important;
        gap: 1rem !important;
        width: 100%;
    }
    
    /* Settings sections - better mobile cards */
    .settings-section {
        border-radius: 8px !important;
        margin-bottom: 1rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
        overflow: hidden;
    }
    
    .section-header {
        padding: 1rem 0.75rem !important;
    }
    
    .section-header h2 {
        font-size: 1.1rem !important;
        margin: 0;
    }
    
    .section-content {
        padding: 0.75rem !important;
    }
    
    /* Setting items - much better mobile layout */
    .setting-item {
        flex-direction: column !important;
        align-items: stretch !important;
        gap: 0.75rem !important;
        padding: 1rem 0 !important;
        border-bottom: 1px solid #eee;
    }
    
    .setting-item:last-child {
        border-bottom: none;
    }
    
    .setting-header {
        justify-content: space-between !important;
        align-items: center !important;
        margin-bottom: 0.5rem;
    }
    
    .setting-label {
        font-size: 0.95rem !important;
        font-weight: 600 !important;
        color: #333 !important;
    }
    
    .setting-controls {
        display: flex !important;
        flex-direction: row !important;
        align-items: center !important;
        gap: 0.75rem !important;
        width: 100% !important;
    }
    
    .setting-input, .setting-select {
        flex: 1 !important;
        min-width: 0 !important;
        padding: 0.75rem 1rem !important;
        font-size: 1rem !important;
        border-radius: 6px !important;
        border: 2px solid #e1e8ed !important;
        min-height: 44px; /* Better touch targets */
    }
    
    .setting-input:focus, .setting-select:focus {
        border-color: #3498db !important;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1) !important;
    }
    
    .unit-label {
        font-size: 0.9rem !important;
        color: #666 !important;
        min-width: auto !important;
        flex-shrink: 0;
    }
    
    .save-btn {
        padding: 0.75rem 1.25rem !important;
        font-size: 0.9rem !important;
        border-radius: 6px !important;
        min-height: 44px;
        flex-shrink: 0;
        min-width: 80px;
    }
    
    /* System metrics - better mobile layout */
    .system-metric {
        padding: 0.875rem 0 !important;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .metric-label {
        font-size: 0.9rem !important;
        margin-bottom: 0.25rem;
    }
    
    .metric-value {
        font-size: 1.1rem !important;
        font-weight: 700 !important;
    }
    
    .last-updated {
        font-size: 0.8rem !important;
        margin-top: 1rem !important;
        text-align: center;
        padding-top: 1rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    /* Better form controls for mobile */
    .setting-value {
        font-size: 1rem !important;
        padding: 0.5rem 0;
        word-break: break-word;
    }
    
    /* Empty sections - better mobile display */
    .empty-section {
        padding: 2rem 1rem !important;
        text-align: center;
    }
    
    .empty-section .icon {
        font-size: 2.5rem !important;
        margin-bottom: 1rem;
    }
    
    .empty-section p {
        font-size: 0.9rem;
        color: #666;
        margin: 0;
    }
    
    /* Dark mode adjustments for mobile */
    .dark-mode .mobile-toggle {
        background-color: rgba(255, 255, 255, 0.1) !important;
        backdrop-filter: blur(10px);
    }

    .dark-mode .mobile-toggle span {
        background-color: #f5f6fa !important;
    }

    .dark-mode .sidebar nav li:active {
        background-color: rgba(255, 255, 255, 0.05) !important;
    }
    
    .dark-mode .main-content .nav-link {
        background-color: rgba(255, 255, 255, 0.1) !important;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .dark-mode .setting-input, 
    .dark-mode .setting-select {
        background: rgba(255, 255, 255, 0.1) !important;
        border-color: rgba(255, 255, 255, 0.2) !important;
        color: #f5f6fa !important;
    }
    
    /* Notification positioning for mobile */
    .notification {
        position: fixed !important;
        top: 80px !important; /* Below hamburger menu */
        left: 1rem !important;
        right: 1rem !important;
        width: auto !important;
        border-radius: 8px !important;
        font-size: 0.9rem !important;
        padding: 1rem !important;
        text-align: center;
    }
    
    /* Loading overlay mobile optimization */
    .loading-overlay {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        width: 100vw !important;
        height: 100vh !important;
        z-index: 9999 !important;
    }
    
    /* Better scrolling for mobile */
    body {
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;
    }
    
    /* Ensure main content adjusts properly */
    body.sidebar-open .main-content {
        filter: blur(2px);
        pointer-events: none;
    }
    
    /* Fix viewport issues */
    html {
        -webkit-text-size-adjust: 100%;
        -ms-text-size-adjust: 100%;
    }
    
    /* Better touch targets */
    button, 
    select, 
    input, 
    .nav-link {
        min-height: 44px !important;
        touch-action: manipulation;
    }
}

/* ========== ADDITIONAL MOBILE IMPROVEMENTS ========== */

/* Very small devices (portrait phones) */
@media (max-width: 480px) {
    .main-content {
        padding: 0.25rem !important;
        padding-top: 3.5rem !important;
    }
    
    .main-content .container {
        padding: 0.25rem !important;
    }
    
    .header {
        padding: 0.75rem 0.5rem !important;
    }
    
    .header h1 {
        font-size: 1.3rem !important;
    }
    
    .section-header h2 {
        font-size: 1rem !important;
    }
    
    .setting-controls {
        gap: 0.5rem !important;
    }
    
    .setting-input, .setting-select {
        font-size: 0.9rem !important;
        padding: 0.625rem 0.75rem !important;
    }
    
    .mobile-toggle {
        top: 0.75rem !important;
        left: 0.75rem !important;
        width: 36px !important;
        height: 36px !important;
    }
}

/* Landscape orientation improvements */
@media (max-width: 768px) and (orientation: landscape) {
    .main-content {
        padding-top: 3rem !important;
    }
    
    .header h1 {
        font-size: 1.3rem !important;
        margin-bottom: 0.75rem !important;
    }
    
    .header-controls {
        flex-direction: row !important;
        gap: 1rem !important;
    }
    
    .inverter-selector {
        flex-direction: row !important;
        align-items: center !important;
        flex: 1;
    }
    
    .refresh-btn {
        width: auto !important;
        flex-shrink: 0;
    }
}

  /* Main content styling */
.main-content {
  flex: 1;
  margin-left: 280px;
  padding: 2rem;
  color: var(--text-color);
  transition: margin-left 0.3s ease;
}

.main-content .container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0;
}

.header {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            margin-bottom: 25px;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .header h1 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 28px;
            font-weight: 600;
        }

        .header-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .inverter-selector {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .inverter-selector label {
            font-weight: 500;
            color: #555;
            font-size: 14px;
        }

        .inverter-selector select {
            padding: 10px 15px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 14px;
            background: white;
            transition: all 0.3s ease;
        }

        .inverter-selector select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .inverter-type-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 13px;
            padding: 8px 12px;
            border-radius: 6px;
            font-weight: 500;
        }

        .type-legacy {
            background: linear-gradient(135deg, #e8f4fd, #d1ecf1);
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .type-new {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .type-hybrid {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .type-unknown {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .refresh-btn {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
        }

        .learner-status {
            background: linear-gradient(135deg, #e8f4fd, #d1ecf1);
            border: 2px solid #bee5eb;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 25px;
            text-align: center;
            font-weight: 500;
            transition: all 0.5s ease;
            opacity: 1;
            transform: translateY(0);
        }

        .learner-status.hidden {
            opacity: 0;
            transform: translateY(-10px);
            margin-bottom: 0;
            padding: 0;
            height: 0;
            overflow: hidden;
        }

        .learner-active {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            border-color: #28a745;
            color: #155724;
        }

        .learner-inactive {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            border-color: #dc3545;
            color: #721c24;
        }

        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            align-items: start;
            width: 100%;
        }

        .settings-grid:has(.settings-section:only-child) {
            grid-template-columns: 1fr;
        }

        .settings-grid.single-section {
            grid-template-columns: 1fr;
        }

        #dynamic-sections {
            display: flex;
            flex-direction: column;
            gap: 20px;
            width: 100%;
        }

        .settings-section {
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            overflow: hidden;
            border: 1px solid rgba(255,255,255,0.2);
            transition: all 0.3s ease;
        }

        .settings-section:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 48px rgba(0,0,0,0.15);
        }

        .section-header {
            background: linear-gradient(135deg, #DEAF0B, #B8940A);
            color: white;
            padding: 20px 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .section-header h2 {
            font-size: 18px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-header .icon {
            font-size: 20px;
        }

        .section-content {
            padding: 20px;
        }

        .setting-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
            transition: all 0.3s ease;
        }

        .setting-item:last-child {
            border-bottom: none;
        }

        .setting-item:hover {
            background: #f8f9fa;
        }

        .setting-item.has-changes {
            background: #f8fff9;
            border-bottom-color: #28a745;
        }

        .setting-header {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .setting-label {
            color: #555;
            font-size: 14px;
            font-weight: normal;
        }

        .setting-status {
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 4px;
            font-weight: 500;
        }

        .status-available {
            background: #d4edda;
            color: #155724;
        }

        .status-updating {
            background: #fff3cd;
            color: #856404;
        }

        .setting-controls {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .setting-input, .setting-select {
            padding: 6px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .setting-input {
            max-width: 120px;
        }

        .setting-select {
            max-width: 180px;
        }

        .setting-input:focus, .setting-select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.1);
        }

        .setting-input.has-changes, .setting-select.has-changes {
            border-color: #28a745;
            background: #f8fff9;
        }

        .setting-value {
            color: #333;
            font-weight: 500;
            text-align: right;
        }

        .setting-value.status {
            color: #27ae60;
        }

        .setting-value.disabled {
            color: #e74c3c;
        }

        .unit-label {
            font-size: 14px;
            color: #6c757d;
            font-weight: 500;
            min-width: 20px;
        }

        .save-btn {
            background: #27ae60;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
            opacity: 0.6;
            pointer-events: none;
        }

        .save-btn.active {
            opacity: 1;
            pointer-events: auto;
        }

        .save-btn.active:hover {
            background: #219a52;
        }

        .save-btn.saving {
            background: #6c757d;
            cursor: not-allowed;
        }

        .system-state {
            background: linear-gradient(135deg, #DEAF0B 0%, #B8940A 100%);
            color: white;
        }

        .system-state .section-content {
            background: rgba(255,255,255,0.95);
            color: #2c3e50;
        }

        .system-metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #e9ecef;
        }

        .system-metric:last-child {
            border-bottom: none;
        }

        .metric-label {
            color: #6c757d;
            font-size: 14px;
        }

        .metric-value {
            color: #2c3e50;
            font-weight: 600;
            font-size: 16px;
        }

        .real-time-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            background: #28a745;
            border-radius: 50%;
            margin-left: 8px;
            animation: pulse 2s infinite;
            transition: background-color 0.3s ease;
        }

        .real-time-indicator.updating {
            background: #ffc107;
            animation: spin 1s linear infinite;
        }

        .real-time-indicator.error {
            background: #dc3545;
            animation: none;
        }

        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.1); }
            100% { opacity: 1; transform: scale(1); }
        }

        .last-updated {
            font-size: 12px;
            color: #6c757d;
            text-align: center;
            margin-top: 15px;
            font-style: italic;
        }

        .empty-section {
            text-align: center;
            color: #6c757d;
            padding: 40px 20px;
        }

        .empty-section .icon {
            font-size: 48px;
            margin-bottom: 15px;
            opacity: 0.5;
        }

        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .notification.error {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        .tooltip {
            position: relative;
            cursor: help;
        }

        .tooltip::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: #2c3e50;
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
            z-index: 1000;
        }

        .tooltip:hover::after {
            opacity: 1;
        }

.main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  display: flex;
  flex-wrap: nowrap !important;
  overflow-x: auto;
  white-space: nowrap;
  gap: 0.75rem;
  padding: 0.75rem;
  margin-bottom: 1.5rem;
  scrollbar-width: thin;
  -webkit-overflow-scrolling: touch;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
  height: 6px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

.main-content .nav-link {
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  padding: 0.5rem 1rem;
  color: #4b5563;
  font-weight: 500;
  border-radius: 6px;
  text-decoration: none;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.main-content .nav-link:hover {
  background-color: #e9ecef;
  color: #000;
}

.main-content .nav-link.active {
  color: #fff;
}

.main-content .nav-link i,
.main-content .nav-link svg {
  margin-right: 0.5rem;
  font-size: 1rem;
}



.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  background-color: #202429;
}

.dark-mode .main-content .nav-link {
  color: #e5e7eb;
}

.dark-mode .main-content .nav-link:hover {
  background-color: #32383e;
  color: #fff;
}

.dark-mode .main-content .nav-link.active {
  color: #fff;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #2a2e35;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #4a4d53;
}

/* ========== DARK MODE STYLES ========== */

/* Main Container Dark Mode */
.dark-mode .main-content .container {
  color: #f5f6fa;
}

/* Header Dark Mode */
.dark-mode .header {
  background: rgba(32, 36, 41, 0.95);
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
}

.dark-mode .header h1 {
  color: #f5f6fa;
}

/* Header Controls Dark Mode */
.dark-mode .header-controls {
  color: #f5f6fa;
}

/* Inverter Selector Dark Mode */
.dark-mode .inverter-selector label {
  color: #e5e7eb;
}

.dark-mode .inverter-selector select {
  background: rgba(255, 255, 255, 0.1);
  border-color: rgba(255, 255, 255, 0.2);
  color: #f5f6fa;
}

.dark-mode .inverter-selector select:focus {
  border-color: #3498db;
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
}

/* Inverter Type Indicators Dark Mode */
.dark-mode .type-legacy {
  background: linear-gradient(135deg, rgba(232, 244, 253, 0.15), rgba(209, 236, 241, 0.15));
  color: #7dd3fc;
  border: 1px solid rgba(190, 229, 235, 0.3);
}

.dark-mode .type-new {
  background: linear-gradient(135deg, rgba(212, 237, 218, 0.15), rgba(195, 230, 203, 0.15));
  color: #86efac;
  border: 1px solid rgba(195, 230, 203, 0.3);
}

.dark-mode .type-hybrid {
  background: linear-gradient(135deg, rgba(255, 243, 205, 0.15), rgba(255, 234, 167, 0.15));
  color: #fbbf24;
  border: 1px solid rgba(255, 234, 167, 0.3);
}

.dark-mode .type-unknown {
  background: linear-gradient(135deg, rgba(248, 215, 218, 0.15), rgba(245, 198, 203, 0.15));
  color: #fca5a5;
  border: 1px solid rgba(245, 198, 203, 0.3);
}

/* Refresh Button Dark Mode */
.dark-mode .refresh-btn {
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
}

.dark-mode .refresh-btn:hover {
  box-shadow: 0 4px 12px rgba(37, 99, 235, 0.4);
}

/* Learner Status Dark Mode */
.dark-mode .learner-status {
  background: linear-gradient(135deg, rgba(232, 244, 253, 0.1), rgba(209, 236, 241, 0.1));
  border-color: rgba(190, 229, 235, 0.3);
  color: #e5e7eb;
}

.dark-mode .learner-active {
  background: linear-gradient(135deg, rgba(212, 237, 218, 0.1), rgba(195, 230, 203, 0.1));
  border-color: rgba(34, 197, 94, 0.5);
  color: #86efac;
}

.dark-mode .learner-inactive {
  background: linear-gradient(135deg, rgba(248, 215, 218, 0.1), rgba(245, 198, 203, 0.1));
  border-color: rgba(239, 68, 68, 0.5);
  color: #fca5a5;
}

/* Settings Section Dark Mode */
.dark-mode .settings-section {
  background: rgba(32, 36, 41, 0.95);
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
}

.dark-mode .settings-section:hover {
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
}

/* Section Content Dark Mode */
.dark-mode .section-content {
  background: transparent;
  color: #f5f6fa;
}

/* Setting Item Dark Mode */
.dark-mode .setting-item {
  border-bottom-color: rgba(255, 255, 255, 0.1);
}

.dark-mode .setting-item:hover {
  background: rgba(255, 255, 255, 0.05);
}

.dark-mode .setting-item.has-changes {
  background: rgba(34, 197, 94, 0.1);
  border-bottom-color: #22c55e;
}

/* Setting Labels Dark Mode */
.dark-mode .setting-label {
  color: #e5e7eb;
}

.dark-mode .setting-value {
  color: #f5f6fa;
}

.dark-mode .setting-value.status {
  color: #86efac;
}

.dark-mode .setting-value.disabled {
  color: #fca5a5;
}

/* Form Controls Dark Mode */
.dark-mode .setting-input, 
.dark-mode .setting-select {
  background: rgba(255, 255, 255, 0.1);
  border-color: rgba(255, 255, 255, 0.2);
  color: #f5f6fa;
}

.dark-mode .setting-input:focus, 
.dark-mode .setting-select:focus {
  border-color: #3498db;
  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
}

.dark-mode .setting-input.has-changes, 
.dark-mode .setting-select.has-changes {
  border-color: #22c55e;
  background: rgba(34, 197, 94, 0.1);
}

/* Unit Label Dark Mode */
.dark-mode .unit-label {
  color: #9ca3af;
}

/* Save Button Dark Mode */
.dark-mode .save-btn {
  background: #22c55e;
  color: white;
}

.dark-mode .save-btn.active:hover {
  background: #16a34a;
}

.dark-mode .save-btn.saving {
  background: #6b7280;
}

/* System State Dark Mode */
.dark-mode .system-state .section-content {
  background: rgba(255, 255, 255, 0.05);
  color: #f5f6fa;
}

/* System Metrics Dark Mode */
.dark-mode .system-metric {
  border-bottom-color: rgba(255, 255, 255, 0.1);
}

.dark-mode .metric-label {
  color: #9ca3af;
}

.dark-mode .metric-value {
  color: #f5f6fa;
}

/* Status Indicators Dark Mode */
.dark-mode .status-available {
  background: rgba(34, 197, 94, 0.2);
  color: #86efac;
}

.dark-mode .status-updating {
  background: rgba(251, 191, 36, 0.2);
  color: #fbbf24;
}

/* Real-time Indicator Dark Mode */
.dark-mode .real-time-indicator {
  background: #22c55e;
}

.dark-mode .real-time-indicator.updating {
  background: #f59e0b;
}

.dark-mode .real-time-indicator.error {
  background: #ef4444;
}

/* Loading Spinner Dark Mode */
.dark-mode .loading {
  border-color: rgba(255, 255, 255, 0.2);
  border-top-color: #3498db;
}

/* Last Updated Dark Mode */
.dark-mode .last-updated {
  color: #9ca3af;
}

/* Empty Section Dark Mode */
.dark-mode .empty-section {
  color: #9ca3af;
}
</style>
</head>
<body>
    <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"> </div>

        <%- include('partials/sidebar') %>
          
          
        <div class="main-content">
            <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                <a class="nav-link  text-nowrap" href="<%= ingress_path %>/learner">
                    <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/inverter-settings">
                    <i class="fas fa-cogs me-1" style="color: #fd7e14;"></i>Inverter Settings
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rules">
                    <i class="fas fa-tasks me-1" style="color: #6610F2;"></i>Rules
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/wizard">
                    <i class="fas fa-magic me-1" style="color: #20c997;"></i>Rule Wizard
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rule-history">
                    <i class="fas fa-history me-1" style="color: #6f42c1;"></i>Rule History
                </a>
            </div>
            
            
            <br>

            <div class="container">
                <div class="header">
                    <h1>🔌 Inverter Settings</h1>
                    <div class="header-controls">
                        <div class="inverter-selector">
                            <label for="inverterSelect">Select Inverter:</label>
                            <select id="inverterSelect">
                                <!-- Will be populated by JavaScript -->
                            </select>
                            <div id="inverterTypeIndicator" class="inverter-type-indicator">
                                <span>🔍 Detecting...</span>
                            </div>
                        </div>
                        <button class="refresh-btn" onclick="refreshAllData()">
                            <span id="refresh-icon">🔄</span>
                            Refresh Data
                        </button>
                    </div>
                </div>
        
                <!-- Learner Mode Status -->
                <div class="learner-status" id="learner-status">
                    <strong>⚡ Learner Mode: <span id="learner-mode-status">DETECTING...</span></strong>
                    <span id="learner-mode-description">- Loading status...</span>
                </div>
        
                <div class="settings-grid">
                    <!-- System State (Always visible, real-time) -->
                    <div class="settings-section system-state">
                        <div class="section-header">
                            <h2><span class="icon">📊</span> System State <span class="real-time-indicator"></span></h2>
                        </div>
                        <div class="section-content">
                            <div class="system-metric">
                                <span class="metric-label">Battery SOC</span>
                                <span class="metric-value" id="battery-soc">0%</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">PV Power</span>
                                <span class="metric-value" id="pv-power">0 W</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">Load Power</span>
                                <span class="metric-value" id="load-power">0 W</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">Grid Voltage</span>
                                <span class="metric-value" id="grid-voltage">0 V</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">Grid Power</span>
                                <span class="metric-value" id="grid-power">0 W</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">Inverter State</span>
                                <span class="metric-value" id="inverter-state">Unknown</span>
                            </div>
                            <div class="last-updated">Last updated: <span id="last-update-time">Just now</span></div>
                        </div>
                    </div>
        
                    <!-- Dynamic sections will be populated by JavaScript -->
                    <div id="dynamic-sections"></div>
                </div>
            </div>
        </div>
    </div>


  <!-- Notification container -->
  <div id="notification" class="notification"></div>

  <script>
      // Global variables
      let currentInverter = 1;
      let isLearnerModeActive = false;
      let updateInterval;
      let pendingChanges = new Set();
      let inverterTypes = {};
      let numInverters = 1;

      // Initialize page
      document.addEventListener('DOMContentLoaded', function() {
          initializePage();
      });

      async function initializePage() {
          try {
              // Initialize tracking variable
              window.lastSystemUpdate = Date.now();
              
              // Load learner status
              await loadLearnerStatus();
              
              // Load system configuration
              await loadSystemConfiguration();
              
              // Initialize inverter selector
              populateInverterSelector();
              
              // Load settings for default inverter
              currentInverter = 1;
              await loadAllSettings();
              
              // Start system state updates (every 2 seconds)
              startSystemStateUpdates();
              
              // Set up event handlers
              setupEventHandlers();
              
              // Auto-hide learner status after 5 seconds
              setTimeout(function() {
                  const learnerStatus = document.getElementById('learner-status');
                  if (learnerStatus) {
                      learnerStatus.classList.add('hidden');
                  }
              }, 5000);
              
              console.log('Page initialized successfully - System state updates every 2 seconds');
              
          } catch (error) {
              console.error('Error initializing page:', error);
              showNotification('Error initializing page', 'error');
              
              // Still try to start system state updates even if other initialization fails
              setTimeout(() => {
                  startSystemStateUpdates();
              }, 2000);
          }
      }

      async function loadLearnerStatus() {
          try {
              const response = await fetch('<%= ingress_path %>/api/learner/status');
              const data = await response.json();
              
              isLearnerModeActive = data.active;
              updateLearnerStatusDisplay();
              
          } catch (error) {
              console.error('Error loading learner status:', error);
          }
      }

      async function loadSystemConfiguration() {
          try {
              const response = await fetch('<%= ingress_path %>/api/current-settings');
              const data = await response.json();
              
              if (data.success) {
                  numInverters = data.inverterCount || 1;
                  inverterTypes = data.currentSettings.inverterTypes || {};
              }
          } catch (error) {
              console.error('Error loading system configuration:', error);
          }
      }

      function populateInverterSelector() {
          const selector = document.getElementById('inverterSelect');
          selector.innerHTML = '';
          
          for (let i = 1; i <= numInverters; i++) {
              const option = document.createElement('option');
              option.value = i;
              option.textContent = `Inverter ${i}`;
              selector.appendChild(option);
          }
      }

      function setupEventHandlers() {
          document.getElementById('inverterSelect').addEventListener('change', function() {
              currentInverter = this.value;
              loadAllSettings();
              updateInverterTypeIndicator();
          });
      }

      function updateLearnerStatusDisplay() {
          const statusElement = document.getElementById('learner-mode-status');
          const descriptionElement = document.getElementById('learner-mode-description');
          const learnerStatus = document.getElementById('learner-status');
          
          statusElement.textContent = isLearnerModeActive ? 'ACTIVE' : 'INACTIVE';
          descriptionElement.textContent = isLearnerModeActive ? 
              '- Commands can be sent to inverter' : 
              '- Commands are blocked for safety';
          
          learnerStatus.className = `learner-status ${isLearnerModeActive ? 'learner-active' : 'learner-inactive'}`;
      }

      function updateInverterTypeIndicator() {
          const indicator = document.getElementById('inverterTypeIndicator');
          const inverterId = `inverter_${currentInverter}`;
          const inverterType = inverterTypes[inverterId];
          
          if (!inverterType || inverterType.type === 'unknown') {
              indicator.className = 'inverter-type-indicator type-unknown';
              indicator.innerHTML = '<span>❓ Unknown</span>';
          } else {
              const typeInfo = {
                  'legacy': { icon: '🔧', label: 'Legacy', class: 'type-legacy' },
                  'new': { icon: '⚡', label: 'Modern', class: 'type-new' },
                  'hybrid': { icon: '🔄', label: 'Hybrid', class: 'type-hybrid' }
              };
              
              const info = typeInfo[inverterType.type] || typeInfo.legacy;
              indicator.className = `inverter-type-indicator ${info.class}`;
              indicator.innerHTML = `<span>${info.icon} ${info.label}</span>`;
          }
      }

      // System state updates
      function startSystemStateUpdates() {
          updateSystemState();
          // Update every 2 seconds instead of 5
          updateInterval = setInterval(updateSystemState, 2000);
      }

      function updateSystemState() {
          // Add visual indicator that update is happening
          const indicator = document.querySelector('.real-time-indicator');
          if (indicator) {
              indicator.className = 'real-time-indicator updating';
          }
          
          fetch('<%= ingress_path %>/api/system-state')
              .then(response => {
                  if (!response.ok) {
                      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                  }
                  return response.json();
              })
              .then(data => {
                  const state = data.current_state;
                  
                  // Update each system metric with proper formatting
                  updateElement('battery-soc', formatValue(state.battery_soc, '%'));
                  updateElement('pv-power', formatValue(state.pv_power, ' W'));
                  updateElement('load-power', formatValue(state.load, ' W'));
                  updateElement('grid-voltage', formatValue(state.grid_voltage, ' V'));
                  updateElement('grid-power', formatValue(state.grid_power, ' W'));
                  updateElement('inverter-state', state.inverter_state || 'Unknown');
                  
                  // Update timestamp with more detailed info
                  const now = new Date();
                  const timeString = now.toLocaleTimeString();
                  const secondsAgo = Math.floor((now - (window.lastSystemUpdate || now)) / 1000);
                  updateElement('last-update-time', `${timeString} (${secondsAgo}s ago)`);
                  
                  // Reset indicator to green on successful update with pulse animation
                  if (indicator) {
                      indicator.className = 'real-time-indicator';
                  }
                  
                  // Store last successful update time
                  window.lastSystemUpdate = Date.now();
                  
                  // Debug log every 30 seconds
                  if (Math.floor(Date.now() / 30000) !== Math.floor((window.lastDebugLog || 0) / 30000)) {
                      console.log('System state updated successfully at', new Date().toLocaleTimeString());
                      window.lastDebugLog = Date.now();
                  }
              })
              .catch(error => {
                  console.error('Error updating system state:', error);
                  
                  // Set indicator to red on error
                  if (indicator) {
                      indicator.className = 'real-time-indicator error';
                  }
                  
                  // Show connection status
                  updateElement('last-update-time', 'Connection error - retrying...');
                  
                  // Try to reconnect after a longer delay if multiple failures
                  const timeSinceLastUpdate = Date.now() - (window.lastSystemUpdate || 0);
                  if (timeSinceLastUpdate > 30000) { // 30 seconds
                      console.log('System state connection lost for 30+ seconds, attempting to restart updates...');
                      clearInterval(updateInterval);
                      setTimeout(() => {
                          console.log('Restarting system state updates...');
                          startSystemStateUpdates();
                      }, 5000);
                  }
              });
      }

      function updateElement(id, value) {
          const element = document.getElementById(id);
          if (element) {
              element.textContent = value;
          }
      }

      function formatValue(value, unit) {
          return value !== null && value !== undefined ? value + unit : '0' + unit;
      }

      // Main settings loading function
      async function loadAllSettings() {
          showLoading(true);
          
          try {
              const response = await fetch('<%= ingress_path %>/api/current-settings');
              const data = await response.json();
              
              if (data.success) {
                  const settings = data.currentSettings;
                  inverterTypes = settings.inverterTypes || {};
                  const inverterId = `inverter_${currentInverter}`;
                  
                  // Update inverter type indicator
                  updateInverterTypeIndicator();
                  
                  // Create dynamic sections based on inverter type and available data
                  createDynamicSections(settings, inverterId);
              }
          } catch (error) {
              console.error('Error loading settings:', error);
              showNotification('Error loading settings', 'error');
          } finally {
              showLoading(false);
          }
      }

      function getInverterType(inverterId) {
          const inverterData = inverterTypes[inverterId];
          return inverterData ? inverterData.type : 'unknown';
      }

      function createDynamicSections(settings, inverterId) {
          const container = document.getElementById('dynamic-sections');
          container.innerHTML = '';
          
          const inverterType = getInverterType(inverterId);
          
          // Define sections based on inverter type
          const sections = [
              {
                  id: 'specification',
                  title: '📋 Specification',
                  icon: '📋',
                  readonly: true,
                  settings: [
                      { key: 'serial_number', label: 'Serial Number', path: ['serial_number', inverterId, 'value'] },
                      { key: 'power_saving', label: 'Power Saving', path: ['power_saving', inverterId, 'value'] },
                      { key: 'firmware_version', label: 'Firmware Version', path: ['firmware_version', inverterId, 'value'] }
                  ]
              },
              // Dynamic work mode section based on inverter type
              getWorkModeSection(inverterType, inverterId),
              {
                  id: 'battery_charging',
                  title: '🔋 Battery Charging',
                  icon: '🔋',
                  readonly: false,
                  settings: [
                      { 
                          key: 'max_discharge_current', 
                          label: 'Max Discharge Current', 
                          path: ['max_discharge_current', inverterId, 'value'],
                          type: 'number',
                          unit: 'A',
                          min: 0,
                          max: 200,
                          step: 0.1
                      },
                      { 
                          key: 'max_charge_current', 
                          label: 'Max Charge Current', 
                          path: ['max_charge_current', inverterId, 'value'],
                          type: 'number',
                          unit: 'A',
                          min: 0,
                          max: 200,
                          step: 0.1
                      },
                      { 
                          key: 'max_grid_charge_current', 
                          label: 'Max Grid Charge Current', 
                          path: ['max_grid_charge_current', inverterId, 'value'],
                          type: 'number',
                          unit: 'A',
                          min: 0,
                          max: 100,
                          step: 0.1
                      },
                      { 
                          key: 'battery_float_charge_voltage', 
                          label: 'Battery Float Charge Voltage', 
                          path: ['battery_float_charge_voltage', inverterId, 'value'],
                          type: 'number',
                          unit: 'V',
                          min: 40,
                          max: 60,
                          step: 0.1
                      },
                      { 
                          key: 'battery_absorption_charge_voltage', 
                          label: 'Battery Absorption Charge Voltage', 
                          path: ['battery_absorption_charge_voltage', inverterId, 'value'],
                          type: 'number',
                          unit: 'V',
                          min: 40,
                          max: 60,
                          step: 0.1
                      }
                  ]
              },
              {
                  id: 'voltage_points',
                  title: '⚡ Voltage Points',
                  icon: '⚡',
                  readonly: false,
                  settings: [
                      { 
                          key: 'voltage_point_1', 
                          label: 'Voltage Point 1', 
                          path: ['voltage_point', inverterId, 'point_1', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_2', 
                          label: 'Voltage Point 2', 
                          path: ['voltage_point', inverterId, 'point_2', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_3', 
                          label: 'Voltage Point 3', 
                          path: ['voltage_point', inverterId, 'point_3', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_4', 
                          label: 'Voltage Point 4', 
                          path: ['voltage_point', inverterId, 'point_4', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_5', 
                          label: 'Voltage Point 5', 
                          path: ['voltage_point', inverterId, 'point_5', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_6', 
                          label: 'Voltage Point 6', 
                          path: ['voltage_point', inverterId, 'point_6', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      }
                  ]
              }
          ];

          // Create sections that have available data
          let createdSections = 0;
          sections.forEach(section => {
              if (!section) return; // Skip null sections
              
              const availableSettings = section.settings.filter(setting => {
                  const value = getNestedValue(settings, setting.path);
                  return isValidValue(value);
              });

              if (availableSettings.length > 0) {
                  const sectionElement = createSection(section, availableSettings, settings);
                  container.appendChild(sectionElement);
                  createdSections++;
              }
          });

          // Update grid layout
          const settingsGrid = document.querySelector('.settings-grid');
          const totalSections = createdSections + 1; // +1 for System State
          
          if (totalSections === 1) {
              settingsGrid.classList.add('single-section');
          } else {
              settingsGrid.classList.remove('single-section');
          }
      }

      function getWorkModeSection(inverterType, inverterId) {
          // Return appropriate work mode section based on inverter type
          if (inverterType === 'new') {
              // New inverter - show charger_source_priority and output_source_priority
              return {
                  id: 'work_mode',
                  title: '⚙️ Control Settings',
                  icon: '⚙️',
                  readonly: false,
                  settings: [
                      { 
                          key: 'charger_source_priority', 
                          label: 'Charger Source Priority', 
                          path: ['charger_source_priority', inverterId, 'value'],
                          type: 'select',
                          options: ['Solar first', 'Solar and utility simultaneously', 'Solar only', 'Utility first']
                      },
                      { 
                          key: 'output_source_priority', 
                          label: 'Output Source Priority', 
                          path: ['output_source_priority', inverterId, 'value'],
                          type: 'select',
                          options: ['Solar/Battery/Utility', 'Solar first', 'Utility first', 'Solar/Utility/Battery']
                      },
                      { 
                          key: 'work_mode', 
                          label: 'Work Mode', 
                          path: ['work_mode', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Grid first', 'Solar first', 'Solar + Battery', 'Solar + Grid']
                      },
                      { 
                          key: 'generator_charge', 
                          label: 'Generator Charge', 
                          path: ['generator_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      }
                  ]
              };
          } else if (inverterType === 'legacy') {
              // Legacy inverter - show grid_charge and energy_pattern
              return {
                  id: 'work_mode',
                  title: '⚙️ Work Mode',
                  icon: '⚙️',
                  readonly: false,
                  settings: [
                      { 
                          key: 'grid_charge', 
                          label: 'Grid Charge', 
                          path: ['grid_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      },
                      { 
                          key: 'energy_pattern', 
                          label: 'Energy Pattern', 
                          path: ['energy_pattern', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Load first']
                      },
                      { 
                          key: 'work_mode', 
                          label: 'Work Mode', 
                          path: ['work_mode', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Grid first', 'Solar first', 'Solar + Battery', 'Solar + Grid']
                      },
                      { 
                          key: 'generator_charge', 
                          label: 'Generator Charge', 
                          path: ['generator_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      }
                  ]
              };
          } else {
              // Hybrid or unknown - show all settings
              return {
                  id: 'work_mode',
                  title: '⚙️ Control Settings',
                  icon: '⚙️',
                  readonly: false,
                  settings: [
                      { 
                          key: 'grid_charge', 
                          label: 'Grid Charge', 
                          path: ['grid_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      },
                      { 
                          key: 'energy_pattern', 
                          label: 'Energy Pattern', 
                          path: ['energy_pattern', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Load first']
                      },
                      { 
                          key: 'charger_source_priority', 
                          label: 'Charger Source Priority', 
                          path: ['charger_source_priority', inverterId, 'value'],
                          type: 'select',
                          options: ['Solar first', 'Solar and utility simultaneously', 'Solar only', 'Utility first']
                      },
                      { 
                          key: 'output_source_priority', 
                          label: 'Output Source Priority', 
                          path: ['output_source_priority', inverterId, 'value'],
                          type: 'select',
                          options: ['Solar/Battery/Utility', 'Solar first', 'Utility first', 'Solar/Utility/Battery']
                      },
                      { 
                          key: 'work_mode', 
                          label: 'Work Mode', 
                          path: ['work_mode', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Grid first', 'Solar first', 'Solar + Battery', 'Solar + Grid']
                      },
                      { 
                          key: 'generator_charge', 
                          label: 'Generator Charge', 
                          path: ['generator_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      }
                  ]
              };
          }
      }

      function createSection(sectionConfig, availableSettings, allSettings) {
          const section = document.createElement('div');
          section.className = 'settings-section';
          section.id = `${sectionConfig.id}-section`;

          const header = document.createElement('div');
          header.className = 'section-header';
          header.innerHTML = `
              <h2><span class="icon">${sectionConfig.icon}</span> ${sectionConfig.title}</h2>
          `;

          const content = document.createElement('div');
          content.className = 'section-content';

          if (availableSettings.length === 0) {
              content.innerHTML = `
                  <div class="empty-section">
                      <div class="icon">📭</div>
                      <p>No data available for this section</p>
                  </div>
              `;
          } else {
              availableSettings.forEach(setting => {
                  const value = getNestedValue(allSettings, setting.path);
                  const settingElement = createSettingItem(setting, value, sectionConfig.readonly);
                  content.appendChild(settingElement);
              });
          }

          section.appendChild(header);
          section.appendChild(content);

          return section;
      }

      function createSettingItem(setting, currentValue, readonly) {
          const item = document.createElement('div');
          item.className = 'setting-item';
          item.id = `setting-${setting.key}`;

          const header = document.createElement('div');
          header.className = 'setting-header';

          const label = document.createElement('span');
          label.className = 'setting-label';
          label.textContent = setting.label;

          const status = document.createElement('span');
          status.className = 'setting-status status-available';
          status.textContent = '✓';

          header.appendChild(label);
          header.appendChild(status);

          const controls = document.createElement('div');
          controls.className = 'setting-controls';

          if (readonly) {
              // Read-only display
              const valueDisplay = document.createElement('span');
              valueDisplay.className = 'setting-value';
              valueDisplay.style.color = '#333';
              valueDisplay.style.fontWeight = '500';
              valueDisplay.textContent = currentValue || 'N/A';
              controls.appendChild(valueDisplay);
          } else {
              // Editable controls
              const inputElement = createInputElement(setting, currentValue);
              controls.appendChild(inputElement);

              if (setting.unit) {
                  const unitLabel = document.createElement('span');
                  unitLabel.className = 'unit-label';
                  unitLabel.textContent = setting.unit;
                  controls.appendChild(unitLabel);
              }

              const saveBtn = document.createElement('button');
              saveBtn.className = 'save-btn';
              saveBtn.textContent = 'Save';
              saveBtn.onclick = () => saveSetting(setting.key, setting);
              controls.appendChild(saveBtn);

              // Set up change detection
              inputElement.addEventListener('input', () => {
                  handleInputChange(setting.key, inputElement, saveBtn);
              });
              inputElement.addEventListener('change', () => {
                  handleInputChange(setting.key, inputElement, saveBtn);
              });
          }

          item.appendChild(header);
          item.appendChild(controls);

          return item;
      }

      function createInputElement(setting, currentValue) {
          let input;

          if (setting.type === 'select') {
              input = document.createElement('select');
              input.className = 'setting-select';
              
              setting.options.forEach(option => {
                  const optionElement = document.createElement('option');
                  optionElement.value = option;
                  optionElement.textContent = option;
                  if (option === currentValue) {
                      optionElement.selected = true;
                  }
                  input.appendChild(optionElement);
              });
          } else {
              input = document.createElement('input');
              input.className = 'setting-input';
              input.type = setting.type || 'text';
              input.value = currentValue || '';
              
              if (setting.min !== undefined) input.min = setting.min;
              if (setting.max !== undefined) input.max = setting.max;
              if (setting.step !== undefined) input.step = setting.step;
          }

          input.id = `input-${setting.key}`;
          input.dataset.originalValue = currentValue || '';
          return input;
      }

      function handleInputChange(settingKey, inputElement, saveBtn) {
          const originalValue = inputElement.dataset.originalValue;
          const currentValue = inputElement.value;
          const hasChanges = originalValue !== currentValue;

          // Update visual state
          inputElement.classList.toggle('has-changes', hasChanges);
          saveBtn.classList.toggle('active', hasChanges);
          
          const settingItem = document.getElementById(`setting-${settingKey}`);
          settingItem.classList.toggle('has-changes', hasChanges);

          // Track pending changes
          if (hasChanges) {
              pendingChanges.add(settingKey);
          } else {
              pendingChanges.delete(settingKey);
          }
      }

      function saveSetting(settingKey, settingConfig) {
          if (!isLearnerModeActive) {
              showNotification('Learner mode is not active. Cannot send commands.', 'error');
              return;
          }

          const inputElement = document.getElementById(`input-${settingKey}`);
          const saveBtn = inputElement.parentElement.querySelector('.save-btn');
          const value = inputElement.value;

          if (!value || value.trim() === '') {
              showNotification('Please enter a valid value', 'error');
              return;
          }

          // Update button state
          saveBtn.classList.add('saving');
          saveBtn.textContent = 'Saving...';
          saveBtn.disabled = true;

          // Determine endpoint based on setting type
          let endpoint = '<%= ingress_path %>/api/work-mode/set';
          if (['max_discharge_current', 'max_charge_current', 'max_grid_charge_current', 
               'max_generator_charge_current', 'battery_float_charge_voltage', 
               'battery_absorption_charge_voltage', 'battery_equalization_charge_voltage'].includes(settingKey)) {
              endpoint = '/api/battery-charging/set';
          }

          const payload = {
              inverter: `inverter_${currentInverter}`,
              setting: settingKey,
              value: value
          };

          fetch(endpoint, {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
          })
          .then(response => response.json())
          .then(data => {
              if (data.success) {
                  showNotification(`${settingConfig.label} updated successfully`, 'success');
                  
                  // Reset change state
                  inputElement.classList.remove('has-changes');
                  inputElement.dataset.originalValue = value;
                  
                  const settingItem = document.getElementById(`setting-${settingKey}`);
                  settingItem.classList.remove('has-changes');
                  
                  pendingChanges.delete(settingKey);

                  // Show auto-mapping info if applicable
                  if (data.autoMapped) {
                      showNotification(`Command auto-mapped for inverter type compatibility`, 'success');
                  }
              } else {
                  showNotification(`Error updating ${settingConfig.label}: ${data.error}`, 'error');
              }
          })
          .catch(error => {
              console.error('Error:', error);
              showNotification(`Error updating ${settingConfig.label}`, 'error');
          })
          .finally(() => {
              // Reset button state
              saveBtn.classList.remove('saving', 'active');
              saveBtn.textContent = 'Save';
              saveBtn.disabled = false;
          });
      }

      // Utility functions
      function getNestedValue(obj, path) {
          return path.reduce((current, key) => {
              return current && current[key] !== undefined ? current[key] : undefined;
          }, obj);
      }

      function isValidValue(value) {
          return value !== undefined && 
                 value !== null && 
                 value !== 'N/A' && 
                 value !== '' && 
                 value !== 'Unknown' && 
                 value !== 'Loading...' && 
                 value !== 0 && 
                 value !== '0';
      }

      function showNotification(message, type = 'success') {
          const notification = document.getElementById('notification');
          notification.textContent = message;
          notification.className = `notification ${type}`;
          notification.classList.add('show');

          setTimeout(() => {
              notification.classList.remove('show');
          }, 4000);
      }

      function showLoading(show) {
          const refreshIcon = document.getElementById('refresh-icon');
          if (show) {
              refreshIcon.innerHTML = '<div class="loading"></div>';
          } else {
              refreshIcon.textContent = '🔄';
          }
      }

      async function refreshAllData() {
          // Stop current updates temporarily
          if (updateInterval) {
              clearInterval(updateInterval);
          }
          
          showLoading(true);
          
          try {
              // Reload all data
              await loadLearnerStatus();
              await loadAllSettings();
              
              // Force immediate system state update
              await new Promise((resolve) => {
                  updateSystemState();
                  setTimeout(resolve, 500); // Give it time to complete
              });
              
              showNotification('Data refreshed successfully', 'success');
          } catch (error) {
              console.error('Error refreshing data:', error);
              showNotification('Error refreshing some data', 'error');
          } finally {
              showLoading(false);
              
              // Restart system state updates (every 2 seconds)
              startSystemStateUpdates();
          }
      }

      // Enhanced cleanup and page visibility handling
      function handleVisibilityChange() {
          if (document.hidden) {
              // Page is hidden, slow down updates to every 10 seconds
              if (updateInterval) {
                  clearInterval(updateInterval);
                  updateInterval = setInterval(updateSystemState, 10000);
              }
          } else {
              // Page is visible, resume normal 2-second updates
              if (updateInterval) {
                  clearInterval(updateInterval);
                  updateInterval = setInterval(updateSystemState, 2000);
              }
              // Force immediate update when page becomes visible
              updateSystemState();
          }
      }

      // Listen for page visibility changes to optimize performance
      document.addEventListener('visibilitychange', handleVisibilityChange);

      // Enhanced cleanup
      window.addEventListener('beforeunload', function() {
          if (updateInterval) {
              clearInterval(updateInterval);
              updateInterval = null;
          }
          console.log('System state updates stopped - page unloading');
      });

      // Cleanup visibility listener on page unload
      window.addEventListener('unload', function() {
          document.removeEventListener('visibilitychange', handleVisibilityChange);
      });

      // Debug function to check update status (can be called from browser console)
      window.checkSystemUpdates = function() {
          console.log('System State Update Status:');
          console.log('- Update interval active:', !!updateInterval);
          console.log('- Last update time:', window.lastSystemUpdate ? new Date(window.lastSystemUpdate) : 'Never');
          console.log('- Time since last update:', window.lastSystemUpdate ? (Date.now() - window.lastSystemUpdate) + 'ms' : 'N/A');
          console.log('- Page visibility:', document.hidden ? 'Hidden' : 'Visible');
          console.log('- Learner mode active:', isLearnerModeActive);
      };
  </script>
<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>