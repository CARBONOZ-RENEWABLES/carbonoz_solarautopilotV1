<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot </title>
    <link rel="stylesheet" href="<%= ingress_path %>/css/inverter-settings.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"> </div>

        <%- include('partials/sidebar') %>
          
          
        <div class="main-content">
            <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                <a class="nav-link  text-nowrap" href="<%= ingress_path %>/learner">
                    <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/inverter-settings">
                    <i class="fas fa-cogs me-1" style="color: #fd7e14;"></i>Inverter Settings
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rules">
                    <i class="fas fa-tasks me-1" style="color: #6610F2;"></i>Rules
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/wizard">
                    <i class="fas fa-magic me-1" style="color: #20c997;"></i>Rule Wizard
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rule-history">
                    <i class="fas fa-history me-1" style="color: #6f42c1;"></i>Rule History
                </a>
            </div>
            
            
            <br>

            <div class="container">
                <div class="header">
                    <h1>üîå Inverter Settings</h1>
                    <div class="header-controls">
                        <div class="inverter-selector">
                            <label for="inverterSelect">Select Inverter:</label>
                            <select id="inverterSelect">
                                <!-- Will be populated by JavaScript -->
                            </select>
                            <div id="inverterTypeIndicator" class="inverter-type-indicator">
                                <span>üîç Detecting...</span>
                            </div>
                        </div>
                        <button class="refresh-btn" onclick="refreshAllData()">
                            <span id="refresh-icon">üîÑ</span>
                            Refresh Data
                        </button>
                    </div>
                </div>
        
                <!-- Learner Mode Status -->
                <div class="learner-status" id="learner-status">
                    <strong>‚ö° Learner Mode: <span id="learner-mode-status">DETECTING...</span></strong>
                    <span id="learner-mode-description">- Loading status...</span>
                </div>
        
                <div class="settings-grid">
                    <!-- System State (Always visible, real-time) -->
                    <div class="settings-section system-state">
                        <div class="section-header">
                            <h2><span class="icon">üìä</span> System State <span class="real-time-indicator"></span></h2>
                        </div>
                        <div class="section-content">
                            <div class="system-metric">
                                <span class="metric-label">Battery SOC</span>
                                <span class="metric-value" id="battery-soc">0%</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">PV Power</span>
                                <span class="metric-value" id="pv-power">0 W</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">Load Power</span>
                                <span class="metric-value" id="load-power">0 W</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">Grid Voltage</span>
                                <span class="metric-value" id="grid-voltage">0 V</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">Grid Power</span>
                                <span class="metric-value" id="grid-power">0 W</span>
                            </div>
                            <div class="system-metric">
                                <span class="metric-label">Inverter State</span>
                                <span class="metric-value" id="inverter-state">Unknown</span>
                            </div>
                            <div class="last-updated">Last updated: <span id="last-update-time">Just now</span></div>
                        </div>
                    </div>
        
                    <!-- Dynamic sections will be populated by JavaScript -->
                    <div id="dynamic-sections"></div>
                </div>
            </div>
        </div>
    </div>


  <!-- Notification container -->
  <div id="notification" class="notification"></div>

  <script>
      // Global variables
      let currentInverter = 1;
      let isLearnerModeActive = false;
      let updateInterval;
      let pendingChanges = new Set();
      let inverterTypes = {};
      let numInverters = 1;

      // Initialize page
      document.addEventListener('DOMContentLoaded', function() {
          initializePage();
      });

      async function initializePage() {
          try {
              // Initialize tracking variable
              window.lastSystemUpdate = Date.now();
              
              // Load learner status
              await loadLearnerStatus();
              
              // Load system configuration
              await loadSystemConfiguration();
              
              // Initialize inverter selector
              populateInverterSelector();
              
              // Load settings for default inverter
              currentInverter = 1;
              await loadAllSettings();
              
              // Start system state updates (every 2 seconds)
              startSystemStateUpdates();
              
              // Set up event handlers
              setupEventHandlers();
              
              // Auto-hide learner status after 5 seconds
              setTimeout(function() {
                  const learnerStatus = document.getElementById('learner-status');
                  if (learnerStatus) {
                      learnerStatus.classList.add('hidden');
                  }
              }, 5000);
              
              console.log('Page initialized successfully - System state updates every 2 seconds');
              
          } catch (error) {
              console.error('Error initializing page:', error);
              showNotification('Error initializing page', 'error');
              
              // Still try to start system state updates even if other initialization fails
              setTimeout(() => {
                  startSystemStateUpdates();
              }, 2000);
          }
      }

      async function loadLearnerStatus() {
          try {
              const response = await fetch('<%= ingress_path %>/api/learner/status');
              const data = await response.json();
              
              isLearnerModeActive = data.active;
              updateLearnerStatusDisplay();
              
          } catch (error) {
              console.error('Error loading learner status:', error);
          }
      }

      async function loadSystemConfiguration() {
          try {
              const response = await fetch('<%= ingress_path %>/api/current-settings');
              const data = await response.json();
              
              if (data.success) {
                  numInverters = data.inverterCount || 1;
                  inverterTypes = data.currentSettings.inverterTypes || {};
              }
          } catch (error) {
              console.error('Error loading system configuration:', error);
          }
      }

      function populateInverterSelector() {
          const selector = document.getElementById('inverterSelect');
          selector.innerHTML = '';
          
          for (let i = 1; i <= numInverters; i++) {
              const option = document.createElement('option');
              option.value = i;
              option.textContent = `Inverter ${i}`;
              selector.appendChild(option);
          }
      }

      function setupEventHandlers() {
          document.getElementById('inverterSelect').addEventListener('change', function() {
              currentInverter = this.value;
              loadAllSettings();
              updateInverterTypeIndicator();
          });
      }

      function updateLearnerStatusDisplay() {
          const statusElement = document.getElementById('learner-mode-status');
          const descriptionElement = document.getElementById('learner-mode-description');
          const learnerStatus = document.getElementById('learner-status');
          
          statusElement.textContent = isLearnerModeActive ? 'ACTIVE' : 'INACTIVE';
          descriptionElement.textContent = isLearnerModeActive ? 
              '- Commands can be sent to inverter' : 
              '- Commands are blocked for safety';
          
          learnerStatus.className = `learner-status ${isLearnerModeActive ? 'learner-active' : 'learner-inactive'}`;
      }

      function updateInverterTypeIndicator() {
          const indicator = document.getElementById('inverterTypeIndicator');
          const inverterId = `inverter_${currentInverter}`;
          const inverterType = inverterTypes[inverterId];
          
          if (!inverterType || inverterType.type === 'unknown') {
              indicator.className = 'inverter-type-indicator type-unknown';
              indicator.innerHTML = '<span>‚ùì Unknown</span>';
          } else {
              const typeInfo = {
                  'legacy': { icon: 'üîß', label: 'Legacy', class: 'type-legacy' },
                  'new': { icon: '‚ö°', label: 'Modern', class: 'type-new' },
                  'hybrid': { icon: 'üîÑ', label: 'Hybrid', class: 'type-hybrid' }
              };
              
              const info = typeInfo[inverterType.type] || typeInfo.legacy;
              indicator.className = `inverter-type-indicator ${info.class}`;
              indicator.innerHTML = `<span>${info.icon} ${info.label}</span>`;
          }
      }

      // System state updates
      function startSystemStateUpdates() {
          updateSystemState();
          // Update every 2 seconds instead of 5
          updateInterval = setInterval(updateSystemState, 2000);
      }

      function updateSystemState() {
          // Add visual indicator that update is happening
          const indicator = document.querySelector('.real-time-indicator');
          if (indicator) {
              indicator.className = 'real-time-indicator updating';
          }
          
          fetch('<%= ingress_path %>/api/system-state')
              .then(response => {
                  if (!response.ok) {
                      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                  }
                  return response.json();
              })
              .then(data => {
                  const state = data.current_state;
                  
                  // Update each system metric with proper formatting
                  updateElement('battery-soc', formatValue(state.battery_soc, '%'));
                  updateElement('pv-power', formatValue(state.pv_power, ' W'));
                  updateElement('load-power', formatValue(state.load, ' W'));
                  updateElement('grid-voltage', formatValue(state.grid_voltage, ' V'));
                  updateElement('grid-power', formatValue(state.grid_power, ' W'));
                  updateElement('inverter-state', state.inverter_state || 'Unknown');
                  
                  // Update timestamp with more detailed info
                  const now = new Date();
                  const timeString = now.toLocaleTimeString();
                  const secondsAgo = Math.floor((now - (window.lastSystemUpdate || now)) / 1000);
                  updateElement('last-update-time', `${timeString} (${secondsAgo}s ago)`);
                  
                  // Reset indicator to green on successful update with pulse animation
                  if (indicator) {
                      indicator.className = 'real-time-indicator';
                  }
                  
                  // Store last successful update time
                  window.lastSystemUpdate = Date.now();
                  
                  // Debug log every 30 seconds
                  if (Math.floor(Date.now() / 30000) !== Math.floor((window.lastDebugLog || 0) / 30000)) {
                      console.log('System state updated successfully at', new Date().toLocaleTimeString());
                      window.lastDebugLog = Date.now();
                  }
              })
              .catch(error => {
                  console.error('Error updating system state:', error);
                  
                  // Set indicator to red on error
                  if (indicator) {
                      indicator.className = 'real-time-indicator error';
                  }
                  
                  // Show connection status
                  updateElement('last-update-time', 'Connection error - retrying...');
                  
                  // Try to reconnect after a longer delay if multiple failures
                  const timeSinceLastUpdate = Date.now() - (window.lastSystemUpdate || 0);
                  if (timeSinceLastUpdate > 30000) { // 30 seconds
                      console.log('System state connection lost for 30+ seconds, attempting to restart updates...');
                      clearInterval(updateInterval);
                      setTimeout(() => {
                          console.log('Restarting system state updates...');
                          startSystemStateUpdates();
                      }, 5000);
                  }
              });
      }

      function updateElement(id, value) {
          const element = document.getElementById(id);
          if (element) {
              element.textContent = value;
          }
      }

      function formatValue(value, unit) {
          return value !== null && value !== undefined ? value + unit : '0' + unit;
      }

      // Main settings loading function
      async function loadAllSettings() {
          showLoading(true);
          
          try {
              const response = await fetch('<%= ingress_path %>/api/current-settings');
              const data = await response.json();
              
              if (data.success) {
                  const settings = data.currentSettings;
                  inverterTypes = settings.inverterTypes || {};
                  const inverterId = `inverter_${currentInverter}`;
                  
                  // Update inverter type indicator
                  updateInverterTypeIndicator();
                  
                  // Create dynamic sections based on inverter type and available data
                  createDynamicSections(settings, inverterId);
              }
          } catch (error) {
              console.error('Error loading settings:', error);
              showNotification('Error loading settings', 'error');
          } finally {
              showLoading(false);
          }
      }

      function getInverterType(inverterId) {
          const inverterData = inverterTypes[inverterId];
          return inverterData ? inverterData.type : 'unknown';
      }

      function createDynamicSections(settings, inverterId) {
          const container = document.getElementById('dynamic-sections');
          container.innerHTML = '';
          
          const inverterType = getInverterType(inverterId);
          
          // Define sections based on inverter type
          const sections = [
              {
                  id: 'specification',
                  title: 'üìã Specification',
                  icon: 'üìã',
                  readonly: true,
                  settings: [
                      { key: 'serial_number', label: 'Serial Number', path: ['serial_number', inverterId, 'value'] },
                      { key: 'power_saving', label: 'Power Saving', path: ['power_saving', inverterId, 'value'] },
                      { key: 'firmware_version', label: 'Firmware Version', path: ['firmware_version', inverterId, 'value'] }
                  ]
              },
              // Dynamic work mode section based on inverter type
              getWorkModeSection(inverterType, inverterId),
              {
                  id: 'battery_charging',
                  title: 'üîã Battery Charging',
                  icon: 'üîã',
                  readonly: false,
                  settings: [
                      { 
                          key: 'max_discharge_current', 
                          label: 'Max Discharge Current', 
                          path: ['max_discharge_current', inverterId, 'value'],
                          type: 'number',
                          unit: 'A',
                          min: 0,
                          max: 200,
                          step: 0.1
                      },
                      { 
                          key: 'max_charge_current', 
                          label: 'Max Charge Current', 
                          path: ['max_charge_current', inverterId, 'value'],
                          type: 'number',
                          unit: 'A',
                          min: 0,
                          max: 200,
                          step: 0.1
                      },
                      { 
                          key: 'max_grid_charge_current', 
                          label: 'Max Grid Charge Current', 
                          path: ['max_grid_charge_current', inverterId, 'value'],
                          type: 'number',
                          unit: 'A',
                          min: 0,
                          max: 100,
                          step: 0.1
                      },
                      { 
                          key: 'battery_float_charge_voltage', 
                          label: 'Battery Float Charge Voltage', 
                          path: ['battery_float_charge_voltage', inverterId, 'value'],
                          type: 'number',
                          unit: 'V',
                          min: 40,
                          max: 60,
                          step: 0.1
                      },
                      { 
                          key: 'battery_absorption_charge_voltage', 
                          label: 'Battery Absorption Charge Voltage', 
                          path: ['battery_absorption_charge_voltage', inverterId, 'value'],
                          type: 'number',
                          unit: 'V',
                          min: 40,
                          max: 60,
                          step: 0.1
                      }
                  ]
              },
              {
                  id: 'voltage_points',
                  title: '‚ö° Voltage Points',
                  icon: '‚ö°',
                  readonly: false,
                  settings: [
                      { 
                          key: 'voltage_point_1', 
                          label: 'Voltage Point 1', 
                          path: ['voltage_point', inverterId, 'point_1', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_2', 
                          label: 'Voltage Point 2', 
                          path: ['voltage_point', inverterId, 'point_2', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_3', 
                          label: 'Voltage Point 3', 
                          path: ['voltage_point', inverterId, 'point_3', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_4', 
                          label: 'Voltage Point 4', 
                          path: ['voltage_point', inverterId, 'point_4', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_5', 
                          label: 'Voltage Point 5', 
                          path: ['voltage_point', inverterId, 'point_5', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      },
                      { 
                          key: 'voltage_point_6', 
                          label: 'Voltage Point 6', 
                          path: ['voltage_point', inverterId, 'point_6', 'value'],
                          type: 'number',
                          min: 0,
                          max: 1,
                          step: 1
                      }
                  ]
              }
          ];

          // Create sections that have available data
          let createdSections = 0;
          sections.forEach(section => {
              if (!section) return; // Skip null sections
              
              const availableSettings = section.settings.filter(setting => {
                  const value = getNestedValue(settings, setting.path);
                  return isValidValue(value);
              });

              if (availableSettings.length > 0) {
                  const sectionElement = createSection(section, availableSettings, settings);
                  container.appendChild(sectionElement);
                  createdSections++;
              }
          });

          // Update grid layout
          const settingsGrid = document.querySelector('.settings-grid');
          const totalSections = createdSections + 1; // +1 for System State
          
          if (totalSections === 1) {
              settingsGrid.classList.add('single-section');
          } else {
              settingsGrid.classList.remove('single-section');
          }
      }

      function getWorkModeSection(inverterType, inverterId) {
          // Return appropriate work mode section based on inverter type
          if (inverterType === 'new') {
              // New inverter - show charger_source_priority and output_source_priority
              return {
                  id: 'work_mode',
                  title: '‚öôÔ∏è Control Settings',
                  icon: '‚öôÔ∏è',
                  readonly: false,
                  settings: [
                      { 
                          key: 'charger_source_priority', 
                          label: 'Charger Source Priority', 
                          path: ['charger_source_priority', inverterId, 'value'],
                          type: 'select',
                          options: ['Solar first', 'Solar and utility simultaneously', 'Solar only', 'Utility first']
                      },
                      { 
                          key: 'output_source_priority', 
                          label: 'Output Source Priority', 
                          path: ['output_source_priority', inverterId, 'value'],
                          type: 'select',
                          options: ['Solar/Battery/Utility', 'Solar first', 'Utility first', 'Solar/Utility/Battery']
                      },
                      { 
                          key: 'work_mode', 
                          label: 'Work Mode', 
                          path: ['work_mode', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Grid first', 'Solar first', 'Solar + Battery', 'Solar + Grid']
                      },
                      { 
                          key: 'generator_charge', 
                          label: 'Generator Charge', 
                          path: ['generator_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      }
                  ]
              };
          } else if (inverterType === 'legacy') {
              // Legacy inverter - show grid_charge and energy_pattern
              return {
                  id: 'work_mode',
                  title: '‚öôÔ∏è Work Mode',
                  icon: '‚öôÔ∏è',
                  readonly: false,
                  settings: [
                      { 
                          key: 'grid_charge', 
                          label: 'Grid Charge', 
                          path: ['grid_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      },
                      { 
                          key: 'energy_pattern', 
                          label: 'Energy Pattern', 
                          path: ['energy_pattern', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Load first']
                      },
                      { 
                          key: 'work_mode', 
                          label: 'Work Mode', 
                          path: ['work_mode', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Grid first', 'Solar first', 'Solar + Battery', 'Solar + Grid']
                      },
                      { 
                          key: 'generator_charge', 
                          label: 'Generator Charge', 
                          path: ['generator_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      }
                  ]
              };
          } else {
              // Hybrid or unknown - show all settings
              return {
                  id: 'work_mode',
                  title: '‚öôÔ∏è Control Settings',
                  icon: '‚öôÔ∏è',
                  readonly: false,
                  settings: [
                      { 
                          key: 'grid_charge', 
                          label: 'Grid Charge', 
                          path: ['grid_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      },
                      { 
                          key: 'energy_pattern', 
                          label: 'Energy Pattern', 
                          path: ['energy_pattern', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Load first']
                      },
                      { 
                          key: 'charger_source_priority', 
                          label: 'Charger Source Priority', 
                          path: ['charger_source_priority', inverterId, 'value'],
                          type: 'select',
                          options: ['Solar first', 'Solar and utility simultaneously', 'Solar only', 'Utility first']
                      },
                      { 
                          key: 'output_source_priority', 
                          label: 'Output Source Priority', 
                          path: ['output_source_priority', inverterId, 'value'],
                          type: 'select',
                          options: ['Solar/Battery/Utility', 'Solar first', 'Utility first', 'Solar/Utility/Battery']
                      },
                      { 
                          key: 'work_mode', 
                          label: 'Work Mode', 
                          path: ['work_mode', inverterId, 'value'],
                          type: 'select',
                          options: ['Battery first', 'Grid first', 'Solar first', 'Solar + Battery', 'Solar + Grid']
                      },
                      { 
                          key: 'generator_charge', 
                          label: 'Generator Charge', 
                          path: ['generator_charge', inverterId, 'value'],
                          type: 'select',
                          options: ['Disabled', 'Enabled']
                      }
                  ]
              };
          }
      }

      function createSection(sectionConfig, availableSettings, allSettings) {
          const section = document.createElement('div');
          section.className = 'settings-section';
          section.id = `${sectionConfig.id}-section`;

          const header = document.createElement('div');
          header.className = 'section-header';
          header.innerHTML = `
              <h2><span class="icon">${sectionConfig.icon}</span> ${sectionConfig.title}</h2>
          `;

          const content = document.createElement('div');
          content.className = 'section-content';

          if (availableSettings.length === 0) {
              content.innerHTML = `
                  <div class="empty-section">
                      <div class="icon">üì≠</div>
                      <p>No data available for this section</p>
                  </div>
              `;
          } else {
              availableSettings.forEach(setting => {
                  const value = getNestedValue(allSettings, setting.path);
                  const settingElement = createSettingItem(setting, value, sectionConfig.readonly);
                  content.appendChild(settingElement);
              });
          }

          section.appendChild(header);
          section.appendChild(content);

          return section;
      }

      function createSettingItem(setting, currentValue, readonly) {
          const item = document.createElement('div');
          item.className = 'setting-item';
          item.id = `setting-${setting.key}`;

          const header = document.createElement('div');
          header.className = 'setting-header';

          const label = document.createElement('span');
          label.className = 'setting-label';
          label.textContent = setting.label;

          const status = document.createElement('span');
          status.className = 'setting-status status-available';
          status.textContent = '‚úì';

          header.appendChild(label);
          header.appendChild(status);

          const controls = document.createElement('div');
          controls.className = 'setting-controls';

          if (readonly) {
              // Read-only display
              const valueDisplay = document.createElement('span');
              valueDisplay.className = 'setting-value';
              valueDisplay.style.color = '#333';
              valueDisplay.style.fontWeight = '500';
              valueDisplay.textContent = currentValue || 'N/A';
              controls.appendChild(valueDisplay);
          } else {
              // Editable controls
              const inputElement = createInputElement(setting, currentValue);
              controls.appendChild(inputElement);

              if (setting.unit) {
                  const unitLabel = document.createElement('span');
                  unitLabel.className = 'unit-label';
                  unitLabel.textContent = setting.unit;
                  controls.appendChild(unitLabel);
              }

              const saveBtn = document.createElement('button');
              saveBtn.className = 'save-btn';
              saveBtn.textContent = 'Save';
              saveBtn.onclick = () => saveSetting(setting.key, setting);
              controls.appendChild(saveBtn);

              // Set up change detection
              inputElement.addEventListener('input', () => {
                  handleInputChange(setting.key, inputElement, saveBtn);
              });
              inputElement.addEventListener('change', () => {
                  handleInputChange(setting.key, inputElement, saveBtn);
              });
          }

          item.appendChild(header);
          item.appendChild(controls);

          return item;
      }

      function createInputElement(setting, currentValue) {
          let input;

          if (setting.type === 'select') {
              input = document.createElement('select');
              input.className = 'setting-select';
              
              setting.options.forEach(option => {
                  const optionElement = document.createElement('option');
                  optionElement.value = option;
                  optionElement.textContent = option;
                  if (option === currentValue) {
                      optionElement.selected = true;
                  }
                  input.appendChild(optionElement);
              });
          } else {
              input = document.createElement('input');
              input.className = 'setting-input';
              input.type = setting.type || 'text';
              input.value = currentValue || '';
              
              if (setting.min !== undefined) input.min = setting.min;
              if (setting.max !== undefined) input.max = setting.max;
              if (setting.step !== undefined) input.step = setting.step;
          }

          input.id = `input-${setting.key}`;
          input.dataset.originalValue = currentValue || '';
          return input;
      }

      function handleInputChange(settingKey, inputElement, saveBtn) {
          const originalValue = inputElement.dataset.originalValue;
          const currentValue = inputElement.value;
          const hasChanges = originalValue !== currentValue;

          // Update visual state
          inputElement.classList.toggle('has-changes', hasChanges);
          saveBtn.classList.toggle('active', hasChanges);
          
          const settingItem = document.getElementById(`setting-${settingKey}`);
          settingItem.classList.toggle('has-changes', hasChanges);

          // Track pending changes
          if (hasChanges) {
              pendingChanges.add(settingKey);
          } else {
              pendingChanges.delete(settingKey);
          }
      }

      function saveSetting(settingKey, settingConfig) {
          if (!isLearnerModeActive) {
              showNotification('Learner mode is not active. Cannot send commands.', 'error');
              return;
          }

          const inputElement = document.getElementById(`input-${settingKey}`);
          const saveBtn = inputElement.parentElement.querySelector('.save-btn');
          const value = inputElement.value;

          if (!value || value.trim() === '') {
              showNotification('Please enter a valid value', 'error');
              return;
          }

          // Update button state
          saveBtn.classList.add('saving');
          saveBtn.textContent = 'Saving...';
          saveBtn.disabled = true;

          // Determine endpoint based on setting type
          let endpoint = '<%= ingress_path %>/api/work-mode/set';
          if (['max_discharge_current', 'max_charge_current', 'max_grid_charge_current', 
               'max_generator_charge_current', 'battery_float_charge_voltage', 
               'battery_absorption_charge_voltage', 'battery_equalization_charge_voltage'].includes(settingKey)) {
              endpoint = '/api/battery-charging/set';
          }

          const payload = {
              inverter: `inverter_${currentInverter}`,
              setting: settingKey,
              value: value
          };

          fetch(endpoint, {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
          })
          .then(response => response.json())
          .then(data => {
              if (data.success) {
                  showNotification(`${settingConfig.label} updated successfully`, 'success');
                  
                  // Reset change state
                  inputElement.classList.remove('has-changes');
                  inputElement.dataset.originalValue = value;
                  
                  const settingItem = document.getElementById(`setting-${settingKey}`);
                  settingItem.classList.remove('has-changes');
                  
                  pendingChanges.delete(settingKey);

                  // Show auto-mapping info if applicable
                  if (data.autoMapped) {
                      showNotification(`Command auto-mapped for inverter type compatibility`, 'success');
                  }
              } else {
                  showNotification(`Error updating ${settingConfig.label}: ${data.error}`, 'error');
              }
          })
          .catch(error => {
              console.error('Error:', error);
              showNotification(`Error updating ${settingConfig.label}`, 'error');
          })
          .finally(() => {
              // Reset button state
              saveBtn.classList.remove('saving', 'active');
              saveBtn.textContent = 'Save';
              saveBtn.disabled = false;
          });
      }

      // Utility functions
      function getNestedValue(obj, path) {
          return path.reduce((current, key) => {
              return current && current[key] !== undefined ? current[key] : undefined;
          }, obj);
      }

      function isValidValue(value) {
          return value !== undefined && 
                 value !== null && 
                 value !== 'N/A' && 
                 value !== '' && 
                 value !== 'Unknown' && 
                 value !== 'Loading...' && 
                 value !== 0 && 
                 value !== '0';
      }

      function showNotification(message, type = 'success') {
          const notification = document.getElementById('notification');
          notification.textContent = message;
          notification.className = `notification ${type}`;
          notification.classList.add('show');

          setTimeout(() => {
              notification.classList.remove('show');
          }, 4000);
      }

      function showLoading(show) {
          const refreshIcon = document.getElementById('refresh-icon');
          if (show) {
              refreshIcon.innerHTML = '<div class="loading"></div>';
          } else {
              refreshIcon.textContent = 'üîÑ';
          }
      }

      async function refreshAllData() {
          // Stop current updates temporarily
          if (updateInterval) {
              clearInterval(updateInterval);
          }
          
          showLoading(true);
          
          try {
              // Reload all data
              await loadLearnerStatus();
              await loadAllSettings();
              
              // Force immediate system state update
              await new Promise((resolve) => {
                  updateSystemState();
                  setTimeout(resolve, 500); // Give it time to complete
              });
              
              showNotification('Data refreshed successfully', 'success');
          } catch (error) {
              console.error('Error refreshing data:', error);
              showNotification('Error refreshing some data', 'error');
          } finally {
              showLoading(false);
              
              // Restart system state updates (every 2 seconds)
              startSystemStateUpdates();
          }
      }

      // Enhanced cleanup and page visibility handling
      function handleVisibilityChange() {
          if (document.hidden) {
              // Page is hidden, slow down updates to every 10 seconds
              if (updateInterval) {
                  clearInterval(updateInterval);
                  updateInterval = setInterval(updateSystemState, 10000);
              }
          } else {
              // Page is visible, resume normal 2-second updates
              if (updateInterval) {
                  clearInterval(updateInterval);
                  updateInterval = setInterval(updateSystemState, 2000);
              }
              // Force immediate update when page becomes visible
              updateSystemState();
          }
      }

      // Listen for page visibility changes to optimize performance
      document.addEventListener('visibilitychange', handleVisibilityChange);

      // Enhanced cleanup
      window.addEventListener('beforeunload', function() {
          if (updateInterval) {
              clearInterval(updateInterval);
              updateInterval = null;
          }
          console.log('System state updates stopped - page unloading');
      });

      // Cleanup visibility listener on page unload
      window.addEventListener('unload', function() {
          document.removeEventListener('visibilitychange', handleVisibilityChange);
      });

      // Debug function to check update status (can be called from browser console)
      window.checkSystemUpdates = function() {
          console.log('System State Update Status:');
          console.log('- Update interval active:', !!updateInterval);
          console.log('- Last update time:', window.lastSystemUpdate ? new Date(window.lastSystemUpdate) : 'Never');
          console.log('- Time since last update:', window.lastSystemUpdate ? (Date.now() - window.lastSystemUpdate) + 'ms' : 'N/A');
          console.log('- Page visibility:', document.hidden ? 'Hidden' : 'Visible');
          console.log('- Learner mode active:', isLearnerModeActive);
      };
  </script>
<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>