<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot </title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
 <style>
  
body {
  font-family: 'Inter', sans-serif;
  background: var(--bg-color);
}
:root {
    --primary-color: #DEAF0B;
    --bg-color: #f5f6fa;
    --text-color: #2f3640;
    --icon-color: #636e72;
    --green: #4CAF50;
    --red: #F44336;
    --blue: #2196F3;
    --amber: #FFC107;
    --gray: #757575;
   }
   
   body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    
   }
    /* Sidebar styles */
    .sidebar {
        width: 280px;
        height: 100vh;
        background-color: white;
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        transition: width 0.3s ease;
    }
   
           .logo-container {
               padding: 1.5rem;
               border-bottom: 1px solid #e5e7eb;
               display: flex;
               align-items: center;
               gap: 0.75rem;
           }
   
           .logo-icon {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
   }
   
   .logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
   }
   
   .logo-text .highlight {
    color: var(--primary-color);
    margin-left: 10px;
   }
   
   
   nav {
    flex-grow: 1;
   }
   
   nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
   }
   nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
   }
   
   nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
   }
   nav li:hover {
    background-color: var(--bg-color);
   }
   
   nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
   }
   
   .bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
   }
   
   .toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
   }
   
   .toggle-text {
    margin-right: 10px;
   }
   
   .toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
   }
   .toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
   }
   
   .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .toggle-switch.active::before {
    transform: translateX(25px);
   }
   
   .sidebar.collapsed .logo-text,
   .sidebar.collapsed .search,
   .sidebar.collapsed nav li span,
   .sidebar.collapsed .toggle-text {
    display: none;
   }
   
   .sidebar.collapsed .logo {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li i {
    margin-right: 0;
   }
           /* Main content styles */
           .main-content {
               flex: 1;
               margin-left: 280px;
               padding: 2rem;
           }
   
           .content-header {
               margin-bottom: 2rem;
           }
   
           .content-header h2 {
               font-size: 1.875rem;
               font-weight: 700;
               color: #111827;
           }
   
           .metrics-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
               gap: 1.5rem;
               margin-bottom: 2rem;
           }
   
           .metric-card {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .metric-title {
               font-size: 0.875rem;
               font-weight: 600;
               color: #4b5563;
               margin-bottom: 0.5rem;
           }
   
           .metric-value {
               font-size: 1.5rem;
               font-weight: 700;
               margin-bottom: 0.25rem;
           }
   
           .metric-subtitle {
               font-size: 0.875rem;
               color: #6b7280;
           }
   
           .chart-container {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               margin-bottom: 2rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .chart-wrapper {
               height: 400px;
               margin-top: 1rem;
           }
   
           .period-buttons {
               display: flex;
               gap: 0.75rem;
               margin-bottom: 1rem;
           }
   
           .period-btn {
               padding: 0.5rem 1rem;
               border: none;
               background-color: #e5e7eb;
               color: #4b5563;
               border-radius: 6px;
               cursor: pointer;
               font-weight: 500;
               transition: all 0.2s;
           }
   
           .period-btn:hover {
               background-color: #d1d5db;
           }
   
           .period-btn.active {
               background-color: #DEAF0B;
               color: white;
           }
   
           /* Toggle styles */
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .slider {
               position: absolute;
               cursor: pointer;
               top: 0;
               left: 0;
               right: 0;
               bottom: 0;
               background-color: #e5e7eb;
               transition: .4s;
               border-radius: 34px;
           }
   
           .slider:before {
               position: absolute;
               content: "";
               height: 16px;
               width: 16px;
               left: 4px;
               bottom: 4px;
               background-color: white;
               transition: .4s;
               border-radius: 50%;
           }
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           /* Updated and new styles */
           .bottom-controls {
               padding: 1.5rem;
               border-top: 1px solid #e5e7eb;
           }
   
           .control-item {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 1rem;
           }
   
           .control-label {
               font-size: 0.875rem;
               color: #4b5563;
           }
   
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
   }
   
   .sidebar.collapsed {
    width: 80px;
   }
   
   .logo {
    display: flex;
    align-items: center;
    padding: 20px;
   }
   
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           .total-emissions {
               font-size: 1.25rem;
               font-weight: 600;
               margin-bottom: 1rem;
               color: #374151;
           }
   
           .summary-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 1rem;
               margin-bottom: 2rem;
           }
   
           .summary-item {
               background-color: white;
               border-radius: 8px;
               padding: 1rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .summary-label {
               font-size: 0.875rem;
               color: #6b7280;
               display: block;
               margin-bottom: 0.5rem;
           }
   
           .summary-value {
               font-size: 1.25rem;
               font-weight: 600;
           }
   
       
   
           /* Responsive styles */
           @media (max-width: 768px) {
               .sidebar {
                   width: 100%;
                   height: auto;
                   position: static;
                   border-right: none;
                   border-bottom: 1px solid #e5e7eb;
               }
   
               .main-content {
                   margin-left: 0;
               }
   
               body.collapsed-sidebar .sidebar {
                   display: none;
               }
   
               body.collapsed-sidebar .main-content {
                   margin-left: 0;
               }
   
               .metrics-grid,
               .summary-grid {
                   grid-template-columns: 1fr;
               }
   
               .period-buttons {
                   flex-wrap: wrap;
               }
   
               .period-btn {
                   flex: 1 0 calc(50% - 0.375rem);
                   margin-bottom: 0.75rem;
               }
           }

/* loading css */

.page-loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #f8f9fa;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        
        .dark-mode .page-loading-overlay {
            background-color: rgba(24, 27, 31, 1);
        }

.loading-spinner {
 width: 50px;
 height: 50px;
 border: 5px solid #e0e0e0;
 border-top: 5px solid #3498db;
 border-radius: 50%;
 animation: spin 1s linear infinite;
}

@keyframes spin {
 0% { transform: rotate(0deg); }
 100% { transform: rotate(360deg); }
}

.dashboard-column {
flex-basis: calc(33.33333% - 2px);
margin-right: 2px;
margin-bottom: 2px;
}

@media only screen and (max-width: 128em) {
.dashboard-column {
 flex-basis: calc(50% - 2px);
}
}

@media only screen and (max-width: 62em) {
.dashboard-column {
 flex-basis: calc(100% - 2px);
}
}

.dashboard-column .card {
border: 0;
}

.dashboard-column .card .iframe-moving {
display: block;
height: 100%;
min-height: 33em;
position: relative;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-moving {
 min-height: 107em;
}
}
.dashboard-column .card .iframe-overview {
display: block;
height: 100%;
min-height: 22em;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-overview {
 min-height: 18em;
}
}

.dashboard-column .card .iframe-battery-power {
display: block;
height: 60%;
min-height: 18em;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-battery-power {
 min-height: 15em;
}
}

.dashboard-column .card .iframe-battery-soc {
display: block;
height: 40%;
min-height: 14em;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-battery-soc {
 min-height: 12em;
}
}

/* Dark mode styles */
body.dark-mode {
    background-color: rgba(24, 27, 31, 1);
 color: #f5f6fa;
}

.dark-mode .main-content{
    background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
}

.dark-mode .sidebar {
    background-color: rgba(24, 27, 31, 1);
}

.dark-mode .sidebar .logo-icon {
 color: #2f3640;
}

.dark-mode .sidebar .logo-text {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li:hover {
 background-color: #383838;
}

.dark-mode .sidebar nav li a {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li i {
 color: #dcdde1;
}

.dark-mode .toggle-sidebar,
.dark-mode .toggle-dark-mode {
 color: #f5f6fa;
}

.dark-mode .toggle-switch {
    background-color: var(--primary-color);
}

.dark-mode .toggle-switch.active {
 background-color: var(--primary-color);
}

.dark-mode header {
    background-color: rgb(17, 18, 23);
}

.dark-mode .content-card {
    background-color: rgba(24, 27, 31, 1);
 color: #fff;
}


.dark-mode .loading-overlay{
    background-color: rgba(24, 27, 31, 1);
}

/* Mobile Sidebar Improvements */
@media (max-width: 768px) {
    /* Sidebar base styles */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 280px;
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        z-index: 1000;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        box-shadow: none;
    }

    .sidebar.active {
        transform: translateX(0);
        box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
    }

    /* Improved hamburger button */
    .mobile-toggle {
        display: block;
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 1001;
        background: none;
        border: none;
        cursor: pointer;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 8px;
    }

    .mobile-toggle span {
        display: block;
        width: 24px;
        height: 2px;
        background-color: var(--text-color);
        margin: 5px auto;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    .mobile-toggle.active span:nth-child(1) {
        transform: translateY(7px) rotate(45deg);
    }

    .mobile-toggle.active span:nth-child(2) {
        opacity: 0;
    }

    .mobile-toggle.active span:nth-child(3) {
        transform: translateY(-7px) rotate(-45deg);
    }

    /* Improved nav items */
    .sidebar nav ul {
        padding: 1rem 0;
    }

    .sidebar nav li {
        padding: 0.875rem 1.5rem;
        margin: 0.25rem 1rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
    }

    .sidebar nav li a {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 1rem;
        color: var(--text-color);
    }

    .sidebar nav li i {
        font-size: 1.25rem;
        min-width: 24px;
        text-align: center;
    }

    .sidebar nav li:active {
        background-color: rgba(0, 0, 0, 0.05);
    }

    /* Improved overlay */
    .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        z-index: 999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .sidebar-overlay.active {
        display: block;
        opacity: 1;
    }

    /* Dark mode adjustments */
    .dark-mode .mobile-toggle {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .dark-mode .mobile-toggle span {
        background-color: #f5f6fa;
    }

    .dark-mode .sidebar nav li:active {
        background-color: rgba(255, 255, 255, 0.05);
    }
}

/* Ensure main content adjusts properly */
@media (max-width: 768px) {
    .main-content {
        margin-left: 0;
        padding-top: 4.5rem;
        transition: margin-left 0.3s ease;
    }

    body.sidebar-open .main-content {
        filter: blur(2px);
        pointer-events: none;
    }
}


  /* Main content styling */
.main-content {
  flex: 1;
  margin-left: 280px;
  padding: 2rem;
  color: var(--text-color);
  transition: margin-left 0.3s ease;
}

.main-content .container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0;
}


.main-content .container .header {
      margin-bottom: 30px;
    }
     .main-content .container .header h1 {
      font-size: 2rem;
      color: #333;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
    }
    .dark-mode .main-content .container .header h1 {
  color: #fff;
}
    .main-content .container  .header h1 svg {
      margin-right: 10px;
      color: #0088cc; /* Telegram blue */
    }
    
    .row {
      display: flex;
      flex-wrap: wrap;
      margin: 0 -15px;
    }
    
    .col {
      flex: 1;
      padding: 0 15px;
      min-width: 300px;
    }
    
    @media (max-width: 768px) {
      .row {
        flex-direction: column;
      }
      .col {
        margin-bottom: 20px;
      }
    }

    /* Cards */
    .card {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
      overflow: hidden;
    }
    
    .card-header {
      background-color: #f8f9fa;
      padding: 15px 20px;
      border-bottom: 1px solid #e9ecef;
      font-weight: bold;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-body {
      padding: 20px;
      position: relative;
    }
    
    .card-form {
      border-top: 4px solid #0088cc; /* Telegram blue */
    }
    
    /* Notifications */
    .notification-rule {
      border-left: 4px solid #ccc;
      transition: all 0.3s ease;
    }
    
    .notification-rule.enabled {
      border-left-color: #28a745; /* Green */
    }
    
    .notification-rule.disabled {
      border-left-color: #dc3545; /* Red */
      opacity: 0.7;
    }
    
    .priority-high {
      border-top: 3px solid #dc3545; /* Red */
    }
    
    .priority-medium {
      border-top: 3px solid #fd7e14; /* Orange */
    }
    
    .priority-low {
      border-top: 3px solid #28a745; /* Green */
    }
    
    /* Form Elements */
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
    }
    
    .form-control {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 1rem;
      transition: border-color 0.3s;
    }
    
    .form-control:focus {
      border-color: #0088cc;
      outline: none;
    }
    
    .input-group {
      display: flex;
      align-items: stretch;
    }
    
    .input-group .form-control {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
      flex: 1;
    }
    
    .input-group-text {
      display: flex;
      align-items: center;
      padding: 0 10px;
      background-color: #e9ecef;
      border: 1px solid #ced4da;
      border-left: 0;
      border-top-right-radius: 4px;
      border-bottom-right-radius: 4px;
    }
    
    
    .form-text {
      margin-top: 5px;
      font-size: 0.875rem;
      color: #6c757d;
    }
    
    .form-check {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .form-check-input {
      margin-right: 10px;
      width: 18px;
      height: 18px;
    }
    
    .form-switch {
      padding-left: 50px;
      position: relative;
    }
    
    .form-switch .form-check-input {
      width: 40px;
      height: 20px;
      position: absolute;
      left: 0;
      top: 2px;
      border-radius: 20px;
      appearance: none;
      -webkit-appearance: none;
      background-color: #DEAF0B;
      transition: background-color 0.3s;
      cursor: pointer;
    }
    
    .form-switch .form-check-input:checked {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }
    
    .form-switch .form-check-input::before {
      content: '';
      position: absolute;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      top: 2px;
      left: 2px;
      background-color: white;
      transition: transform 0.3s;
    }
    
    .form-switch .form-check-input:checked::before {
      transform: translateX(20px);
    }
    
    /* Buttons */
    .btn {
      display: inline-block;
      font-weight: 500;
      text-align: center;
      white-space: nowrap;
      vertical-align: middle;
      user-select: none;
      border: 1px solid transparent;
      padding: 0.5rem 1rem;
      font-size: 1rem;
      line-height: 1.5;
      border-radius: 0.25rem;
      cursor: pointer;
      transition: all 0.3s;
    }
    
    .btn-primary {
      background-color: #DEAF0B;
      border-color: #fd7e14;
      color: white;
    }
    
    .btn-primary:hover {
        background-color: #DEAF0F;
        border-color: #fd7e16;
    }
    
    .btn-success {
      background-color: #28a745;
      border-color: #28a745;
      color: white;
    }
    
    .btn-success:hover {
      background-color: #218838;
      border-color: #1e7e34;
    }
    
    .btn-danger {
      background-color: #dc3545;
      border-color: #dc3545;
      color: white;
    }
    
    .btn-danger:hover {
      background-color: #c82333;
      border-color: #bd2130;
    }
    
    .btn-outline-primary {
      background-color: transparent;
      border-color: #0088cc;
      color: #0088cc;
    }
    
    .btn-outline-primary:hover {
      background-color: #0088cc;
      color: white;
    }
    
    .btn-sm {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
      border-radius: 0.2rem;
    }
    
    .btn-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 30px;
      height: 30px;
      padding: 0;
      border-radius: 4px;
    }
    
    /* Status Badges */
    .badge {
      display: inline-block;
      padding: 0.25em 0.4em;
      font-size: 0.75rem;
      font-weight: 700;
      line-height: 1;
      text-align: center;
      white-space: nowrap;
      vertical-align: baseline;
      border-radius: 0.25rem;
    }
    
    .badge-success {
      background-color: #28a745;
      color: white;
    }
    
    .badge-danger {
      background-color: #dc3545;
      color: white;
    }
    
    .badge-warning {
      background-color: #fd7e14;
      color: white;
    }
    
    .badge-secondary {
      background-color: #6c757d;
      color: white;
    }
    
    /* Loading Overlay */
    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 10;
    }
    
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      border-top-color: #0088cc;
      animation: spin 1s ease infinite;
    }
    
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
    
    .d-none {
      display: none;
    }
    
    /* Status Messages */
    #statusMessages {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1050;
      max-width: 350px;
    }
    
    .alert {
      padding: 15px;
      margin-bottom: 10px;
      border: 1px solid transparent;
      border-radius: 4px;
      position: relative;
      animation: fadeIn 0.3s;
    }
    
    .alert-success {
      background-color: #d4edda;
      border-color: #c3e6cb;
      color: #155724;
    }
    
    .alert-danger {
      background-color: #f8d7da;
      border-color: #f5c6cb;
      color: #721c24;
    }
    
    .alert-warning {
      background-color: #fff3cd;
      border-color: #ffeeba;
      color: #856404;
    }
    
    .alert-dismissible {
      padding-right: 40px;
    }
    
    .alert-dismissible .close {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: inherit;
      opacity: 0.5;
    }
    
    .alert-dismissible .close:hover {
      opacity: 1;
    }
    
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* Modal */
    .modal-backdrop {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1040;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s, visibility 0.3s;
    }
    
    .modal-backdrop.show {
      opacity: 1;
      visibility: visible;
    }
    
    .modal {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      width: 90%;
      max-width: 600px;
      max-height: 90vh;
      overflow-y: auto;
      z-index: 1050;
      transform: scale(0.9);
      opacity: 0;
      transition: transform 0.3s, opacity 0.3s;
    }
    
    .modal.show {
      transform: scale(1);
      opacity: 1;
    }
    
    .modal-header {
      padding: 15px 20px;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .modal-title {
      font-weight: 600;
      font-size: 1.25rem;
      margin: 0;
    }
    
    .modal-close {
      background: none;
      border: none;
      font-size: 1.5rem;
      line-height: 1;
      cursor: pointer;
      opacity: 0.5;
      transition: opacity 0.3s;
    }
    
    .modal-close:hover {
      opacity: 1;
    }
    
    .modal-body {
      padding: 20px;
    }
    
    .modal-footer {
      padding: 15px 20px;
      border-top: 1px solid #e9ecef;
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }
    
    /* Condition Row */
    .condition-row {
      background-color: #f8f9fa;
      border-radius: 5px;
      padding: 10px;
      margin-bottom: 10px;
    }
    
    .condition-row-grid {
  display: grid;
  grid-template-columns: 3fr 3fr 2fr 1fr;
  gap: 10px;
  align-items: center;
}

.condition-row-grid .form-control {
  width: 100%;
}

.condition-row-grid .remove-condition {
  height: 38px;
  width: 38px;
  padding: 6px;
  margin-left: auto;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Dark mode fix for the button */
.dark-mode .condition-row-grid .remove-condition {
  background-color: rgba(220, 53, 69, 0.8);
  border-color: rgba(220, 53, 69, 0.6);
}


@media (max-width: 576px) {
  .condition-row-grid {
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto;
    gap: 8px;
  }
  
  .condition-row-grid .parameter,
  .condition-row-grid .operator {
    grid-column: auto;
  }
  
  .condition-row-grid .value {
    grid-column: 1;
    grid-row: 2;
  }
  
  .condition-row-grid .remove-condition {
    grid-column: 2;
    grid-row: 2;
    margin-left: auto;
  }
}
    
  
    
    /* Utility Classes */
    .text-center {
      text-align: center;
    }
    
    .text-muted {
      color: #6c757d;
    }
    
    .mb-1 { margin-bottom: 0.25rem; }
    .mb-2 { margin-bottom: 0.5rem; }
    .mb-3 { margin-bottom: 1rem; }
    .mb-4 { margin-bottom: 1.5rem; }
    .mb-5 { margin-bottom: 3rem; }
    
    .mt-1 { margin-top: 0.25rem; }
    .mt-2 { margin-top: 0.5rem; }
    .mt-3 { margin-top: 1rem; }
    .mt-4 { margin-top: 1.5rem; }
    .mt-5 { margin-top: 3rem; }
    
    .d-flex {
      display: flex;
    }
    
    .justify-between {
      justify-content: space-between;
    }
    
    .items-center {
      align-items: center;
    }
    
    .hidden {
      display: none;
    }
    
    .small {
      font-size: 0.875em;
    }
    
    .rounded {
      border-radius: 4px;
    }
    
    .bg-light {
      background-color: #f8f9fa;
    }
    
    .p-2 {
      padding: 0.5rem;
    }
    
    .list-unstyled {
      list-style: none;
      padding-left: 0;
    }
    
    .ms-3 {
      margin-left: 0.75rem;
    }

/* Improved responsive design that aligns with the project's existing patterns */
/* Ensure main content adjusts with sidebar */
.main-content {
  transition: margin-left 0.3s ease;
}

.sidebar.collapsed + .main-content {
  margin-left: 80px;
}

/* Fix row and column layout to match project patterns */
.row {
  display: flex;
  flex-wrap: wrap;
  margin: 0 -15px;
}

.col {
  flex: 1;
  padding: 0 15px;
  min-width: 300px;
}

/* Responsive adjustments for consistent behavior */
@media (max-width: 992px) {
  .col {
    flex-basis: 100%;
    margin-bottom: 20px;
  }
}

@media (max-width: 768px) {
  .sidebar.collapsed + .main-content {
    margin-left: 0;
  }
  
  .main-content {
    margin-left: 0;
    padding: 1rem;
    padding-top: 60px; /* Accommodate for the hamburger button */
  }
  
  .card-body {
    padding: 15px;
  }
  
  /* Adjust flex direction for buttons on mobile */
  .d-flex.justify-between {
    flex-direction: row;
    gap: 10px;
    flex-wrap: wrap;
  }
  
  .d-flex.justify-between .btn {
    flex: 1;
    min-width: 120px;
    padding: 0.4rem 0.5rem;
    font-size: 0.9rem;
    white-space: nowrap;
  }
}

@media (max-width: 576px) {
  .main-content {
    padding: 0.75rem;
    padding-top: 60px;
  }
  
  .header h1 {
    font-size: 1.3rem;
  }
  
  
  .card-header {
    padding: 10px 15px;
  }
  
  .d-flex.justify-between {
    flex-direction: column;
  }
  
  .d-flex.justify-between .btn {
    width: 100%;
  }
  
  /* Improve form layout on very small screens */
  .form-control {
    font-size: 16px; /* Prevent iOS zoom on focus */
  }
}

/* Dark mode improvements aligned with project style */
.dark-mode .card {
  background-color: rgb(17, 18, 23);
  color: #f5f6fa;
  border: 1px solid rgba(56, 61, 67, 0.5);
}

.dark-mode .card-header {
  background-color: rgba(24, 27, 31, 0.5);
  border-bottom: 1px solid rgba(56, 61, 67, 0.5);
  color: #f5f6fa;
}


.dark-mode .form-control:focus {
  border-color: var(--primary-color);
}

.dark-mode .input-group-text {
  background-color: rgba(36, 39, 44, 1);
  border-color: rgba(56, 61, 67, 0.8);
  color: #f5f6fa;
}

.dark-mode .form-text {
  color: #adb5bd;
}

.dark-mode .form-check-input:checked {
  background-color: var(--primary-color);
  border-color: var(--primary-color);
}

.dark-mode .btn-primary {
  background-color: #DEAF0B;
  border-color: #fd7e14;
}


.dark-mode .btn-outline-primary {
  color: #DEAF0B;
  border-color: #fd7e14;
}

.dark-mode .btn-outline-primary:hover {
  background-color: #DEAF0F;
  color: #f5f6fa;
}

.dark-mode .condition-row {
  background-color: rgba(30, 34, 40, 1);
}

.dark-mode .notification-rule {
  background-color: rgb(17, 18, 23);
  border: 1px solid rgba(56, 61, 67, 0.5);
}

/* Improve notification rule card layout */
.notification-rule {
  margin-bottom: 15px;
  border-radius: 8px;
  padding: 15px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}


.dark-mode .form-control,
.dark-mode select.form-control,
.dark-mode textarea.form-control {
  background-color: rgba(36, 39, 44, 1);
  border-color: rgba(56, 61, 67, 0.8);
  color: #f5f6fa;
}


.dark-mode .modal {
  background-color: rgb(17, 18, 23);
  color: #f5f6fa;
  border: 1px solid rgba(56, 61, 67, 0.5);
}

.dark-mode .modal-header {
  background-color: rgba(24, 27, 31, 0.5);
  border-bottom: 1px solid rgba(56, 61, 67, 0.5);
  color: #f5f6fa;
}

.dark-mode .modal-footer {
  background-color: rgba(24, 27, 31, 0.5);
  border-top: 1px solid rgba(56, 61, 67, 0.5);
}

.dark-mode .modal-title {
  color: #fff;
}

.dark-mode .modal-close {
  color: #f5f6fa;
}

/* Fix for condition rows in dark mode */
.dark-mode .condition-row {
  background-color: rgba(30, 34, 40, 1);
}

/* Fix for form switches in dark mode */
.dark-mode .form-switch .form-check-input {
  background-color: rgba(56, 61, 67, 0.8);
}

.dark-mode .form-switch .form-check-input:checked {
  background-color: var(--primary-color);
}

/* Fix for badge colors in dark mode */
.dark-mode .badge {
  border: 1px solid rgba(56, 61, 67, 0.5);
}

.dark-mode .badge-secondary {
  background-color: rgba(56, 61, 67, 0.8);
  color: #f5f6fa;
}

/* Fix for form text in dark mode */
.dark-mode .form-text {
  color: #adb5bd;
}

/* Fix for form labels in dark mode */
.dark-mode .form-label {
  color: #f5f6fa;
}

/* Fix background color for text areas and code samples */
.dark-mode .bg-light {
  background-color: rgba(30, 34, 40, 1) !important;
  color: #f5f6fa;
}

/* Fix text colors for form checks */
.dark-mode .form-check-label {
  color: #f5f6fa;
}

/* Ensure modal backdrop works properly in dark mode */
.dark-mode .modal-backdrop {
  background-color: rgba(0, 0, 0, 0.7);
}



.notification-rule-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.notification-rule-title {
  font-weight: 600;
  margin: 0;
}

/* Modal improvements */
.modal {
  max-height: 90vh;
  overflow-y: auto;
}

@media (max-width: 576px) {
  .modal {
    width: 95%;
    margin: 0 auto;
  }
  
  .modal-body {
    padding: 15px 10px;
  }
  
  .modal-footer {
    padding: 10px 15px;
    flex-direction: row;
  }
  
  .modal-footer .btn {
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
  }
}

/* Match loading spinner with project style */
.dark-mode .loading-overlay {
  background-color: rgba(24, 27, 31, 0.7);
}

.dark-mode .spinner {
  border-top-color: var(--primary-color);
}

/* Status messages improvements */
#statusMessages {
  z-index: 2000;
}

.dark-mode .alert-success {
  background-color: rgba(40, 167, 69, 0.2);
  border-color: rgba(40, 167, 69, 0.5);
  color: #d4edda;
}

.dark-mode .alert-danger {
  background-color: rgba(220, 53, 69, 0.2);
  border-color: rgba(220, 53, 69, 0.5);
  color: #f8d7da;
}

.dark-mode .alert-warning {
  background-color: rgba(255, 193, 7, 0.2);
  border-color: rgba(255, 193, 7, 0.5);
  color: #fff3cd;
}
 </style>
</head>
<body >
    <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="pageLoadingOverlay" class="page-loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"> </div>

        <%- include('partials/sidebar') %>
          
          
        <div class="main-content">
           
             <!-- Main Content -->
  <div class="container">
    <div class="header">
      <h1>
        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="#0088cc" stroke="#0088cc" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
          <path d="M22 2L11 13"></path>
          <path d="M22 2L15 22L11 13L2 9L22 2Z"></path>
        </svg>
        Telegram Notifications
      </h1>
    </div>

    <!-- Status Messages Container -->
    <div id="statusMessages"></div>

    <div class="row">
      <!-- Telegram Configuration -->
      <div class="col">
        <div class="card card-form">
          <div class="card-header">
            <span>Telegram Configuration</span>
            <span class="badge <%= telegramConfig.enabled ? 'badge-success' : 'badge-danger' %>">
              <%= telegramConfig.enabled ? 'Enabled' : 'Disabled' %>
            </span>
          </div>
          <div class="card-body">
            <div id="configLoading" class="loading-overlay d-none">
              <div class="spinner"></div>
            </div>

            <form id="telegramConfigForm">
              <div class="form-group form-switch">
                <input class="form-check-input" type="checkbox" id="enabled" <%= telegramConfig.enabled ? 'checked' : '' %>>
                <label class="form-check-label" for="enabled">Enable Telegram Notifications</label>
              </div>

              <div class="form-group">
                <label for="botToken" class="form-label">Bot Token</label>
                <div class="input-group">
                  <input type="text" class="form-control" id="botToken" value="<%= telegramConfig.botToken %>" placeholder="Enter your Telegram bot token">
                  <div class="input-group-text">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"></path>
                    </svg>
                  </div>
                </div>
                <div class="form-text">Your Telegram bot token from BotFather (starts with number:letters)</div>
              </div>

              <div class="form-group">
                <label for="chatId" class="form-label">Chat ID</label>
                <div class="input-group">
                  <input type="text" class="form-control" id="chatId" value="<%= telegramConfig.chatId %>" placeholder="Enter your Telegram chat ID">
                  <div class="input-group-text">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>
                    </svg>
                  </div>
                </div>
                <div class="form-text">Your Telegram chat ID where notifications will be sent</div>
              </div>

              <div class="card mb-3">
                <div class="card-header">Notification Settings</div>
                <div class="card-body">
                  <div class="form-group form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="notifyOnRuleTrigger" <%= telegramConfig.notifyOnRuleTrigger ? 'checked' : '' %>>
                    <label class="form-check-label" for="notifyOnRuleTrigger">
                      Notify when rules are triggered
                    </label>
                  </div>
                  
                  <div class="form-group form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="notifyOnWarning" <%= telegramConfig.notifyOnWarning ? 'checked' : '' %>>
                    <label class="form-check-label" for="notifyOnWarning">
                      Notify on system warnings
                    </label>
                  </div>
                  
                  <div class="form-group form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="notifyOnGridChange" <%= telegramConfig.notifyOnGridChange ? 'checked' : '' %>>
                    <label class="form-check-label" for="notifyOnGridChange">
                      Notify on grid status changes
                    </label>
                  </div>
                  
                  <div class="form-group form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="notifyOnBatteryLow" <%= telegramConfig.notifyOnBatteryLow ? 'checked' : '' %>>
                    <label class="form-check-label" for="notifyOnBatteryLow">
                      Notify on low battery
                    </label>
                  </div>

                  <div class="form-group">
                    <label for="batteryLowThreshold" class="form-label">Low Battery Threshold (%)</label>
                    <input type="number" class="form-control" id="batteryLowThreshold" value="<%= telegramConfig.batteryLowThreshold %>" min="1" max="100">
                  </div>
                  
                  <div class="form-group form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="dailySummary" <%= telegramConfig.dailySummary ? 'checked' : '' %>>
                    <label class="form-check-label" for="dailySummary">
                      Send daily summary
                    </label>
                  </div>
                  
                  <div class="form-group">
                    <label for="dailySummaryTime" class="form-label">Daily Summary Time</label>
                    <input type="time" class="form-control" id="dailySummaryTime" value="<%= telegramConfig.dailySummaryTime || '20:00' %>">
                  </div>

                  <div class="form-group">
                    <label for="maxNotificationsPerHour" class="form-label">Max Notifications Per Hour</label>
                    <input type="number" class="form-control" id="maxNotificationsPerHour" value="<%= telegramConfig.maxNotificationsPerHour || 10 %>" min="1" max="100">
                    <div class="form-text">Limits the number of notifications to prevent spam</div>
                  </div>
                </div>
              </div>

              <div class="d-flex justify-between">
                <button type="submit" class="btn btn-primary">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 5px;">
                    <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path>
                    <polyline points="17 21 17 13 7 13 7 21"></polyline>
                    <polyline points="7 3 7 8 15 8"></polyline>
                  </svg>
                  Save Configuration
                </button>
                <button type="button" class="btn btn-success" id="testConnection">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 5px;">
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                  </svg>
                  Test Connection
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Notification Rules -->
      <div class="col">
        <div class="card">
          <div class="card-header">
            <span>Notification Rules</span>
            <button type="button" class="btn btn-primary btn-sm" id="addRuleBtn">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 5px;">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              Add Rule
            </button>
          </div>
          <div class="card-body">
            <div id="rulesLoading" class="loading-overlay d-none">
              <div class="spinner"></div>
            </div>

            <div id="notificationRulesList">
              <!-- Notification rules will be loaded here via JavaScript -->
              <div class="text-center" style="padding: 40px 0;">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#6c757d" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
                  <path d="M18.63 13A17.89 17.89 0 0 1 18 8"></path>
                  <path d="M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14"></path>
                  <path d="M18 8a6 6 0 0 0-9.33-5"></path>
                  <line x1="1" y1="1" x2="23" y2="23"></line>
                </svg>
                <p class="text-muted">Loading notification rules...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Rule Modal -->
  <div id="ruleModalBackdrop" class="modal-backdrop">
    <div id="ruleModal" class="modal">
      <div class="modal-header">
        <h5 class="modal-title" id="ruleModalLabel">Add Notification Rule</h5>
        <button type="button" class="modal-close" id="closeRuleModal">&times;</button>
      </div>
      <div class="modal-body">
        <form id="ruleForm">
          <input type="hidden" id="ruleId">
          
          <div class="form-group">
            <label for="ruleName" class="form-label">Rule Name</label>
            <input type="text" class="form-control" id="ruleName" required>
          </div>
          
          <div class="form-group">
            <label for="ruleDescription" class="form-label">Description</label>
            <textarea class="form-control" id="ruleDescription" rows="2"></textarea>
          </div>
          
          <div class="form-group form-switch">
            <input class="form-check-input" type="checkbox" id="ruleEnabled" checked>
            <label class="form-check-label" for="ruleEnabled">Rule Enabled</label>
          </div>
          
          <div class="form-group">
            <label class="form-label">Conditions</label>
            <div id="conditionsContainer">
              <!-- Conditions will be added here -->
            </div>
            <button type="button" class="btn btn-outline-primary btn-sm mt-2" id="addConditionBtn">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 5px;">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              Add Condition
            </button>
          </div>
          
          <div class="form-group">
            <label for="messageTemplate" class="form-label">Message Template</label>
            <textarea class="form-control" id="messageTemplate" rows="3" required></textarea>
            <div class="form-text">Use {parameter} to include system values, e.g., {battery_soc}</div>
          </div>
          
          <div class="row">
            <div class="col">
              <div class="form-group">
                <label for="cooldownMinutes" class="form-label">Cooldown Period (minutes)</label>
                <input type="number" class="form-control" id="cooldownMinutes" min="0" value="60">
                <div class="form-text">Minimum time between notifications</div>
              </div>
            </div>
            
            <div class="col">
              <div class="form-group">
                <label for="priority" class="form-label">Priority</label>
                <select class="form-control" id="priority">
                  <option value="high">High</option>
                  <option value="medium" selected>Medium</option>
                  <option value="low">Low</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="form-group form-check">
            <input class="form-check-input" type="checkbox" id="silent">
            <label class="form-check-label" for="silent">
              Silent notification (no sound)
            </label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" id="cancelRuleBtn">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveRuleBtn">Save Rule</button>
      </div>
    </div>
  </div>
            
          
        

        </div>
    </div>

   
  <!-- JavaScript for the Telegram page -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize variables
      let notificationRules = [];
      let editingRuleId = null;
      
      // Modal elements
      const ruleModalBackdrop = document.getElementById('ruleModalBackdrop');
      const ruleModal = document.getElementById('ruleModal');
      const closeRuleModal = document.getElementById('closeRuleModal');
      const cancelRuleBtn = document.getElementById('cancelRuleBtn');
      
      // Load notification rules
      loadNotificationRules();

      // Handle form submission
      document.getElementById('telegramConfigForm').addEventListener('submit', function(e) {
        e.preventDefault();
        saveConfiguration();
      });

      // Test connection button
      document.getElementById('testConnection').addEventListener('click', function() {
        testTelegramConnection();
      });

      // Add rule button
      document.getElementById('addRuleBtn').addEventListener('click', function() {
        openRuleModal();
      });

      // Add condition button
      document.getElementById('addConditionBtn').addEventListener('click', function() {
        addConditionRow();
      });

      // Save rule button
      document.getElementById('saveRuleBtn').addEventListener('click', function() {
        saveRule();
      });
      
      // Close modal handlers
      closeRuleModal.addEventListener('click', closeModal);
      cancelRuleBtn.addEventListener('click', closeModal);
      ruleModalBackdrop.addEventListener('click', function(e) {
        if (e.target === ruleModalBackdrop) {
          closeModal();
        }
      });

      // Function to open the modal
      function openModal() {
        ruleModalBackdrop.classList.add('show');
        ruleModal.classList.add('show');
      }
      
      // Function to close the modal
      function closeModal() {
        ruleModalBackdrop.classList.remove('show');
        ruleModal.classList.remove('show');
      }

      // Function to save Telegram configuration
      function saveConfiguration() {
        showLoading('configLoading');
        
        const config = {
          enabled: document.getElementById('enabled').checked,
          botToken: document.getElementById('botToken').value.trim(),
          chatId: document.getElementById('chatId').value.trim(),
          notifyOnRuleTrigger: document.getElementById('notifyOnRuleTrigger').checked,
          notifyOnWarning: document.getElementById('notifyOnWarning').checked,
          notifyOnGridChange: document.getElementById('notifyOnGridChange').checked,
          notifyOnBatteryLow: document.getElementById('notifyOnBatteryLow').checked,
          batteryLowThreshold: parseInt(document.getElementById('batteryLowThreshold').value),
          dailySummary: document.getElementById('dailySummary').checked,
          dailySummaryTime: document.getElementById('dailySummaryTime').value,
          maxNotificationsPerHour: parseInt(document.getElementById('maxNotificationsPerHour').value)
        };

        // Use XMLHttpRequest because older browsers may not support fetch
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '<%= ingress_path %>/api/telegram/config', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        
        xhr.onload = function() {
          hideLoading('configLoading');
          if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);
            if (response.success) {
              showMessage('success', 'Configuration saved successfully');
              updateStatusBadge(config.enabled);
            } else {
              showMessage('danger', 'Failed to save configuration: ' + response.message);
            }
          } else {
            showMessage('danger', 'Error: Server responded with status ' + xhr.status);
          }
        };
        
        xhr.onerror = function() {
          hideLoading('configLoading');
          showMessage('danger', 'Error: Could not connect to the server');
        };
        
        xhr.send(JSON.stringify(config));
      }

      // Function to test Telegram connection
      function testTelegramConnection() {
        const botToken = document.getElementById('botToken').value.trim();
        const chatId = document.getElementById('chatId').value.trim();
        
        if (!botToken || !chatId) {
          showMessage('warning', 'Please enter both Bot Token and Chat ID');
          return;
        }

        showLoading('configLoading');
        
        // Use XMLHttpRequest because older browsers may not support fetch
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '<%= ingress_path %>/api/telegram/test', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        
        xhr.onload = function() {
          hideLoading('configLoading');
          if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);
            if (response.success) {
              showMessage('success', 'Test message sent successfully! Check your Telegram.');
            } else {
              showMessage('danger', 'Connection test failed: ' + response.message);
            }
          } else {
            showMessage('danger', 'Error: Server responded with status ' + xhr.status);
          }
        };
        
        xhr.onerror = function() {
          hideLoading('configLoading');
          showMessage('danger', 'Error: Could not connect to the server');
        };
        
        xhr.send(JSON.stringify({ botToken, chatId }));
      }

      // Function to load notification rules
      function loadNotificationRules() {
        showLoading('rulesLoading');
        
        // Use XMLHttpRequest because older browsers may not support fetch
        const xhr = new XMLHttpRequest();
        xhr.open('GET', '<%= ingress_path %>/api/telegram/notification-rules', true);
        
        xhr.onload = function() {
          hideLoading('rulesLoading');
          if (xhr.status === 200) {
            notificationRules = JSON.parse(xhr.responseText);
            renderNotificationRules();
          } else {
            showMessage('danger', 'Error loading notification rules: Server responded with status ' + xhr.status);
            renderEmptyRulesList();
          }
        };
        
        xhr.onerror = function() {
          hideLoading('rulesLoading');
          showMessage('danger', 'Error: Could not connect to the server');
          renderEmptyRulesList();
        };
        
        xhr.send();
      }

      // Function to render notification rules
      function renderNotificationRules() {
        const rulesContainer = document.getElementById('notificationRulesList');
        
        if (!notificationRules || notificationRules.length === 0) {
          renderEmptyRulesList();
          return;
        }
        
        let html = '';
        
        notificationRules.forEach(rule => {
          html += `
            <div class="card notification-rule mb-3 ${rule.enabled ? 'enabled' : 'disabled'} priority-${rule.priority || 'medium'}">
              <div class="card-body">
                <div class="d-flex justify-between items-center mb-2">
                  <h3 class="card-title mb-0" style="font-size: 1.25rem;">${rule.name}</h3>
                  <div>
                    <label class="form-switch" style="display: inline-block; margin-right: 10px;">
                      <input class="form-check-input toggle-rule" type="checkbox" 
                        data-id="${rule.id}" ${rule.enabled ? 'checked' : ''}>
                      <span class="form-check-label"></span>
                    </label>
                    <button class="btn btn-outline-primary btn-sm btn-icon edit-rule" data-id="${rule.id}" style="margin-right: 5px;">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                      </svg>
                    </button>
                    <button class="btn btn-outline-danger btn-sm btn-icon delete-rule" data-id="${rule.id}">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="3 6 5 6 21 6"></polyline>
                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                        <line x1="10" y1="11" x2="10" y2="17"></line>
                        <line x1="14" y1="11" x2="14" y2="17"></line>
                      </svg>
                    </button>
                  </div>
                </div>
                
                <p class="text-muted small">${rule.description || 'No description'}</p>
                
                <div class="mb-2">
                  <strong>Conditions:</strong>
                  <ul class="list-unstyled ms-3 mb-0">
                    ${rule.conditions.map(condition => `
                      <li><small>
                        ${formatParameter(condition.parameter)} 
                        ${formatOperator(condition.operator)} 
                        ${condition.value}
                      </small></li>
                    `).join('')}
                  </ul>
                </div>
                
                <div class="mb-2">
                  <strong>Message:</strong>
                  <div class="p-2 bg-light rounded small">${rule.messageTemplate}</div>
                </div>
                
                <div class="d-flex justify-between items-center mt-2">
                  <span class="badge badge-secondary">
                    Cooldown: ${rule.cooldownMinutes} min
                  </span>
                  
                  <span class="badge badge-${getPriorityColor(rule.priority)}">
                    ${rule.priority ? rule.priority.charAt(0).toUpperCase() + rule.priority.slice(1) : 'Medium'} priority
                  </span>
                </div>
                
                ${rule.lastTriggered ? `
                  <div class="mt-2 text-muted small">
                    Last triggered: ${new Date(rule.lastTriggered).toLocaleString()}
                  </div>
                ` : ''}
              </div>
            </div>
          `;
        });
        
        rulesContainer.innerHTML = html;
        
        // Add event listeners to rule controls
        document.querySelectorAll('.toggle-rule').forEach(toggle => {
          toggle.addEventListener('change', function() {
            toggleRuleEnabled(this.dataset.id, this.checked);
          });
        });
        
        document.querySelectorAll('.edit-rule').forEach(button => {
          button.addEventListener('click', function() {
            editRule(this.dataset.id);
          });
        });
        
        document.querySelectorAll('.delete-rule').forEach(button => {
          button.addEventListener('click', function() {
            deleteRule(this.dataset.id);
          });
        });
      }

      // Function to render empty rules list
      function renderEmptyRulesList() {
        document.getElementById('notificationRulesList').innerHTML = `
          <div class="text-center" style="padding: 40px 0;">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#6c757d" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
              <path d="M18.63 13A17.89 17.89 0 0 1 18 8"></path>
              <path d="M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14"></path>
              <path d="M18 8a6 6 0 0 0-9.33-5"></path>
              <line x1="1" y1="1" x2="23" y2="23"></line>
            </svg>
            <p class="text-muted">No notification rules configured</p>
            <button type="button" class="btn btn-primary mt-3" id="emptyAddRuleBtn">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 5px;">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              Add Your First Rule
            </button>
          </div>
        `;
        
        document.getElementById('emptyAddRuleBtn').addEventListener('click', function() {
          openRuleModal();
        });
      }

      // Function to open rule modal (add or edit)
      function openRuleModal(ruleId = null) {
        editingRuleId = ruleId;
        
        const modalTitle = document.getElementById('ruleModalLabel');
        
        // Reset form
        document.getElementById('ruleForm').reset();
        document.getElementById('ruleId').value = '';
        document.getElementById('conditionsContainer').innerHTML = '';
        addConditionRow(); // Add an empty condition row
        
        if (ruleId) {
          // Edit existing rule
          modalTitle.textContent = 'Edit Notification Rule';
          
          const rule = notificationRules.find(r => r.id === ruleId);
          if (rule) {
            document.getElementById('ruleId').value = rule.id;
            document.getElementById('ruleName').value = rule.name;
            document.getElementById('ruleDescription').value = rule.description || '';
            document.getElementById('ruleEnabled').checked = rule.enabled;
            document.getElementById('messageTemplate').value = rule.messageTemplate;
            document.getElementById('cooldownMinutes').value = rule.cooldownMinutes;
            document.getElementById('priority').value = rule.priority || 'medium';
            document.getElementById('silent').checked = rule.silent || false;
            
            // Clear default condition row
            document.getElementById('conditionsContainer').innerHTML = '';
            
            // Add all conditions
            if (rule.conditions && rule.conditions.length > 0) {
              rule.conditions.forEach(condition => {
                addConditionRow(condition);
              });
            } else {
              addConditionRow(); // Add an empty condition row
            }
          }
        } else {
          // Add new rule
          modalTitle.textContent = 'Add Notification Rule';
        }
        
        openModal();
      }

      // Function to add condition row
      function addConditionRow(condition = null) {
        const container = document.getElementById('conditionsContainer');
        const index = container.children.length;
        
        const row = document.createElement('div');
        row.className = 'condition-row';
        row.dataset.index = index;
        
        row.innerHTML = `
          <div class="condition-row-grid">
            <select class="form-control parameter">
              <option value="battery_soc" ${condition && condition.parameter === 'battery_soc' ? 'selected' : ''}>Battery SOC (%)</option>
              <option value="pv_power" ${condition && condition.parameter === 'pv_power' ? 'selected' : ''}>Solar Power (W)</option>
              <option value="load" ${condition && condition.parameter === 'load' ? 'selected' : ''}>Load (W)</option>
              <option value="grid_voltage" ${condition && condition.parameter === 'grid_voltage' ? 'selected' : ''}>Grid Voltage (V)</option>
              <option value="grid_power" ${condition && condition.parameter === 'grid_power' ? 'selected' : ''}>Grid Power (W)</option>
            </select>
            <select class="form-control operator">
              <option value="lt" ${condition && condition.operator === 'lt' ? 'selected' : ''}>Less than (&lt;)</option>
              <option value="gt" ${condition && condition.operator === 'gt' ? 'selected' : ''}>Greater than (&gt;)</option>
              <option value="eq" ${condition && condition.operator === 'eq' ? 'selected' : ''}>Equal to (=)</option>
              <option value="lte" ${condition && condition.operator === 'lte' ? 'selected' : ''}>Less than or equal (≤)</option>
              <option value="gte" ${condition && condition.operator === 'gte' ? 'selected' : ''}>Greater than or equal (≥)</option>
              <option value="ne" ${condition && condition.operator === 'ne' ? 'selected' : ''}>Not equal (≠)</option>
            </select>
            <input type="number" class="form-control value" placeholder="Value" value="${condition ? condition.value : ''}">
            <button type="button" class="btn btn-danger btn-sm remove-condition">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="3 6 5 6 21 6"></polyline>
                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                <line x1="10" y1="11" x2="10" y2="17"></line>
                <line x1="14" y1="11" x2="14" y2="17"></line>
              </svg>
            </button>
          </div>
        `;
        
        container.appendChild(row);
        
        // Add event listener to remove button
        row.querySelector('.remove-condition').addEventListener('click', function() {
          if (container.children.length > 1) {
            row.remove();
          } else {
            showMessage('warning', 'At least one condition is required');
          }
        });
      }

      // Function to save rule
      function saveRule() {
        const ruleId = document.getElementById('ruleId').value;
        const ruleName = document.getElementById('ruleName').value.trim();
        const ruleDescription = document.getElementById('ruleDescription').value.trim();
        const messageTemplate = document.getElementById('messageTemplate').value.trim();
        
        if (!ruleName) {
          showMessage('warning', 'Rule name is required');
          return;
        }
        
        if (!messageTemplate) {
          showMessage('warning', 'Message template is required');
          return;
        }
        
        // Collect conditions
        const conditions = [];
        document.querySelectorAll('.condition-row').forEach(row => {
          const parameter = row.querySelector('.parameter').value;
          const operator = row.querySelector('.operator').value;
          const value = parseFloat(row.querySelector('.value').value);
          
          if (!isNaN(value)) {
            conditions.push({ parameter, operator, value });
          }
        });
        
        if (conditions.length === 0) {
          showMessage('warning', 'At least one complete condition is required');
          return;
        }
        
        const rule = {
          id: ruleId || null, // If editing, use existing ID
          name: ruleName,
          description: ruleDescription,
          enabled: document.getElementById('ruleEnabled').checked,
          conditions: conditions,
          messageTemplate: messageTemplate,
          cooldownMinutes: parseInt(document.getElementById('cooldownMinutes').value),
          priority: document.getElementById('priority').value,
          silent: document.getElementById('silent').checked
        };
        
        // Use XMLHttpRequest because older browsers may not support fetch
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '<%= ingress_path %>/api/telegram/notification-rules', true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        
        xhr.onload = function() {
          if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);
            if (response.success) {
              closeModal();
              showMessage('success', `Rule ${ruleId ? 'updated' : 'added'} successfully`);
              loadNotificationRules(); // Reload rules
            } else {
              showMessage('danger', 'Failed to save rule: ' + response.message);
            }
          } else {
            showMessage('danger', 'Error: Server responded with status ' + xhr.status);
          }
        };
        
        xhr.onerror = function() {
          showMessage('danger', 'Error: Could not connect to the server');
        };
        
        xhr.send(JSON.stringify(rule));
      }

      // Function to toggle rule enabled/disabled
      function toggleRuleEnabled(ruleId, enabled) {
        // Use XMLHttpRequest because older browsers may not support fetch
        const xhr = new XMLHttpRequest();
        xhr.open('POST', `<%= ingress_path %>/api/telegram/notification-rules/${ruleId}/toggle`, true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        
        xhr.onload = function() {
          if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);
            if (response.success) {
              showMessage('success', `Rule ${enabled ? 'enabled' : 'disabled'}`);
              // Update local data
              const rule = notificationRules.find(r => r.id === ruleId);
              if (rule) {
                rule.enabled = enabled;
                renderNotificationRules();
              }
            } else {
              showMessage('danger', 'Failed to update rule: ' + response.message);
              loadNotificationRules(); // Reload to get current state
            }
          } else {
            showMessage('danger', 'Error: Server responded with status ' + xhr.status);
            loadNotificationRules(); // Reload to get current state
          }
        };
        
        xhr.onerror = function() {
          showMessage('danger', 'Error: Could not connect to the server');
          loadNotificationRules(); // Reload to get current state
        };
        
        xhr.send(JSON.stringify({ enabled }));
      }

      // Function to edit rule
      function editRule(ruleId) {
        openRuleModal(ruleId);
      }

      // Function to delete rule
      function deleteRule(ruleId) {
        if (confirm('Are you sure you want to delete this notification rule?')) {
          // Use XMLHttpRequest because older browsers may not support fetch
          const xhr = new XMLHttpRequest();
          xhr.open('DELETE', `<%= ingress_path %>/api/telegram/notification-rules/${ruleId}`, true);
          
          xhr.onload = function() {
            if (xhr.status === 200) {
              const response = JSON.parse(xhr.responseText);
              if (response.success) {
                showMessage('success', 'Rule deleted successfully');
                loadNotificationRules(); // Reload rules
              } else {
                showMessage('danger', 'Failed to delete rule: ' + response.message);
              }
            } else {
              showMessage('danger', 'Error: Server responded with status ' + xhr.status);
            }
          };
          
          xhr.onerror = function() {
            showMessage('danger', 'Error: Could not connect to the server');
          };
          
          xhr.send();
        }
      }

      // Utility function to update status badge
      function updateStatusBadge(enabled) {
        const badge = document.querySelector('.card-header .badge');
        badge.className = `badge ${enabled ? 'badge-success' : 'badge-danger'}`;
        badge.textContent = enabled ? 'Enabled' : 'Disabled';
      }

      // Utility function to show loading overlay
      function showLoading(elementId) {
        document.getElementById(elementId).classList.remove('d-none');
      }

      // Utility function to hide loading overlay
      function hideLoading(elementId) {
        document.getElementById(elementId).classList.add('d-none');
      }

      // Utility function to show status message
      function showMessage(type, message) {
        const messagesContainer = document.getElementById('statusMessages');
        const id = 'msg-' + Date.now();
        
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.role = 'alert';
        alert.id = id;
        
        // Create close button
        const closeButton = document.createElement('button');
        closeButton.type = 'button';
        closeButton.className = 'close';
        closeButton.innerHTML = '&times;';
        closeButton.addEventListener('click', function() {
          alert.remove();
        });
        
        // Add message and close button
        alert.innerHTML = message;
        alert.appendChild(closeButton);
        
        messagesContainer.appendChild(alert);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
          if (document.getElementById(id)) {
            document.getElementById(id).remove();
          }
        }, 5000);
      }

      // Utility function to format parameter name
      function formatParameter(parameter) {
        switch (parameter) {
          case 'battery_soc': return 'Battery SOC';
          case 'pv_power': return 'Solar Power';
          case 'load': return 'Load';
          case 'grid_voltage': return 'Grid Voltage';
          case 'grid_power': return 'Grid Power';
          default: return parameter;
        }
      }

      // Utility function to format operator
      function formatOperator(operator) {
        switch (operator) {
          case 'lt': return '&lt;';
          case 'gt': return '&gt;';
          case 'eq': return '=';
          case 'lte': return '≤';
          case 'gte': return '≥';
          case 'ne': return '≠';
          default: return operator;
        }
      }

      // Utility function to get priority color
      function getPriorityColor(priority) {
        switch (priority) {
          case 'high': return 'danger';
          case 'medium': return 'warning';
          case 'low': return 'success';
          default: return 'warning';
        }
      }
    });
  </script>
<script>
       // loading js   
   document.addEventListener('DOMContentLoaded', function() {
    const loadingOverlay = document.getElementById('pageLoadingOverlay');
    const pageContent = document.getElementById('pageContent');
  
    // Simulate loading time (you can adjust this as needed)
    setTimeout(() => {
      loadingOverlay.style.display = 'none';
      pageContent.style.display = 'block';
      // Trigger a custom event to signal that the page is ready
      document.dispatchEvent(new Event('pageReady'));
    }, 1500); // 1.5 seconds loading time
  });
</script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>
