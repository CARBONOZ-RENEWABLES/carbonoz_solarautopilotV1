<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CO2 Emission Results - Carbonoz SolarAutopilot</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
     @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
body {
    font-family: 'Inter', sans-serif;
}
:root {
 --primary-color: #DEAF0B;
 --bg-color: #f5f6fa;
 --text-color: #2f3640;
 --icon-color: #636e72;
}

body, html {
 font-family: Arial, sans-serif;
 margin: 0;
 padding: 0;
 height: 100%;
 background-color: var(--bg-color);
 
}
 /* Sidebar styles */
        .sidebar {
            width: 280px;
            height: 100vh;
            background-color: white;
            border-right: 1px solid #e5e7eb;
            display: flex;
            flex-direction: column;
            position: fixed;
             transition: width 0.3s ease;
        }

        .logo-container {
            padding: 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .logo-icon {
 width: 50px;
 height: 50px;
 border-radius: 8px;
 display: flex;
 justify-content: center;
 align-items: center;
 color: white;
 font-weight: bold;
 font-size: 20px;
}

.logo-text {
 margin-left: 10px;
 font-weight: bold;
 color: var(--text-color);
 font-size: 18px;
}

.logo-text .highlight {
 color: var(--primary-color);
 margin-left: 10px;
}


nav {
 flex-grow: 1;
}

nav ul {
 list-style-type: none;
 padding: 0;
 margin: 0;
}
nav li {
 padding: 15px 20px;
 display: flex;
 align-items: center;
 color: var(--text-color);
 cursor: pointer;
 transition: background-color 0.3s;
 font-size: 18px;
}

nav li a{
 text-decoration: none;
 color: #2f3640;
 font-weight: bold;
}
nav li:hover {
 background-color: var(--bg-color);
}

nav li i {
 margin-right: 15px;
 color: var(--icon-color);
 font-size: 24px;
}

.bottom-options {
 padding: 20px;
 border-top: 1px solid #dcdde1;
}

.toggle-sidebar {
 display: flex;
 align-items: center;
 justify-content: space-between;
 cursor: pointer;
 font-size: 16px;
}

.toggle-text {
 margin-right: 10px;
}

.toggle-switch {
 width: 50px;
 height: 25px;
 background-color: #dcdde1;
 border-radius: 12.5px;
 position: relative;
 transition: background-color 0.3s;
}
.toggle-switch::before {
 content: '';
 position: absolute;
 width: 21px;
 height: 21px;
 border-radius: 50%;
 background-color: white;
 top: 2px;
 left: 2px;
 transition: transform 0.3s;
}

.toggle-switch.active {
 background-color: var(--primary-color);
}

.toggle-switch.active::before {
 transform: translateX(25px);
}

.sidebar.collapsed .logo-text,
.sidebar.collapsed .search,
.sidebar.collapsed nav li span,
.sidebar.collapsed .toggle-text {
 display: none;
}

.sidebar.collapsed .logo {
 justify-content: center;
}

.sidebar.collapsed nav li {
 justify-content: center;
}

.sidebar.collapsed nav li i {
 margin-right: 0;
}
       

/* Main content styles */
        .main-content {
            flex: 1;
            margin-left: 280px;
            padding: 2rem;
        }

        .content-header {
            margin-bottom: 2rem;
        }

        .content-header h2 {
            font-size: 1.875rem;
            font-weight: 700;
            color: #111827;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .metric-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .metric-title {
            font-size: 0.875rem;
            font-weight: 600;
            color: #4b5563;
            margin-bottom: 0.5rem;
        }

        .metric-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .metric-subtitle {
            font-size: 0.875rem;
            color: #6b7280;
        }

        .chart-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .chart-wrapper {
            height: 400px;
            margin-top: 1rem;
        }

        .period-buttons {
            display: flex;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .period-btn {
            padding: 0.5rem 1rem;
            border: none;
            background-color: #e5e7eb;
            color: #4b5563;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }

        .period-btn:hover {
            background-color: #d1d5db;
        }

        .period-btn.active {
            background-color: #DEAF0B;
            color: white;
        }

        /* Toggle styles */
        .toggle {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
        }

        .toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #e5e7eb;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: #DEAF0B;
        }

        input:checked + .slider:before {
            transform: translateX(20px);
        }

        /* Updated and new styles */
        .bottom-controls {
            padding: 1.5rem;
            border-top: 1px solid #e5e7eb;
        }

        .control-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .control-label {
            font-size: 0.875rem;
            color: #4b5563;
        }

        .toggle {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
        }

        .toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .sidebar {
 width: 280px;
 background-color: white;
 box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
 display: flex;
 flex-direction: column;
 transition: width 0.3s ease;
 z-index: 10;
}

.sidebar.collapsed {
 width: 80px;
}

.logo {
 display: flex;
 align-items: center;
 padding: 20px;
}


        /* Responsive styles */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: static;
                border-right: none;
                border-bottom: 1px solid #e5e7eb;
            }

            .main-content {
                margin-left: 0;
            }

            body.collapsed-sidebar .sidebar {
                display: none;
            }

            body.collapsed-sidebar .main-content {
                margin-left: 0;
            }

            .metrics-grid,
            .summary-grid {
                grid-template-columns: 1fr;
            }

            .period-buttons {
                flex-wrap: wrap;
            }

            .period-btn {
                flex: 1 0 calc(50% - 0.375rem);
                margin-bottom: 0.75rem;
            }
        }

        .chart-container {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            padding: 20px;
            transition: all 0.3s ease;
        }

        .chart-container:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            transform: translateY(-5px);
        }

        .chart-container h3 {
            color: #2c3e50;
            font-size: 1.4em;
            margin-bottom: 15px;
            text-align: center;
            border-bottom: 2px solid #ecf0f1;
            padding-bottom: 10px;
        }

        canvas {
            max-width: 100%;
            height: auto;
        }

        /* Responsive design */
        @media (min-width: 768px) {
            .dashboard-grid {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
            }
        }

        /* Card styles */
        .card {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 20px;
        }

        .card h3 {
            color: #2c3e50;
            margin-bottom: 15px;
        }
        .dark-mode .card h3 {
            color: #ffffff;
            margin-bottom: 15px;
        }

        /* Table styles */
        .table-container {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 15px;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        th {
            background-color: #f2f2f2;
            font-weight: bold;
            color: #2c3e50;
        }

        /* Button styles */
        .btn {
            display: inline-block;
            background-color:var(--primary-color);
            color: #fff;
            padding: 10px 15px;
            text-decoration: none;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: var(--primary-color);
        }
        .grid {
    display: grid;
    gap: 1rem;
}

/* Responsive grid columns */
@media (min-width: 640px) {
    .grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (min-width: 1024px) {
    .grid {
        grid-template-columns: repeat(3, 1fr);
    }
}

/* Card styles */
.bg-white {
    background-color: white;
}

.rounded-lg {
    border-radius: 0.5rem;
}

.shadow-md {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.hover\:shadow-lg:hover {
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

.transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
}

.p-6 {
    padding: 1.5rem;
}

/* Flex layout */
.flex {
    display: flex;
}

.items-center {
    align-items: center;
}

.justify-between {
    justify-content: space-between;
}

.mb-4 {
    margin-bottom: 1rem;
}

.mb-6 {
    margin-bottom: 1.5rem;
}

.mt-1 {
    margin-top: 0.25rem;
}

/* Typography */
.text-sm {
    font-size: 0.875rem;
    line-height: 1.25rem;
}

.text-xs {
    font-size: 0.75rem;
    line-height: 1rem;
}

.text-2xl {
    font-size: 1.5rem;
    line-height: 2rem;
}

.font-medium {
    font-weight: 500;
}

.font-bold {
    font-weight: 700;
}

/* Colors */
.text-gray-600 {
    color: #4B5563;
}

.text-gray-900 {
    color: var(--primary-color);
}

.text-gray-500 {
    color: #6B7280;
}

.text-yellow-500 {
    color: #F59E0B;
}

.text-blue-500 {
    color: #3B82F6;
}

.text-green-500 {
    color: #10B981;
}

/* Icon styles */
.w-5 {
    width: 2.25rem;
}

.h-5 {
    height: 2.25rem;
}

body.dark-mode {
    background-color: rgba(24, 27, 31, 1);
 color: #f5f6fa;
}

.dark-mode .sidebar {
    background-color: rgba(24, 27, 31, 1);
}

.dark-mode .sidebar .logo-icon {
 color: #2f3640;
}

.dark-mode .sidebar .logo-text {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li:hover {
 background-color: #383838;
}

.dark-mode .sidebar nav li a {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li i {
 color: #dcdde1;
}

.dark-mode .toggle-sidebar,
.dark-mode .toggle-dark-mode {
 color: #f5f6fa;
}

.dark-mode .toggle-switch {
    background-color: var(--primary-color);
}

.dark-mode .toggle-switch.active {
 background-color: var(--primary-color);
}

.dark-mode header {
    background-color: rgb(17, 18, 23);
}

.dark-mode .main-content {
    background-color: rgba(24, 27, 31, 1);
 color: #fff;
}
.dark-mode .chart-container{
    background-color: rgba(24, 27, 31, 1);
    color: #fff;
}
.dark-mode .bg-white{
    background-color: rgb(32, 36, 41);
    color: #fff;
}

.dark-mode .cards{
    background-color: rgb(32, 36, 41);
    color: #fff;
}
.dark-mode .card{
    background-color: rgb(32, 36, 41);
    color: #fff;
}
.dark-mode .loading-overlay{
    background-color: rgba(24, 27, 31, 1);
}
/* loading css */

.loading-overlay {
 position: fixed;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 background-color: #f8f9fa;
 display: flex;
 justify-content: center;
 align-items: center;
 z-index: 9999;
}

.loading-spinner {
 width: 50px;
 height: 50px;
 border: 5px solid #e0e0e0;
 border-top: 5px solid #3498db;
 border-radius: 50%;
 animation: spin 1s linear infinite;
}

@keyframes spin {
 0% { transform: rotate(0deg); }
 100% { transform: rotate(360deg); }
}
.dashboard {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    gap: 1rem;
}

/* Card styles */
.cards {
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    flex: 1;
    min-width: 0; /* This allows cards to shrink below their content size */
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.cards:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.cards-title {
    font-size: 1.1rem;
    font-weight: bold;
    margin-bottom: 1rem;
    color: #2c3e50;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.cards-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.cards-value {
    font-size: 1.5rem;
    font-weight: bold;
}

/* Icon styles */
.icon {
    width: 30px;
    height: 30px;
    flex-shrink: 0;
}

/* Color variations for different time periods */
.today {
    color: #3498db;
}

.week {
    color: #2ecc71;
}

.month {
    color: #e74c3c;
}

/* Responsive design */
@media (max-width: 768px) {
    .dashboard {
        flex-direction: column;
    }
    
    .cards {
        width: 100%;
    }

    .cards-value {
        font-size: 2rem;
    }

    .icon {
        width: 40px;
        height: 40px;
    }
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.cards {
    animation: fadeIn 0.5s ease-out;
}

/* Accessibility */
.cards:focus-within {
    outline: 2px solid #3498db;
}

    </style>
</head>
<body>

    <div id="loadingOverlay" class="loading-overlay">
        <div class="loading-spinner"></div>
    </div>
    <div id="pageContent">
    
    <!-- Sidebar -->
    <%- include('partials/sidebar') %>

    <!-- Main Content -->
    <main class="main-content">
      
        <div class="dashboard">
            <div class="cards">
                <div class="cards-title">Today's Solar PV</div>
                <div class="cards-content">
                    <span class="cards-value today" id="daily-solar-pv-total"></span>
                    <svg class="icon today" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="5"/>
                        <line x1="12" y1="1" x2="12" y2="3"/>
                        <line x1="12" y1="21" x2="12" y2="23"/>
                        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
                        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
                        <line x1="1" y1="12" x2="3" y2="12"/>
                        <line x1="21" y1="12" x2="23" y2="12"/>
                        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
                        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
                    </svg>
                </div>
            </div>
            <div class="cards">
                <div class="cards-title">Last 7 Days Solar PV</div>
                <div class="cards-content">
                    <span class="cards-value week" id="weekly-solar-pv-total"></span>
                    <svg class="icon week" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="5"/>
                        <line x1="12" y1="1" x2="12" y2="3"/>
                        <line x1="12" y1="21" x2="12" y2="23"/>
                        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
                        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
                        <line x1="1" y1="12" x2="3" y2="12"/>
                        <line x1="21" y1="12" x2="23" y2="12"/>
                        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
                        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
                    </svg>
                </div>
            </div>
            <div class="cards">
                <div class="cards-title">Last 30 Days Solar PV</div>
                <div class="cards-content">
                    <span class="cards-value month" id="monthly-solar-pv-total"></span>
                    <svg class="icon month" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="5"/>
                        <line x1="12" y1="1" x2="12" y2="3"/>
                        <line x1="12" y1="21" x2="12" y2="23"/>
                        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
                        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
                        <line x1="1" y1="12" x2="3" y2="12"/>
                        <line x1="21" y1="12" x2="23" y2="12"/>
                        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
                        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
                    </svg>
                </div>
            </div>
        </div>
        
              
              <div class="chart-container">
                  <h3>Last 30 Days</h3>
                  <canvas id="last-30-days-chart"></canvas>
              </div>
              
              <br>
              
              <div class="chart-container">
                  <h3>Battery Charge/Discharge - Last 30 Days</h3>
                  <canvas id="battery-chart"></canvas>
              </div>
              
              <!-- Last 30 Days Table -->
              <div class="card">
                  <h3>Last 30 Days Data</h3>
                  <% if (data.selectedZone) { %>
                      <p>Showing CO2 data for zone: <%= data.selectedZone %></p>
                  <% } %>
                  <div class="table-container">
                      <table id="last30days-table">
                          <thead>
                              <tr>
                                  <th>Date</th>
                                  <th>Load</th>
                                  <th>Solar PV</th>
                                  <th>Battery Charged</th>
                                  <th>Battery Discharged</th>
                                  <th>Grid Used</th>
                                  <th>Grid Exported</th>
                                  <% if (data.selectedZone) { %>
                                      <th>CO2 Avoided</th>
                                      <th>CO2 Emitted</th>
                                  <% } %>
                              </tr>
                          </thead>
                          <tbody>
                              <% for (let i = data.loadPowerData.length - 1; i >= 1 && i >= data.loadPowerData.length - 30; i--) { %>
                                  <tr>
                                      <td><%= new Date(data.loadPowerData[i].time).toLocaleDateString('en-GB', { timeZone: 'Indian/Mauritius' }) %></td>
              
                                      <% 
                                          const calculateDiff = (current, previous) => {
                                              if (previous && current && previous.value !== null && current.value !== null) {
                                                  return current.value >= previous.value ? (current.value - previous.value).toFixed(1) : current.value.toFixed(1);
                                              }
                                              return '0.0';
                                          };
              
                                          const loadPower = calculateDiff(data.loadPowerData[i], data.loadPowerData[i-1]);
                                          const pvPower = calculateDiff(data.pvPowerData[i], data.pvPowerData[i-1]);
                                          const batteryCharged = calculateDiff(data.batteryStateOfChargeData[i], data.batteryStateOfChargeData[i-1]);
                                          const batteryDischarged = calculateDiff(data.batteryPowerData[i], data.batteryPowerData[i-1]);
                                          const gridUsed = calculateDiff(data.gridPowerData[i], data.gridPowerData[i-1]);
                                          const gridExported = calculateDiff(data.gridVoltageData[i], data.gridVoltageData[i-1]);
              
                                          let co2Avoided = 0, co2Emitted = 0;
                                          if (data.selectedZone && data.carbonIntensityData.length > 0) {
                                              const carbonIntensity = data.carbonIntensityData.find(d => 
                                                  new Date(d.date).toDateString() === new Date(data.loadPowerData[i].time).toDateString()
                                              )?.carbonIntensity || 0;
              
                                              co2Avoided = parseFloat(pvPower) * carbonIntensity / 1000;
                                              co2Emitted = parseFloat(gridUsed) * carbonIntensity / 1000;
                                          }
                                      %>
                                      <td><%= loadPower %> kWh</td>
                                      <td><%= pvPower %> kWh</td>
                                      <td><%= batteryCharged %> kWh</td>
                                      <td><%= batteryDischarged %> kWh</td>
                                      <td><%= gridUsed %> kWh</td>
                                      <td><%= gridExported %> kWh</td>
                                      <% if (data.selectedZone) { %>
                                          <td><%= co2Avoided.toFixed(2) %> kg</td>
                                          <td><%= co2Emitted.toFixed(2) %> kg</td>
                                      <% } %>
                                  </tr>
                              <% } %>
                          </tbody>
                      </table>
                  </div>
                  <a href="#" id="last30days-table-download" class="btn">Download CSV</a>
              </div>
              

  <div class="chart-container">
      <h3>Last 12 Months</h3>
      <canvas id="last-12-months-chart"></canvas>
  </div>

  <!-- Last 12 Months Card -->
  <div class="card">
      <h3>Last 12 Months Data</h3>
      <% if (data.selectedZone) { %>
          <p>Showing CO2 data for zone: <%= data.selectedZone %></p>
      <% } %>
      <div class="table-container">
          <table id="last12months-table">
              <thead>
                  <tr>
                      <th>Month</th>
                      <th>Load</th>
                      <th>Solar PV</th>
                      <th>Battery Charged</th>
                      <th>Battery Discharged</th>
                      <th>Grid Used</th>
                      <th>Grid Exported</th>
                      <% if (data.selectedZone) { %>
                          <th>CO2 Avoided</th>
                          <th>CO2 Emitted</th>
                      <% } %>
                  </tr>
              </thead>
              <tbody>
                  <% 
                      const months = {};
                      const currentDate = new Date();
                      
                      // Initialize the last 12 months
                      for (let i = 0; i < 12; i++) {
                          const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);
                          const monthKey = date.toLocaleString('en-GB', { month: 'long', year: 'numeric' });
                          months[monthKey] = {
                              load: 0,
                              pv: 0,
                              batteryCharged: 0,
                              batteryDischarged: 0,
                              gridUsed: 0,
                              gridExported: 0,
                              co2Avoided: 0,
                              co2Emitted: 0
                          };
                      }

                      // Calculate monthly totals
                      for (let i = data.loadPowerData.length - 1; i >= 1; i--) {
                          const date = new Date(data.loadPowerData[i].time);
                          const monthKey = date.toLocaleString('en-GB', { month: 'long', year: 'numeric' });
                          
                          if (months.hasOwnProperty(monthKey)) {
                              const calculateMonthlyDiff = (current, previous) => {
                                  if (previous && current && previous.value !== null && current.value !== null) {
                                      return current.value >= previous.value ? (current.value - previous.value) : current.value;
                                  }
                                  return 0;
                              };

                              months[monthKey].load += parseFloat(calculateMonthlyDiff(data.loadPowerData[i], data.loadPowerData[i-1]));
                              months[monthKey].pv += parseFloat(calculateMonthlyDiff(data.pvPowerData[i], data.pvPowerData[i-1]));
                              months[monthKey].batteryCharged += parseFloat(calculateMonthlyDiff(data.batteryStateOfChargeData[i], data.batteryStateOfChargeData[i-1]));
                              months[monthKey].batteryDischarged += parseFloat(calculateMonthlyDiff(data.batteryPowerData[i], data.batteryPowerData[i-1]));
                              months[monthKey].gridUsed += parseFloat(calculateMonthlyDiff(data.gridPowerData[i], data.gridPowerData[i-1]));
                              months[monthKey].gridExported += parseFloat(calculateMonthlyDiff(data.gridVoltageData[i], data.gridVoltageData[i-1]));

                              if (data.selectedZone && data.carbonIntensityData.length > 0) {
                                  const carbonIntensity = data.carbonIntensityData.find(d => 
                                      new Date(d.date).toDateString() === date.toDateString()
                                  )?.carbonIntensity || 0;

                                  months[monthKey].co2Avoided += months[monthKey].pv * carbonIntensity / 1000;
                                  months[monthKey].co2Emitted += months[monthKey].gridUsed * carbonIntensity / 1000;
                              }
                          }
                      }

                      // Display monthly totals
                      Object.entries(months).forEach(([month, values]) => {
                  %>
                      <tr>
                          <td><%= month %></td>
                          <td><%= values.load.toFixed(1) %> kWh</td>
                          <td><%= values.pv.toFixed(1) %> kWh</td>
                          <td><%= values.batteryCharged.toFixed(1) %> kWh</td>
                          <td><%= values.batteryDischarged.toFixed(1) %> kWh</td>
                          <td><%= values.gridUsed.toFixed(1) %> kWh</td>
                          <td><%= values.gridExported.toFixed(1) %> kWh</td>
                          <% if (data.selectedZone) { %>
                              <td><%= values.co2Avoided.toFixed(2) %> kg</td>
                              <td><%= values.co2Emitted.toFixed(2) %> kg</td>
                          <% } %>
                      </tr>
                  <% }) %>
              </tbody>
          </table>
      </div>
      <a href="#" id="last12months-table-download" class="btn">Download CSV</a>
  </div>
  <div class="chart-container">
      <h3>Last 10 Years</h3>
      <canvas id="last-10-years-chart"></canvas>
  </div>

     <!-- Last 10 Years Card -->
     <div class="card">
      <h3>Last 10 Years Data</h3>
      <% if (data.selectedZone) { %>
          <p>Showing CO2 data for zone: <%= data.selectedZone %></p>
      <% } %>
      <div class="table-container">
          <table id="last10years-table">
              <thead>
                  <tr>
                      <th>Year</th>
                      <th>Load</th>
                      <th>Solar PV</th>
                      <th>Battery Charged</th>
                      <th>Battery Discharged</th>
                      <th>Grid Used</th>
                      <th>Grid Exported</th>
                      <% if (data.selectedZone) { %>
                          <th>CO2 Avoided</th>
                          <th>CO2 Emitted</th>
                      <% } %>
                  </tr>
              </thead>
              <tbody>
                  <% 
                      const years = {};
                      const currentYear = new Date().getFullYear();
                      
                      // Initialize the last 10 years
                      for (let i = 0; i < 10; i++) {
                          const year = currentYear - i;
                          years[year] = {
                              load: 0,
                              pv: 0,
                              batteryCharged: 0,
                              batteryDischarged: 0,
                              gridUsed: 0,
                              gridExported: 0,
                              co2Avoided: 0,
                              co2Emitted: 0
                          };
                      }

                      // Calculate yearly totals
                      for (let i = data.loadPowerData.length - 1; i >= 1; i--) {
                          const date = new Date(data.loadPowerData[i].time);
                          const year = date.getFullYear();
                          
                          if (years.hasOwnProperty(year)) {
                              const calculateYearlyDiff = (current, previous) => {
                                  if (previous && current && previous.value !== null && current.value !== null) {
                                      return current.value >= previous.value ? (current.value - previous.value) : current.value;
                                  }
                                  return 0;
                              };

                              years[year].load += parseFloat(calculateYearlyDiff(data.loadPowerData[i], data.loadPowerData[i-1]));
                              years[year].pv += parseFloat(calculateYearlyDiff(data.pvPowerData[i], data.pvPowerData[i-1]));
                              years[year].batteryCharged += parseFloat(calculateYearlyDiff(data.batteryStateOfChargeData[i], data.batteryStateOfChargeData[i-1]));
                              years[year].batteryDischarged += parseFloat(calculateYearlyDiff(data.batteryPowerData[i], data.batteryPowerData[i-1]));
                              years[year].gridUsed += parseFloat(calculateYearlyDiff(data.gridPowerData[i], data.gridPowerData[i-1]));
                              years[year].gridExported += parseFloat(calculateYearlyDiff(data.gridVoltageData[i], data.gridVoltageData[i-1]));

                              if (data.selectedZone && data.carbonIntensityData.length > 0) {
                                  const carbonIntensity = data.carbonIntensityData.find(d => 
                                      new Date(d.date).toDateString() === date.toDateString()
                                  )?.carbonIntensity || 0;

                                  years[year].co2Avoided += years[year].pv * carbonIntensity / 1000;
                                  years[year].co2Emitted += years[year].gridUsed * carbonIntensity / 1000;
                              }
                          }
                      }

                      // Display yearly totals
                      Object.entries(years).sort((a, b) => b[0] - a[0]).forEach(([year, values]) => {
                  %>
                      <tr>
                          <td><%= year %></td>
                          <td><%= values.load.toFixed(1) %> kWh</td>
                          <td><%= values.pv.toFixed(1) %> kWh</td>
                          <td><%= values.batteryCharged.toFixed(1) %> kWh</td>
                          <td><%= values.batteryDischarged.toFixed(1) %> kWh</td>
                          <td><%= values.gridUsed.toFixed(1) %> kWh</td>
                          <td><%= values.gridExported.toFixed(1) %> kWh</td>
                          <% if (data.selectedZone) { %>
                              <td><%= values.co2Avoided.toFixed(2) %> kg</td>
                              <td><%= values.co2Emitted.toFixed(2) %> kg</td>
                          <% } %>
                      </tr>
                  <% }) %>
              </tbody>
          </table>
      </div>
      <a href="#" id="last10years-table-download" class="btn">Download CSV</a>
  </div>

           

        
    </main>
</div>
    <script>
      // Function to convert a table to CSV
function tableToCSV(table) {
  const rows = table.querySelectorAll('tr');
  return Array.from(rows).map(row => {
      return Array.from(row.querySelectorAll('th,td'))
          .map(cell => {
              let text = cell.textContent.trim();
              // Remove 'kg' and 'kWh' from the end of the text
              text = text.replace(/ (kg|kWh)$/, '');
              // Enclose the text in quotes if it contains a comma
              return text.includes(',') ? `"${text}"` : text;
          })
          .join(',');
  }).join('\n');
}

// Function to trigger download of CSV file
function downloadCSV(csv, filename) {
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  if (navigator.msSaveBlob) { // IE 10+
      navigator.msSaveBlob(blob, filename);
  } else {
      link.href = URL.createObjectURL(blob);
      link.download = filename;
      link.style.display = 'none';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
  }
}

// Function to set up download for a specific table
function setupTableDownload(tableId, linkId, filename) {
  const downloadLink = document.getElementById(linkId);
  downloadLink.addEventListener('click', function(event) {
      event.preventDefault();
      const table = document.getElementById(tableId);
      const csv = tableToCSV(table);
      downloadCSV(csv, filename);
  });
}

// Set up downloads for each table
document.addEventListener('DOMContentLoaded', function() {
  setupTableDownload('last30days-table', 'last30days-table-download', 'last_30_days_data.csv');
  setupTableDownload('last12months-table', 'last12months-table-download', 'last_12_months_data.csv');
  setupTableDownload('last10years-table', 'last10years-table-download', 'last_10_years_data.csv');
});
  </script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
      // Function to get data from table
      function getTableData(tableId) {
          const rows = document.querySelectorAll(`#${tableId} tbody tr`);
          let labels = [];
          let loadData = [];
          let solarData = [];
          let gridUsedData = [];
          let gridExportedData = [];
    
          rows.forEach(row => {
              const cells = row.querySelectorAll('td');
              labels.push(cells[0].textContent.trim());
              loadData.push(parseFloat(cells[1].textContent));
              solarData.push(parseFloat(cells[2].textContent));
              gridUsedData.push(parseFloat(cells[5].textContent));
              gridExportedData.push(parseFloat(cells[6].textContent));
          });
    
          return { labels, loadData, solarData, gridUsedData, gridExportedData };
      }
    
      // Function to update chart
      function updateChart(chartElementId, labels, datasets) {
          const ctx = document.getElementById(chartElementId).getContext('2d');
          new Chart(ctx, {
              type: 'bar',
              data: {
                  labels: labels,
                  datasets: datasets
              },
              options: {
                  responsive: true,
                  scales: {
                      x: { stacked: true },
                      y: {
                          stacked: true,
                          title: { display: true, text: 'kWh' }
                      }
                  },
                  plugins: {
                      legend: { position: 'top' },
                      title: { display: true, text: chartElementId.replace(/-/g, ' ').replace(/chart/g, '').trim() }
                  }
              }
          });
      }
    
      // Get and update data for last 30 days
      const last30DaysData = getTableData('last30days-table');
      updateChart('last-30-days-chart', last30DaysData.labels.reverse(), [
          { label: 'Load', data: last30DaysData.loadData.reverse(), backgroundColor: '#FF5722' },
          { label: 'Solar PV', data: last30DaysData.solarData.reverse(), backgroundColor: '#FFA500' },
          { label: 'Grid Used', data: last30DaysData.gridUsedData.reverse(), backgroundColor: '#9C27B0' },
          { label: 'Grid Exported', data: last30DaysData.gridExportedData.reverse(), backgroundColor: '#607D8B' }
      ]);

      // Get and update data for last 12 months
      const last12MonthsData = getTableData('last12months-table');
      updateChart('last-12-months-chart', last12MonthsData.labels.reverse(), [
          { label: 'Load', data: last12MonthsData.loadData.reverse(), backgroundColor: '#FF5722' },
          { label: 'Solar PV', data: last12MonthsData.solarData.reverse(), backgroundColor: '#FFA500' },
          { label: 'Grid Used', data: last12MonthsData.gridUsedData.reverse(), backgroundColor: '#9C27B0' },
          { label: 'Grid Exported', data: last12MonthsData.gridExportedData.reverse(), backgroundColor: '#607D8B' }
      ]);

      // Get and update data for last 10 years
      const last10YearsData = getTableData('last10years-table');
      updateChart('last-10-years-chart', last10YearsData.labels.reverse(), [
          { label: 'Load', data: last10YearsData.loadData.reverse(), backgroundColor: '#FF5722' },
          { label: 'Solar PV', data: last10YearsData.solarData.reverse(), backgroundColor: '#FFA500' },
          { label: 'Grid Used', data: last10YearsData.gridUsedData.reverse(), backgroundColor: '#9C27B0' },
          { label: 'Grid Exported', data: last10YearsData.gridExportedData.reverse(), backgroundColor: '#607D8B' }
      ]);
    
      // Function to get battery data from table
      function getBatteryData(tableId) {
          const rows = document.querySelectorAll(`#${tableId} tbody tr`);
          let labels = [];
          let batteryChargedData = [];
          let batteryDischargedData = [];
    
          rows.forEach(row => {
              const cells = row.querySelectorAll('td');
              labels.push(cells[0].textContent.trim());
              batteryChargedData.push(parseFloat(cells[3].textContent));
              batteryDischargedData.push(parseFloat(cells[4].textContent));
          });
    
          return { labels: labels.reverse(), batteryChargedData: batteryChargedData.reverse(), batteryDischargedData: batteryDischargedData.reverse() };
      }
    
      // Function to create battery chart
      function createBatteryChart(chartElementId, data) {
          const ctx = document.getElementById(chartElementId).getContext('2d');
          new Chart(ctx, {
              type: 'bar',
              data: {
                  labels: data.labels,
                  datasets: [
                      {
                          label: 'Battery Charged',
                          data: data.batteryChargedData.map(value => -value),
                          backgroundColor: '#FF8DA1',
                          stack: 'battery'
                      },
                      {
                          label: 'Battery Discharged',
                          data: data.batteryDischargedData,
                          backgroundColor: '#0C7085',
                          stack: 'battery'
                      }
                  ]
              },
              options: {
                  responsive: true,
                  scales: {
                      x: { stacked: true },
                      y: {
                          stacked: true,
                          title: { display: true, text: 'kWh' }
                      }
                  },
                  plugins: {
                      legend: { position: 'top' },
                      title: { 
                          display: true, 
                          text: 'Battery Charge/Discharge - Last 30 Days',
                          font: { size: 16 }
                      }
                  }
              }
          });
      }
    
      // Create battery chart
      const batteryData = getBatteryData('last30days-table');
      createBatteryChart('battery-chart', batteryData);
  });
  </script>

  <script>
     // loading js
        
     document.addEventListener('DOMContentLoaded', function() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    const pageContent = document.getElementById('pageContent');
  
    // Simulate loading time (you can adjust this as needed)
    setTimeout(() => {
      loadingOverlay.style.display = 'none';
      pageContent.style.display = 'block';
      // Trigger a custom event to signal that the page is ready
      document.dispatchEvent(new Event('pageReady'));
    }, 1500); // 1.5 seconds loading time
  });
  </script>

  <script>

// Toggle dark mode
const toggleDarkMode = document.getElementById('toggleDarkMode');
const darkModeSwitch = document.getElementById('darkModeSwitch');

// Function to update Grafana iframes based on dark mode
function updateGrafanaIframes(isDarkMode) {
    const iframes = document.querySelectorAll('iframe');
    iframes.forEach(iframe => {
        let src = iframe.src;

        // Remove any existing theme parameter to avoid multiple occurrences
        src = src.replace(/([?&]theme=)(light|dark)/, '');

        // Add the new theme parameter based on dark mode setting
        const separator = src.includes('?') ? '&' : '?';
        src = `${src}${separator}theme=${isDarkMode ? 'dark' : 'light'}`;

        // Only reload iframe if theme has changed
        if (iframe.src !== src) {
            iframe.src = src;
        }
    });
}

// Function to apply the mode (either from localStorage or default)
function applyModeFromLocalStorage() {
    const isDarkMode = localStorage.getItem('dark-mode') === 'enabled';

    if (isDarkMode) {
        document.body.classList.add('dark-mode');
        darkModeSwitch.classList.add('active');
    } else {
        document.body.classList.remove('dark-mode');
        darkModeSwitch.classList.remove('active');
    }

    // Update Grafana dashboards to match the saved mode
    updateGrafanaIframes(isDarkMode);
}

// Add click event listener for dark mode toggle
toggleDarkMode.addEventListener('click', () => {
    const isDarkMode = document.body.classList.toggle('dark-mode');
    darkModeSwitch.classList.toggle('active');

    // Update Grafana dashboards to match the dark mode setting
    updateGrafanaIframes(isDarkMode);

    // Save the dark mode state in localStorage
    if (isDarkMode) {
        localStorage.setItem('dark-mode', 'enabled');
    } else {
        localStorage.setItem('dark-mode', 'disabled');
    }
});

// Check and apply the user's dark mode preference on page load and when navigating back
document.addEventListener('DOMContentLoaded', () => {
    applyModeFromLocalStorage();
});

// Apply mode on `pageshow` event (works when navigating back in browser history)
window.addEventListener('pageshow', () => {
    applyModeFromLocalStorage();
});


  </script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
    // Function to get data from table
    function getTableData(tableId) {
        const rows = document.querySelectorAll(`#${tableId} tbody tr`);
        let solarData = [];

        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            solarData.push(parseFloat(cells[2].textContent));  // Solar PV data is assumed to be in the 3rd column (index 2)
        });

        return solarData;
    }

    // Function to calculate Solar PV totals
    function calculateSolarPVTotals(solarData) {
        const dailyTotal = solarData[solarData.length - 1] || 0; // Today's data (last entry)
        const weeklyTotal = solarData.slice(-8).reduce((sum, value) => sum + value, 0); // Last 7 days
        const monthlyTotal = solarData.slice(-30).reduce((sum, value) => sum + value, 0); // Last 30 days

        return { dailyTotal, weeklyTotal, monthlyTotal };
    }

    // Get solar data for last 30 days (assuming table ID is 'last30days-table')
    const solarData = getTableData('last30days-table');

    // Calculate and display Solar PV totals
    const solarPVTotals = calculateSolarPVTotals(solarData);
    document.getElementById('daily-solar-pv-total').textContent = `${solarPVTotals.dailyTotal.toFixed(1)} kWh`;
    document.getElementById('weekly-solar-pv-total').textContent = `${solarPVTotals.weeklyTotal.toFixed(1)} kWh`;
    document.getElementById('monthly-solar-pv-total').textContent = `${solarPVTotals.monthlyTotal.toFixed(1)} kWh`;
});

  </script>

</body>
</html>