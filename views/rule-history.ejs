<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
   <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
body {
    font-family: 'Inter', sans-serif;
}
:root {
    --primary-color: #DEAF0B;
    --bg-color: #f5f6fa;
    --text-color: #2f3640;
    --icon-color: #636e72;
    --green: #4CAF50;
    --red: #F44336;
    --blue: #2196F3;
    --amber: #FFC107;
    --gray: #757575;
    --secondary-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --dark-color: #34495e;
            --light-color: #f8f9fa;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
   }
   
   body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    background-color: var(--bg-color);
    
   }
    /* Sidebar styles */
    .sidebar {
        width: 280px;
        height: 100vh;
        background-color: white;
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        transition: width 0.3s ease;
    }
   
           .logo-container {
               padding: 1.5rem;
               border-bottom: 1px solid #e5e7eb;
               display: flex;
               align-items: center;
               gap: 0.75rem;
           }
   
           .logo-icon {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
   }
   
   .logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
   }
   
   .logo-text .highlight {
    color: var(--primary-color);
    margin-left: 10px;
   }
   
   
   nav {
    flex-grow: 1;
   }
   
   nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
   }
   nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
   }
   
   nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
   }
   nav li:hover {
    background-color: var(--bg-color);
   }
   
   nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
   }
   
   .bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
   }
   
   .toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
   }
   
   .toggle-text {
    margin-right: 10px;
   }
   
   .toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
   }
   .toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
   }
   
   .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .toggle-switch.active::before {
    transform: translateX(25px);
   }
   
   .sidebar.collapsed .logo-text,
   .sidebar.collapsed .search,
   .sidebar.collapsed nav li span,
   .sidebar.collapsed .toggle-text {
    display: none;
   }
   
   .sidebar.collapsed .logo {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li i {
    margin-right: 0;
   }
           /* Main content styles */
           .main-content {
               flex: 1;
               margin-left: 280px;
               padding: 2rem;
           }
   
           .content-header {
               margin-bottom: 2rem;
           }
   
           .content-header h2 {
               font-size: 1.875rem;
               font-weight: 700;
               color: #111827;
           }
   
           .metrics-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
               gap: 1.5rem;
               margin-bottom: 2rem;
           }
   
           .metric-card {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .metric-title {
               font-size: 0.875rem;
               font-weight: 600;
               color: #4b5563;
               margin-bottom: 0.5rem;
           }
   
           .metric-value {
               font-size: 1.5rem;
               font-weight: 700;
               margin-bottom: 0.25rem;
           }
   
           .metric-subtitle {
               font-size: 0.875rem;
               color: #6b7280;
           }
   
           .chart-container {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               margin-bottom: 2rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .chart-wrapper {
               height: 400px;
               margin-top: 1rem;
           }
   
           .period-buttons {
               display: flex;
               gap: 0.75rem;
               margin-bottom: 1rem;
           }
   
           .period-btn {
               padding: 0.5rem 1rem;
               border: none;
               background-color: #e5e7eb;
               color: #4b5563;
               border-radius: 6px;
               cursor: pointer;
               font-weight: 500;
               transition: all 0.2s;
           }
   
           .period-btn:hover {
               background-color: #d1d5db;
           }
   
           .period-btn.active {
               background-color: #DEAF0B;
               color: white;
           }
   
           /* Toggle styles */
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .slider {
               position: absolute;
               cursor: pointer;
               top: 0;
               left: 0;
               right: 0;
               bottom: 0;
               background-color: #e5e7eb;
               transition: .4s;
               border-radius: 34px;
           }
   
           .slider:before {
               position: absolute;
               content: "";
               height: 16px;
               width: 16px;
               left: 4px;
               bottom: 4px;
               background-color: white;
               transition: .4s;
               border-radius: 50%;
           }
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           /* Updated and new styles */
           .bottom-controls {
               padding: 1.5rem;
               border-top: 1px solid #e5e7eb;
           }
   
           .control-item {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 1rem;
           }
   
           .control-label {
               font-size: 0.875rem;
               color: #4b5563;
           }
   
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
   }
   
   .sidebar.collapsed {
    width: 80px;
   }
   
   .logo {
    display: flex;
    align-items: center;
    padding: 20px;
   }
   
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           .total-emissions {
               font-size: 1.25rem;
               font-weight: 600;
               margin-bottom: 1rem;
               color: #374151;
           }
   
           .summary-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 1rem;
               margin-bottom: 2rem;
           }
   
           .summary-item {
               background-color: white;
               border-radius: 8px;
               padding: 1rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .summary-label {
               font-size: 0.875rem;
               color: #6b7280;
               display: block;
               margin-bottom: 0.5rem;
           }
   
           .summary-value {
               font-size: 1.25rem;
               font-weight: 600;
           }
   
       
   
           /* Responsive styles */
           @media (max-width: 768px) {
               .sidebar {
                   width: 100%;
                   height: auto;
                   position: static;
                   border-right: none;
                   border-bottom: 1px solid #e5e7eb;
               }
   
               .main-content {
                   margin-left: 0;
               }
   
               body.collapsed-sidebar .sidebar {
                   display: none;
               }
   
               body.collapsed-sidebar .main-content {
                   margin-left: 0;
               }
   
               .metrics-grid,
               .summary-grid {
                   grid-template-columns: 1fr;
               }
   
               .period-buttons {
                   flex-wrap: wrap;
               }
   
               .period-btn {
                   flex: 1 0 calc(50% - 0.375rem);
                   margin-bottom: 0.75rem;
               }
           }

/* loading css */

.loading-overlay {
 position: fixed;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 background-color: #f8f9fa;
 display: flex;
 justify-content: center;
 align-items: center;
 z-index: 9999;
}

.loading-spinner {
 width: 50px;
 height: 50px;
 border: 5px solid #e0e0e0;
 border-top: 5px solid #3498db;
 border-radius: 50%;
 animation: spin 1s linear infinite;
}

@keyframes spin {
 0% { transform: rotate(0deg); }
 100% { transform: rotate(360deg); }
}

.dashboard-column {
flex-basis: calc(33.33333% - 2px);
margin-right: 2px;
margin-bottom: 2px;
}

@media only screen and (max-width: 128em) {
.dashboard-column {
 flex-basis: calc(50% - 2px);
}
}

@media only screen and (max-width: 62em) {
.dashboard-column {
 flex-basis: calc(100% - 2px);
}
}

/* Dark mode styles */
body.dark-mode {
    background-color: rgba(24, 27, 31, 1);
 color: #f5f6fa;
}

.dark-mode .main-content{
    background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
}

.dark-mode .sidebar {
    background-color: rgba(24, 27, 31, 1);
}

.dark-mode .sidebar .logo-icon {
 color: #2f3640;
}

.dark-mode .sidebar .logo-text {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li:hover {
 background-color: #383838;
}

.dark-mode .sidebar nav li a {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li i {
 color: #dcdde1;
}

.dark-mode .toggle-sidebar,
.dark-mode .toggle-dark-mode {
 color: #f5f6fa;
}

.dark-mode .toggle-switch {
    background-color: var(--primary-color);
}

.dark-mode .toggle-switch.active {
 background-color: var(--primary-color);
}

.dark-mode header {
    background-color: rgb(17, 18, 23);
}

.dark-mode .content-card {
    background-color: rgba(24, 27, 31, 1);
 color: #fff;
}


.dark-mode .loading-overlay{
    background-color: rgba(24, 27, 31, 1);
}

/* Mobile Sidebar Improvements */
@media (max-width: 768px) {
    /* Sidebar base styles */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 280px;
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        z-index: 1000;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        box-shadow: none;
    }

    .sidebar.active {
        transform: translateX(0);
        box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
    }

    /* Improved hamburger button */
    .mobile-toggle {
        display: block;
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 1001;
        background: none;
        border: none;
        cursor: pointer;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 8px;
    }

    .mobile-toggle span {
        display: block;
        width: 24px;
        height: 2px;
        background-color: var(--text-color);
        margin: 5px auto;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    .mobile-toggle.active span:nth-child(1) {
        transform: translateY(7px) rotate(45deg);
    }

    .mobile-toggle.active span:nth-child(2) {
        opacity: 0;
    }

    .mobile-toggle.active span:nth-child(3) {
        transform: translateY(-7px) rotate(-45deg);
    }

    /* Improved nav items */
    .sidebar nav ul {
        padding: 1rem 0;
    }

    .sidebar nav li {
        padding: 0.875rem 1.5rem;
        margin: 0.25rem 1rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
    }

    .sidebar nav li a {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 1rem;
        color: var(--text-color);
    }

    .sidebar nav li i {
        font-size: 1.25rem;
        min-width: 24px;
        text-align: center;
    }

    .sidebar nav li:active {
        background-color: rgba(0, 0, 0, 0.05);
    }

    /* Improved overlay */
    .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        z-index: 999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .sidebar-overlay.active {
        display: block;
        opacity: 1;
    }

    /* Dark mode adjustments */
    .dark-mode .mobile-toggle {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .dark-mode .mobile-toggle span {
        background-color: #f5f6fa;
    }

    .dark-mode .sidebar nav li:active {
        background-color: rgba(255, 255, 255, 0.05);
    }
}

/* Ensure main content adjusts properly */
@media (max-width: 768px) {
    .main-content {
        margin-left: 0;
        padding-top: 4.5rem;
        transition: margin-left 0.3s ease;
    }

    body.sidebar-open .main-content {
        filter: blur(2px);
        pointer-events: none;
    }
}


  /* Main content styling */
.main-content {
  flex: 1;
  margin-left: 280px;
  padding: 2rem;
  background-color: var(--bg-color);
  color: var(--text-color);
  transition: margin-left 0.3s ease;
}
.main-content .container {
            max-width: 1200px;
            padding: 20px;
        }
        .page-header {
            margin-bottom: 30px;
            border-bottom: 1px solid #e1e5eb;
            padding-bottom: 15px;
        }
        
        .card {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            margin-bottom: 25px;
            overflow: hidden;
        }
        
        .card:hover {
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(-3px);
        }
        
        .card-header {
            background: #DEAF0B;
            color: white;
            font-weight: 600;
            padding: 15px 20px;
            border: none;
        }
        
        .card-body {
            padding: 20px;
        }
        
        .database-status {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: 500;
            font-size: 14px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .database-status.connected {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .database-status.disconnected {
            background-color: var(--danger-color);
            color: white;
        }
        
        .breadcrumb {
            background-color: transparent;
            padding: 0;
            margin-bottom: 20px;
        }
        
        .breadcrumb-item a {
            color: var(--primary-color);
            text-decoration: none;
        }
        
        .breadcrumb-item.active {
            color: var(--dark-color);
            font-weight: 500;
        }
        
        .btn {
            border-radius: 5px;
            padding: 8px 16px;
            font-weight: 500;
            transition: var(--transition);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(52, 152, 219, 0.3);
        }
        
        .btn-outline-secondary {
            color: var(--dark-color);
            border-color: #bdc3c7;
        }
        
        .btn-outline-secondary:hover {
            background-color: #ecf0f1;
            color: var(--dark-color);
            border-color: #bdc3c7;
        }
        
        .table {
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0,0,0,0.05);
        }
        
        .table thead th {
            background-color: #f1f3f6;
            color: var(--dark-color);
            font-weight: 600;
            border-bottom: 2px solid #e1e5eb;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 0.5px;
        }
        
        .table tbody tr {
            transition: var(--transition);
        }
        
        .table-hover tbody tr:hover {
            background-color: rgba(52, 152, 219, 0.05);
            transform: scale(1.01);
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            z-index: 10;
            position: relative;
        }
        
        .table td {
            padding: 15px;
            vertical-align: middle;
        }
        
        .badge {
            padding: 6px 10px;
            border-radius: 20px;
            font-weight: 500;
            font-size: 12px;
        }
        
        .rule-name {
            font-weight: 600;
            color: var(--dark-color);
        }
        
        .rule-description {
            color: #7f8c8d;
            font-size: 14px;
        }
        
        .rule-date {
            font-family: 'Courier New', monospace;
            font-size: 14px;
            color: #7f8c8d;
        }
        
        .trigger-count {
            background-color: #3498db;
            color: white;
            font-weight: bold;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
        }
        
        .empty-state-icon {
            font-size: 60px;
            color: #bdc3c7;
            margin-bottom: 20px;
        }
        
        .empty-state-text {
            color: #7f8c8d;
            font-size: 18px;
            margin-bottom: 20px;
        }
        
        .action-buttons {
            display: flex;
            gap: 8px;
        }
        
        .action-buttons .btn {
            padding: 6px 12px;
        }
        
        .action-buttons .btn-sm {
            font-size: 0.8rem;
        }
        
        .action-buttons .bi {
            margin-right: 5px;
        }
        
        .modal-content {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
        }
        
        .modal-header {
            background: #DEAF0B;
            color: white;
            border-bottom: none;
            padding: 15px 20px;
        }
        
        .modal-title {
            font-weight: 600;
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .modal-footer {
            border-top: 1px solid #ecf0f1;
            padding: 15px 20px;
        }
        
        .filtering-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-indicator.success {
            background-color: var(--secondary-color);
        }
        
        .status-indicator.warning {
            background-color: var(--warning-color);
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .summary-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: var(--transition);
        }
        
        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.1);
        }
        
        .summary-card-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
        }
        
        .summary-card-title {
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: #7f8c8d;
            margin-bottom: 10px;
        }
        
        .summary-card-value {
            font-size: 1rem;
            font-weight: 700;
            color: var(--dark-color);
        }
        
        /* Icons for different rule types */
        .rule-type-icon {
            font-size: 1.5rem;
            margin-right: 10px;
        }
        
        .rule-type-icon.energy {
            color: #f1c40f;
        }
        
        .rule-type-icon.battery {
            color: #27ae60;
        }
        
        .rule-type-icon.grid {
            color: #9b59b6;
        }
        
        .rule-type-icon.time {
            color: #3498db;
        }/* Enhanced Responsive Styles for Main Content */
.main-content {
    transition: margin-left 0.3s ease, background-color 0.3s ease, color 0.3s ease;
    padding: 1.5rem;
}

/* Better responsive container */
.main-content .container {
    width: 100%;
    max-width: 1400px;
    padding: 0 15px;
    margin: 0 auto;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  display: flex;
  flex-wrap: nowrap !important;
  overflow-x: auto;
  white-space: nowrap;
  gap: 0.75rem;
  padding: 0.75rem;
  margin-bottom: 1.5rem;
  scrollbar-width: thin;
  -webkit-overflow-scrolling: touch;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
  height: 6px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

.main-content .nav-link {
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  padding: 0.5rem 1rem;
  color: #4b5563;
  font-weight: 500;
  border-radius: 6px;
  text-decoration: none;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.main-content .nav-link:hover {
  background-color: #e9ecef;
  color: #000;
}

.main-content .nav-link.active {
  color: #fff;
}

.main-content .nav-link i,
.main-content .nav-link svg {
  margin-right: 0.5rem;
  font-size: 1rem;
}

/* More responsive page header */
.page-header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e1e5eb;
    flex-wrap: wrap;
    gap: 1rem;
}

.page-header h1 {
    font-size: 1.75rem;
    margin: 0;
}

.page-header .btn {
    white-space: nowrap;
}

/* Improved summary cards responsiveness */
.summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.summary-card {
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    transition: var(--transition);
}

/* More responsive filtering controls */
.filtering-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1.5rem;
    justify-content: space-between;
}

.filtering-controls .input-group {
    flex: 1;
    min-width: 200px;
    max-width: 400px;
}

.filtering-controls .btn-group {
    flex-wrap: nowrap;
}

/* More responsive table */
.table-responsive {
    margin-bottom: 0;
    border-radius: var(--border-radius);
    overflow: hidden;
}

.table thead th {
    white-space: nowrap;
    padding: 0.75rem 1rem;
}

.table tbody td {
    padding: 0.75rem 1rem;
    vertical-align: middle;
}

/* Responsive action buttons */
.action-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.action-buttons .btn {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
}

/* Modal responsiveness improvements */
.modal-content {
    border-radius: var(--border-radius);
    border: none;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
}

.modal-body .row {
    flex-direction: row;
}

/* Empty state responsiveness */
.empty-state {
    padding: 2rem 1rem;
}

/* Dark Mode Enhancements */
body.dark-mode .main-content {
    background-color: #181b1f;
    color: #f5f6fa;
}

body.dark-mode .page-header {
    border-bottom-color: #2d3748;
}

body.dark-mode .breadcrumb-item a {
    color: var(--primary-color);
}

body.dark-mode .breadcrumb-item.active {
    color: #cbd5e0;
}

body.dark-mode .summary-card {
    background-color: #1e2227;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
}

body.dark-mode .summary-card:hover {
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);
}

body.dark-mode .summary-card-title {
    color: #a0aec0;
}

body.dark-mode .summary-card-value {
    color: #f5f6fa;
}

body.dark-mode .card {
    background-color: #1e2227;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
}

body.dark-mode .card-header {
    background:#DEAF0B;
}

body.dark-mode .card-body {
    color: #f5f6fa;
}

body.dark-mode .table {
    color: #f5f6fa;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

body.dark-mode .table thead th {
    background-color: #2d3748;
    color: #f5f6fa;
    border-bottom-color: #4a5568;
}

body.dark-mode .table-hover tbody tr:hover {
    background-color: rgba(222, 175, 11, 0.1);
}

body.dark-mode .table td,
body.dark-mode .table th {
    border-color: #4a5568;
}

body.dark-mode .rule-name {
    color: #f5f6fa;
}

body.dark-mode .rule-description {
    color: #a0aec0;
}

body.dark-mode .rule-date {
    color: #a0aec0;
}

body.dark-mode .trigger-count {
    background-color: var(--primary-color);
}

body.dark-mode .btn-outline-secondary {
    color: #e2e8f0;
    border-color: #4a5568;
}

body.dark-mode .btn-outline-secondary:hover {
    background-color: #4a5568;
    color: #f5f6fa;
    border-color: #4a5568;
}

body.dark-mode .modal-content {
    background-color: #1e2227;
    color: #f5f6fa;
}

body.dark-mode .modal-header {
    border-bottom-color: #2d3748;
}

body.dark-mode .modal-footer {
    border-top-color: #2d3748;
}

body.dark-mode .bg-light {
    background-color: #2d3748 !important;
    color: #e2e8f0;
}

body.dark-mode .text-muted {
    color: #a0aec0 !important;
}

body.dark-mode .alert-warning {
    background-color: rgba(243, 156, 18, 0.2);
    color: #f5f6fa;
    border-color: rgba(243, 156, 18, 0.3);
}

/* Additional Media Queries for Better Responsiveness */
@media (max-width: 992px) {
    .main-content {
        padding: 1.25rem;
    }

    .page-header h1 {
        font-size: 1.5rem;
    }

    .summary-cards {
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    }
}

@media (max-width: 768px) {
    .main-content {
        margin-left: 0;
        padding: 1rem;
    }

    .page-header {
        flex-direction: column;
        align-items: flex-start;
    }

    .page-header div {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
        width: 100%;
    }

    .page-header .btn {
        flex: 1;
        min-width: 120px;
        text-align: center;
    }

    .filtering-controls {
        flex-direction: column;
    }

    .filtering-controls .input-group {
        max-width: 100%;
    }

    .filtering-controls .btn-group {
        width: 100%;
    }

    .filtering-controls .btn-group .btn {
        flex: 1;
    }

    .action-buttons {
        flex-direction: column;
        width: 100%;
    }

    .action-buttons .btn {
        width: 100%;
    }

    .modal-dialog {
        margin: 0.5rem;
    }

    .modal-body .row {
        flex-direction: column;
    }

    .modal-body .col-md-6:last-child {
        margin-top: 1rem;
    }
}

@media (max-width: 576px) {
    .main-content {
        padding: 0.75rem;
    }

    .summary-cards {
        grid-template-columns: 1fr;
    }

    .card-header {
        flex-direction: column;
        align-items: flex-start;
    }

    .card-header button {
        margin-top: 0.5rem;
        align-self: flex-end;
    }

    .table-responsive {
        border-radius: 0;
    }

    .rule-name, .rule-description {
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
}

/* Modal Styles - Hide by default */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1050;
    overflow: hidden;
    outline: 0;
    background-color: rgba(0, 0, 0, 0.5);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.modal.show {
    display: block;
    opacity: 1;
}

.modal-dialog {
    position: relative;
    width: auto;
    margin: 1.75rem auto;
    max-width: 500px;
    transform: translateY(-50px);
    transition: transform 0.3s ease;
}

.modal-dialog.modal-lg {
    max-width: 800px;
}

.modal.show .modal-dialog {
    transform: translateY(0);
}

.modal-content {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    background-color: #fff;
    border-radius: var(--border-radius);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    outline: 0;
}

.modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #e5e7eb;
}

.modal-title {
    margin: 0;
    font-weight: 600;
    font-size: 1.25rem;
}

.btn-close {
    background: transparent;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: rgba(255, 255, 255, 0.7);
    transition: color 0.2s;
}

.btn-close:hover {
    color: #fff;
}

.modal-body {
    position: relative;
    flex: 1 1 auto;
    padding: 1.5rem;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    padding: 1rem 1.5rem;
    border-top: 1px solid #e5e7eb;
    gap: 0.5rem;
}

/* Dark mode adjustments for modals */
body.dark-mode .modal-content {
    background-color: #1e2227;
    color: #f5f6fa;
}

body.dark-mode .modal-header {
    border-bottom-color: #2d3748;
}

body.dark-mode .modal-footer {
    border-top-color: #2d3748;
}

body.dark-mode .bg-light {
    background-color: #2d3748 !important;
    color: #e2e8f0;
}

/* Enhanced Button Styles */
.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    text-align: center;
    vertical-align: middle;
    user-select: none;
    background-color: transparent;
    border: 1px solid transparent;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    line-height: 1.5;
    border-radius: var(--border-radius);
    transition: all 0.2s ease-in-out;
    cursor: pointer;
    gap: 0.5rem;
    text-decoration: none;
}

.btn:focus, .btn:hover {
    outline: none;
    box-shadow: 0 0 0 0.2rem rgba(222, 175, 11, 0.25);
    transform: translateY(-2px);
}

.btn:active {
    transform: translateY(0);
}

.btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    border-radius: calc(var(--border-radius) - 2px);
}

.btn-lg {
    padding: 0.75rem 1.5rem;
    font-size: 1.1rem;
    border-radius: calc(var(--border-radius) + 2px);
}

/* Remove underlines from buttons that are links */
a.btn {
    text-decoration: none;
}

a.btn:hover, a.btn:focus, a.btn:active {
    text-decoration: none;
}

/* Button Variants */
.btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: #fff;
}

.btn-primary:hover, .btn-primary:focus {
    background-color: #c69c09;
    border-color: #c69c09;
}

.btn-secondary {
    background-color: #6c757d;
    border-color: #6c757d;
    color: #fff;
}

.btn-secondary:hover, .btn-secondary:focus {
    background-color: #5a6268;
    border-color: #5a6268;
}

.btn-success {
    background-color: var(--secondary-color);
    border-color: var(--secondary-color);
    color: #fff;
}

.btn-success:hover, .btn-success:focus {
    background-color: #27ae60;
    border-color: #27ae60;
}

.btn-danger {
    background-color: var(--danger-color);
    border-color: var(--danger-color);
    color: #fff;
}

.btn-danger:hover, .btn-danger:focus {
    background-color: #c0392b;
    border-color: #c0392b;
}

.btn-warning {
    background-color: var(--warning-color);
    border-color: var(--warning-color);
    color: #fff;
}

.btn-warning:hover, .btn-warning:focus {
    background-color: #d35400;
    border-color: #d35400;
}

.btn-outline-primary {
    color: var(--primary-color);
    border-color: var(--primary-color);
}

.btn-outline-primary:hover, .btn-outline-primary:focus {
    background-color: var(--primary-color);
    color: #fff;
}

.btn-outline-secondary {
    color: #6c757d;
    border-color: #6c757d;
}

.btn-outline-secondary:hover, .btn-outline-secondary:focus {
    background-color: #6c757d;
    color: #fff;
}

.btn-outline-success {
    color: var(--secondary-color);
    border-color: var(--secondary-color);
}

.btn-outline-success:hover, .btn-outline-success:focus {
    background-color: var(--secondary-color);
    color: #fff;
}

.btn-outline-danger {
    color: var(--danger-color);
    border-color: var(--danger-color);
}

.btn-outline-danger:hover, .btn-outline-danger:focus {
    background-color: var(--danger-color);
    color: #fff;
}

.btn-outline-warning {
    color: var(--warning-color);
    border-color: var(--warning-color);
}

.btn-outline-warning:hover, .btn-outline-warning:focus {
    background-color: var(--warning-color);
    color: #fff;
}

/* Button with icons */
.btn i {
    font-size: 1.1em;
}

/* Action buttons group styling */
.action-buttons {
    display: flex;
    gap: 0.5rem;
}

@media (max-width: 576px) {
    .action-buttons {
        flex-direction: column;
        width: 100%;
    }
    
    .action-buttons .btn {
        width: 100%;
        justify-content: center;
    }
}

/* Search and Filtering Controls Styles */
.filtering-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
    background-color: #fff;
    padding: 1rem;
    border-radius: var(--border-radius);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.input-group {
    position: relative;
    display: flex;
    flex-wrap: nowrap;
    align-items: stretch;
    width: 100%;
    max-width: 400px;
}

.input-group-text {
    display: flex;
    align-items: center;
    padding: 0.5rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #495057;
    text-align: center;
    white-space: nowrap;
    background-color: #f8f9fa;
    border: 1px solid #ced4da;
    border-radius: var(--border-radius) 0 0 var(--border-radius);
    border-right: none;
}

.input-group .form-control {
    position: relative;
    flex: 1 1 auto;
    width: 1%;
    min-width: 0;
    padding: 0.5rem 0.75rem;
    font-size: 1rem;
    line-height: 1.5;
    color: #495057;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #ced4da;
    border-radius: 0;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.input-group .btn:last-child {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    border-top-right-radius: var(--border-radius);
    border-bottom-right-radius: var(--border-radius);
}

.btn-group {
    display: inline-flex;
    vertical-align: middle;
}

.btn-group > .btn {
    position: relative;
    flex: 1 1 auto;
}

.btn-group > .btn:not(:first-child) {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    margin-left: -1px;
}

.btn-group > .btn:not(:last-child) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.btn-group > .btn.active {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: #fff;
    z-index: 1;
}

#searchInput {
    border-right: none;
    padding-right: 35px;
}

#clearSearchBtn {
    position: absolute;
    right: 1px;
    top: 1px;
    bottom: 1px;
    z-index: 5;
    background: transparent;
    border: none;
    width: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.5;
    transition: opacity 0.2s;
}

#clearSearchBtn:hover {
    opacity: 1;
    background-color: #f0f0f0;
}

/* Search results styling */
#historyTable tbody tr {
    transition: background-color 0.2s, transform 0.2s;
}

#historyTable tbody tr:hover {
    background-color: rgba(222, 175, 11, 0.1);
    transform: translateY(-2px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Dark mode adjustments for search */
body.dark-mode .filtering-controls {
    background-color: #1e2227;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

body.dark-mode .input-group-text {
    color: #e2e8f0;
    background-color: #2d3748;
    border-color: #4a5568;
}

body.dark-mode .form-control {
    color: #e2e8f0;
    background-color: #2d3748;
    border-color: #4a5568;
}

body.dark-mode .form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(222, 175, 11, 0.25);
}

body.dark-mode #clearSearchBtn:hover {
    background-color: #2d3748;
}

body.dark-mode #historyTable tbody tr:hover {
    background-color: rgba(222, 175, 11, 0.1);
}

@media (max-width: 768px) {
    .filtering-controls {
        flex-direction: column;
        align-items: stretch;
    }
    
    .input-group {
        max-width: 100%;
    }
    
    .btn-group {
        width: 100%;
    }
    
    .btn-group > .btn {
        flex: 1;
    }
}

/* Modal backdrop */
.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1040;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.modal-backdrop.show {
    opacity: 1;
}

/* Fade effect for modals */
.fade {
    transition: opacity 0.15s linear;
}

.fade:not(.show) {
    opacity: 0;
}

/* Animation for modals */
@keyframes modalFadeIn {
    from {
        opacity: 0;
        transform: translateY(-50px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.modal.show .modal-content {
    animation: modalFadeIn 0.3s ease forwards;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  background-color: #202429;
}

.dark-mode .main-content .nav-link {
  color: #e5e7eb;
}

.dark-mode .main-content .nav-link:hover {
  background-color: #32383e;
  color: #fff;
}

.dark-mode .main-content .nav-link.active {
  color: #fff;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #2a2e35;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #4a4d53;
}

</style>
</head>
<body>
      <!-- Add hamburger menu button -->
      <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>

          <%- include('partials/sidebar') %>

          <div class="main-content">

            <div class="container">

                <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                    <a class="nav-link active text-nowrap" href="<%= ingress_path %>/learner">
                        <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                    </a>
                    <a class="nav-link text-nowrap" href="<%= ingress_path %>/grid-charge">
                        <i class="fas fa-plug me-1" style="color: #007BFF;"></i>Grid Charge
                    </a>
                    <a class="nav-link text-nowrap" href="<%= ingress_path %>/energy-pattern">
                        <i class="fas fa-battery-three-quarters me-1" style="color: #28A745;"></i>Energy Pattern
                    </a>
                    <a class="nav-link text-nowrap" href="<%= ingress_path %>/voltage-point">
                        <i class="fas fa-bolt me-1" style="color: #DC3545;"></i>Voltage Points
                    </a>
                    <a class="nav-link text-nowrap" href="<%= ingress_path %>/work-mode">
                        <i class="fas fa-cogs me-1" style="color: #FFC107;"></i>Work Mode
                    </a>
                    <a class="nav-link text-nowrap" href="<%= ingress_path %>/battery-charging">
                        <i class="fas fa-charging-station me-1" style="color: #17A2B8;"></i>Battery Charging
                    </a>
                    <a class="nav-link text-nowrap" href="<%= ingress_path %>/rules">
                        <i class="fas fa-tasks me-1" style="color: #6610F2;"></i>Rules
                    </a>
                    <a class="nav-link text-nowrap" href="<%= ingress_path %>/rule-history">
                        <i class="fas fa-history me-1" style="color: #6f42c1;"></i>Rule History
                    </a>
                </div>
                
                <br>
                <div class="page-header">
                    <h1><i class="fas fa-clock-rotate-left"></i> Rule Execution History</h1>
                    <div class="btn-group">
                        <a href="<%= ingress_path %>/rules" class="btn btn-outline-secondary">
                            <i class="fas fa-list-check"></i> Back to Rules
                        </a>
                        <a href="<%= ingress_path %>/wizard" class="btn btn-primary">
                            <i class="fas fa-plus-circle"></i> Create New Rule
                        </a>
                    </div>
                </div>
                
                <!-- Summary Cards -->
                <div class="summary-cards">
                    <div class="summary-card">
                        <div class="summary-card-icon text-primary">
                            <i class="bi bi-list-check"></i>
                        </div>
                        <div class="summary-card-title">Total Rules</div>
                        <div class="summary-card-value" id="totalRulesCount">-</div>
                    </div>
                    
                    <div class="summary-card">
                        <div class="summary-card-icon text-success">
                            <i class="bi bi-lightning-charge"></i>
                        </div>
                        <div class="summary-card-title">Total Executions</div>
                        <div class="summary-card-value" id="totalExecutionsCount">-</div>
                    </div>
                    
                    <div class="summary-card">
                        <div class="summary-card-icon text-warning">
                            <i class="bi bi-calendar-check"></i>
                        </div>
                        <div class="summary-card-title">Last 24 Hours</div>
                        <div class="summary-card-value" id="last24HoursCount">-</div>
                    </div>
                    
                    <div class="summary-card">
                        <div class="summary-card-icon text-info">
                            <i class="bi bi-activity"></i>
                        </div>
                        <div class="summary-card-title">Most Active Rule</div>
                        <div class="summary-card-value" id="mostActiveRuleName">-</div>
                    </div>
                </div>
                
                <!-- Filtering Controls -->
                <div class="filtering-controls">
                    <div class="input-group" style="max-width: 400px;">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" id="searchInput" placeholder="Search rules...">
                        <button class="btn btn-outline-secondary" type="button" id="clearSearchBtn">Clear</button>
                    </div>
                    
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-secondary" id="filterAllBtn">All</button>
                        <button type="button" class="btn btn-outline-secondary" id="filterTodayBtn">Today</button>
                        <button type="button" class="btn btn-outline-secondary" id="filterWeekBtn">This Week</button>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span><i class="bi bi-clock-history"></i> Recent Rule Executions</span>
                        <button id="refreshBtn" class="btn btn-sm btn-outline-light">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                    </div>
                    <div class="card-body">
                        <% if (!db_connected) { %>
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle-fill"></i> Database is not connected. Rule history is not available.
                            </div>
                        <% } else if (ruleHistory && ruleHistory.length > 0) { %>
                            <div class="table-responsive">
                                <table class="table table-hover" id="historyTable">
                                    <thead>
                                        <tr>
                                            <th>Rule</th>
                                            <th>Last Triggered</th>
                                            <th>Executions</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% ruleHistory.forEach(rule => { %>
                                            <tr data-rule-id="<%= rule._id %>">
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <% 
                                                        // Determine icon based on rule conditions
                                                        let iconClass = 'rule-type-icon time';
                                                        let iconType = 'bi-clock';
                                                        
                                                        if (rule.conditions && rule.conditions.length > 0) {
                                                            const firstCondition = rule.conditions[0];
                                                            if (firstCondition.parameter === 'battery_soc') {
                                                                iconClass = 'rule-type-icon battery';
                                                                iconType = 'bi-battery-charging';
                                                            } else if (firstCondition.parameter === 'pv_power') {
                                                                iconClass = 'rule-type-icon energy';
                                                                iconType = 'bi-sun';
                                                            } else if (firstCondition.parameter === 'grid_voltage' || 
                                                                      firstCondition.parameter === 'grid_power') {
                                                                iconClass = 'rule-type-icon grid';
                                                                iconType = 'bi-lightning';
                                                            }
                                                        }
                                                        %>
                                                        <span class="<%= iconClass %>"><i class="bi <%= iconType %>"></i></span>
                                                        <div>
                                                            <div class="rule-name"><%= rule.name %></div>
                                                            <div class="rule-description"><%= rule.description || 'No description' %></div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="rule-date">
                                                    <i class="bi bi-calendar-event"></i>
                                                    <%= new Date(rule.lastTriggered).toLocaleDateString() %>
                                                    <br>
                                                    <i class="bi bi-clock"></i>
                                                    <%= new Date(rule.lastTriggered).toLocaleTimeString() %>
                                                </td>
                                                <td>
                                                    <span class="trigger-count"><%= rule.triggerCount || 0 %></span>
                                                    <%= rule.triggerCount === 1 ? 'time' : 'times' %>
                                                </td>
                                                <td>
                                                    <div class="action-buttons">
                                                        <button class="btn btn-sm btn-outline-success run-rule-btn" data-rule-id="<%= rule._id %>">
                                                            <i class="bi bi-play-fill"></i> Run Now
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger delete-rule-btn" data-rule-id="<%= rule._id %>" data-rule-name="<%= rule.name %>">
                                                            <i class="bi bi-trash"></i> Delete
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-secondary rule-details-btn" data-rule-id="<%= rule._id %>">
                                                            <i class="bi bi-info-circle"></i> Details
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    </tbody>
                                </table>
                            </div>
                        <% } else { %>
                            <div class="empty-state">
                                <div class="empty-state-icon">
                                    <i class="bi bi-clock-history"></i>
                                </div>
                                <div class="empty-state-text">
                                    No rules have been executed yet.
                                </div>
                                <a href="<%= ingress_path %>/wizard" class="btn btn-primary">
                                    <i class="bi bi-plus-circle"></i> Create Your First Rule
                                </a>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
            
            <!-- Rule Details Modal -->
            <div class="modal fade" id="ruleDetailsModal" tabindex="-1" aria-labelledby="ruleDetailsModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="ruleDetailsModalLabel">Rule Details</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6><i class="bi bi-lightning"></i> Conditions</h6>
                                    <div id="ruleConditions" class="mb-3 p-3 bg-light rounded">
                                        <!-- Conditions will be loaded here -->
                                    </div>
                                    
                                    <h6><i class="bi bi-clock"></i> Time Restrictions</h6>
                                    <div id="ruleTimeRestrictions" class="mb-3 p-3 bg-light rounded">
                                        <!-- Time restrictions will be loaded here -->
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <h6><i class="bi bi-gear"></i> Actions</h6>
                                    <div id="ruleActions" class="mb-3 p-3 bg-light rounded">
                                        <!-- Actions will be loaded here -->
                                    </div>
                                    
                                    <h6><i class="bi bi-clock-history"></i> Execution History</h6>
                                    <div id="ruleExecutionHistory" class="p-3 bg-light rounded">
                                        <!-- Execution history will be loaded here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" id="editRuleBtn">Edit Rule</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Delete Rule Confirmation Modal -->
            <div class="modal fade" id="deleteRuleModal" tabindex="-1" aria-labelledby="deleteRuleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="deleteRuleModalLabel">Confirm Deletion</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-warning mb-3">
                                <i class="bi bi-exclamation-triangle-fill"></i> Warning: This action cannot be undone.
                            </div>
                            <p>Are you sure you want to delete the rule "<span id="deleteRuleName"></span>"?</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger" id="confirmDeleteRule">Delete Rule</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Run Rule Confirmation Modal -->
            <div class="modal fade" id="runRuleModal" tabindex="-1" aria-labelledby="runRuleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="runRuleModalLabel">Confirm Execution</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to execute the rule "<span id="runRuleName"></span>" now?</p>
                            <p>This will trigger the rule's actions regardless of its conditions.</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" id="confirmRunRule">Execute Now</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script> 
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize modals
        const ruleDetailsModal = new bootstrap.Modal(document.getElementById('ruleDetailsModal'));
        const runRuleModal = new bootstrap.Modal(document.getElementById('runRuleModal'));
        
        let currentRuleId = null;
        let allRules = [];
        let filteredRules = [];
        
        // Fetch summary data
        fetchSummaryData();
        
        // Setup event listeners
        document.querySelectorAll('.rule-details-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const ruleId = this.getAttribute('data-rule-id');
                showRuleDetails(ruleId);
            });
        });
        
        document.querySelectorAll('.run-rule-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const ruleId = this.getAttribute('data-rule-id');
                showRunRuleConfirmation(ruleId);
            });
        });
        
        document.getElementById('confirmRunRule').addEventListener('click', function() {
            if (currentRuleId) {
                executeRule(currentRuleId);
            }
        });
        
        document.getElementById('editRuleBtn').addEventListener('click', function() {
            if (currentRuleId) {
                window.location.href = `/wizard?edit=${currentRuleId}`;
            }
        });
        
        document.getElementById('refreshBtn').addEventListener('click', function() {
            location.reload();
        });
        
        document.getElementById('searchInput').addEventListener('input', function() {
            filterRules();
        });
        
        document.getElementById('clearSearchBtn').addEventListener('click', function() {
            document.getElementById('searchInput').value = '';
            filterRules();
        });
        
        document.getElementById('filterAllBtn').addEventListener('click', function() {
            setActiveFilterButton(this);
            filterRulesByTimeRange('all');
        });
        
        document.getElementById('filterTodayBtn').addEventListener('click', function() {
            setActiveFilterButton(this);
            filterRulesByTimeRange('today');
        });
        
        document.getElementById('filterWeekBtn').addEventListener('click', function() {
            setActiveFilterButton(this);
            filterRulesByTimeRange('week');
        });
        
        // Fetch all rules for filtering
        fetchAllRules();
        
        // Function to show rule details
        function showRuleDetails(ruleId) {
            currentRuleId = ruleId;
            
            fetch(`<%= ingress_path %>/api/rules/${ruleId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(rule => {
                    // Set modal title
                    document.getElementById('ruleDetailsModalLabel').textContent = rule.name;
                    
                    // Populate conditions
                    const conditionsContainer = document.getElementById('ruleConditions');
                    if (rule.conditions && rule.conditions.length > 0) {
                        let conditionsHtml = '';
                        rule.conditions.forEach((condition, index) => {
                            const paramName = getParameterName(condition.parameter);
                            const operatorSymbol = getOperatorSymbol(condition.operator);
                            const unit = getParameterUnit(condition.parameter);
                            
                            conditionsHtml += `<div class="mb-2">
                                <span class="badge bg-secondary">${index + 1}</span> 
                                ${index === 0 ? 'If' : 'AND'} ${paramName} ${operatorSymbol} ${condition.value}${unit}
                            </div>`;
                        });
                        conditionsContainer.innerHTML = conditionsHtml;
                    } else {
                        conditionsContainer.innerHTML = '<div class="text-muted">No conditions (always executes)</div>';
                    }
                    
                    // Populate time restrictions
                    const timeRestrictionsContainer = document.getElementById('ruleTimeRestrictions');
                    if (rule.timeRestrictions && rule.timeRestrictions.enabled) {
                        let timeHtml = '';
                        
                        // Days
                        if (rule.timeRestrictions.days && rule.timeRestrictions.days.length > 0) {
                            const days = rule.timeRestrictions.days.map(day => 
                                day.charAt(0).toUpperCase() + day.slice(1)
                            ).join(', ');
                            
                            timeHtml += `<div class="mb-2"><strong>Days:</strong> ${days}</div>`;
                        }
                        
                        // Time range
                        if (rule.timeRestrictions.startTime && rule.timeRestrictions.endTime) {
                            timeHtml += `<div class="mb-2"><strong>Time:</strong> ${rule.timeRestrictions.startTime} to ${rule.timeRestrictions.endTime}</div>`;
                        }
                        
                        // Specific dates
                        if (rule.timeRestrictions.specificDates && rule.timeRestrictions.specificDates.length > 0) {
                            timeHtml += `<div class="mb-2"><strong>Specific dates:</strong> ${rule.timeRestrictions.specificDates.join(', ')}</div>`;
                        }
                        
                        timeRestrictionsContainer.innerHTML = timeHtml;
                    } else {
                        timeRestrictionsContainer.innerHTML = '<div class="text-muted">No time restrictions</div>';
                    }
                    
                    // Populate actions
                    const actionsContainer = document.getElementById('ruleActions');
                    if (rule.actions && rule.actions.length > 0) {
                        let actionsHtml = '';
                        rule.actions.forEach((action, index) => {
                            const settingName = getSettingName(action.setting);
                            let value = action.value;
                            
                            // Add units if needed
                            if (['max_discharge_current', 'max_charge_current', 'max_grid_charge_current'].includes(action.setting)) {
                                value += ' A';
                            } else if (action.setting === 'max_sell_power') {
                                value += ' W';
                            }
                            
                            const inverter = action.inverter === 'all' ? 'All Inverters' : action.inverter.replace('_', ' ');
                            
                            actionsHtml += `<div class="mb-2">
                                <span class="badge bg-primary">${index + 1}</span> 
                                Set ${settingName} to <strong>${value}</strong> on ${inverter}
                            </div>`;
                        });
                        actionsContainer.innerHTML = actionsHtml;
                    } else {
                        actionsContainer.innerHTML = '<div class="text-muted">No actions defined</div>';
                    }
                    
                    // Populate execution history
                    const executionHistoryContainer = document.getElementById('ruleExecutionHistory');
                    if (rule.lastTriggered) {
                        const lastTriggered = new Date(rule.lastTriggered);
                        executionHistoryContainer.innerHTML = `
                            <div><strong>Last executed:</strong> ${lastTriggered.toLocaleString()}</div>
                            <div><strong>Total executions:</strong> ${rule.triggerCount || 0}</div>
                        `;
                    } else {
                        executionHistoryContainer.innerHTML = '<div class="text-muted">Never executed</div>';
                    }
                    
                    // Show the modal
                    ruleDetailsModal.show();
                })
                .catch(error => {
                    console.error('Error loading rule details:', error);
                    alert('Error loading rule details: ' + error.message);
                });
        }
        
        // Function to show run rule confirmation
        function showRunRuleConfirmation(ruleId) {
            currentRuleId = ruleId;
            
            // Find the rule name from the table
            const ruleRow = document.querySelector(`tr[data-rule-id="${ruleId}"]`);
            if (ruleRow) {
                const ruleName = ruleRow.querySelector('.rule-name').textContent;
                document.getElementById('runRuleName').textContent = ruleName;
            }
            
            // Show the modal
            runRuleModal.show();
        }
        
        // Function to execute a rule
        function executeRule(ruleId) {
            fetch(`<%= ingress_path %>/api/rules/${ruleId}/execute`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Close the modal
                runRuleModal.hide();
                
                // Show a success message
                alert(`Rule executed successfully!`);
                
                // Reload the page to refresh the data
                location.reload();
            })
            .catch(error => {
                console.error('Error executing rule:', error);
                alert('Error executing rule: ' + error.message);
                runRuleModal.hide();
            });
        }
        
        // Function to fetch summary data
        function fetchSummaryData() {
            fetch('<%= ingress_path %>/api/rules/history?limit=100')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data && data.length > 0) {
                        // Calculate summary statistics
                        const totalExecutions = data.reduce((sum, rule) => sum + (rule.triggerCount || 0), 0);
                        
                        // Find most active rule
                        let mostActiveRule = data[0];
                        for (const rule of data) {
                            if ((rule.triggerCount || 0) > (mostActiveRule.triggerCount || 0)) {
                                mostActiveRule = rule;
                            }
                        }
                        
                        // Count executions in the last 24 hours
                        const oneDayAgo = new Date();
                        oneDayAgo.setDate(oneDayAgo.getDate() - 1);
                        
                        const last24HoursCount = data.filter(rule => 
                            new Date(rule.lastTriggered) >= oneDayAgo
                        ).length;
                        
                        // Update the summary cards
                        document.getElementById('totalRulesCount').textContent = data.length;
                        document.getElementById('totalExecutionsCount').textContent = totalExecutions;
                        document.getElementById('last24HoursCount').textContent = last24HoursCount;
                        document.getElementById('mostActiveRuleName').textContent = 
                            mostActiveRule.triggerCount ? mostActiveRule.name : 'None';
                    }
                })
                .catch(error => {
                    console.error('Error fetching summary data:', error);
                    // Just leave the placeholder values if there's an error
                });
        }
        
        // Function to fetch all rules
        function fetchAllRules() {
            fetch('<%= ingress_path %>/api/rules')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    allRules = data;
                    filteredRules = [...allRules];
                })
                .catch(error => {
                    console.error('Error fetching all rules:', error);
                });
        }
        
        // Function to filter rules based on search term
        function filterRules() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            
            if (!searchTerm) {
                // If no search term, show all rows
                document.querySelectorAll('#historyTable tbody tr').forEach(row => {
                    row.style.display = '';
                });
                return;
            }
            
            // Filter rows based on search term
            document.querySelectorAll('#historyTable tbody tr').forEach(row => {
                const ruleName = row.querySelector('.rule-name').textContent.toLowerCase();
                const ruleDescription = row.querySelector('.rule-description').textContent.toLowerCase();
                
                if (ruleName.includes(searchTerm) || ruleDescription.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }
        
        // Function to filter rules based on time range
        function filterRulesByTimeRange(range) {
            // Define date thresholds
            const now = new Date();
            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            const oneWeekAgo = new Date(now);
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            // Reset search input
            document.getElementById('searchInput').value = '';
            
            // Filter rows based on time range
            document.querySelectorAll('#historyTable tbody tr').forEach(row => {
                const ruleDate = new Date(row.querySelector('.rule-date').textContent);
                
                if (range === 'all') {
                    row.style.display = '';
                } else if (range === 'today') {
                    row.style.display = ruleDate >= today ? '' : 'none';
                } else if (range === 'week') {
                    row.style.display = ruleDate >= oneWeekAgo ? '' : 'none';
                }
            });
        }
        
        // Function to set active filter button
        function setActiveFilterButton(button) {
            document.querySelectorAll('.btn-group .btn').forEach(btn => {
                btn.classList.remove('btn-primary');
                btn.classList.add('btn-outline-secondary');
            });
            
            button.classList.remove('btn-outline-secondary');
            button.classList.add('btn-primary');
        }
    
        function fetchSummaryData() {
        // Show loading indicators
        document.getElementById('totalRulesCount').textContent = 'Loading...';
        document.getElementById('totalExecutionsCount').textContent = 'Loading...';
        document.getElementById('last24HoursCount').textContent = 'Loading...';
        document.getElementById('mostActiveRuleName').textContent = 'Loading...';
        
        // Fetch the statistics data
        fetch('/api/rules/statistics')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Statistics data:', data);
                
                // Update the summary cards with the retrieved data
                document.getElementById('totalRulesCount').textContent = data.totalRules;
                document.getElementById('totalExecutionsCount').textContent = data.totalExecutions;
                document.getElementById('last24HoursCount').textContent = data.last24Hours;
                document.getElementById('mostActiveRuleName').textContent = data.mostActiveRule;
            })
            .catch(error => {
                console.error('Error fetching statistics:', error);
                
                // Show error message in the cards
                document.getElementById('totalRulesCount').textContent = 'Error';
                document.getElementById('totalExecutionsCount').textContent = 'Error';
                document.getElementById('last24HoursCount').textContent = 'Error';
                document.getElementById('mostActiveRuleName').textContent = 'Error';
            });
    }
        
        // Helper functions for formatting
        function getParameterName(parameter) {
            const names = {
                'battery_soc': 'Battery SOC',
                'pv_power': 'PV Power',
                'load': 'Load Power',
                'grid_voltage': 'Grid Voltage',
                'grid_power': 'Grid Power',
                'battery_voltage': 'Battery Voltage',
                'battery_current': 'Battery Current'
            };
            return names[parameter] || parameter;
        }
        
        function getOperatorSymbol(operator) {
            const symbols = {
                'gt': '>',
                'lt': '<',
                'eq': '=',
                'gte': '≥',
                'lte': '≤'
            };
            return symbols[operator] || operator;
        }
        
        function getParameterUnit(parameter) {
            const units = {
                'battery_soc': '%',
                'pv_power': 'W',
                'load': 'W',
                'grid_voltage': 'V',
                'grid_power': 'W',
                'battery_voltage': 'V',
                'battery_current': 'A'
            };
            return units[parameter] || '';
        }
        
        function getSettingName(setting) {
            const names = {
                'grid_charge': 'Grid Charge',
                'energy_pattern': 'Energy Pattern',
                'work_mode': 'Work Mode',
                'max_discharge_current': 'Max Discharge Current',
                'max_charge_current': 'Max Charge Current',
                'max_grid_charge_current': 'Max Grid Charge Current',
                'solar_export_when_battery_full': 'Solar Export When Battery Full',
                'max_sell_power': 'Max Sell Power',
                'remote_switch': 'Remote Switch',
                'generator_charge': 'Generator Charge'
            };
            return names[setting] || setting;
        }
    });
    
    // Add these lines to the document.addEventListener('DOMContentLoaded', function() { ... }) block in rule-history.ejs
    
    // Initialize delete rule modal
    const deleteRuleModal = new bootstrap.Modal(document.getElementById('deleteRuleModal'));
    
    // Setup delete button event listeners
    document.querySelectorAll('.delete-rule-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const ruleId = this.getAttribute('data-rule-id');
            const ruleName = this.getAttribute('data-rule-name');
            showDeleteRuleConfirmation(ruleId, ruleName);
        });
    });
    
    document.getElementById('confirmDeleteRule').addEventListener('click', function() {
        if (currentRuleId) {
            deleteRule(currentRuleId);
        }
    });
    
    // Function to show delete rule confirmation
    function showDeleteRuleConfirmation(ruleId, ruleName) {
        currentRuleId = ruleId;
        document.getElementById('deleteRuleName').textContent = ruleName || 'this rule';
        deleteRuleModal.show();
    }
    
    // Function to delete a rule
    function deleteRule(ruleId) {
        fetch(`<%= ingress_path %>/api/rules/${ruleId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Close the modal
            deleteRuleModal.hide();
            
            // Show a success message
            const alertMessage = document.createElement('div');
            alertMessage.className = 'alert alert-success alert-dismissible fade show';
            alertMessage.innerHTML = `
                <strong>Success!</strong> Rule deleted successfully.
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.querySelector('.container').prepend(alertMessage);
            
            // Remove the row from the table
            const row = document.querySelector(`tr[data-rule-id="${ruleId}"]`);
            if (row) {
                row.remove();
            }
            
            // If no more rows, show empty state
            const tableRows = document.querySelectorAll('#historyTable tbody tr');
            if (tableRows.length === 0) {
                document.querySelector('.card-body').innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="bi bi-clock-history"></i>
                        </div>
                        <div class="empty-state-text">
                            No rules have been executed yet.
                        </div>
                        <a href="/wizard" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Create Your First Rule
                        </a>
                    </div>
                `;
            }
            
            // Check if fetchSummaryData is defined before calling it
            if (typeof fetchSummaryData === 'function') {
                fetchSummaryData();
            } else {
                // If fetchSummaryData is not defined, reload the page to refresh the data
                setTimeout(() => {
                    location.reload();
                }, 1500); // Small delay so the user can see the success message
            }
        })
        .catch(error => {
            console.error('Error deleting rule:', error);
            
            // Close the modal
            deleteRuleModal.hide();
            
            // Show an error message
            const alertMessage = document.createElement('div');
            alertMessage.className = 'alert alert-danger alert-dismissible fade show';
            alertMessage.innerHTML = `
                <strong>Error!</strong> Failed to delete rule: ${error.message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.querySelector('.container').prepend(alertMessage);
        });
    }
    </script>

<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>

</body>
</html>
