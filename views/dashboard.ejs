<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1.0.0/dist/chartjs-adapter-moment.min.js"></script>
    <link rel="stylesheet" href="<%= ingress_path %>/css/main.css">
    <link rel="stylesheet" href="<%= ingress_path %>/css/dashboard.css">
</head>
<body>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"></div>
        <%- include('partials/sidebar') %>

        <div class="main-container">
            <div class="main-content">
                <div class="content-card">
                    <div id="api-key-form" class="form-container">
                        <h3>Electricity Maps API Key</h3>
                        <p>To use this dashboard, you need to provide an API key from Electricity Maps. If you don't have one, follow these steps to register:</p>
                        <ol>
                            <li>Go to the <a href="https://api-portal.electricitymaps.com/" target="_blank">Electricity Maps website</a>.</li>
                            <li>Select "API".</li>
                            <li>Enter your email address.</li>
                            <li>Submit the form, and you will receive your API token.</li>
                            <li>Copy the API key and paste it below.</li>
                        </ol>
                        <div class="input-group">
                            <input type="text" id="api-key-input" placeholder="Enter your API key">
                            <button id="save-api-key">Save API Key</button>
                        </div>
                    </div>
            
                    <div id="dashboard-content" class="hidden">
                        <div class="control-panel">
                            <select id="location-select"> 
                                <% locations.forEach(loc => { %>
                                    <option value="<%= loc.value %>" <%= selectedLocation === loc.value ? 'selected' : '' %>><%= loc.label %></option>
                                <% }) %>
                            </select>
                            <button id="update-location">Update Location</button>
                            <button id="change-api-key">Change API Key</button>
                        </div>
            
                        <div class="grid-container">
                            <div class="grid-item">
                                <h3>Grid CO2 Emissions</h3>
                                <p id="grid-emissions" class="value red">0.00 kg</p>
                            </div>
                            <div class="grid-item">
                                <h3>Solar CO2 Avoided</h3>
                                <p id="solar-avoided" class="value green">0.00 kg</p>
                            </div>
                            <div class="grid-item">
                                <h3>Battery CO2 Avoided</h3>
                                <p id="battery-avoided" class="value blue">0.00 kg</p>
                            </div>
                            <div class="grid-item">
                                <h3>Grid Status</h3>
                                <p>Voltage: <span id="grid-voltage">0.00 V</span></p>
                                <p>Status: <span id="grid-status">Unknown</span></p>
                            </div>
                        </div>
            
                        <div class="chart-container">
                            <h3>Historical CO2 Emissions</h3>
                            <div class="button-group">
                                <button id="weekly-btn">Weekly</button>
                                <button id="monthly-btn">Monthly</button>
                                <button id="quarterly-btn">Quarterly</button>
                            </div>
                            <div class="chart-wrapper">
                                <canvas id="historicalChart"></canvas>
                            </div>
                            <div id="totalEmissions" class="total-emissions">
                                <h3>Total Emissions</h3>
                                <div class="emissions-grid">
                                    <div>
                                        <h4>Grid:</h4>
                                        <p id="totalGridEmissions" class="value red">0.00 kg</p>
                                    </div>
                                    <div>
                                        <h4>Solar Avoided:</h4>
                                        <p id="totalSolarAvoided" class="value green">0.00 kg</p>
                                    </div>
                                    <div>
                                        <h4>Battery Avoided:</h4>
                                        <p id="totalBatteryAvoided" class="value blue">0.00 kg</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="<%= ingress_path %>/js/loading.js"></script>
    <script src="<%= ingress_path %>/js/sidebar.js"></script>
    <script src="<%= ingress_path %>/js/dark-mode.js"></script>

    <script>
    let historicalChart;
    let apiKey = localStorage.getItem('electricityMapsApiKey');

    function showDashboard() {
        document.getElementById('api-key-form').classList.add('hidden');
        document.getElementById('dashboard-content').classList.remove('hidden');
        fetchLocations();
        fetchDashboardData();
        fetchHistoricalData('week');
    }

    function hideDashboard() {
        document.getElementById('api-key-form').classList.remove('hidden');
        document.getElementById('dashboard-content').classList.add('hidden');
    }

    if (apiKey) {
        showDashboard();
    } else {
        hideDashboard();
    }

    document.getElementById('save-api-key').addEventListener('click', function() {
        const newApiKey = document.getElementById('api-key-input').value.trim();
        if (newApiKey) {
            localStorage.setItem('electricityMapsApiKey', newApiKey);
            apiKey = newApiKey;
            showDashboard();
        }
    });

    document.getElementById('change-api-key').addEventListener('click', function() {
        hideDashboard();
    });

    function updateDashboard(data) {
        document.getElementById('grid-emissions').textContent = `${data.gridEmissions.toFixed(2)} kg`;
        document.getElementById('solar-avoided').textContent = `${data.solarAvoided.toFixed(2)} kg`;
        document.getElementById('battery-avoided').textContent = `${data.batteryAvoided.toFixed(2)} kg`;
        document.getElementById('grid-voltage').textContent = `${data.gridVoltage.toFixed(2)} V`;
        
        const gridStatus = Math.abs(data.gridVoltage - 230) < 20 ? 'Active' : 'Inactive';
        const gridStatusElement = document.getElementById('grid-status');
        gridStatusElement.textContent = gridStatus;
        gridStatusElement.className = gridStatus === 'Active' ? 'status-active' : 'status-inactive';
    }

    function createHistoricalChart(data, totalEmissions, period) {
        if (historicalChart) {
            historicalChart.destroy();
        }

        const ctx = document.getElementById('historicalChart').getContext('2d');
        historicalChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: Object.keys(data.emissions),
                datasets: [
                    {
                        label: 'Grid CO2 Emissions',
                        data: Object.values(data.emissions).map(d => d.grid),
                        backgroundColor: 'rgba(239, 68, 68, 0.5)',
                        borderColor: 'rgba(239, 68, 68, 1)',
                        fill: true,
                        tension: 0.4,
                    },
                    {
                        label: 'Solar CO2 Avoided',
                        data: Object.values(data.emissions).map(d => d.solar),
                        backgroundColor: 'rgba(16, 185, 129, 0.5)',
                        borderColor: 'rgba(16, 185, 129, 1)',
                        fill: true,
                        tension: 0.4,
                    },
                    {
                        label: 'Battery CO2 Avoided',
                        data: Object.values(data.emissions).map(d => d.battery),
                        backgroundColor: 'rgba(59, 130, 246, 0.5)',
                        borderColor: 'rgba(59, 130, 246, 1)',
                        fill: true,
                        tension: 0.4,
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: period === 'week' ? 'day' : 'week',
                            displayFormats: {
                                day: 'MMM D',
                                week: 'MMM D',
                            }
                        },
                        title: {
                            display: true,
                            text: 'Date',
                            font: {
                                weight: 'bold'
                            }
                        },
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        stacked: true,
                        title: {
                            display: true,
                            text: 'CO2 (kg)',
                            font: {
                                weight: 'bold'
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: `${period.charAt(0).toUpperCase() + period.slice(1)}ly CO2 Emissions and Avoidance`,
                        font: {
                            size: 18,
                            weight: 'bold'
                        },
                        padding: {
                            top: 10,
                            bottom: 30
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            title: function(context) {
                                return moment(context[0].label).format('MMMM D, YYYY');
                            }
                        }
                    },
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    }
                },
                interaction: {
                    mode: 'nearest',
                    axis: 'x',
                    intersect: false
                },
                elements: {
                    point: {
                        radius: 0,
                        hitRadius: 10,
                        hoverRadius: 5
                    }
                }
            }
        });

        document.getElementById('totalGridEmissions').textContent = `${totalEmissions.grid.toFixed(2)} kg`;
        document.getElementById('totalSolarAvoided').textContent = `${totalEmissions.solar.toFixed(2)} kg`;
        document.getElementById('totalBatteryAvoided').textContent = `${totalEmissions.battery.toFixed(2)} kg`;
    }

    function fetchLocations() {
        fetch('<%= ingress_path %>/api/locations')
            .then(response => response.json())
            .then(locations => {
                const select = document.getElementById('location-select');
                select.innerHTML = '';
                locations.forEach(loc => {
                    const option = document.createElement('option');
                    option.value = loc.value;
                    option.textContent = loc.label;
                    select.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching locations:', error));
    }

    function fetchDashboardData() {
        fetch(`<%= ingress_path %>/api/dashboard-data`)
            .then(response => response.json())
            .then(data => {
                updateDashboard(data);
            })
            .catch(error => console.error('Error fetching dashboard data:', error));
    }

    function fetchHistoricalData(period) {
        fetch(`<%= ingress_path %>/api/historical-data?period=${period}`)
            .then(response => response.json())
            .then(data => {
                createHistoricalChart(data, data.totalEmissions, period);
            })
            .catch(error => console.error('Error fetching historical data:', error));
    }

    setInterval(fetchDashboardData, 30000);

    document.getElementById('update-location').addEventListener('click', function() {
        const selectedLocation = document.getElementById('location-select').value;
        fetch('<%= ingress_path %>/api/update-location', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ location: selectedLocation }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                fetchDashboardData();
                fetchHistoricalData('week');
            } else {
                console.error('Failed to update location');
            }
        })
        .catch(error => console.error('Error updating location:', error));
    });

    document.getElementById('weekly-btn').addEventListener('click', () => fetchHistoricalData('week'));
    document.getElementById('monthly-btn').addEventListener('click', () => fetchHistoricalData('month'));
    document.getElementById('quarterly-btn').addEventListener('click', () => fetchHistoricalData('quarter'));
    </script>
</body>
</html>