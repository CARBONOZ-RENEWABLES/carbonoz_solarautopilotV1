<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
body {
  font-family: 'Inter', sans-serif;
  background: var(--bg-color);
}
:root {
    --primary-color: #DEAF0B;
    --bg-color: #f5f6fa;
    --text-color: #2f3640;
    --icon-color: #636e72;
    --green: #4CAF50;
    --red: #F44336;
    --blue: #2196F3;
    --amber: #FFC107;
    --gray: #757575;
   }
   
   body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    
   }
    /* Sidebar styles */
    .sidebar {
        width: 280px;
        height: 100vh;
        background-color: white;
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        transition: width 0.3s ease;
    }
   
           .logo-container {
               padding: 1.5rem;
               border-bottom: 1px solid #e5e7eb;
               display: flex;
               align-items: center;
               gap: 0.75rem;
           }
   
           .logo-icon {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
   }
   
   .logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
   }
   
   .logo-text .highlight {
    color: var(--primary-color);
    margin-left: 10px;
   }
   
   
   nav {
    flex-grow: 1;
   }
   
   nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
   }
   nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
   }
   
   nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
   }
   nav li:hover {
    background-color: var(--bg-color);
   }
   
   nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
   }
   
   .bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
   }
   
   .toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
   }
   
   .toggle-text {
    margin-right: 10px;
   }
   
   .toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
   }
   .toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
   }
   
   .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .toggle-switch.active::before {
    transform: translateX(25px);
   }
   
   .sidebar.collapsed .logo-text,
   .sidebar.collapsed .search,
   .sidebar.collapsed nav li span,
   .sidebar.collapsed .toggle-text {
    display: none;
   }
   
   .sidebar.collapsed .logo {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li i {
    margin-right: 0;
   }
           /* Main content styles */
           .main-content {
               flex: 1;
               margin-left: 280px;
               padding: 2rem;
           }
   
           .content-header {
               margin-bottom: 2rem;
           }
   
           .content-header h2 {
               font-size: 1.875rem;
               font-weight: 700;
               color: #111827;
           }
   
           .metrics-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
               gap: 1.5rem;
               margin-bottom: 2rem;
           }
   
           .metric-card {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .metric-title {
               font-size: 0.875rem;
               font-weight: 600;
               color: #4b5563;
               margin-bottom: 0.5rem;
           }
   
           .metric-value {
               font-size: 1.5rem;
               font-weight: 700;
               margin-bottom: 0.25rem;
           }
   
           .metric-subtitle {
               font-size: 0.875rem;
               color: #6b7280;
           }
   
           .chart-container {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               margin-bottom: 2rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .chart-wrapper {
               height: 400px;
               margin-top: 1rem;
           }
   
           .period-buttons {
               display: flex;
               gap: 0.75rem;
               margin-bottom: 1rem;
           }
   
           .period-btn {
               padding: 0.5rem 1rem;
               border: none;
               background-color: #e5e7eb;
               color: #4b5563;
               border-radius: 6px;
               cursor: pointer;
               font-weight: 500;
               transition: all 0.2s;
           }
   
           .period-btn:hover {
               background-color: #d1d5db;
           }
   
           .period-btn.active {
               background-color: #DEAF0B;
               color: white;
           }
   
           /* Toggle styles */
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .slider {
               position: absolute;
               cursor: pointer;
               top: 0;
               left: 0;
               right: 0;
               bottom: 0;
               background-color: #e5e7eb;
               transition: .4s;
               border-radius: 34px;
           }
   
           .slider:before {
               position: absolute;
               content: "";
               height: 16px;
               width: 16px;
               left: 4px;
               bottom: 4px;
               background-color: white;
               transition: .4s;
               border-radius: 50%;
           }
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           /* Updated and new styles */
           .bottom-controls {
               padding: 1.5rem;
               border-top: 1px solid #e5e7eb;
           }
   
           .control-item {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 1rem;
           }
   
           .control-label {
               font-size: 0.875rem;
               color: #4b5563;
           }
   
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
   }
   
   .sidebar.collapsed {
    width: 80px;
   }
   
   .logo {
    display: flex;
    align-items: center;
    padding: 20px;
   }
   
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           .total-emissions {
               font-size: 1.25rem;
               font-weight: 600;
               margin-bottom: 1rem;
               color: #374151;
           }
   
           .summary-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 1rem;
               margin-bottom: 2rem;
           }
   
           .summary-item {
               background-color: white;
               border-radius: 8px;
               padding: 1rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .summary-label {
               font-size: 0.875rem;
               color: #6b7280;
               display: block;
               margin-bottom: 0.5rem;
           }
   
           .summary-value {
               font-size: 1.25rem;
               font-weight: 600;
           }
   
       
   
           /* Responsive styles */
           @media (max-width: 768px) {
               .sidebar {
                   width: 100%;
                   height: auto;
                   position: static;
                   border-right: none;
                   border-bottom: 1px solid #e5e7eb;
               }
   
               .main-content {
                   margin-left: 0;
               }
   
               body.collapsed-sidebar .sidebar {
                   display: none;
               }
   
               body.collapsed-sidebar .main-content {
                   margin-left: 0;
               }
   
               .metrics-grid,
               .summary-grid {
                   grid-template-columns: 1fr;
               }
   
               .period-buttons {
                   flex-wrap: wrap;
               }
   
               .period-btn {
                   flex: 1 0 calc(50% - 0.375rem);
                   margin-bottom: 0.75rem;
               }
           }

/* loading css */

.loading-overlay {
 position: fixed;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 background-color: #f8f9fa;
 display: flex;
 justify-content: center;
 align-items: center;
 z-index: 9999;
}

.loading-spinner {
 width: 50px;
 height: 50px;
 border: 5px solid #e0e0e0;
 border-top: 5px solid #3498db;
 border-radius: 50%;
 animation: spin 1s linear infinite;
}

@keyframes spin {
 0% { transform: rotate(0deg); }
 100% { transform: rotate(360deg); }
}




/* Dark mode styles */
body.dark-mode {
    background-color: rgba(24, 27, 31, 1);
 color: #f5f6fa;
}

.dark-mode .main-content{
    background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
}

.dark-mode .sidebar {
    background-color: rgba(24, 27, 31, 1);
}

.dark-mode .sidebar .logo-icon {
 color: #2f3640;
}

.dark-mode .sidebar .logo-text {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li:hover {
 background-color: #383838;
}

.dark-mode .sidebar nav li a {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li i {
 color: #dcdde1;
}

.dark-mode .toggle-sidebar,
.dark-mode .toggle-dark-mode {
 color: #f5f6fa;
}

.dark-mode .toggle-switch {
    background-color: var(--primary-color);
}

.dark-mode .toggle-switch.active {
 background-color: var(--primary-color);
}

.dark-mode header {
    background-color: rgb(17, 18, 23);
}

.dark-mode .content-card {
    background-color: rgba(24, 27, 31, 1);
 color: #fff;
}


.dark-mode .loading-overlay{
    background-color: rgba(24, 27, 31, 1);
}

/* Mobile Sidebar Improvements */
@media (max-width: 768px) {
    /* Sidebar base styles */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 280px;
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        z-index: 1000;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        box-shadow: none;
    }

    .sidebar.active {
        transform: translateX(0);
        box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
    }

    /* Improved hamburger button */
    .mobile-toggle {
        display: block;
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 1001;
        background: none;
        border: none;
        cursor: pointer;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 8px;
    }

    .mobile-toggle span {
        display: block;
        width: 24px;
        height: 2px;
        background-color: var(--text-color);
        margin: 5px auto;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    .mobile-toggle.active span:nth-child(1) {
        transform: translateY(7px) rotate(45deg);
    }

    .mobile-toggle.active span:nth-child(2) {
        opacity: 0;
    }

    .mobile-toggle.active span:nth-child(3) {
        transform: translateY(-7px) rotate(-45deg);
    }

    /* Improved nav items */
    .sidebar nav ul {
        padding: 1rem 0;
    }

    .sidebar nav li {
        padding: 0.875rem 1.5rem;
        margin: 0.25rem 1rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
    }

    .sidebar nav li a {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 1rem;
        color: var(--text-color);
    }

    .sidebar nav li i {
        font-size: 1.25rem;
        min-width: 24px;
        text-align: center;
    }

    .sidebar nav li:active {
        background-color: rgba(0, 0, 0, 0.05);
    }

    /* Improved overlay */
    .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        z-index: 999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .sidebar-overlay.active {
        display: block;
        opacity: 1;
    }

    /* Dark mode adjustments */
    .dark-mode .mobile-toggle {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .dark-mode .mobile-toggle span {
        background-color: #f5f6fa;
    }

    .dark-mode .sidebar nav li:active {
        background-color: rgba(255, 255, 255, 0.05);
    }
}

/* Ensure main content adjusts properly */
@media (max-width: 768px) {
    .main-content {
        margin-left: 0;
        padding-top: 4.5rem;
        transition: margin-left 0.3s ease;
    }

    body.sidebar-open .main-content {
        filter: blur(2px);
        pointer-events: none;
    }
}


/* Improved main content styling */
.main-content {
    flex: 1;
    margin-left: 280px;
    padding: 2rem;
    color: var(--text-color);
    transition: margin-left 0.3s ease, background-color 0.3s ease, color 0.3s ease;
}

/* Responsive container for the main content */
.main-content .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  display: flex;
  flex-wrap: nowrap !important;
  overflow-x: auto;
  white-space: nowrap;
  gap: 0.75rem;
  padding: 0.75rem;
  margin-bottom: 1.5rem;
  scrollbar-width: thin;
  -webkit-overflow-scrolling: touch;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
  height: 6px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

.main-content .nav-link {
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  padding: 0.5rem 1rem;
  color: #4b5563;
  font-weight: 500;
  border-radius: 6px;
  text-decoration: none;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.main-content .nav-link:hover {
  background-color: #e9ecef;
  color: #000;
}

.main-content .nav-link.active {
  color: #fff;
}

.main-content .nav-link i,
.main-content .nav-link svg {
  margin-right: 0.5rem;
  font-size: 1rem;
}

#editSettingModal {
    display: none; /* Initially hidden until triggered by JavaScript */
}

/* Hidden by default, shown when needed */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1050;
    width: 100%;
    height: 100%;
    overflow: hidden;
    outline: 0;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal.show {
    display: block; /* Will be shown when the modal is triggered */
}

/* For dynamic content that should be initially hidden */
#value-input-container:empty {
    display: none;
}

/* Fade transitions for smoother UX */
.fade {
    transition: opacity 0.15s linear;
}

.fade:not(.show) {
    opacity: 0;
}

.modal.fade .modal-dialog {
    transition: transform 0.3s ease-out;
    transform: translate(0, -50px);
}

.modal.show .modal-dialog {
    transform: none;
}

/* Loading state visibility */
#recent-changes-container .text-center {
    display: block; /* For loading spinner container */
}

#recent-changes-container:not(:empty) .text-center {
    display: none; /* Hide spinner when content is loaded */
}


/* Card styling */
.card {
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: none;
    margin-bottom: 1.5rem;
    overflow: hidden;
}

.card-header {
    background-color: white;
    border-bottom: 1px solid #e5e7eb;
    padding: 1.25rem 1.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.card-header h5 {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-color);
    margin: 0;
    display: flex;
    align-items: center;
}

.card-header h5 i {
    margin-right: 0.75rem;
    color: var(--primary-color);
}

.card-body {
    padding: 1.5rem;
}

/* Alert styling */
#alerts-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1060;
    max-width: 350px;
}

.alert {
    border-radius: 8px;
    border: none;
    padding: 1rem 1.25rem;
    margin-bottom: 1rem;
    font-size: 0.9375rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    position: relative;
    opacity: 0;
    transform: translateX(20px);
    animation: alertFadeIn 0.3s forwards;
}

@keyframes alertFadeIn {
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.alert.fade {
    transition: opacity 0.15s linear, transform 0.3s ease;
}

.alert.fade.show {
    opacity: 1;
    transform: translateX(0);
}

.alert-dismissible {
    padding-right: 3rem;
}

.alert-dismissible .btn-close {
    position: absolute;
    top: 0;
    right: 0;
    padding: 1.25rem 1rem;
}

.alert-info {
    background-color: rgba(33, 150, 243, 0.1);
    color: #0d6efd;
}

.alert-success {
    background-color: rgba(76, 175, 80, 0.1);
    color: var(--green);
}

.alert-warning {
    background-color: rgba(255, 193, 7, 0.1);
    color: var(--amber);
}

.alert-danger {
    background-color: rgba(244, 67, 54, 0.1);
    color: var(--red);
}

.alert i {
    margin-right: 0.5rem;
}

/* Button styling */
.btn {
    border-radius: 6px;
    padding: 0.5rem 1rem;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    border: none;
}

.btn i {
    margin-right: 0.375rem;
}

.btn-success {
    background-color: var(--green);
    color: white;
}

.btn-success:hover {
    background-color: #43a047;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.btn-successs {
    background-color: var(--primary-color);
    color: white;
}

.btn-successs:hover {
    background-color: #c9a00a;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.btn-secondaryy {
    background-color: #e0e0e0;
    color: var(--text-color);
}

.btn-secondaryy:hover {
    background-color: #d0d0d0;
}

/* Inverter and settings styling */
.inverter-heading {
    font-weight: 600;
    font-size: 1.125rem;
    color: var(--text-color);
    padding: 0.75rem 0;
    margin-top: 1rem;
    margin-bottom: 0.75rem;
    border-bottom: 2px solid var(--primary-color);
    opacity: 0;
    animation: fadeInUp 0.4s forwards;
    animation-delay: 0.2s;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.change-item {
    background-color: white;
    border-radius: 10px;
    padding: 1.25rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: all 0.2s;
    cursor: pointer;
    border: 1px solid #e5e7eb;
    position: relative;
    opacity: 0;
    animation: fadeInUp 0.4s forwards;
    animation-delay: 0.3s;
}

/* Apply different animation delays to stagger the appearance */
.change-item:nth-child(2n) {
    animation-delay: 0.4s;
}

.change-item:nth-child(3n) {
    animation-delay: 0.5s;
}

.change-item:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
    border-color: var(--primary-color);
}

.change-item::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 3px;
    background-color: var(--primary-color);
    transition: width 0.3s ease;
}

.change-item:hover::after {
    width: 100%;
}

.setting-title {
    font-weight: 600;
    font-size: 0.9375rem;
    color: var(--text-color);
}

.change-value {
    font-weight: 600;
    color: var(--green);
}

.timestamp {
    font-size: 0.8125rem;
    color: var(--gray);
}

.edit-icon {
    color: var(--blue);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    background-color: rgba(33, 150, 243, 0.1);
    transition: all 0.2s;
}

.edit-icon:hover {
    background-color: rgba(33, 150, 243, 0.2);
    transform: scale(1.1);
}

/* Modal styling */
.modal-dialog {
    max-width: 500px;
    margin: 1.75rem auto;
    position: relative;
}

.modal-content {
    border-radius: 12px;
    border: none;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    pointer-events: auto;
    background-color: white;
    background-clip: padding-box;
    outline: 0;
}

.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1040;
    width: 100vw;
    height: 100vh;
    background-color: #000;
}

.modal-backdrop.fade {
    opacity: 0;
}

.modal-backdrop.show {
    opacity: 0.5;
}

.modal-header {
    border-bottom: 1px solid #e5e7eb;
    padding: 1.25rem 1.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.modal-header .modal-title {
    font-weight: 600;
    font-size: 1.25rem;
    color: var(--text-color);
    margin: 0;
}

.btn-close {
    padding: 0.5rem;
    background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z'/%3e%3c/svg%3e") center/1em auto no-repeat;
    border: 0;
    border-radius: 0.25rem;
    opacity: 0.5;
    cursor: pointer;
}

.btn-close:hover {
    opacity: 0.75;
}

.modal-body {
    padding: 1.5rem;
    position: relative;
    flex: 1 1 auto;
}

.modal-footer {
    border-top: 1px solid #e5e7eb;
    padding: 1.25rem 1.5rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
    gap: 0.5rem;
}

.form-label {
    font-weight: 500;
    color: var(--text-color);
    margin-bottom: 0.5rem;
}

.form-control, .form-select {
    border-radius: 8px;
    border: 1px solid #dcdde1;
    padding: 0.625rem 1rem;
    font-size: 0.9375rem;
    transition: all 0.2s;
}

.form-control:focus, .form-select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.15);
}

.input-group-text {
    background-color: #f1f2f6;
    border: 1px solid #dcdde1;
    border-radius: 0 8px 8px 0;
    color: var(--text-color);
}

.form-control-plaintext {
    font-weight: 500;
    color: var(--text-color);
}

/* Spinner */
.spinner-border {
    color: var(--primary-color);
    width: 3rem;
    height: 3rem;
}

/* Dark mode styles */
.dark-mode .card {
    background-color: rgba(32, 35, 41, 1);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
}

.dark-mode .card-header {
    background-color: rgba(32, 35, 41, 1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.dark-mode .card-header h5,
.dark-mode .setting-title,
.dark-mode .form-label,
.dark-mode .form-control-plaintext,
.dark-mode .modal-title {
    color: #f5f6fa;
}

.dark-mode .alert-info {
    background-color: rgba(33, 150, 243, 0.15);
    color: #64b5f6;
}

.dark-mode .btn-secondaryy {
    background-color: #424242;
    color: #f5f6fa;
}

.dark-mode .btn-secondaryy:hover {
    background-color: #505050;
}

.dark-mode .inverter-heading {
    color: #f5f6fa;
    border-bottom: 2px solid var(--primary-color);
}

.dark-mode .change-item {
    background-color: rgba(32, 35, 41, 1);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.dark-mode .change-item:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    border-color: var(--primary-color);
}

.dark-mode .timestamp {
    color: #b0b0b0;
}

.dark-mode .modal-content {
    background-color: rgba(32, 35, 41, 1);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
}

.dark-mode .modal-header,
.dark-mode .modal-footer {
    border-color: rgba(255, 255, 255, 0.1);
}

.dark-mode .form-control,
.dark-mode .form-select {
    background-color: rgba(48, 52, 63, 1);
    border-color: rgba(255, 255, 255, 0.1);
    color: #f5f6fa;
}

.dark-mode .form-control:focus,
.dark-mode .form-select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.25);
}

.dark-mode .input-group-text {
    background-color: rgba(48, 52, 63, 1);
    border-color: rgba(255, 255, 255, 0.1);
    color: #f5f6fa;
}

/* Bootstrap utility classes for spacing and alignment */
.mb-4 {
    margin-bottom: 1.5rem !important;
}

.col-12 {
    width: 100%;
}

.col-md-6 {
    width: 100%;
}

@media (min-width: 768px) {
    .col-md-6 {
        width: 50%;
        float: left;
        padding: 0 0.75rem;
    }
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -0.75rem;
    margin-left: -0.75rem;
}

.row::after {
    content: "";
    display: table;
    clear: both;
}

.d-flex {
    display: flex !important;
}

.justify-content-between {
    justify-content: space-between !important;
}

.align-items-center {
    align-items: center !important;
}

.text-center {
    text-align: center !important;
}

.text-success {
    color: var(--green) !important;
}

.py-5 {
    padding-top: 3rem !important;
    padding-bottom: 3rem !important;
}

.mt-1 {
    margin-top: 0.25rem !important;
}

.mt-2 {
    margin-top: 0.5rem !important;
}

.mb-0 {
    margin-bottom: 0 !important;
}

.me-1 {
    margin-right: 0.25rem !important;
}

.me-2 {
    margin-right: 0.5rem !important;
}

.me-3 {
    margin-right: 1rem !important;
}

.d-inline-block {
    display: inline-block !important;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .card-header {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .card-header div {
        margin-top: 1rem;
    }
    
    .change-item {
        padding: 1rem;
    }
}

/* Grid Charge Card Styling */
.grid-charge-card {
    border-radius: 12px;
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
    transition: transform 0.2s, box-shadow 0.2s;
    overflow: hidden;
    border: none;
    margin-bottom: 1.75rem;
}

.grid-charge-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
}

.grid-charge-card .card-header {
    background: linear-gradient(to right, rgba(222, 175, 11, 0.1), rgba(222, 175, 11, 0.02));
    border-bottom: 1px solid rgba(222, 175, 11, 0.2);
    padding: 1.25rem 1.5rem;
}

.grid-charge-card .card-header h5 {
    font-size: 1.25rem;
    font-weight: 600;
    display: flex;
    align-items: center;
}

.grid-charge-card .card-header h5 i {
    color: var(--primary-color);
    margin-right: 0.75rem;
    font-size: 1.125rem;
}

/* Grid Charge Table Styling */
.grid-charge-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
}

.grid-charge-table thead th {
    background-color: rgba(222, 175, 11, 0.08);
    color: var(--text-color);
    font-weight: 600;
    border-bottom: none;
    padding: 1rem;
    position: sticky;
    top: 0;
    z-index: 10;
    text-align: left;
}

.grid-charge-table tbody td {
    padding: 0.875rem 1rem;
    vertical-align: middle;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

.grid-charge-table tbody tr {
    transition: all 0.2s ease;
}

.grid-charge-table tbody tr:hover {
    background-color: rgba(222, 175, 11, 0.05);
    transform: translateX(5px);
}

.grid-charge-table tbody tr:last-child td {
    border-bottom: none;
}

/* Status icon styling */
.status-icon {
    font-size: 1.25rem;
    margin-right: 0.5rem;
}

/* Badge styling for status */
.grid-charge-table .badge {
    padding: 0.5rem 0.75rem;
    border-radius: 20px;
    font-weight: 500;
    font-size: 0.875rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
}

.grid-charge-table tr:hover .badge {
    transform: scale(1.05);
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
}

/* Topic display styling */
.topic-display {
    display: block;
    font-size: 0.75rem;
    color: #6c757d;
    max-width: 280px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* Timestamp styling */
.timestamp {
    display: flex;
    align-items: center;
    font-size: 0.85rem;
    color: #6c757d;
}

.timestamp i {
    margin-right: 0.375rem;
    color: var(--primary-color);
}

/* Grid Charge action buttons */
.edit-grid-charge, .edit-max-current {
    background-color: rgba(222, 175, 11, 0.1);
    color: var(--text-color);
    border: none;
    transition: all 0.2s ease;
    margin-right: 0.5rem;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
}

.edit-grid-charge:hover, .edit-max-current:hover {
    background-color: var(--primary-color);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
}

/* Recent Changes Styling */
.grid-list {
    max-height: 400px;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(222, 175, 11, 0.5) rgba(0, 0, 0, 0.05);
}

.grid-list::-webkit-scrollbar {
    width: 6px;
}

.grid-list::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.05);
    border-radius: 10px;
}

.grid-list::-webkit-scrollbar-thumb {
    background-color: rgba(222, 175, 11, 0.5);
    border-radius: 10px;
}

/* Grid Charge Summary Section */
.list-group-item {
    padding: 0.75rem 1.25rem;
    background-color: transparent;
    border: 1px solid rgba(222, 175, 11, 0.2);
    margin-bottom: 0.5rem;
    border-radius: 8px !important;
    transition: all 0.2s ease;
}

.list-group-item:hover {
    background-color: rgba(222, 175, 11, 0.05);
    transform: translateX(5px);
}

.list-group-item .badge {
    font-size: 0.875rem;
    padding: 0.5rem 0.75rem;
    border-radius: 20px;
    font-weight: 500;
}

.badge.bg-success {
    background-color: var(--green) !important;
}

.badge.bg-primary {
    background-color: var(--primary-color) !important;
}

.badge.bg-info {
    background-color: var(--blue) !important;
}

/* Tab Styling */
.nav-tabs {
    border-bottom: 1px solid rgba(222, 175, 11, 0.2);
    margin-bottom: 1.5rem;
}

.nav-link {
    color: var(--text-color);
    font-weight: 500;
    padding: 0.75rem 1.25rem;
    border: none;
    border-bottom: 3px solid transparent;
    background-color: transparent;
    transition: all 0.2s ease;
    margin-right: 0.5rem;
    display: flex;
    align-items: center;
}

.nav-link i {
    margin-right: 0.5rem;
    color: var(--primary-color);
}

.nav-link:hover {
    border-bottom-color: rgba(222, 175, 11, 0.4);
    background-color: rgba(222, 175, 11, 0.05);
}

.nav-link.active {
    color: var(--primary-color);
    font-weight: 600;
    border-bottom-color: var(--primary-color);
    background-color: rgba(222, 175, 11, 0.1);
}

/* Edit Grid Charge Modal */
#editGridChargeModal .modal-content {
    border-radius: 15px;
    border: none;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
    overflow: hidden;
}

#editGridChargeModal .modal-header {
    background: linear-gradient(to right, rgba(222, 175, 11, 0.1), rgba(222, 175, 11, 0.02));
    border-bottom: 1px solid rgba(222, 175, 11, 0.2);
    padding: 1.5rem;
}

#editGridChargeModal .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-color);
}

#editGridChargeModal .modal-body {
    padding: 1.75rem;
}

#editGridChargeModal .form-label {
    font-weight: 600;
    color: var(--text-color);
    margin-bottom: 0.5rem;
}

#editGridChargeModal .form-check-input {
    width: 3rem;
    height: 1.5rem;
    margin-top: 0.25rem;
    margin-left: -2.5rem;
    background-color: #ccc;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
    background-position: left center;
    background-repeat: no-repeat;
    background-size: contain;
    border: none;
    transition: background-position .15s ease-in-out;
    cursor: pointer;
}

#editGridChargeModal .form-check-input:checked {
    background-color: var(--primary-color);
    background-position: right center;
}

#editGridChargeModal .form-check-label {
    font-weight: 500;
    margin-left: 0.5rem;
    cursor: pointer;
}

#editGridChargeModal .text-muted {
    color: #6c757d;
}

#editGridChargeModal .input-group {
    margin-bottom: 1.25rem;
}

#editGridChargeModal .input-group-text {
    background-color: rgba(222, 175, 11, 0.1);
    border: 1px solid rgba(222, 175, 11, 0.2);
    color: var(--text-color);
    font-weight: 500;
    padding: 0.75rem 1rem;
    border-radius: 8px 0 0 8px;
}

#editGridChargeModal .form-control {
    border: 1px solid rgba(222, 175, 11, 0.2);
    border-radius: 0 8px 8px 0;
    padding: 0.75rem 1rem;
    font-size: 0.95rem;
    font-weight: 500;
    transition: all 0.2s ease;
}

#editGridChargeModal .form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(222, 175, 11, 0.2);
}

#editGridChargeModal .form-text {
    font-size: 0.8125rem;
    color: #6c757d;
    margin-top: 0.375rem;
}

#editGridChargeModal .form-control-plaintext {
    font-weight: 600;
    font-size: 1.125rem;
    color: var(--green);
}

#editGridChargeModal .modal-footer {
    border-top: 1px solid rgba(222, 175, 11, 0.1);
    padding: 1.25rem 1.5rem;
}

#editGridChargeModal .btn-secondaryy {
    background-color: #f1f2f6;
    color: var(--text-color);
    border: none;
    padding: 0.625rem 1.5rem;
    font-weight: 500;
    border-radius: 8px;
    transition: all 0.2s ease;
}

#editGridChargeModal .btn-secondaryy:hover {
    background-color: #e6e8ed;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
}

#editGridChargeModal .btn-successs {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 0.625rem 1.5rem;
    font-weight: 500;
    border-radius: 8px;
    transition: all 0.2s ease;
}

#editGridChargeModal .btn-successs:hover {
    background-color: #c9a00a;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Grid Charge History Modal */
#gridChargeHistoryModal .modal-content {
    border-radius: 15px;
    border: none;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
    overflow: hidden;
}

#gridChargeHistoryModal .modal-header {
    background: linear-gradient(to right, rgba(222, 175, 11, 0.1), rgba(222, 175, 11, 0.02));
    border-bottom: 1px solid rgba(222, 175, 11, 0.2);
    padding: 1.5rem;
}

#gridChargeHistoryModal .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-color);
}

#gridChargeHistoryModal .modal-body {
    padding: 1.75rem;
}

#gridChargeHistoryModal .table-responsive {
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    max-height: 500px;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(222, 175, 11, 0.5) rgba(0, 0, 0, 0.05);
}

#gridChargeHistoryModal .table-responsive::-webkit-scrollbar {
    width: 6px;
}

#gridChargeHistoryModal .table-responsive::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.05);
    border-radius: 10px;
}

#gridChargeHistoryModal .table-responsive::-webkit-scrollbar-thumb {
    background-color: rgba(222, 175, 11, 0.5);
    border-radius: 10px;
}

#gridChargeHistoryModal .table {
    margin-bottom: 0;
}

#gridChargeHistoryModal .table thead th {
    background-color: rgba(222, 175, 11, 0.08);
    color: var(--text-color);
    font-weight: 600;
    border-bottom: none;
    padding: 1rem;
    position: sticky;
    top: 0;
    z-index: 10;
    text-align: left;
}

#gridChargeHistoryModal .table tbody td {
    padding: 0.875rem 1rem;
    vertical-align: middle;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

#gridChargeHistoryModal .table tbody tr:hover {
    background-color: rgba(222, 175, 11, 0.05);
}

#gridChargeHistoryModal .table tbody tr:last-child td {
    border-bottom: none;
}

/* Alert styling with improved design */
.alert {
    border-radius: 10px;
    padding: 1rem 1.25rem;
    margin-bottom: 1.5rem;
    border: none;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
    animation: fadeInDown 0.4s forwards;
}

@keyframes fadeInDown {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.alert::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
}

.alert-info {
    background-color: rgba(33, 150, 243, 0.1);
    color: #0c83e2;
}

.alert-info::before {
    background-color: #0c83e2;
}

.alert-info i {
    color: #0c83e2;
}

.alert-success {
    background-color: rgba(76, 175, 80, 0.1);
    color: #43a047;
}

.alert-success::before {
    background-color: #43a047;
}

.alert-success i {
    color: #43a047;
}

.alert-warning {
    background-color: rgba(255, 193, 7, 0.1);
    color: #e5ac00;
}

.alert-warning::before {
    background-color: #e5ac00;
}

.alert-warning i {
    color: #e5ac00;
}

.alert-danger {
    background-color: rgba(244, 67, 54, 0.1);
    color: #e53935;
}

.alert-danger::before {
    background-color: #e53935;
}

.alert-danger i {
    color: #e53935;
}

/* Add animation to table rows */
.grid-charge-table tbody tr {
    opacity: 0;
    animation: fadeInRight 0.4s forwards;
}

/* Add staggered animation delay to rows */
.grid-charge-table tbody tr:nth-child(1) { animation-delay: 0.1s; }
.grid-charge-table tbody tr:nth-child(2) { animation-delay: 0.2s; }
.grid-charge-table tbody tr:nth-child(3) { animation-delay: 0.3s; }
.grid-charge-table tbody tr:nth-child(4) { animation-delay: 0.4s; }
.grid-charge-table tbody tr:nth-child(5) { animation-delay: 0.5s; }
.grid-charge-table tbody tr:nth-child(6) { animation-delay: 0.6s; }
.grid-charge-table tbody tr:nth-child(7) { animation-delay: 0.7s; }
.grid-charge-table tbody tr:nth-child(8) { animation-delay: 0.8s; }
.grid-charge-table tbody tr:nth-child(9) { animation-delay: 0.9s; }
.grid-charge-table tbody tr:nth-child(10) { animation-delay: 1s; }

@keyframes fadeInRight {
    0% {
        opacity: 0;
        transform: translateX(20px);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Custom animation for the refresh button */
.btn-anim {
    position: relative;
    overflow: hidden;
}

.btn-anim:after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.5);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%);
    transform-origin: 50% 50%;
}

.btn-anim:hover:after {
    animation: ripple 1s ease-out;
}

@keyframes ripple {
    0% {
        transform: scale(0, 0);
        opacity: 0.5;
    }
    20% {
        transform: scale(25, 25);
        opacity: 0.5;
    }
    100% {
        opacity: 0;
        transform: scale(40, 40);
    }
}

/* Spinner styling */
.spinner-border {
    border-width: 0.2em;
    animation: spin 0.8s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

/* Dark mode styles */
.dark-mode .grid-charge-card {
    background-color: rgba(32, 35, 41, 1);
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);
}

.dark-mode .grid-charge-card .card-header {
    background: linear-gradient(to right, rgba(222, 175, 11, 0.15), rgba(32, 35, 41, 1));
    border-bottom: 1px solid rgba(222, 175, 11, 0.2);
}

.dark-mode .grid-charge-table thead th {
    background-color: rgba(222, 175, 11, 0.15);
    color: #f5f6fa;
}

.dark-mode .grid-charge-table tbody td {
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    color: #f5f6fa;
}

.dark-mode .grid-charge-table tbody tr:hover {
    background-color: rgba(222, 175, 11, 0.1);
}

.dark-mode .topic-display {
    color: #b0b0b0;
}

.dark-mode .timestamp {
    color: #b0b0b0;
}

.dark-mode .edit-grid-charge,
.dark-mode .edit-max-current {
    background-color: rgba(222, 175, 11, 0.2);
    color: #f5f6fa;
}

.dark-mode .list-group-item {
    border: 1px solid rgba(222, 175, 11, 0.25);
    color: #f5f6fa;
}

.dark-mode .list-group-item:hover {
    background-color: rgba(222, 175, 11, 0.1);
}

.dark-mode .nav-tabs {
    border-bottom-color: rgba(222, 175, 11, 0.3);
}

.dark-mode .nav-link {
    color: #f5f6fa;
}

.dark-mode .nav-link:hover {
    background-color: rgba(222, 175, 11, 0.15);
}

.dark-mode .nav-link.active {
    background-color: rgba(222, 175, 11, 0.2);
}

.dark-mode #editGridChargeModal .modal-content,
.dark-mode #gridChargeHistoryModal .modal-content,
.dark-mode #addChargePointModal .modal-content {
    background-color: rgba(32, 35, 41, 1);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.35);
}

.dark-mode #editGridChargeModal .modal-header,
.dark-mode #gridChargeHistoryModal .modal-header,
.dark-mode #addChargePointModal .modal-header {
    background: linear-gradient(to right, rgba(222, 175, 11, 0.15), rgba(32, 35, 41, 1));
    border-bottom: 1px solid rgba(222, 175, 11, 0.25);
}

.dark-mode #editGridChargeModal .modal-title,
.dark-mode #gridChargeHistoryModal .modal-title,
.dark-mode #addChargePointModal .modal-title,
.dark-mode #editGridChargeModal .form-label,
.dark-mode #addChargePointModal .form-label {
    color: #f5f6fa;
}

.dark-mode #editGridChargeModal .text-muted,
.dark-mode #addChargePointModal .text-muted {
    color: #b0b0b0;
}

.dark-mode #editGridChargeModal .input-group-text,
.dark-mode #addChargePointModal .input-group-text {
    background-color: rgba(222, 175, 11, 0.15);
    border: 1px solid rgba(222, 175, 11, 0.3);
    color: #f5f6fa;
}

.dark-mode #editGridChargeModal .form-control,
.dark-mode #addChargePointModal .form-control,
.dark-mode #addChargePointModal .form-select {
    background-color: rgba(48, 52, 63, 1);
    border: 1px solid rgba(222, 175, 11, 0.3);
    color: #f5f6fa;
}

.dark-mode #editGridChargeModal .form-text,
.dark-mode #addChargePointModal .form-text {
    color: #b0b0b0;
}

.dark-mode #editGridChargeModal .btn-secondaryy,
.dark-mode #gridChargeHistoryModal .btn-secondary,
.dark-mode #addChargePointModal .btn-secondary {
    background-color: rgba(255, 255, 255, 0.1);
    color: #f5f6fa;
}

.dark-mode #editGridChargeModal .btn-secondaryy:hover,
.dark-mode #gridChargeHistoryModal .btn-secondary:hover,
.dark-mode #addChargePointModal .btn-secondary:hover {
    background-color: rgba(255, 255, 255, 0.15);
}

.dark-mode #gridChargeHistoryModal .table thead th {
    background-color: rgba(222, 175, 11, 0.15);
    color: #f5f6fa;
}

.dark-mode #gridChargeHistoryModal .table tbody td {
    color: #f5f6fa;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.dark-mode #gridChargeHistoryModal .table tbody tr:hover {
    background-color: rgba(222, 175, 11, 0.1);
}

.dark-mode .alert-info {
    background-color: rgba(33, 150, 243, 0.15);
    color: #64b5f6;
}

.dark-mode .alert-success {
    background-color: rgba(76, 175, 80, 0.15);
    color: #81c784;
}

.dark-mode .alert-warning {
    background-color: rgba(255, 193, 7, 0.15);
    color: #ffd54f;
}

.dark-mode .alert-danger {
    background-color: rgba(244, 67, 54, 0.15);
    color: #e57373;
}

.dark-mode .form-check-input {
    background-color: rgba(255, 255, 255, 0.2);
}

.dark-mode .form-check-input:checked {
    background-color: var(--primary-color);
}

/* Add Charge Point Modal Styling */
#addChargePointModal .modal-content {
    border-radius: 15px;
    border: none;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
    overflow: hidden;
}

#addChargePointModal .modal-header {
    background: linear-gradient(to right, rgba(222, 175, 11, 0.1), rgba(222, 175, 11, 0.02));
    border-bottom: 1px solid rgba(222, 175, 11, 0.2);
    padding: 1.5rem;
}

#addChargePointModal .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-color);
}

#addChargePointModal .modal-body {
    padding: 1.75rem;
}

#addChargePointModal .form-label {
    font-weight: 600;
    color: var(--text-color);
    margin-bottom: 0.5rem;
}

#addChargePointModal .form-select {
    border: 1px solid rgba(222, 175, 11, 0.2);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    font-size: 0.95rem;
    transition: all 0.2s ease;
    background-color: white;
}

#addChargePointModal .form-select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(222, 175, 11, 0.2);
}

#addChargePointModal .form-control {
    border: 1px solid rgba(222, 175, 11, 0.2);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    font-size: 0.95rem;
    transition: all 0.2s ease;
}

#addChargePointModal .form-control:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(222, 175, 11, 0.2);
}

#addChargePointModal .form-check-input {
    width: 3rem;
    height: 1.5rem;
    background-color: #ccc;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
    background-position: left center;
    background-repeat: no-repeat;
    background-size: contain;
    border: none;
    transition: background-position .15s ease-in-out;
    cursor: pointer;
}

#addChargePointModal .form-check-input:checked {
    background-color: var(--primary-color);
    background-position: right center;
}

#addChargePointModal .form-check-label {
    font-weight: 500;
    cursor: pointer;
}

#addChargePointModal .modal-footer {
    border-top: 1px solid rgba(222, 175, 11, 0.1);
    padding: 1.25rem 1.5rem;
}

#addChargePointModal .btn-primary {
    background-color: var(--primary-color);
    border: none;
    color: white;
    padding: 0.625rem 1.5rem;
    font-weight: 500;
    border-radius: 8px;
}
.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  background-color: #202429;
}

.dark-mode .main-content .nav-link {
  color: #e5e7eb;
}

.dark-mode .main-content .nav-link:hover {
  background-color: #32383e;
  color: #fff;
}

.dark-mode .main-content .nav-link.active {
  color: #fff;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #2a2e35;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #4a4d53;
}

</style>
</head>
<body>
      <!-- Add hamburger menu button -->
      <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>
          <%- include('partials/sidebar') %>

          <div class="main-content">
            <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                    <a class="nav-link active text-nowrap" href="<%= ingress_path %>/learner">
                        <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                    </a>
                    <a class="nav-link text-nowrap" href="<%= ingress_path %>/grid-charge">
                        <i class="fas fa-plug me-1" style="color: #007BFF;"></i>Grid Charge
                    </a>
                <a class="nav-link  text-nowrap" href="<%= ingress_path %>/energy-pattern">
                    <i class="fas fa-battery-three-quarters me-1" style="color: #28A745;"></i>Energy Pattern
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/voltage-point">
                    <i class="fas fa-bolt me-1" style="color: #DC3545;"></i>Voltage Points
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/work-mode">
                    <i class="fas fa-cogs me-1" style="color: #FFC107;"></i>Work Mode
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/battery-charging">
                    <i class="fas fa-charging-station me-1" style="color: #17A2B8;"></i>Battery Charging
                </a>
            
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rules">
                    <i class="fas fa-tasks me-1" style="color: #6610F2;"></i>Rules
                </a>
               
            </div>
            <br>

            <div class="container">
             
                <!-- Alerts container -->
                <div id="alerts-container"></div>
                <div class="row mb-4">
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="fas fa-plug me-2"></i>Grid Charge Settings</h5>
                                <div>
                                    <button class="btn me-2" id="view-history-btn">
                                        <i class="fas fa-history me-1"></i> View History
                                    </button>
                                    <button class="btn" id="refresh-grid-charge">
                                        <i class="fas fa-sync-alt me-1"></i> Refresh
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Grid charge settings control how your system interacts with the grid. You can enable/disable grid charging, set maximum grid charge current, and configure grid charge points.
                                </div>
                                
                                <ul class="nav nav-tabs mb-3" id="gridChargeTabs" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="main-settings-tab" data-bs-toggle="tab" data-bs-target="#main-settings" type="button" role="tab" aria-controls="main-settings" aria-selected="true">
                                            <i class="fas fa-cog me-1"></i> Main Settings
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="charge-points-tab" data-bs-toggle="tab" data-bs-target="#charge-points" type="button" role="tab" aria-controls="charge-points" aria-selected="false">
                                            <i class="fas fa-list-ol me-1"></i> Charge Points
                                        </button>
                                    </li>
                                </ul>
                                
                                <div class="tab-content" id="gridChargeTabContent">
                                    <!-- Main Settings Tab -->
                                    <div class="tab-pane fade show active" id="main-settings" role="tabpanel" aria-labelledby="main-settings-tab">
                                        <div class="table-responsive">
                                            <table class="table table-hover grid-charge-table">
                                                <thead>
                                                    <tr>
                                                        <th>Inverter</th>
                                                        <th>Grid Charge Status</th>
                                                        <th>Max Current</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="grid-charge-list">
                                                    <tr>
                                                        <td colspan="4" class="text-center py-4">
                                                            <div class="spinner-border text-primary" role="status"></div>
                                                            <div class="mt-2">Loading grid charge settings...</div>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    
                                    <!-- Charge Points Tab -->
                                    <div class="tab-pane fade" id="charge-points" role="tabpanel" aria-labelledby="charge-points-tab">
                                        <div class="table-responsive">
                                            <table class="table table-hover grid-charge-table">
                                                <thead>
                                                    <tr>
                                                        <th>Charge Point & Topic</th>
                                                        <th>Value</th>
                                                        <th>Last Updated</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="charge-points-list">
                                                    <tr>
                                                        <td colspan="4" class="text-center py-4">
                                                            <div class="spinner-border text-primary" role="status"></div>
                                                            <div class="mt-2">Loading grid charge points...</div>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                        
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-lg-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Grid Charge Info</h5>
                            </div>
                            <div class="card-body" id="grid-charge-info">
                                <p>Grid charging allows your system to use power from the grid to charge your batteries. These settings help optimize when and how much grid power is used for charging.</p>
                                
                                <h6 class="mt-4">Grid Charge Summary</h6>
                                <ul class="list-group list-group-flush mb-3">
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Inverters with Grid Charge Enabled
                                        <span class="badge bg-success rounded-pill" id="enabled-grid-charge">--</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Total Inverters
                                        <span class="badge bg-primary rounded-pill" id="inverter-count">--</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Active Grid Charge Points
                                        <span class="badge bg-info rounded-pill" id="active-charge-points">--</span>
                                    </li>
                                </ul>
                                
                                <div class="alert alert-warning">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    Changes to grid charge settings take effect immediately. Use caution when modifying these values.
                                </div>
                            </div>
                        </div>
                        
                        <div class="card mt-4">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-history me-2"></i>Recent Changes</h5>
                            </div>
                            <div class="card-body">
                                <div class="grid-list" id="recent-changes">
                                    <div class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status"></div>
                                        <div class="mt-2">Loading recent changes...</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        
            <!-- Edit Grid Charge Status Modal -->
            <div class="modal fade" id="editGridChargeModal" tabindex="-1" aria-labelledby="editGridChargeModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editGridChargeModalLabel">Edit Grid Charge Status</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editGridChargeForm">
                                <input type="hidden" id="edit-inverter">
                                <input type="hidden" id="edit-setting-type">
                                
                                <div class="mb-3">
                                    <label class="form-label fw-bold" id="setting-name-display">Setting</label>
                                    <p class="text-muted small" id="setting-inverter-display">Inverter</p>
                                    <p class="text-muted small" id="setting-topic-display" style="word-break: break-all;">Topic</p>
                                </div>
                                
                                <div class="mb-3" id="toggle-container">
                                    <label class="form-label">Grid Charge Status</label>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="grid-charge-toggle">
                                        <label class="form-check-label" for="grid-charge-toggle" id="toggle-label">Enable Grid Charge</label>
                                    </div>
                                </div>
                                
                                <div class="mb-3" id="current-container">
                                    <label for="edit-current" class="form-label">Max Grid Charge Current (A)</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="edit-current" min="0" max="100" step="0.1">
                                        <span class="input-group-text">A</span>
                                    </div>
                                    <div class="form-text">Recommended range: 0A - 100A</div>
                                </div>
                                
                                <div class="mb-3" id="point-container">
                                    <label for="edit-point-value" class="form-label">Charge Point Value</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="edit-point-value" min="0" max="100" step="0.1">
                                        <span class="input-group-text" id="point-unit">V</span>
                                    </div>
                                    <div class="form-text" id="point-range-text">Recommended range: 0-100</div>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Current Value</label>
                                    <p class="form-control-plaintext" id="current-value-display">-</p>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondaryy" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn " id="save-setting-btn">Save Changes</button>
                        </div>
                    </div>
                </div>
            </div>
        
            <!-- Grid Charge History Modal -->
            <div class="modal fade" id="gridChargeHistoryModal" tabindex="-1" aria-labelledby="gridChargeHistoryModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="gridChargeHistoryModalLabel">Grid Charge Change History</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Date & Time</th>
                                            <th>Setting</th>
                                            <th>Old Value</th>
                                            <th>New Value</th>
                                        </tr>
                                    </thead>
                                    <tbody id="grid-history-list">
                                        <tr>
                                            <td colspan="5" class="text-center py-4">
                                                <div class="spinner-border text-primary" role="status"></div>
                                                <div class="mt-2">Loading history...</div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        
            <!-- Add New Charge Point Modal -->
            <div class="modal fade" id="addChargePointModal" tabindex="-1" aria-labelledby="addChargePointModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addChargePointModalLabel">Add New Charge Point</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="addChargePointForm">
                                <div class="mb-3">
                                    <label for="new-inverter" class="form-label">Inverter</label>
                                    <select class="form-select" id="new-inverter" required>
                                        <!-- Will be populated dynamically -->
                                    </select>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="new-point-number" class="form-label">Point Number</label>
                                    <input type="number" class="form-control" id="new-point-number" min="1" max="10" value="1" required>
                                    <div class="form-text">Enter a number from 1-10 for the charge point</div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="new-point-value" class="form-label">Point Value</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="new-point-value" step="0.1" required>
                                        <span class="input-group-text">V</span>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" id="save-new-point-btn">Add Charge Point</button>
                        </div>
                    </div>
                </div>
            </div>
            
        </div>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
       
      

<script>
    // Global variables
let gridChargeSettings = {};
let chargePoints = {};
let mqttTopicPrefix = 'energy'; // Default prefix, can be updated from server

// Initialize the page
$(document).ready(function() {
    // Load grid charge settings
    loadGridChargeSettings();
    
    // Load grid charge points
    loadGridChargePoints();
    
    // Load recent changes
    loadRecentChanges();
    
    // Set up event listeners
    setupEventListeners();
});

// Setup event listeners
function setupEventListeners() {
    // Refresh button
    $('#refresh-grid-charge').click(function() {
        loadGridChargeSettings();
        loadGridChargePoints();
        showAlert('info', 'Grid charge settings refreshed');
    });
    
    // Save setting button
    $('#save-setting-btn').click(function() {
        saveGridChargeSetting();
    });
    
    // View history button
    $('#view-history-btn').click(function() {
        loadGridChargeHistory();
        const historyModal = new bootstrap.Modal(document.getElementById('gridChargeHistoryModal'));
        historyModal.show();
    });
    
    // Add charge point button
    $('#add-charge-point-btn').click(function() {
        openAddChargePointModal();
    });
    
    // Save new charge point button
    $('#save-new-point-btn').click(function() {
        saveNewChargePoint();
    });
}

// Load grid charge settings from the API
function loadGridChargeSettings() {
    $.ajax({
        url: '/api/grid-charge-changes',
        method: 'GET',
        success: function(response) {
            if (!Array.isArray(response) || response.length === 0) {
                $('#grid-charge-list').html('<tr><td colspan="4" class="text-center">No grid charge settings detected</td></tr>');
                $('#enabled-grid-charge').text('0');
                $('#inverter-count').text('0');
                return;
            }
            
            // Process the settings
            gridChargeSettings = {};
            
            response.forEach(change => {
                if (!change.topic) return;
                
                // Extract inverter information
                const topicParts = change.topic.split('/');
                const inverterPart = topicParts.find(part => part.startsWith('inverter_')) || 'unknown_inverter';
                
                // Check if this is a grid_charge setting or max_grid_charge_current
                if (change.topic.includes('grid_charge') && !change.topic.includes('grid_charge_point')) {
                    // This is the main grid charge setting (enabled/disabled)
                    if (!gridChargeSettings[inverterPart]) {
                        gridChargeSettings[inverterPart] = {};
                    }
                    
                    gridChargeSettings[inverterPart].gridCharge = {
                        value: change.new_value,
                        topic: change.topic,
                        timestamp: change.timestamp || new Date().toISOString()
                    };
                } else if (change.topic.includes('max_grid_charge_current')) {
                    // This is the max grid charge current setting
                    if (!gridChargeSettings[inverterPart]) {
                        gridChargeSettings[inverterPart] = {};
                    }
                    
                    gridChargeSettings[inverterPart].maxCurrent = {
                        value: change.new_value,
                        topic: change.topic,
                        timestamp: change.timestamp || new Date().toISOString()
                    };
                }
            });
            
            // Prepare to render the settings
            const inverterCount = Object.keys(gridChargeSettings).length;
            let enabledCount = 0;
            
            // Count how many inverters have grid charge enabled
            Object.values(gridChargeSettings).forEach(inverter => {
                if (inverter.gridCharge && 
                    (inverter.gridCharge.value === 'Enabled' || 
                     inverter.gridCharge.value === 'enabled' ||
                     inverter.gridCharge.value === '1' ||
                     inverter.gridCharge.value === 'true')) {
                    enabledCount++;
                }
            });
            
            // Update summary
            $('#enabled-grid-charge').text(enabledCount);
            $('#inverter-count').text(inverterCount);
            
            // Render the list
            renderGridChargeList();
        },
        error: function(xhr, status, error) {
            console.error('Error loading grid charge settings:', status, error);
            $('#grid-charge-list').html(`<tr><td colspan="4" class="text-center">Error loading grid charge settings</td></tr>`);
            $('#enabled-grid-charge').text('0');
            $('#inverter-count').text('0');
        }
    });
}

// Load grid charge points from the API
function loadGridChargePoints() {
    $.ajax({
        url: '/api/grid-charge-changes',
        method: 'GET',
        success: function(response) {
            if (!Array.isArray(response) || response.length === 0) {
                $('#charge-points-list').html('<tr><td colspan="4" class="text-center">No grid charge points detected</td></tr>');
                $('#active-charge-points').text('0');
                return;
            }
            
            // Process the charge points
            chargePoints = {};
            const processedTopics = new Set();
            
            response.forEach(change => {
                if (!change.topic) return;
                
                // Check if this is a grid_charge_point setting
                if (change.topic.includes('grid_charge_point_')) {
                    // Extract inverter and point information
                    const topicParts = change.topic.split('/');
                    const inverterPart = topicParts.find(part => part.startsWith('inverter_')) || 'unknown_inverter';
                    
                    // Extract point number
                    const pointMatch = change.topic.match(/grid_charge_point_(\d+)/);
                    if (!pointMatch) return;
                    const pointNumber = pointMatch[1];
                    
                    // Skip if we've already processed this exact topic
                    if (processedTopics.has(change.topic)) return;
                    processedTopics.add(change.topic);
                    
                    // Determine the value - use new_value if available, fallback to other fields
                    // Keep as original format, don't convert to number
                    let value = change.new_value || change.value || change.current_value;
                    
                    // Create nested structure
                    if (!chargePoints[inverterPart]) {
                        chargePoints[inverterPart] = {};
                    }
                    
                    // Store the point details - preserve original value format
                    chargePoints[inverterPart][pointNumber] = {
                        value: value, // Store as-is without conversion
                        topic: change.topic,
                        timestamp: change.timestamp || new Date().toISOString()
                    };
                }
            });
            
            // Count active charge points
            const pointCount = Object.values(chargePoints)
                .reduce((total, inverter) => total + Object.keys(inverter).length, 0);
            
            // Update summary
            $('#active-charge-points').text(pointCount);
            
            // Render the list
            renderChargePointsList();
        },
        error: function(xhr, status, error) {
            console.error('Error loading grid charge points:', status, error);
            $('#charge-points-list').html(`<tr><td colspan="4" class="text-center">Error loading grid charge points</td></tr>`);
            $('#active-charge-points').text('0');
        }
    });
}

// Render the grid charge settings list
function renderGridChargeList() {
    let html = '';
    
    // Check if we have any settings
    if (Object.keys(gridChargeSettings).length === 0) {
        html = `
            <tr>
                <td colspan="4" class="text-center">
                    <i class="fas fa-info-circle me-2"></i>
                    No grid charge settings detected. Settings will appear here as they are discovered from MQTT.
                </td>
            </tr>
        `;
        $('#grid-charge-list').html(html);
        return;
    }
    
    // Sort inverters by ID
    const sortedInverters = Object.keys(gridChargeSettings)
        .sort((a, b) => {
            const aMatch = a.match(/inverter_(\d+)/);
            const bMatch = b.match(/inverter_(\d+)/);
            
            if (aMatch && bMatch) {
                return parseInt(aMatch[1]) - parseInt(bMatch[1]);
            }
            
            return a.localeCompare(b);
        });
    
    // Loop through all inverters
    sortedInverters.forEach(inverter => {
        const settings = gridChargeSettings[inverter];
        const inverterId = inverter;
        const displayName = inverterId !== 'unknown_inverter' ? 
            inverterId.replace('_', ' ').charAt(0).toUpperCase() + inverterId.slice(1) : 
            'Unknown Inverter';
        
        // Determine grid charge status
        let gridChargeStatus = 'Unknown';
        let statusClass = 'bg-secondary';
        let statusIcon = 'fa-question-circle';
        
        if (settings.gridCharge) {
            const value = settings.gridCharge.value;
            if (value === 'Enabled' || value === 'enabled' || value === '1' || value === 'true') {
                gridChargeStatus = 'Enabled';
                statusClass = 'bg-success';
                statusIcon = 'fa-check-circle';
            } else {
                gridChargeStatus = 'Disabled';
                statusClass = 'bg-danger';
                statusIcon = 'fa-times-circle';
            }
        }
        
        // Determine max current
        let maxCurrent = 'Not set';
        if (settings.maxCurrent) {
            maxCurrent = `${settings.maxCurrent.value} A`;
        }
        
        html += `
            <tr>
                <td>${displayName}</td>
                <td>
                    <div class="d-flex align-items-center">
                        <i class="fas ${statusIcon} status-icon me-2 text-${statusClass.replace('bg-', '')}"></i>
                        <span class="badge ${statusClass}">${gridChargeStatus}</span>
                    </div>
                </td>
                <td>${maxCurrent}</td>
                <td>
                    <div class="btn-group">
                        <button class="btn btn-sm edit-grid-charge" 
                                data-inverter="${inverterId}" 
                                data-type="gridCharge" 
                                data-topic="${settings.gridCharge?.topic || ''}">
                            <i class="fas fa-power-off me-1"></i>Toggle
                        </button>
                        <button class="btn btn-sm edit-max-current" 
                                data-inverter="${inverterId}" 
                                data-type="maxCurrent" 
                                data-topic="${settings.maxCurrent?.topic || ''}">
                            <i class="fas fa-tachometer-alt me-1"></i>Set Current
                        </button>
                    </div>
                </td>
            </tr>
        `;
    });
    
    $('#grid-charge-list').html(html);
    
    // Add event listeners to buttons
    $('.edit-grid-charge').click(function() {
        const inverter = $(this).data('inverter');
        const type = $(this).data('type');
        const topic = $(this).data('topic');
        const current = gridChargeSettings[inverter]?.gridCharge?.value || 'Disabled';
        
        openEditModal(inverter, type, current, topic);
    });
    
    $('.edit-max-current').click(function() {
        const inverter = $(this).data('inverter');
        const type = $(this).data('type');
        const topic = $(this).data('topic');
        const current = gridChargeSettings[inverter]?.maxCurrent?.value || '0';
        
        openEditModal(inverter, type, current, topic);
    });
}

// Render the charge points list
function renderChargePointsList() {
    let html = '';
    let foundPoints = false;
    
    // Loop through all inverters
    for (const inverter in chargePoints) {
        const inverterId = inverter;
        const displayName = inverterId !== 'unknown_inverter' ? 
            inverterId.replace('_', ' ').charAt(0).toUpperCase() + inverterId.slice(1) : 
            'Unknown Inverter';
        
        // Check if this inverter has any charge points
        const pointCount = Object.keys(chargePoints[inverter]).length;
        if (pointCount === 0) continue;
        
        foundPoints = true;
        
        // Add inverter header
        html += `<tr class="table-secondary"><th colspan="4">${displayName}</th></tr>`;
        
        // Sort charge points by number
        const sortedPoints = Object.keys(chargePoints[inverter])
            .sort((a, b) => parseInt(a) - parseInt(b));
        
        // Add each charge point
        sortedPoints.forEach((pointNumber) => {
            const point = chargePoints[inverter][pointNumber];
            const pointName = `Grid Charge Point ${pointNumber}`;
            const topicDisplay = point.topic || `${inverter}/grid_charge_point_${pointNumber}/set`;
            
            // Format value as true/false with appropriate badge color
            let displayValue = point.value;
            let badgeClass = 'bg-primary';
            
            if (displayValue === 'true' || displayValue === true || 
                displayValue === '1' || displayValue === 1 ||
                displayValue === 'Enabled' || displayValue === 'enabled') {
                displayValue = 'true';
                badgeClass = 'bg-success';
            } else {
                displayValue = 'false';
                badgeClass = 'bg-danger';
            }
            
            html += `
                <tr data-inverter="${inverter}" data-point="${pointNumber}" data-value="${point.value}" data-topic="${topicDisplay}">
                    <td>
                        <div class="d-flex flex-column">
                            <strong>${pointName}</strong>
                            <small class="text-muted topic-display">${topicDisplay}</small>
                        </div>
                    </td>
                    <td><span class="badge ${badgeClass}">${displayValue}</span></td>
                    <td>
                        <span class="timestamp">
                            <i class="fas fa-clock me-1"></i>
                            ${moment(point.timestamp).format('MM/DD HH:mm')}
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-sm edit-charge-point">
                            <i class="fas fa-edit me-1"></i>Edit
                        </button>
                    </td>
                </tr>
            `;
        });
    }
    
    if (!foundPoints) {
        html = `
            <tr>
                <td colspan="4" class="text-center">
                    <i class="fas fa-info-circle me-2"></i>
                    No grid charge points detected. Points will appear here as they are discovered from MQTT.
                </td>
            </tr>
        `;
    }
    
    $('#charge-points-list').html(html);
    
    // Add click handler to edit buttons
    $('.edit-charge-point').click(function() {
        const row = $(this).closest('tr');
        const inverter = row.data('inverter');
        const point = row.data('point');
        const value = row.data('value');
        const topic = row.data('topic');
        
        openEditModal(inverter, 'chargePoint', value, topic, point);
    });
}

// Load recent changes
function loadRecentChanges() {
    $.ajax({
        url: '/api/grid-charge-changes',
        method: 'GET',
        success: function(response) {
            displayRecentChanges(response);
        },
        error: function() {
            $('#recent-changes').html('<div class="alert alert-warning">Failed to load recent changes</div>');
        }
    });
}

// Display recent changes
function displayRecentChanges(changes) {
    if (!changes || changes.length === 0) {
        $('#recent-changes').html('<div class="text-center p-3">No recent changes found</div>');
        return;
    }
    
    // Sort changes by timestamp (newest first)
    changes.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    // Take only the 10 most recent changes
    const recentChanges = changes.slice(0, 10);
    
    let html = '';
    
    recentChanges.forEach(change => {
        const timestamp = moment(change.timestamp).format('MM/DD HH:mm');
        const topicParts = change.topic.split('/');
        let settingName = 'Unknown Setting';
        
        // Try to identify the type of setting
        if (change.topic.includes('grid_charge_point_')) {
            // This is a grid charge point
            const pointMatch = change.topic.match(/grid_charge_point_(\d+)/);
            if (pointMatch) {
                settingName = `Grid Charge Point ${pointMatch[1]}`;
            }
        } else if (change.topic.includes('max_grid_charge_current')) {
            settingName = 'Max Grid Charge Current';
        } else if (change.topic.includes('grid_charge')) {
            settingName = 'Grid Charge Status';
        }
        
        // Extract inverter from topic
        let inverter = 'unknown';
        for (const part of topicParts) {
            if (part.includes('inverter_')) {
                inverter = part;
                break;
            }
        }
        
        const inverterDisplay = inverter !== 'unknown' ? 
            inverter.replace('_', ' ').charAt(0).toUpperCase() + inverter.slice(1).replace('_', ' ') : 
            'Unknown';
        
        // Format the value based on the setting type
        let valueDisplay = change.new_value;
        let valueClass = 'bg-primary';
        
        if (settingName.includes('Grid Charge Point')) {
            if (valueDisplay === 'true' || valueDisplay === true || valueDisplay === '1' || 
                valueDisplay === 'Enabled' || valueDisplay === 'enabled') {
                valueDisplay = 'true';
                valueClass = 'bg-success';
            } else {
                valueDisplay = 'false';
                valueClass = 'bg-danger';
            }
        } else if (settingName === 'Grid Charge Status') {
            if (valueDisplay === 'Enabled' || valueDisplay === 'enabled' || valueDisplay === '1' || valueDisplay === 'true') {
                valueDisplay = 'Enabled';
                valueClass = 'bg-success';
            } else {
                valueDisplay = 'Disabled';
                valueClass = 'bg-danger';
            }
        } else if (settingName === 'Max Grid Charge Current') {
            valueDisplay = `${valueDisplay} A`;
        }
        
        html += `
            <div class="p-2 border-bottom">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <div class="fw-bold">${settingName}</div>
                        <div class="text-muted small">${inverterDisplay}</div>
                    </div>
                    <div class="text-end">
                        <div>${timestamp}</div>
                        <div class="badge ${valueClass}">${valueDisplay}</div>
                    </div>
                </div>
            </div>
        `;
    });
    
    $('#recent-changes').html(html);
}

// Load grid charge history
function loadGridChargeHistory() {
    $.ajax({
        url: '/api/grid-charge-changes',
        method: 'GET',
        success: function(response) {
            displayGridChargeHistory(response);
        },
        error: function() {
            $('#grid-history-list').html('<tr><td colspan="4" class="text-center">Failed to load history</td></tr>');
        }
    });
}

// Display grid charge history
function displayGridChargeHistory(changes) {
    if (!changes || changes.length === 0) {
        $('#grid-history-list').html('<tr><td colspan="4" class="text-center">No history found</td></tr>');
        return;
    }
    
    // Sort changes by timestamp (newest first)
    changes.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    let html = '';
    
    changes.forEach(change => {
        const timestamp = moment(change.timestamp).format('MM/DD/YYYY HH:mm:ss');
        
        // Identify the setting type
        let settingDisplay = change.topic;
        if (change.topic.includes('grid_charge_point_')) {
            const pointMatch = change.topic.match(/grid_charge_point_(\d+)/);
            if (pointMatch) {
                settingDisplay = `Grid Charge Point ${pointMatch[1]}`;
            }
        } else if (change.topic.includes('max_grid_charge_current')) {
            settingDisplay = 'Max Grid Charge Current';
        } else if (change.topic.includes('grid_charge')) {
            settingDisplay = 'Grid Charge Status';
        }
        
        // Format the old and new values
        let oldValue = change.old_value || '--';
        let newValue = change.new_value || '--';
        
        if (settingDisplay.includes('Grid Charge Point')) {
            // Convert to true/false for grid charge points
            if (oldValue === 'Enabled' || oldValue === 'enabled' || oldValue === '1' || oldValue === 'true') {
                oldValue = 'true';
            } else if (oldValue !== '--') {
                oldValue = 'false';
            }
            
            if (newValue === 'Enabled' || newValue === 'enabled' || newValue === '1' || newValue === 'true') {
                newValue = 'true';
            } else {
                newValue = 'false';
            }
        } else if (settingDisplay === 'Grid Charge Status') {
            // Keep Enabled/Disabled for grid charge status
            if (oldValue === 'Enabled' || oldValue === 'enabled' || oldValue === '1' || oldValue === 'true') {
                oldValue = 'Enabled';
            } else if (oldValue !== '--') {
                oldValue = 'Disabled';
            }
            
            if (newValue === 'Enabled' || newValue === 'enabled' || newValue === '1' || newValue === 'true') {
                newValue = 'Enabled';
            } else {
                newValue = 'Disabled';
            }
        } else if (settingDisplay === 'Max Grid Charge Current') {
            if (oldValue !== '--') oldValue = `${oldValue} A`;
            newValue = `${newValue} A`;
        }
        
        html += `
            <tr>
                <td>${timestamp}</td>
                <td>${settingDisplay}</td>
                <td>${oldValue}</td>
                <td>${newValue}</td>
            </tr>
        `;
    });
    
    $('#grid-history-list').html(html);
}

// Open the edit modal for a setting
function openEditModal(inverter, type, currentValue, topic, pointNumber = null) {
    // Set hidden fields
    $('#edit-inverter').val(inverter);
    $('#edit-setting-type').val(type);
    
    // Reset all containers (hide them initially)
    $('#toggle-container').hide();
    $('#current-container').hide();
    $('#point-container').hide();
    
    // Set up the modal based on the setting type
    if (type === 'gridCharge') {
        // Grid charge status (toggle)
        $('#setting-name-display').text('Grid Charge Status');
        $('#toggle-container').show();
        
        // Set the toggle state
        const isEnabled = currentValue === 'Enabled' || currentValue === 'enabled' || 
                          currentValue === '1' || currentValue === 'true';
        $('#grid-charge-toggle').prop('checked', isEnabled);
        $('#toggle-label').text(isEnabled ? 'Grid Charge Enabled' : 'Grid Charge Disabled');
        
        // Display current value
        $('#current-value-display').text(isEnabled ? 'Enabled' : 'Disabled');
        
    } else if (type === 'maxCurrent') {
        // Max grid charge current (numeric input)
        $('#setting-name-display').text('Max Grid Charge Current');
        $('#current-container').show();
        
        // Set the current value
        $('#edit-current').val(currentValue);
        
        // Display current value
        $('#current-value-display').text(`${currentValue} A`);
        
    } else if (type === 'chargePoint') {
        // Grid charge point (toggle switch for true/false)
        $('#setting-name-display').text(`Grid Charge Point ${pointNumber}`);
        $('#toggle-container').show(); // Use the toggle container for charge points too
        
        // Set the toggle state - convert any representation to boolean
        const isTrue = currentValue === 'true' || currentValue === true || 
                       currentValue === '1' || currentValue === 1 ||
                       currentValue === 'Enabled' || currentValue === 'enabled';
        $('#grid-charge-toggle').prop('checked', isTrue);
        $('#toggle-label').text(isTrue ? 'true' : 'false');
        
        // Display current value
        $('#current-value-display').text(isTrue ? 'true' : 'false');
    }
    
    // Set inverter display
    const inverterDisplay = inverter !== 'unknown_inverter' ? 
        inverter.replace('_', ' ').charAt(0).toUpperCase() + inverter.slice(1).replace('_', ' ') : 
        'Unknown Inverter';
    
    $('#setting-inverter-display').text(inverterDisplay);
    
    // Set topic display
    if (topic) {
        $('#setting-topic-display').text(topic);
    } else {
        // Construct a default topic if not provided
        if (type === 'gridCharge') {
            $('#setting-topic-display').text(`${mqttTopicPrefix}/${inverter}/grid_charge/set`);
        } else if (type === 'maxCurrent') {
            $('#setting-topic-display').text(`${mqttTopicPrefix}/${inverter}/max_grid_charge_current/set`);
        } else if (type === 'chargePoint') {
            $('#setting-topic-display').text(`${mqttTopicPrefix}/${inverter}/grid_charge_point_${pointNumber}/set`);
        }
    }
    
    // Update toggle label when toggle changes
    $('#grid-charge-toggle').change(function() {
        if (type === 'chargePoint') {
            $('#toggle-label').text($(this).is(':checked') ? 'true' : 'false');
        } else {
            $('#toggle-label').text($(this).is(':checked') ? 'Grid Charge Enabled' : 'Grid Charge Disabled');
        }
    });
    
    // Show the modal
    const editModal = new bootstrap.Modal(document.getElementById('editGridChargeModal'));
    editModal.show();
}

// Save the grid charge setting
function saveGridChargeSetting() {
    const inverter = $('#edit-inverter').val();
    const type = $('#edit-setting-type').val();
    let topic = $('#setting-topic-display').text();
    let value;
    
    // Get the value based on the setting type
    if (type === 'gridCharge') {
        value = $('#grid-charge-toggle').is(':checked') ? 'Enabled' : 'Disabled';
    } else if (type === 'maxCurrent') {
        value = $('#edit-current').val();
    } else if (type === 'chargePoint') {
        // For charge points, use true/false values
        value = $('#grid-charge-toggle').is(':checked') ? 'true' : 'false';
    }
    
    // Validate input
    if (value === undefined || value === '') {
        showAlert('warning', 'Please enter a valid value', true);
        return;
    }
    
    // Ensure the topic ends with /set
    if (!topic.endsWith('/set')) {
        topic = topic.replace('/state', '/set');
        if (!topic.endsWith('/set')) {
            topic = `${topic}/set`;
        }
    }
    
    // Send to server
    $.ajax({
        url: '/api/command',
        method: 'POST',
        data: {
            topic: topic,
            value: value
        },
        success: function(response) {
            if (response.success) {
                // Hide the modal
                const editModal = bootstrap.Modal.getInstance(document.getElementById('editGridChargeModal'));
                editModal.hide();
                
                // Show success message
                let settingDisplay = 'Setting';
                if (type === 'gridCharge') {
                    settingDisplay = 'Grid Charge Status';
                } else if (type === 'maxCurrent') {
                    settingDisplay = 'Max Grid Charge Current';
                } else if (type === 'chargePoint') {
                    settingDisplay = 'Grid Charge Point';
                }
                
                showAlert('success', `${settingDisplay} updated successfully`);
                
                // Update our local data
                if (type === 'gridCharge') {
                    if (!gridChargeSettings[inverter]) {
                        gridChargeSettings[inverter] = {};
                    }
                    
                    gridChargeSettings[inverter].gridCharge = {
                        value: value,
                        topic: topic,
                        timestamp: new Date()
                    };
                    
                    // Re-render the grid charge list
                    renderGridChargeList();
                    
                } else if (type === 'maxCurrent') {
                    if (!gridChargeSettings[inverter]) {
                        gridChargeSettings[inverter] = {};
                    }
                    
                    gridChargeSettings[inverter].maxCurrent = {
                        value: value,
                        topic: topic,
                        timestamp: new Date()
                    };
                    
                    // Re-render the grid charge list
                    renderGridChargeList();
                    
                } else if (type === 'chargePoint') {
                    const pointNumber = topic.match(/grid_charge_point_(\d+)/)[1];
                    
                    if (!chargePoints[inverter]) {
                        chargePoints[inverter] = {};
                    }
                    
                    chargePoints[inverter][pointNumber] = {
                        value: value, // Store the true/false value directly
                        topic: topic,
                        timestamp: new Date()
                    };
                    
                    // Re-render the charge points list
                    renderChargePointsList();
                }
                
                // Refresh data after a short delay
                setTimeout(() => {
                    loadGridChargeSettings();
                    loadGridChargePoints();
                    loadRecentChanges();
                }, 2000);
                
            } else {
                showAlert('danger', `Failed to update setting: ${response.message || 'Unknown error'}`, true);
            }
        },
        error: function(error) {
            showAlert('danger', `Error updating setting: ${error.responseJSON?.error || 'Server error'}`, true);
        }
    });
}

// Open the Add Charge Point modal
function openAddChargePointModal() {
    // Populate the inverter dropdown
    $('#new-inverter').empty();
    
    // Get all available inverters
    const inverters = Object.keys(gridChargeSettings);
    if (inverters.length === 0) {
        // If no inverters are found in gridChargeSettings, check chargePoints
        Object.keys(chargePoints).forEach(inverter => {
            if (!inverters.includes(inverter)) {
                inverters.push(inverter);
            }
        });
    }
    
    // Sort inverters
    inverters.sort((a, b) => {
        const aMatch = a.match(/inverter_(\d+)/);
        const bMatch = b.match(/inverter_(\d+)/);
        
        if (aMatch && bMatch) {
            return parseInt(aMatch[1]) - parseInt(bMatch[1]);
        }
        
        return a.localeCompare(b);
    });
    
    // Add inverters to dropdown
    inverters.forEach(inverter => {
        const displayName = inverter !== 'unknown_inverter' ? 
            inverter.replace('_', ' ').charAt(0).toUpperCase() + inverter.slice(1) : 
            'Unknown Inverter';
        
        $('#new-inverter').append(`<option value="${inverter}">${displayName}</option>`);
    });
    
    // Update the form to use a toggle instead of numeric input
    const pointValueHtml = `
        <div class="mb-3">
            <label class="form-label">Point Status</label>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="new-point-toggle" checked>
                <label class="form-check-label" for="new-point-toggle" id="new-point-toggle-label">true</label>
            </div>
        </div>
    `;
    
    // Replace the numeric input with toggle
    if ($('#new-point-value').closest('.mb-3').length) {
        $('#new-point-value').closest('.mb-3').replaceWith(pointValueHtml);
    } else {
        // If it doesn't exist yet, append
        $('#new-point-number').closest('.mb-3').after(pointValueHtml);
    }
    
    // Add event handler for toggle
    $('#new-point-toggle').change(function() {
        $('#new-point-toggle-label').text($(this).is(':checked') ? 'true' : 'false');
    });
    
    // Show the modal
    const addModal = new bootstrap.Modal(document.getElementById('addChargePointModal'));
    addModal.show();
}

// Save new charge point
function saveNewChargePoint() {
    const inverter = $('#new-inverter').val();
    const pointNumber = $('#new-point-number').val();
    const isTrue = $('#new-point-toggle').is(':checked');
    const value = isTrue ? 'true' : 'false'; // Use true/false values
    
    // Validate input
    if (!inverter || !pointNumber || pointNumber < 1) {
        showAlert('warning', 'Please enter valid values for all fields', true);
        return;
    }
    
    // Construct topic
    const topic = `${mqttTopicPrefix}/${inverter}/grid_charge_point_${pointNumber}/set`;
    
    // Send to server
    $.ajax({
        url: '/api/command',
        method: 'POST',
        data: {
            topic: topic,
            value: value
        },
        success: function(response) {
            if (response.success) {
                // Hide the modal
                const addModal = bootstrap.Modal.getInstance(document.getElementById('addChargePointModal'));
                addModal.hide();
                
                // Show success message
                showAlert('success', `Grid Charge Point ${pointNumber} created successfully`);
                
                // Update our local data
                if (!chargePoints[inverter]) {
                    chargePoints[inverter] = {};
                }
                
                chargePoints[inverter][pointNumber] = {
                    value: value,
                    topic: topic,
                    timestamp: new Date()
                };
                
                // Re-render the charge points list
                renderChargePointsList();
                
                // Update point count
                const pointCount = Object.values(chargePoints)
                    .reduce((total, inverter) => total + Object.keys(inverter).length, 0);
                $('#active-charge-points').text(pointCount);
                
                // Refresh data after a short delay
                setTimeout(() => {
                    loadGridChargePoints();
                    loadRecentChanges();
                }, 2000);
                
            } else {
                showAlert('danger', `Failed to create charge point: ${response.message || 'Unknown error'}`, true);
            }
        },
        error: function(error) {
            showAlert('danger', `Error creating charge point: ${error.responseJSON?.error || 'Server error'}`, true);
        }
    });
}

// Show alert
function showAlert(type, message, inModal = false) {
    const alertId = 'alert-' + Date.now();
    const alertHtml = `
        <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `;
    
    if (inModal) {
        // Insert at the top of the modal body
        $('#editGridChargeModal .modal-body').prepend(alertHtml);
    } else {
        // Insert at the top of the alerts container
        $('#alerts-container').prepend(alertHtml);
    }
    
    // Automatically remove alert after 5 seconds
    setTimeout(() => {
        $(`#${alertId}`).alert('close');
    }, 5000);
}
</script>
<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>
