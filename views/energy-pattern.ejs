<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot </title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <style>
  
        body {
          font-family: 'Inter', sans-serif;
          background: var(--bg-color);
        }
        :root {
            --primary-color: #DEAF0B;
            --bg-color: #f5f6fa;
            --text-color: #2f3640;
            --icon-color: #636e72;
            --green: #4CAF50;
            --red: #F44336;
            --blue: #2196F3;
            --amber: #FFC107;
            --gray: #757575;
           }
           
           body, html {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100%;
            
           }
            /* Sidebar styles */
            .sidebar {
                width: 280px;
                height: 100vh;
                background-color: white;
                border-right: 1px solid #e5e7eb;
                display: flex;
                flex-direction: column;
                position: fixed;
                top: 0;
                left: 0;
                z-index: 1000;
                transition: width 0.3s ease;
            }
           
                   .logo-container {
                       padding: 1.5rem;
                       border-bottom: 1px solid #e5e7eb;
                       display: flex;
                       align-items: center;
                       gap: 0.75rem;
                   }
           
                   .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-weight: bold;
            font-size: 20px;
           }
           
           .logo-text {
            margin-left: 10px;
            font-weight: bold;
            color: var(--text-color);
            font-size: 18px;
           }
           
           .logo-text .highlight {
            color: var(--primary-color);
            margin-left: 10px;
           }
           
           
           nav {
            flex-grow: 1;
           }
           
           nav ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
           }
           nav li {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            color: var(--text-color);
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 18px;
           }
           
           nav li a{
            text-decoration: none;
            color: #2f3640;
            font-weight: bold;
           }
           nav li:hover {
            background-color: var(--bg-color);
           }
           
           nav li i {
            margin-right: 15px;
            color: var(--icon-color);
            font-size: 24px;
           }
           
           .bottom-options {
            padding: 20px;
            border-top: 1px solid #dcdde1;
           }
           
           .toggle-sidebar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            font-size: 16px;
           }
           
           .toggle-text {
            margin-right: 10px;
           }
           
           .toggle-switch {
            width: 50px;
            height: 25px;
            background-color: #dcdde1;
            border-radius: 12.5px;
            position: relative;
            transition: background-color 0.3s;
           }
           .toggle-switch::before {
            content: '';
            position: absolute;
            width: 21px;
            height: 21px;
            border-radius: 50%;
            background-color: white;
            top: 2px;
            left: 2px;
            transition: transform 0.3s;
           }
           
           .toggle-switch.active {
            background-color: var(--primary-color);
           }
           
           .toggle-switch.active::before {
            transform: translateX(25px);
           }
           
           .sidebar.collapsed .logo-text,
           .sidebar.collapsed .search,
           .sidebar.collapsed nav li span,
           .sidebar.collapsed .toggle-text {
            display: none;
           }
           
           .sidebar.collapsed .logo {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li i {
            margin-right: 0;
           }
                   /* Main content styles */
                   .main-content {
                       flex: 1;
                       margin-left: 280px;
                       padding: 2rem;
                   }
           
                   .content-header {
                       margin-bottom: 2rem;
                   }
           
                   .content-header h2 {
                       font-size: 1.875rem;
                       font-weight: 700;
                       color: #111827;
                   }
           
                   .metrics-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                       gap: 1.5rem;
                       margin-bottom: 2rem;
                   }
           
                   .metric-card {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .metric-title {
                       font-size: 0.875rem;
                       font-weight: 600;
                       color: #4b5563;
                       margin-bottom: 0.5rem;
                   }
           
                   .metric-value {
                       font-size: 1.5rem;
                       font-weight: 700;
                       margin-bottom: 0.25rem;
                   }
           
                   .metric-subtitle {
                       font-size: 0.875rem;
                       color: #6b7280;
                   }
           
                   .chart-container {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       margin-bottom: 2rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .chart-wrapper {
                       height: 400px;
                       margin-top: 1rem;
                   }
           
                   .period-buttons {
                       display: flex;
                       gap: 0.75rem;
                       margin-bottom: 1rem;
                   }
           
                   .period-btn {
                       padding: 0.5rem 1rem;
                       border: none;
                       background-color: #e5e7eb;
                       color: #4b5563;
                       border-radius: 6px;
                       cursor: pointer;
                       font-weight: 500;
                       transition: all 0.2s;
                   }
           
                   .period-btn:hover {
                       background-color: #d1d5db;
                   }
           
                   .period-btn.active {
                       background-color: #DEAF0B;
                       color: white;
                   }
           
                   /* Toggle styles */
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .slider {
                       position: absolute;
                       cursor: pointer;
                       top: 0;
                       left: 0;
                       right: 0;
                       bottom: 0;
                       background-color: #e5e7eb;
                       transition: .4s;
                       border-radius: 34px;
                   }
           
                   .slider:before {
                       position: absolute;
                       content: "";
                       height: 16px;
                       width: 16px;
                       left: 4px;
                       bottom: 4px;
                       background-color: white;
                       transition: .4s;
                       border-radius: 50%;
                   }
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   /* Updated and new styles */
                   .bottom-controls {
                       padding: 1.5rem;
                       border-top: 1px solid #e5e7eb;
                   }
           
                   .control-item {
                       display: flex;
                       justify-content: space-between;
                       align-items: center;
                       margin-bottom: 1rem;
                   }
           
                   .control-label {
                       font-size: 0.875rem;
                       color: #4b5563;
                   }
           
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .sidebar {
            width: 280px;
            background-color: white;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            transition: width 0.3s ease;
            z-index: 10;
           }
           
           .sidebar.collapsed {
            width: 80px;
           }
           
           .logo {
            display: flex;
            align-items: center;
            padding: 20px;
           }
           
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   .total-emissions {
                       font-size: 1.25rem;
                       font-weight: 600;
                       margin-bottom: 1rem;
                       color: #374151;
                   }
           
                   .summary-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                       gap: 1rem;
                       margin-bottom: 2rem;
                   }
           
                   .summary-item {
                       background-color: white;
                       border-radius: 8px;
                       padding: 1rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .summary-label {
                       font-size: 0.875rem;
                       color: #6b7280;
                       display: block;
                       margin-bottom: 0.5rem;
                   }
           
                   .summary-value {
                       font-size: 1.25rem;
                       font-weight: 600;
                   }
           
               
           
                   /* Responsive styles */
                   @media (max-width: 768px) {
                       .sidebar {
                           width: 100%;
                           height: auto;
                           position: static;
                           border-right: none;
                           border-bottom: 1px solid #e5e7eb;
                       }
           
                       .main-content {
                           margin-left: 0;
                       }
           
                       body.collapsed-sidebar .sidebar {
                           display: none;
                       }
           
                       body.collapsed-sidebar .main-content {
                           margin-left: 0;
                       }
           
                       .metrics-grid,
                       .summary-grid {
                           grid-template-columns: 1fr;
                       }
           
                       .period-buttons {
                           flex-wrap: wrap;
                       }
           
                       .period-btn {
                           flex: 1 0 calc(50% - 0.375rem);
                           margin-bottom: 0.75rem;
                       }
                   }
        
        /* loading css */
        
        .loading-overlay {
         position: fixed;
         top: 0;
         left: 0;
         width: 100%;
         height: 100%;
         background-color: #f8f9fa;
         display: flex;
         justify-content: center;
         align-items: center;
         z-index: 9999;
        }
        
        .loading-spinner {
         width: 50px;
         height: 50px;
         border: 5px solid #e0e0e0;
         border-top: 5px solid #3498db;
         border-radius: 50%;
         animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
         0% { transform: rotate(0deg); }
         100% { transform: rotate(360deg); }
        }
        
        .dashboard-column {
        flex-basis: calc(33.33333% - 2px);
        margin-right: 2px;
        margin-bottom: 2px;
        }
        
        @media only screen and (max-width: 128em) {
        .dashboard-column {
         flex-basis: calc(50% - 2px);
        }
        }
        
        @media only screen and (max-width: 62em) {
        .dashboard-column {
         flex-basis: calc(100% - 2px);
        }
        }
        
        .dashboard-column .card {
        border: 0;
        }
        
        .dashboard-column .card .iframe-moving {
        display: block;
        height: 100%;
        min-height: 33em;
        position: relative;
        width: 100%;
        }
        
        @media only screen and (max-width: 46em) {
        .dashboard-column .card .iframe-moving {
         min-height: 107em;
        }
        }
        .dashboard-column .card .iframe-overview {
        display: block;
        height: 100%;
        min-height: 22em;
        width: 100%;
        }
        
        @media only screen and (max-width: 46em) {
        .dashboard-column .card .iframe-overview {
         min-height: 18em;
        }
        }
        
        .dashboard-column .card .iframe-battery-power {
        display: block;
        height: 60%;
        min-height: 18em;
        width: 100%;
        }
        
        @media only screen and (max-width: 46em) {
        .dashboard-column .card .iframe-battery-power {
         min-height: 15em;
        }
        }
        
        .dashboard-column .card .iframe-battery-soc {
        display: block;
        height: 40%;
        min-height: 14em;
        width: 100%;
        }
        
        @media only screen and (max-width: 46em) {
        .dashboard-column .card .iframe-battery-soc {
         min-height: 12em;
        }
        }
        
        /* Dark mode styles */
        body.dark-mode {
            background-color: rgba(24, 27, 31, 1);
         color: #f5f6fa;
        }
        
        .dark-mode .main-content{
            background-color: rgba(24, 27, 31, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .sidebar {
            background-color: rgba(24, 27, 31, 1);
        }
        
        .dark-mode .sidebar .logo-icon {
         color: #2f3640;
        }
        
        .dark-mode .sidebar .logo-text {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li:hover {
         background-color: #383838;
        }
        
        .dark-mode .sidebar nav li a {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li i {
         color: #dcdde1;
        }
        
        .dark-mode .toggle-sidebar,
        .dark-mode .toggle-dark-mode {
         color: #f5f6fa;
        }
        
        .dark-mode .toggle-switch {
            background-color: var(--primary-color);
        }
        
        .dark-mode .toggle-switch.active {
         background-color: var(--primary-color);
        }
        
        .dark-mode header {
            background-color: rgb(17, 18, 23);
        }
        
        .dark-mode .content-card {
            background-color: rgba(24, 27, 31, 1);
         color: #fff;
        }
        
        
        .dark-mode .loading-overlay{
            background-color: rgba(24, 27, 31, 1);
        }
        
        /* Mobile Sidebar Improvements */
        @media (max-width: 768px) {
            /* Sidebar base styles */
            .sidebar {
                position: fixed;
                top: 0;
                left: 0;
                height: 100vh;
                width: 280px;
                transform: translateX(-100%);
                transition: transform 0.3s ease-in-out;
                z-index: 1000;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
                box-shadow: none;
            }
        
            .sidebar.active {
                transform: translateX(0);
                box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
            }
        
            /* Improved hamburger button */
            .mobile-toggle {
                display: block;
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 1001;
                background: none;
                border: none;
                cursor: pointer;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background-color: white;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                padding: 8px;
            }
        
            .mobile-toggle span {
                display: block;
                width: 24px;
                height: 2px;
                background-color: var(--text-color);
                margin: 5px auto;
                transition: transform 0.3s ease, opacity 0.3s ease;
            }
        
            .mobile-toggle.active span:nth-child(1) {
                transform: translateY(7px) rotate(45deg);
            }
        
            .mobile-toggle.active span:nth-child(2) {
                opacity: 0;
            }
        
            .mobile-toggle.active span:nth-child(3) {
                transform: translateY(-7px) rotate(-45deg);
            }
        
            /* Improved nav items */
            .sidebar nav ul {
                padding: 1rem 0;
            }
        
            .sidebar nav li {
                padding: 0.875rem 1.5rem;
                margin: 0.25rem 1rem;
                border-radius: 8px;
                transition: background-color 0.2s ease;
            }
        
            .sidebar nav li a {
                display: flex;
                align-items: center;
                gap: 1rem;
                font-size: 1rem;
                color: var(--text-color);
            }
        
            .sidebar nav li i {
                font-size: 1.25rem;
                min-width: 24px;
                text-align: center;
            }
        
            .sidebar nav li:active {
                background-color: rgba(0, 0, 0, 0.05);
            }
        
            /* Improved overlay */
            .sidebar-overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(0, 0, 0, 0.4);
                backdrop-filter: blur(2px);
                z-index: 999;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
        
            .sidebar-overlay.active {
                display: block;
                opacity: 1;
            }
        
            /* Dark mode adjustments */
            .dark-mode .mobile-toggle {
                background-color: rgba(255, 255, 255, 0.1);
            }
        
            .dark-mode .mobile-toggle span {
                background-color: #f5f6fa;
            }
        
            .dark-mode .sidebar nav li:active {
                background-color: rgba(255, 255, 255, 0.05);
            }
        }
        
        /* Ensure main content adjusts properly */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding-top: 4.5rem;
                transition: margin-left 0.3s ease;
            }
        
            body.sidebar-open .main-content {
                filter: blur(2px);
                pointer-events: none;
            }
        }
        
        
          /* Main content styling */
        .main-content {
          flex: 1;
          margin-left: 280px;
          padding: 2rem;
          color: var(--text-color);
          transition: margin-left 0.3s ease;
        }
        
        .main-content .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0;
        }
        
        .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
          display: flex;
          flex-wrap: nowrap !important;
          overflow-x: auto;
          white-space: nowrap;
          gap: 0.75rem;
          padding: 0.75rem;
          margin-bottom: 1.5rem;
          scrollbar-width: thin;
          -webkit-overflow-scrolling: touch;
          background-color: #f8f9fa;
          border-radius: 8px;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        }
        
        .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
          height: 6px;
        }
        
        .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
          background: #f1f1f1;
          border-radius: 4px;
        }
        
        .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
          background: #c1c1c1;
          border-radius: 4px;
        }
        
        .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb:hover {
          background: #a8a8a8;
        }
        
        .main-content .nav-link {
          display: inline-flex;
          align-items: center;
          white-space: nowrap;
          padding: 0.5rem 1rem;
          color: #4b5563;
          font-weight: 500;
          border-radius: 6px;
          text-decoration: none;
          transition: all 0.2s ease;
          flex-shrink: 0;
        }
        
        .main-content .nav-link:hover {
          background-color: #e9ecef;
          color: #000;
        }
        
        .main-content .nav-link.active {
          color: #fff;
        }
        
        .main-content .nav-link i,
        .main-content .nav-link svg {
          margin-right: 0.5rem;
          font-size: 1rem;
        }
        
        /* Card styling */
        .card {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            border: none;
            margin-bottom: 1.5rem;
            overflow: hidden;
        }
        
        .card-header {
            background-color: white;
            border-bottom: 1px solid #e5e7eb;
            padding: 1.25rem 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .card-header h5 {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text-color);
            margin: 0;
            display: flex;
            align-items: center;
        }
        
        .card-header h5 i {
            margin-right: 0.75rem;
            color: var(--primary-color);
        }
        
        .card-body {
            padding: 1.5rem;
        }
        
        /* Alert styling */
        .alert {
            border-radius: 8px;
            border: none;
            padding: 1rem 1.25rem;
            margin-bottom: 1.5rem;
            font-size: 0.9375rem;
        }
        
        .alert-info {
            background-color: rgba(33, 150, 243, 0.1);
            color: #0d6efd;
        }
        
        .alert-success {
            background-color: rgba(76, 175, 80, 0.1);
            color: var(--green);
        }
        
        .alert-warning {
            background-color: rgba(255, 193, 7, 0.1);
            color: var(--amber);
        }
        
        .alert-danger {
            background-color: rgba(244, 67, 54, 0.1);
            color: var(--red);
        }
        
        .alert i {
            margin-right: 0.5rem;
        }
        
        /* Button styling */
        .btn {
            border-radius: 6px;
            padding: 0.5rem 1rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            border: none;
        }
        
        .btn i {
            margin-right: 0.375rem;
        }
        
        .btn-success {
            background-color: var(--green);
            color: white;
        }
        
        .btn-success:hover {
            background-color: #43a047;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .btn-successs {
            background-color: var(--primary-color);
            color: white;
        }
        
        .btn-successs:hover {
            background-color: #c9a00a;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .btn-secondaryy {
            background-color: #e0e0e0;
            color: var(--text-color);
        }
        
        .btn-secondaryy:hover {
            background-color: #d0d0d0;
        }
        
        /* Inverter and settings styling */
        .inverter-heading {
            font-weight: 600;
            font-size: 1.125rem;
            color: var(--text-color);
            padding: 0.75rem 0;
            margin-top: 1rem;
            margin-bottom: 0.75rem;
            border-bottom: 2px solid var(--primary-color);
        }
        
        .change-item {
            background-color: white;
            border-radius: 10px;
            padding: 1.25rem;
            margin-bottom: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            transition: all 0.2s;
            cursor: pointer;
            border: 1px solid #e5e7eb;
        }
        
        .change-item:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
            border-color: var(--primary-color);
        }
        
        .setting-title {
            font-weight: 600;
            font-size: 0.9375rem;
            color: var(--text-color);
        }
        
        .change-value {
            font-weight: 600;
            color: var(--green);
        }
        
        .timestamp {
            font-size: 0.8125rem;
            color: var(--gray);
        }
        
        .edit-icon {
            color: var(--blue);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            background-color: rgba(33, 150, 243, 0.1);
            transition: all 0.2s;
        }
        
        .edit-icon:hover {
            background-color: rgba(33, 150, 243, 0.2);
            transform: scale(1.1);
        }
        
        /* Modal styling */
        .modal-content {
            border-radius: 12px;
            border: none;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        
        .modal-header {
            border-bottom: 1px solid #e5e7eb;
            padding: 1.25rem 1.5rem;
        }
        
        .modal-header .modal-title {
            font-weight: 600;
            font-size: 1.25rem;
            color: var(--text-color);
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .modal-footer {
            border-top: 1px solid #e5e7eb;
            padding: 1.25rem 1.5rem;
        }
        
        .form-label {
            font-weight: 500;
            color: var(--text-color);
            margin-bottom: 0.5rem;
        }
        
        .form-control, .form-select {
            border-radius: 8px;
            border: 1px solid #dcdde1;
            padding: 0.625rem 1rem;
            font-size: 0.9375rem;
            transition: all 0.2s;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.15);
        }
        
        .input-group-text {
            background-color: #f1f2f6;
            border: 1px solid #dcdde1;
            border-radius: 0 8px 8px 0;
            color: var(--text-color);
        }
        
        .form-control-plaintext {
            font-weight: 500;
            color: var(--text-color);
        }
        
        /* Spinner */
        .spinner-border {
            color: var(--primary-color);
            width: 3rem;
            height: 3rem;
        }
        
        /* Dark mode styles */
        .dark-mode .card {
            background-color: rgba(32, 35, 41, 1);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }
        
        .dark-mode .card-header {
            background-color: rgba(32, 35, 41, 1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .dark-mode .card-header h5,
        .dark-mode .setting-title,
        .dark-mode .form-label,
        .dark-mode .form-control-plaintext,
        .dark-mode .modal-title {
            color: #f5f6fa;
        }
        
        .dark-mode .alert-info {
            background-color: rgba(33, 150, 243, 0.15);
            color: #64b5f6;
        }
        
        .dark-mode .btn-secondaryy {
            background-color: #424242;
            color: #f5f6fa;
        }
        
        .dark-mode .btn-secondaryy:hover {
            background-color: #505050;
        }
        
        .dark-mode .inverter-heading {
            color: #f5f6fa;
            border-bottom: 2px solid var(--primary-color);
        }
        
        .dark-mode .change-item {
            background-color: rgba(32, 35, 41, 1);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .dark-mode .change-item:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            border-color: var(--primary-color);
        }
        
        .dark-mode .timestamp {
            color: #b0b0b0;
        }
        
        .dark-mode .modal-content {
            background-color: rgba(32, 35, 41, 1);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        }
        
        .dark-mode .modal-header,
        .dark-mode .modal-footer {
            border-color: rgba(255, 255, 255, 0.1);
        }
        
        .dark-mode .form-control,
        .dark-mode .form-select {
            background-color: rgba(48, 52, 63, 1);
            border-color: rgba(255, 255, 255, 0.1);
            color: #f5f6fa;
        }
        
        .dark-mode .form-control:focus,
        .dark-mode .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.25);
        }
        
        .dark-mode .input-group-text {
            background-color: rgba(48, 52, 63, 1);
            border-color: rgba(255, 255, 255, 0.1);
            color: #f5f6fa;
        }
        
        /* Bootstrap utility classes for spacing and alignment */
        .mb-4 {
            margin-bottom: 1.5rem !important;
        }
        
        .col-12 {
            width: 100%;
        }
        
        .col-md-6 {
            width: 100%;
        }
        
        @media (min-width: 768px) {
            .col-md-6 {
                width: 50%;
                float: left;
                padding: 0 0.75rem;
            }
        }
        
        .row {
            display: flex;
            flex-wrap: wrap;
            margin-right: -0.75rem;
            margin-left: -0.75rem;
        }
        
        .row::after {
            content: "";
            display: table;
            clear: both;
        }
        
        .d-flex {
            display: flex !important;
        }
        
        .justify-content-between {
            justify-content: space-between !important;
        }
        
        .align-items-center {
            align-items: center !important;
        }
        
        .text-center {
            text-align: center !important;
        }
        
        .text-success {
            color: var(--green) !important;
        }
        
        .py-5 {
            padding-top: 3rem !important;
            padding-bottom: 3rem !important;
        }
        
        .mt-1 {
            margin-top: 0.25rem !important;
        }
        
        .mt-2 {
            margin-top: 0.5rem !important;
        }
        
        .mb-0 {
            margin-bottom: 0 !important;
        }
        
        .me-1 {
            margin-right: 0.25rem !important;
        }
        
        .me-2 {
            margin-right: 0.5rem !important;
        }
        
        .me-3 {
            margin-right: 1rem !important;
        }
        
        .d-inline-block {
            display: inline-block !important;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .card-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .card-header div {
                margin-top: 1rem;
            }
            
            .change-item {
                padding: 1rem;
            }
        }
        /* Hidden Elements - Initially Hidden States */
        #editSettingModal {
            display: none; /* Initially hidden until triggered by JavaScript */
        }
        
        /* Hidden by default, shown when needed */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1050;
            width: 100%;
            height: 100%;
            overflow: hidden;
            outline: 0;
            background-color: rgba(0, 0, 0, 0.5);
        }
        
        .modal.show {
            display: block; /* Will be shown when the modal is triggered */
        }
        
        /* For dynamic content that should be initially hidden */
        #value-input-container:empty {
            display: none;
        }
        
        /* Fade transitions for smoother UX */
        .fade {
            transition: opacity 0.15s linear;
        }
        
        .fade:not(.show) {
            opacity: 0;
        }
        
        .modal.fade .modal-dialog {
            transition: transform 0.3s ease-out;
            transform: translate(0, -50px);
        }
        
        .modal.show .modal-dialog {
            transform: none;
        }
        
        /* Loading state visibility */
        #recent-changes-container .text-center {
            display: block; /* For loading spinner container */
        }
        
        #recent-changes-container:not(:empty) .text-center {
            display: none; /* Hide spinner when content is loaded */
        }
        
        
        /* Card styling */
        .card {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            border: none;
            margin-bottom: 1.5rem;
            overflow: hidden;
        }
        
        .card-header {
            background-color: white;
            border-bottom: 1px solid #e5e7eb;
            padding: 1.25rem 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .card-header h5 {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text-color);
            margin: 0;
            display: flex;
            align-items: center;
        }
        
        .card-header h5 i {
            margin-right: 0.75rem;
            color: var(--primary-color);
        }
        
        .card-body {
            padding: 1.5rem;
        }
        
        /* Alert styling */
        #alerts-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1060;
            max-width: 350px;
        }
        
        .alert {
            border-radius: 8px;
            border: none;
            padding: 1rem 1.25rem;
            margin-bottom: 1rem;
            font-size: 0.9375rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            position: relative;
            opacity: 0;
            transform: translateX(20px);
            animation: alertFadeIn 0.3s forwards;
        }
        
        @keyframes alertFadeIn {
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        .alert.fade {
            transition: opacity 0.15s linear, transform 0.3s ease;
        }
        
        .alert.fade.show {
            opacity: 1;
            transform: translateX(0);
        }
        
        .alert-dismissible {
            padding-right: 3rem;
        }
        
        .alert-dismissible .btn-close {
            position: absolute;
            top: 0;
            right: 0;
            padding: 1.25rem 1rem;
        }
        
        .alert-info {
            background-color: rgba(33, 150, 243, 0.1);
            color: #0d6efd;
        }
        
        .alert-success {
            background-color: rgba(76, 175, 80, 0.1);
            color: var(--green);
        }
        
        .alert-warning {
            background-color: rgba(255, 193, 7, 0.1);
            color: var(--amber);
        }
        
        .alert-danger {
            background-color: rgba(244, 67, 54, 0.1);
            color: var(--red);
        }
        
        .alert i {
            margin-right: 0.5rem;
        }
        
        /* Button styling */
        .btn {
            border-radius: 6px;
            padding: 0.5rem 1rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            border: none;
        }
        
        .btn i {
            margin-right: 0.375rem;
        }
        
        .btn-success {
            background-color: var(--green);
            color: white;
        }
        
        .btn-success:hover {
            background-color: #43a047;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .btn-successs {
            background-color: var(--primary-color);
            color: white;
        }
        
        .btn-successs:hover {
            background-color: #c9a00a;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .btn-secondaryy {
            background-color: #e0e0e0;
            color: var(--text-color);
        }
        
        .btn-secondaryy:hover {
            background-color: #d0d0d0;
        }
        
        /* Inverter and settings styling */
        .inverter-heading {
            font-weight: 600;
            font-size: 1.125rem;
            color: var(--text-color);
            padding: 0.75rem 0;
            margin-top: 1rem;
            margin-bottom: 0.75rem;
            border-bottom: 2px solid var(--primary-color);
            opacity: 0;
            animation: fadeInUp 0.4s forwards;
            animation-delay: 0.2s;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .change-item {
            background-color: white;
            border-radius: 10px;
            padding: 1.25rem;
            margin-bottom: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            transition: all 0.2s;
            cursor: pointer;
            border: 1px solid #e5e7eb;
            position: relative;
            opacity: 0;
            animation: fadeInUp 0.4s forwards;
            animation-delay: 0.3s;
        }
        
        /* Apply different animation delays to stagger the appearance */
        .change-item:nth-child(2n) {
            animation-delay: 0.4s;
        }
        
        .change-item:nth-child(3n) {
            animation-delay: 0.5s;
        }
        
        .change-item:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
            border-color: var(--primary-color);
        }
        
        .change-item::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 0;
            height: 3px;
            background-color: var(--primary-color);
            transition: width 0.3s ease;
        }
        
        .change-item:hover::after {
            width: 100%;
        }
        
        .setting-title {
            font-weight: 600;
            font-size: 0.9375rem;
            color: var(--text-color);
        }
        
        .change-value {
            font-weight: 600;
            color: var(--green);
        }
        
        .timestamp {
            font-size: 0.8125rem;
            color: var(--gray);
        }
        
        .edit-icon {
            color: var(--blue);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            background-color: rgba(33, 150, 243, 0.1);
            transition: all 0.2s;
        }
        
        .edit-icon:hover {
            background-color: rgba(33, 150, 243, 0.2);
            transform: scale(1.1);
        }
        
        /* Modal styling */
        .modal-dialog {
            max-width: 500px;
            margin: 1.75rem auto;
            position: relative;
        }
        
        .modal-content {
            border-radius: 12px;
            border: none;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            position: relative;
            display: flex;
            flex-direction: column;
            width: 100%;
            pointer-events: auto;
            background-color: white;
            background-clip: padding-box;
            outline: 0;
        }
        
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1040;
            width: 100vw;
            height: 100vh;
            background-color: #000;
        }
        
        .modal-backdrop.fade {
            opacity: 0;
        }
        
        .modal-backdrop.show {
            opacity: 0.5;
        }
        
        .modal-header {
            border-bottom: 1px solid #e5e7eb;
            padding: 1.25rem 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .modal-header .modal-title {
            font-weight: 600;
            font-size: 1.25rem;
            color: var(--text-color);
            margin: 0;
        }
        
        .btn-close {
            padding: 0.5rem;
            background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z'/%3e%3c/svg%3e") center/1em auto no-repeat;
            border: 0;
            border-radius: 0.25rem;
            opacity: 0.5;
            cursor: pointer;
        }
        
        .btn-close:hover {
            opacity: 0.75;
        }
        
        .modal-body {
            padding: 1.5rem;
            position: relative;
            flex: 1 1 auto;
        }
        
        .modal-footer {
            border-top: 1px solid #e5e7eb;
            padding: 1.25rem 1.5rem;
            display: flex;
            flex-wrap: wrap;
            justify-content: flex-end;
            gap: 0.5rem;
        }
        
        .form-label {
            font-weight: 500;
            color: var(--text-color);
            margin-bottom: 0.5rem;
        }
        
        .form-control, .form-select {
            border-radius: 8px;
            border: 1px solid #dcdde1;
            padding: 0.625rem 1rem;
            font-size: 0.9375rem;
            transition: all 0.2s;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.15);
        }
        
        .input-group-text {
            background-color: #f1f2f6;
            border: 1px solid #dcdde1;
            border-radius: 0 8px 8px 0;
            color: var(--text-color);
        }
        
        .form-control-plaintext {
            font-weight: 500;
            color: var(--text-color);
        }
        
        /* Spinner */
        .spinner-border {
            color: var(--primary-color);
            width: 3rem;
            height: 3rem;
        }
        
        /* Dark mode styles */
        .dark-mode .card {
            background-color: rgba(32, 35, 41, 1);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }
        
        .dark-mode .card-header {
            background-color: rgba(32, 35, 41, 1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .dark-mode .card-header h5,
        .dark-mode .setting-title,
        .dark-mode .form-label,
        .dark-mode .form-control-plaintext,
        .dark-mode .modal-title {
            color: #f5f6fa;
        }
        
        .dark-mode .alert-info {
            background-color: rgba(33, 150, 243, 0.15);
            color: #64b5f6;
        }
        
        .dark-mode .btn-secondaryy {
            background-color: #424242;
            color: #f5f6fa;
        }
        
        .dark-mode .btn-secondaryy:hover {
            background-color: #505050;
        }
        
        .dark-mode .inverter-heading {
            color: #f5f6fa;
            border-bottom: 2px solid var(--primary-color);
        }
        
        .dark-mode .change-item {
            background-color: rgba(32, 35, 41, 1);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .dark-mode .change-item:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            border-color: var(--primary-color);
        }
        
        .dark-mode .timestamp {
            color: #b0b0b0;
        }
        
        .dark-mode .modal-content {
            background-color: rgba(32, 35, 41, 1);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        }
        
        .dark-mode .modal-header,
        .dark-mode .modal-footer {
            border-color: rgba(255, 255, 255, 0.1);
        }
        
        .dark-mode .form-control,
        .dark-mode .form-select {
            background-color: rgba(48, 52, 63, 1);
            border-color: rgba(255, 255, 255, 0.1);
            color: #f5f6fa;
        }
        
        .dark-mode .form-control:focus,
        .dark-mode .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.25);
        }
        
        .dark-mode .input-group-text {
            background-color: rgba(48, 52, 63, 1);
            border-color: rgba(255, 255, 255, 0.1);
            color: #f5f6fa;
        }
        
        /* Bootstrap utility classes for spacing and alignment */
        .mb-4 {
            margin-bottom: 1.5rem !important;
        }
        
        .col-12 {
            width: 100%;
        }
        
        .col-md-6 {
            width: 100%;
        }
        
        @media (min-width: 768px) {
            .col-md-6 {
                width: 50%;
                float: left;
                padding: 0 0.75rem;
            }
        }
        
        .row {
            display: flex;
            flex-wrap: wrap;
            margin-right: -0.75rem;
            margin-left: -0.75rem;
        }
        
        .row::after {
            content: "";
            display: table;
            clear: both;
        }
        
        .d-flex {
            display: flex !important;
        }
        
        .justify-content-between {
            justify-content: space-between !important;
        }
        
        .align-items-center {
            align-items: center !important;
        }
        
        .text-center {
            text-align: center !important;
        }
        
        .text-success {
            color: var(--green) !important;
        }
        
        .py-5 {
            padding-top: 3rem !important;
            padding-bottom: 3rem !important;
        }
        
        .mt-1 {
            margin-top: 0.25rem !important;
        }
        
        .mt-2 {
            margin-top: 0.5rem !important;
        }
        
        .mb-0 {
            margin-bottom: 0 !important;
        }
        
        .me-1 {
            margin-right: 0.25rem !important;
        }
        
        .me-2 {
            margin-right: 0.5rem !important;
        }
        
        .me-3 {
            margin-right: 1rem !important;
        }
        
        .d-inline-block {
            display: inline-block !important;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .card-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .card-header div {
                margin-top: 1rem;
            }
            
            .change-item {
                padding: 1rem;
            }
        }
        .dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
          background-color: #202429;
        }
        
        .dark-mode .main-content .nav-link {
          color: #e5e7eb;
        }
        
        .dark-mode .main-content .nav-link:hover {
          background-color: #32383e;
          color: #fff;
        }
        
        .dark-mode .main-content .nav-link.active {
          color: #fff;
        }
        
        .dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
          background: #2a2e35;
        }
        
        .dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
          background: #4a4d53;
        }
        
        /* RESPONSIVE BREAKPOINTS */
        
        /* Extra small devices (phones, less than 576px) */
        @media (max-width: 575.98px) {
          /* Main container adjustments */
          .main-content {
            padding: 1rem;
            margin-left: 0;
          }
          
          .main-content .container {
            padding: 0;
          }
          
          /* Navigation improvements */
          .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
            padding: 0.5rem;
            margin-bottom: 1rem;
            padding-left: 3.5rem;
          }
          
          .main-content .nav-link {
            padding: 0.4rem 0.75rem;
            font-size: 0.875rem;
          }
          
          /* Card refinements */
          .card {
            margin-bottom: 1rem;
            border-radius: 8px;
          }
          
          .card-header {
            padding: 0.875rem 1rem;
            flex-direction: column;
            align-items: flex-start;
          }
          
          .card-header h5 {
            font-size: 1rem;
            margin-bottom: 0.5rem;
          }
          
          .card-header div {
            width: 100%;
            margin-top: 0.5rem;
          }
          
          .card-header .btn {
            width: 100%;
            justify-content: center;
          }
          
          .card-body {
            padding: 1rem;
          }
          
          /* Settings items */
          .inverter-heading {
            font-size: 1rem;
            margin-top: 0.75rem;
            margin-bottom: 0.5rem;
          }
          
          .change-item {
            padding: 1rem;
            margin-bottom: 0.75rem;
          }
          
          .change-item .d-flex {
            flex-direction: column;
            align-items: flex-start !important;
          }
          
          .change-item .d-flex > div:last-child {
            margin-top: 0.75rem;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
          }
          
          /* Alert positioning */
          #alerts-container {
            top: 10px;
            right: 10px;
            left: 10px;
            max-width: none;
          }
          
          /* Form elements */
          .form-control, .form-select {
            font-size: 16px; /* Prevents zoom on iOS */
            padding: 0.5rem 0.75rem;
          }
          
          /* Modal adjustments */
          .modal-dialog {
            margin: 0.5rem;
          }
          
          .modal-content {
            border-radius: 8px;
          }
          
          .modal-header {
            padding: 1rem;
          }
          
          .modal-body {
            padding: 1rem;
          }
          
          .modal-footer {
            padding: 1rem;
            flex-direction: column;
          }
          
          .modal-footer .btn {
            width: 100%;
            margin: 0.25rem 0;
          }
          
          /* Button sizing */
          .btn {
            padding: 0.4rem 0.75rem;
            font-size: 0.875rem;
          }
        }
        
        /* Small devices (landscape phones, 576px and up) */
        @media (min-width: 576px) and (max-width: 767.98px) {
          .main-content {
            padding: 1.5rem;
            margin-left: 0;
          }
          
          .card-header {
            padding: 1rem 1.25rem;
            flex-wrap: wrap;
          }
          
          .card-header div {
            margin-top: 0.75rem;
            width: 100%;
          }
          
          .card-body {
            padding: 1.25rem;
          }
          
          .change-item .d-flex {
            flex-wrap: wrap;
          }
          
          /* Modal refinements */
          .modal-footer {
            flex-direction: row;
          }
        }
        
        /* Medium devices (tablets, 768px and up) */
        @media (min-width: 768px) and (max-width: 991.98px) {
          .main-content {
            margin-left: 80px; /* For collapsed sidebar */
            padding: 1.75rem;
          }
          
          body.sidebar-open .main-content {
            margin-left: 280px;
          }
          
          .col-md-6 {
            width: 50%;
          }
          
          .change-item .d-flex {
            flex-wrap: wrap;
          }
        }
        
        /* Large devices (desktops, 992px and up) */
        @media (min-width: 992px) {
          .main-content {
            margin-left: 280px;
            padding: 2rem;
          }
          
          .sidebar.collapsed + .main-content {
            margin-left: 80px;
          }
          
          .col-lg-4 {
            width: 33.333333%;
          }
          
          .col-md-6 {
            width: 50%;
          }
        }
        
        /* Mobile sidebar interaction */
        @media (max-width: 767.98px) {
          /* Properly handle sidebar open state */
          body.sidebar-open .main-content {
            filter: blur(1px);
            pointer-events: none;
          }
          
          /* Mobile toggle button positioning */
          #mobileToggle {
            z-index: 1100;
            transition: left 0.3s ease;
          }
          
          body.sidebar-open #mobileToggle {
            left: calc(280px + 0.5rem);
          }
          
          /* Sidebar overlay */
          .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(2px);
            z-index: 999;
            opacity: 0;
            transition: opacity 0.3s ease;
          }
          
          .sidebar-overlay.active {
            display: block;
            opacity: 1;
          }
        }
        
        /* Consistent navigation across all device sizes */
        .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
          display: flex;
          flex-wrap: nowrap !important;
          overflow-x: auto;
          justify-content: flex-start !important;
          -webkit-overflow-scrolling: touch;
        }
        
        .main-content .nav-link {
          flex-shrink: 0;
        }
         </style>
    <script>
        // Initialize the MQTT topic prefix from the server-provided value
        window.mqttTopicPrefix = "{{mqtt_topic_prefix}}";
    </script>
</head>
<body>
    <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"> </div>
        <%- include('partials/sidebar') %>
          
        <div class="main-content">
            <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                <a class="nav-link  text-nowrap" href="<%= ingress_path %>/learner">
                    <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/grid-charge">
                    <i class="fas fa-plug me-1" style="color: #007BFF;"></i>Grid Charge
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/energy-pattern">
                    <i class="fas fa-battery-three-quarters me-1" style="color: #28A745;"></i>Energy Pattern
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/voltage-point">
                    <i class="fas fa-bolt me-1" style="color: #DC3545;"></i>Voltage Points
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/work-mode">
                    <i class="fas fa-cogs me-1" style="color: #FFC107;"></i>Work Mode
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/battery-charging">
                    <i class="fas fa-charging-station me-1" style="color: #17A2B8;"></i>Battery Charging
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rules">
                    <i class="fas fa-tasks me-1" style="color: #6610F2;"></i>Rules
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/wizard">
                    <i class="fas fa-magic me-1" style="color: #20c997;"></i>Rule Wizard
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rule-history">
                    <i class="fas fa-history me-1" style="color: #6f42c1;"></i>Rule History
                </a>
            </div>
            <br>

            <div class="container">
                <!-- Alerts container -->
                <div id="alerts-container"></div>
        
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="fas fa-battery-three-quarters me-2"></i>Energy Pattern Management</h5>
                                <div>
                                    <button class="btn" id="refresh-energy-patterns">
                                        <i class="fas fa-sync-alt me-1"></i> Refresh
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Energy pattern determines the priority order for power sources. Click on any pattern to modify its value.
                                </div>
                                
                                <!-- Current Energy Pattern Status -->
                                <div class="mb-4">
                                    <h6 class="mb-3">Current Energy Flow Priority</h6>
                                    <div id="current-energy-pattern" class="row">
                                        <!-- Will be dynamically populated based on actual number of inverters -->
                                        <div class="col-12">
                                            <div class="pattern-card p-3 rounded border">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <span>Loading current patterns...</span>
                                                    <i class="fas fa-circle-notch fa-spin"></i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Recent changes will be loaded here -->
                                <div id="recent-changes-container">
                                    <p class="text-center py-5">
                                        <span class="spinner-border text-primary" role="status"></span>
                                        <br>
                                        <span class="mt-2 d-inline-block">Loading recent changes...</span>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        
            <!-- Edit Energy Pattern Modal -->
            <div class="modal fade" id="editPatternModal" tabindex="-1" aria-labelledby="editPatternModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editPatternModalLabel">Change Energy Pattern</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editPatternForm">
                                <input type="hidden" id="edit-inverter">
                                
                                <div class="mb-3">
                                    <label class="form-label fw-bold" id="pattern-inverter-display">Inverter</label>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="pattern-select" class="form-label">Energy Pattern</label>
                                    <select class="form-select" id="pattern-select">
                                        <option value="Battery first">Battery first</option>
                                        <option value="Load first">Load first</option>
                                    </select>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Current Pattern</label>
                                    <p class="form-control-plaintext" id="current-pattern-display">-</p>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondaryy" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-successs" id="save-pattern-btn">Save Changes</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        $(document).ready(function() {
            // Log the MQTT topic prefix for debugging
            console.log("Using MQTT topic prefix:", window.mqttTopicPrefix);
            
            // Load data when page is ready
            loadCurrentEnergyPatterns();
            loadRecentChanges();
            
            // Set up event listeners
            setupEventListeners();
            
            // Initialize the edit modal
            initializeEditModal();
        });
        
        // Setup event listeners
        function setupEventListeners() {
            // Refresh button
            $('#refresh-energy-patterns').click(function() {
                loadCurrentEnergyPatterns();
                loadRecentChanges();
                showAlert('info', 'Energy pattern data refreshed');
            });
            
            // Save pattern button
            $('#save-pattern-btn').click(function() {
                saveEnergyPattern();
            });
        }
        
        // Load current energy patterns for all inverters
        function loadCurrentEnergyPatterns() {
            $.ajax({
                url: '<%= ingress_path %>/api/current-settings',
                method: 'GET',
                success: function(response) {
                    if (response.success) {
                        displayCurrentPatterns(response.currentSettings);
                    } else {
                        $('#current-energy-pattern').html('<div class="alert alert-warning">Unable to load current energy patterns</div>');
                    }
                },
                error: function() {
                    $('#current-energy-pattern').html('<div class="alert alert-warning">Error loading current energy patterns</div>');
                }
            });
        }
        
        // Display current energy patterns
        function displayCurrentPatterns(settings) {
            const container = $('#current-energy-pattern');
            container.empty();
            
            // Extract inverter count - adjust for potentially detecting 0 inverters
            const inverterCount = settings.inverterCount || 1;
            
            // Check for pattern data (directly from recent changes if needed)
            $.ajax({
                url: '<%= ingress_path %>/api/energy-pattern-changes',
                method: 'GET',
                success: function(recentChanges) {
                    // Create a mapping of the most recent patterns
                    const latestPatterns = {};
                    let actualInverterCount = 0;
                    
                    // Process recent changes to find latest pattern per inverter and count distinct inverters
                    if (recentChanges && recentChanges.length > 0) {
                        const distinctInverters = new Set();
                        
                        recentChanges.forEach(change => {
                            // Extract inverter from topic
                            const topicParts = change.topic.split('/');
                            let inverter = null;
                            
                            // Find the inverter_X part
                            for (const part of topicParts) {
                                if (part.startsWith('inverter_')) {
                                    inverter = part;
                                    distinctInverters.add(inverter);
                                    break;
                                }
                            }
                            
                            if (inverter && change.new_value) {
                                // Only keep most recent change per inverter
                                if (!latestPatterns[inverter] || 
                                    new Date(change.timestamp) > new Date(latestPatterns[inverter].timestamp)) {
                                    latestPatterns[inverter] = {
                                        pattern: change.new_value,
                                        timestamp: change.timestamp
                                    };
                                }
                            }
                        });
                        
                        // Update actual inverter count based on distinct inverters found
                        actualInverterCount = distinctInverters.size;
                    }
                    
                    // If we have patterns from settings, use those first and also count inverters
                    if (settings && settings.energy_pattern) {
                        const distinctInverters = new Set();
                        
                        for (const topic in settings.energy_pattern) {
                            // Check for inverter patterns in the topic
                            const topicParts = topic.split('/');
                            let inverter = null;
                            
                            // Find the inverter_X part
                            for (const part of topicParts) {
                                if (part.startsWith('inverter_')) {
                                    inverter = part;
                                    distinctInverters.add(inverter);
                                    break;
                                }
                            }
                            
                            if (inverter && topic.includes('energy_pattern')) {
                                // Add or update pattern from settings
                                latestPatterns[inverter] = {
                                    pattern: settings.energy_pattern[topic],
                                    timestamp: new Date()
                                };
                            }
                        }
                        
                        // Update actual inverter count if we found more from settings
                        actualInverterCount = Math.max(actualInverterCount, distinctInverters.size);
                    }
                    
                    // If no actual inverters found, fall back to inverterCount from settings
                    if (actualInverterCount === 0) {
                        actualInverterCount = inverterCount;
                    }
                    
                    // Now display the patterns we found
                    let hasPatternData = Object.keys(latestPatterns).length > 0;
                    
                    if (hasPatternData) {
                        // Get all inverter keys and sort them naturally
                        const inverters = Object.keys(latestPatterns).sort((a, b) => {
                            const aNum = parseInt(a.replace('inverter_', ''));
                            const bNum = parseInt(b.replace('inverter_', ''));
                            return aNum - bNum;
                        });
                        
                        // Add a card for each inverter we have data for
                        inverters.forEach(inverter => {
                            const inverterId = parseInt(inverter.replace('inverter_', ''));
                            const currentPattern = latestPatterns[inverter].pattern;
                            const patternIcon = getPatternIcon(currentPattern);
                            const patternClass = getPatternClass(currentPattern);
                            
                            // Use full width if only one inverter, otherwise split into columns
                            const columnClass = actualInverterCount === 1 ? 'col-12' : 'col-md-6';
                            
                            container.append(`
                                <div class="${columnClass} mb-3">
                                    <div class="pattern-card p-3 rounded border ${patternClass}" 
                                         data-inverter="${inverter}" 
                                         data-pattern="${currentPattern}"
                                         style="cursor: pointer;">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h6 class="mb-0">Inverter ${inverterId}</h6>
                                                <span class="mt-2 d-block">
                                                    ${patternIcon} ${currentPattern}
                                                </span>
                                            </div>
                                            <i class="fas fa-edit"></i>
                                        </div>
                                    </div>
                                </div>
                            `);
                        });
                    } else {
                        // As a last resort, create cards with "Unknown" status
                        for (let i = 1; i <= actualInverterCount; i++) {
                            const inverter = `inverter_${i}`;
                            
                            // Use full width if only one inverter, otherwise split into columns
                            const columnClass = actualInverterCount === 1 ? 'col-12' : 'col-md-6';
                            
                            container.append(`
                                <div class="${columnClass} mb-3">
                                    <div class="pattern-card p-3 rounded border border-secondary" 
                                         data-inverter="${inverter}" 
                                         data-pattern="Unknown"
                                         style="cursor: pointer;">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h6 class="mb-0">Inverter ${i}</h6>
                                                <span class="mt-2 d-block">
                                                    <i class="fas fa-question-circle text-secondary"></i> Set Energy Pattern
                                                </span>
                                            </div>
                                            <i class="fas fa-edit"></i>
                                        </div>
                                    </div>
                                </div>
                            `);
                        }
                    }
                    
                    // Add click event to pattern cards
                    $('.pattern-card').click(function() {
                        const inverter = $(this).data('inverter');
                        const pattern = $(this).data('pattern');
                        openEditModal(inverter, pattern);
                    });
                },
                error: function() {
                    // Default to creating cards based on inverter count
                    // Use full width if only one inverter
                    const columnClass = inverterCount === 1 ? 'col-12' : 'col-md-6';
                    
                    for (let i = 1; i <= inverterCount; i++) {
                        const inverter = `inverter_${i}`;
                        container.append(`
                            <div class="${columnClass} mb-3">
                                <div class="pattern-card p-3 rounded border border-secondary" 
                                     data-inverter="${inverter}" 
                                     data-pattern="Unknown"
                                     style="cursor: pointer;">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="mb-0">Inverter ${i}</h6>
                                            <span class="mt-2 d-block">
                                                <i class="fas fa-question-circle text-secondary"></i> Set Energy Pattern
                                            </span>
                                        </div>
                                        <i class="fas fa-edit"></i>
                                    </div>
                                </div>
                            </div>
                        `);
                    }
                    
                    // Add click event to pattern cards
                    $('.pattern-card').click(function() {
                        const inverter = $(this).data('inverter');
                        const pattern = $(this).data('pattern');
                        openEditModal(inverter, pattern);
                    });
                }
            });
        }
        
        // Get appropriate icon for pattern
        function getPatternIcon(pattern) {
            switch(pattern.toLowerCase()) {
                case 'battery first':
                    return '<i class="fas fa-battery-full text-success"></i>';
                case 'grid first':
                    return '<i class="fas fa-plug text-primary"></i>';
                case 'solar first':
                    return '<i class="fas fa-sun text-warning"></i>';
                case 'load first':
                    return '<i class="fas fa-bolt text-danger"></i>';
                default:
                    return '<i class="fas fa-question-circle text-secondary"></i>';
            }
        }
        
        // Get appropriate class for pattern card
        function getPatternClass(pattern) {
            switch(pattern.toLowerCase()) {
                case 'battery first':
                    return 'border-success';
                case 'grid first':
                    return 'border-primary';
                case 'solar first':
                    return 'border-warning';
                case 'load first':
                    return 'border-danger';
                default:
                    return 'border-secondary';
            }
        }
        
        // Load recent energy pattern changes
        function loadRecentChanges() {
            $.ajax({
                url: '<%= ingress_path %>/api/energy-pattern-changes',
                method: 'GET',
                success: function(response) {
                    displayRecentChanges(response);
                },
                error: function() {
                    $('#recent-changes-container').html('<div class="alert alert-warning">Unable to load recent changes</div>');
                }
            });
        }
        
        // Display recent energy pattern changes
        function displayRecentChanges(changes) {
            const container = $('#recent-changes-container');
            
            if (!changes || changes.length === 0) {
                container.html('<div class="alert alert-warning">No recent energy pattern changes recorded</div>');
                return;
            }
            
            let html = '<h6 class="mb-3">Recent Pattern Changes</h6>';
            
            // Group changes by inverter
            const inverterChanges = {};
            
            changes.forEach(change => {
                // Extract inverter from topic (e.g., "inverter_1/energy_pattern/state")
                const topicParts = change.topic.split('/');
                let inverter = "unknown";
                
                // Find the inverter_X part in the topic
                for (const part of topicParts) {
                    if (part.startsWith('inverter_')) {
                        inverter = part;
                        break;
                    }
                }
                
                // Initialize array for this inverter if it doesn't exist
                if (!inverterChanges[inverter]) {
                    inverterChanges[inverter] = [];
                }
                
                // Add change to appropriate inverter array
                inverterChanges[inverter].push(change);
            });
            
            // Count how many distinct inverters we have
            const distinctInverterCount = Object.keys(inverterChanges).length;
            
            // Get all inverter keys and sort them naturally
            const inverters = Object.keys(inverterChanges).sort((a, b) => {
                const aNum = parseInt(a.replace('inverter_', ''));
                const bNum = parseInt(b.replace('inverter_', ''));
                return aNum - bNum;
            });
            
            for (const inverter of inverters) {
                // Format inverter name for display
                const displayName = inverter.replace('_', ' ').charAt(0).toUpperCase() + inverter.slice(1).replace('_', ' ');
                
                html += `<div class="inverter-heading">${displayName}</div>`;
                
                // Get changes for this inverter and sort by timestamp (newest first)
                const inverterData = inverterChanges[inverter]
                    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                
                // Display up to 5 most recent changes per inverter
                inverterData.slice(0, 5).forEach(change => {
                    const timestamp = moment(change.timestamp).format('MM/DD HH:mm');
                    const oldValue = change.old_value || 'Not set';
                    const newValue = change.new_value || 'Not set';
                    
                    // Get battery SOC at time of change if available
                    let batteryInfo = '';
                    if (change.system_state && change.system_state.battery_soc !== null) {
                        batteryInfo = `<span class="badge rounded-pill bg-info">Battery: ${change.system_state.battery_soc}%</span> `;
                    }
                    
                    // Adjust column width based on number of inverters
                    const columnClass = distinctInverterCount === 1 ? 'change-item w-100' : 'change-item';
                    
                    html += `
                        <div class="${columnClass}">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="setting-title">Energy Pattern Change</div>
                                    <div class="mt-1">
                                        <span class="text-muted">${oldValue}</span>
                                        <i class="fas fa-arrow-right mx-2"></i>
                                        <span class="change-value text-success">${newValue}</span>
                                    </div>
                                    <div class="mt-2">${batteryInfo}</div>
                                </div>
                                <div class="d-flex align-items-center">
                                    <span class="timestamp">${timestamp}</span>
                                </div>
                            </div>
                        </div>
                    `;
                });
            }
            
            container.html(html);
        }
        
        // Initialize the edit modal
        function initializeEditModal() {
            // This sets up the modal but doesn't open it yet
            const editModal = new bootstrap.Modal(document.getElementById('editPatternModal'));
        }
        
        // Open the edit modal for a specific inverter
        function openEditModal(inverter, currentPattern) {
            // Set hidden fields and display values
            $('#edit-inverter').val(inverter);
            
            // Set display labels
            $('#pattern-inverter-display').text(inverter.replace('_', ' ').charAt(0).toUpperCase() + inverter.slice(1).replace('_', ' '));
            $('#current-pattern-display').text(currentPattern);
            
            // Set the current pattern in the select dropdown
            $('#pattern-select').val(currentPattern);
            
            // Show the modal
            const editModal = new bootstrap.Modal(document.getElementById('editPatternModal'));
            editModal.show();
        }
        
        // Save energy pattern with dynamic MQTT topic prefix
        function saveEnergyPattern() {
            const inverter = $('#edit-inverter').val();
            const pattern = $('#pattern-select').val();
            
            // Use the dynamically configured MQTT topic prefix with fallback
            const mqttTopicPrefix = window.mqttTopicPrefix || 'energy';
            
            // Send to the server
            $.ajax({
                url: '<%= ingress_path %>/api/command',
                method: 'POST',
                data: {
                    topic: `${mqttTopicPrefix}/${inverter}/energy_pattern/set`,
                    value: pattern
                },
                success: function(response) {
                    if (response.success) {
                        // Hide the modal
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('editPatternModal'));
                        editModal.hide();
                        
                        showAlert('success', `Energy pattern updated to "${pattern}"`);
                        
                        // Refresh the data after a short delay
                        setTimeout(() => {
                            loadCurrentEnergyPatterns();
                            loadRecentChanges();
                        }, 1000);
                    } else {
                        showAlert('danger', `Failed to update energy pattern: ${response.message || 'Unknown error'}`, true);
                    }
                },
                error: function(error) {
                    showAlert('danger', `Error updating energy pattern: ${error.responseJSON?.error || 'Server error'}`, true);
                }
            });
        }
        
        // Show alert message
        function showAlert(type, message, inModal = false) {
            const alertId = 'alert-' + Date.now();
            const alertHtml = `
                <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            if (inModal) {
                // Insert at the top of the modal body
                $('.modal-body').prepend(alertHtml);
            } else {
                // Insert at the top of the page
                $('#alerts-container').append(alertHtml);
            }
            
            // Auto-dismiss after 3 seconds
            setTimeout(() => {
                $(`#${alertId}`).alert('close');
            }, 3000);
        }
    
    </script>
      <script src="<%= ingress_path %>/js/loading.js"></script>
      <script src="<%= ingress_path %>/js/dark-mode.js"></script>
      <script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>
