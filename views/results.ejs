<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
   body {
       font-family: 'Inter', sans-serif;
   }
   :root {
    --primary-color: #DEAF0B;
    --bg-color: #f5f6fa;
    --text-color: #2f3640;
    --icon-color: #636e72;
   }
   
   body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    background-color: var(--bg-color);
    
   }
    /* Sidebar styles */
           .sidebar {
               width: 280px;
               height: 100vh;
               background-color: white;
               border-right: 1px solid #e5e7eb;
               display: flex;
               flex-direction: column;
               position: fixed;
           }
   
           .logo-container {
               padding: 1.5rem;
               border-bottom: 1px solid #e5e7eb;
               display: flex;
               align-items: center;
               gap: 0.75rem;
           }
   
           .logo-icon {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
   }
   
   .logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
   }
   
   .logo-text .highlight {
    color: var(--primary-color);
    margin-left: 10px;
   }
   
   
   nav {
    flex-grow: 1;
   }
   
   nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
   }
   nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
   }
   
   nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
   }
   nav li:hover {
    background-color: var(--bg-color);
   }
   
   nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
   }
   
   .bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
   }
   
   .toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
   }
   
   .toggle-text {
    margin-right: 10px;
   }
   
   .toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
   }
   .toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
   }
   
   .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .toggle-switch.active::before {
    transform: translateX(25px);
   }
   
   .sidebar.collapsed .logo-text,
   .sidebar.collapsed .search,
   .sidebar.collapsed nav li span,
   .sidebar.collapsed .toggle-text {
    display: none;
   }
   
   .sidebar.collapsed .logo {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li i {
    margin-right: 0;
   }
           /* Main content styles */
           .main-content {
               flex: 1;
               margin-left: 280px;
               padding: 2rem;
           }
   
           .content-header {
               margin-bottom: 2rem;
           }
   
           .content-header h2 {
               font-size: 1.875rem;
               font-weight: 700;
               color: #111827;
           }
   
           .metrics-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
               gap: 1.5rem;
               margin-bottom: 2rem;
           }
   
           .metric-card {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .metric-title {
               font-size: 0.875rem;
               font-weight: 600;
               color: #4b5563;
               margin-bottom: 0.5rem;
           }
   
           .metric-value {
               font-size: 1.5rem;
               font-weight: 700;
               margin-bottom: 0.25rem;
           }
   
           .metric-subtitle {
               font-size: 0.875rem;
               color: #6b7280;
           }
   
           .chart-container {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               margin-bottom: 2rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .chart-wrapper {
               height: 400px;
               margin-top: 1rem;
           }
   
           .period-buttons {
               display: flex;
               gap: 0.75rem;
               margin-bottom: 1rem;
           }
   
           .period-btn {
               padding: 0.5rem 1rem;
               border: none;
               background-color: #e5e7eb;
               color: #4b5563;
               border-radius: 6px;
               cursor: pointer;
               font-weight: 500;
               transition: all 0.2s;
           }
   
           .period-btn:hover {
               background-color: #d1d5db;
           }
   
           .period-btn.active {
               background-color: #DEAF0B;
               color: white;
           }
   
           /* Toggle styles */
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .slider {
               position: absolute;
               cursor: pointer;
               top: 0;
               left: 0;
               right: 0;
               bottom: 0;
               background-color: #e5e7eb;
               transition: .4s;
               border-radius: 34px;
           }
   
           .slider:before {
               position: absolute;
               content: "";
               height: 16px;
               width: 16px;
               left: 4px;
               bottom: 4px;
               background-color: white;
               transition: .4s;
               border-radius: 50%;
           }
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           /* Updated and new styles */
           .bottom-controls {
               padding: 1.5rem;
               border-top: 1px solid #e5e7eb;
           }
   
           .control-item {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 1rem;
           }
   
           .control-label {
               font-size: 0.875rem;
               color: #4b5563;
           }
   
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
   }
   
   .sidebar.collapsed {
    width: 80px;
   }
   
   .logo {
    display: flex;
    align-items: center;
    padding: 20px;
   }
   
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           .total-emissions {
               font-size: 1.25rem;
               font-weight: 600;
               margin-bottom: 1rem;
               color: #374151;
           }
   
           .summary-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 1rem;
               margin-bottom: 2rem;
           }
   
           .summary-item {
               background-color: white;
               border-radius: 8px;
               padding: 1rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .summary-label {
               font-size: 0.875rem;
               color: #6b7280;
               display: block;
               margin-bottom: 0.5rem;
           }
   
           .summary-value {
               font-size: 1.25rem;
               font-weight: 600;
           }
   
       
   
           /* Responsive styles */
           @media (max-width: 768px) {
               .sidebar {
                   width: 100%;
                   height: auto;
                   position: static;
                   border-right: none;
                   border-bottom: 1px solid #e5e7eb;
               }
   
               .main-content {
                   margin-left: 0;
               }
   
               body.collapsed-sidebar .sidebar {
                   display: none;
               }
   
               body.collapsed-sidebar .main-content {
                   margin-left: 0;
               }
   
               .metrics-grid,
               .summary-grid {
                   grid-template-columns: 1fr;
               }
   
               .period-buttons {
                   flex-wrap: wrap;
               }
   
               .period-btn {
                   flex: 1 0 calc(50% - 0.375rem);
                   margin-bottom: 0.75rem;
               }
           }
   /* loading css */
   .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f8f9fa;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
   }
   
   .loading-spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #e0e0e0;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
   }
   
   @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
   } 
           /* Dark mode styles */
   body.dark-mode {
       background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
   }
   
   .dark-mode .sidebar {
       background-color: rgba(24, 27, 31, 1);
   }
   
   .dark-mode .sidebar .logo-icon {
    color: #2f3640;
   }
   
   .dark-mode .sidebar .logo-text {
    color: #f5f6fa;
   }
   
   .dark-mode .sidebar nav li {
    color: #f5f6fa;
   }
   
   .dark-mode .sidebar nav li:hover {
    background-color: #383838;
   }
   
   .dark-mode .sidebar nav li a {
    color: #f5f6fa;
   }
   
   .dark-mode .sidebar nav li i {
    color: #dcdde1;
   }
   
   .dark-mode .toggle-sidebar,
   .dark-mode .toggle-dark-mode {
    color: #f5f6fa;
   }
   
   .dark-mode .toggle-switch {
       background-color: var(--primary-color);
   }
   
   .dark-mode .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .dark-mode header {
       background-color: rgb(17, 18, 23);
   }
   
   .dark-mode .main-content {
       background-color: rgba(24, 27, 31, 1);
    color: #fff;
   }
   
   .dark-mode .metric-card {
     background-color: rgb(32, 36, 41);
   
    color: #fff;
   }
   .dark-mode .chart-container{
     background-color: rgb(32, 36, 41);
   
   color: #fff;
   }
   .dark-mode  .summary-item {
     background-color: rgb(32, 36, 41);
   
   color: #fff;
   }
   .dark-mode .loading-overlay{
       background-color: rgba(24, 27, 31, 1);
   }
   a{
     text-decoration: none;
   }
       </style>
</head>
<body>

  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
</div>
<div id="pageContent">
    <!-- Sidebar -->
    <%- include('partials/sidebar') %>

    <!-- Main Content -->
    <main class="main-content">
        <div class="content-header">
            <h3>CO2 Emission Results for <%= selectedZone %></h3>
        </div>

        <div class="metrics-grid">
            <div class="metric-card">
                <h3 class="metric-title">Grid CO2 Emissions</h3>
                <p class="metric-value" style="color: #dc2626"><%= unavoidableEmissions.toFixed(2) %> kg</p>
                <p class="metric-subtitle">From grid usage today</p>
            </div>
            
            <div class="metric-card">
                <h3 class="metric-title">CO2 Emissions Avoided</h3>
                <p class="metric-value" style="color: #16a34a"><%= avoidedEmissions.toFixed(2) %> kg</p>
                <p class="metric-subtitle">By using solar today</p>
            </div>
            
       

            <div class="metric-card">
                <h3 class="metric-title">Self-Sufficiency Score</h3>
                <p class="metric-value" style="color: #16a34a"><%= selfSufficiencyScore.toFixed(2) %>%</p>
                <p class="metric-subtitle">Energy self-produced today</p>
            </div>
        </div>

        <div class="chart-container">
            <div class="period-buttons">
                <button class="period-btn active" data-period="week">Week</button>
                <button class="period-btn" data-period="month">Month</button>
                <button class="period-btn" data-period="quarter">Quarter</button>
                <button class="period-btn" data-period="year">Year</button>
            </div>
            <div class="chart-wrapper">
                <canvas id="emissionsChart"></canvas>
            </div>
        </div>

        <h2 style="font-size: 1.25rem; font-weight: 600; margin-bottom: 1rem;">Total Emissions since beginning of recordings (see analytics section)</h2>
        <div id="summary" class="summary-grid"></div>

        <div style="text-align: center;">
            <a href="/" class="back-button">Back to zone selection</a>
        </div>
    </main>
</div>
    <script>
      const periodsData = <%- JSON.stringify(periods) %>;
      let emissionsChart;
      let selfSufficiencyChart;
      
      const chartColors = {
        gridEmissions: {
          fill: 'rgba(220, 38, 38, 0.1)',
          stroke: 'rgba(220, 38, 38, 0.7)'
        },
        avoidedEmissions: {
          fill: 'rgba(22, 163, 74, 0.1)',
          stroke: 'rgba(22, 163, 74, 0.7)'
        }
      };
  
      function createEmissionsChart(data, label) {
        if (emissionsChart) {
          emissionsChart.destroy();
        }
        
        const ctx = document.getElementById('emissionsChart').getContext('2d');
        
        Chart.defaults.font.family = "'Inter', sans-serif";
        
        // Create gradient fills
        const gradientGrid = ctx.createLinearGradient(0, 0, 0, 400);
        gradientGrid.addColorStop(0, 'rgba(220, 38, 38, 0.4)');
        gradientGrid.addColorStop(1, 'rgba(220, 38, 38, 0.1)');
  
        const gradientAvoided = ctx.createLinearGradient(0, 0, 0, 400);
        gradientAvoided.addColorStop(0, 'rgba(22, 163, 74, 0.4)');
        gradientAvoided.addColorStop(1, 'rgba(22, 163, 74, 0.1)');
        
        emissionsChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: data.map(entry => {
              const date = new Date(entry.date);
              return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            }),
            datasets: [
              {
                label: 'Grid CO2 Emissions',
                data: data.map(entry => entry.unavoidableEmissions),
                backgroundColor: gradientGrid,
                borderColor: 'rgba(220, 38, 38, 0.7)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                pointRadius: 0
              },
              {
                label: 'CO2 Emissions Avoided',
                data: data.map(entry => entry.avoidedEmissions),
                backgroundColor: gradientAvoided,
                borderColor: 'rgba(22, 163, 74, 0.7)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                pointRadius: 0
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
              intersect: false,
              mode: 'index'
            },
            plugins: {
              title: {
                display: true,
                text: `CO2 Emissions - ${label}`,
                font: { size: 16, weight: '600' },
                padding: { bottom: 20 }
              },
              legend: {
                position: 'top',
                labels: {
                  usePointStyle: true,
                  padding: 15,
                  font: { size: 12 }
                }
              },
              tooltip: {
                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                titleColor: '#1f2937',
                bodyColor: '#4b5563',
                titleFont: { size: 14, weight: 'bold' },
                bodyFont: { size: 13 },
                padding: 12,
                cornerRadius: 6,
                displayColors: true,
                borderColor: 'rgba(0, 0, 0, 0.1)',
                borderWidth: 1
              }
            },
            scales: {
              x: {
                grid: {
                  display: false
                },
                ticks: {
                  font: { size: 12, weight: '500' },
                  color: '#6b7280'
                }
              },
              y: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(107, 114, 128, 0.1)',
                  drawBorder: false
                },
                ticks: {
                  font: { size: 12, weight: '500' },
                  color: '#6b7280',
                  padding: 8,
                  callback: value => `${value} kg`
                },title: {
                  display: true,
                  text: 'CO2 Emissions (kg)',
                  font: { size: 14, weight: '600', lineHeight: 1.5 },
                  color: '#374151',
                  padding: {top: 10, bottom: 10}
                }
              }
            }
          }
        });
      }
      
      
      function createSelfSufficiencyChart(selfSufficiencyScore) {
        if (selfSufficiencyChart) {
          selfSufficiencyChart.destroy();
        }
        
        const ctx = document.getElementById('selfSufficiencyChart').getContext('2d');
        
        selfSufficiencyChart = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: ['Self-Produced', 'Grid'],
            datasets: [{
              data: [selfSufficiencyScore, 100 - selfSufficiencyScore],
              backgroundColor: ['#16a34a', '#dc2626'],
              borderWidth: 0
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            cutout: '70%',
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    return `${context.label}: ${context.parsed.toFixed(2)}%`;
                  }
                }
              }
            }
          }
        });
      }
      function updateSummary(data) {
        const totalUnavoidable = data.reduce((sum, entry) => sum + entry.unavoidableEmissions, 0);
        const totalAvoided = data.reduce((sum, entry) => sum + entry.avoidedEmissions, 0);
        const avgSelfSufficiency = data.reduce((sum, entry) => sum + entry.selfSufficiencyScore, 0) / data.length;
        
        document.getElementById('summary').innerHTML = `
          <div class="summary-item">
            <span class="summary-label">Total Grid CO2 Emissions</span>
            <span class="summary-value" style="color: #dc2626">${totalUnavoidable.toFixed(2)} kg</span>
          </div>
          <div class="summary-item">
            <span class="summary-label">Total CO2 Emissions Avoided</span>
            <span class="summary-value" style="color: #16a34a">${totalAvoided.toFixed(2)} kg</span>
          </div>
          <div class="summary-item">
            <span class="summary-label">Avg. Self-Sufficiency</span>
            <span class="summary-value" style="color: #16a34a">${avgSelfSufficiency.toFixed(2)}%</span>
          </div>
        `;
      }
  
      function updateGridStatus(voltage) {
        const voltageElement = document.getElementById('gridVoltage');
        const statusElement = document.getElementById('gridStatus');
        const gaugeElement = document.getElementById('voltageGauge');
        
        voltageElement.textContent = `${voltage.toFixed(1)} V`;
        
        const isActive = voltage > 20;
        statusElement.textContent = isActive ? 'Active' : 'Inactive';
        statusElement.style.color = isActive ? '#16a34a' : '#dc2626';
        
        const normalizedVoltage = Math.min(Math.max(voltage, 0), 430) / 430;
        const hue = isActive ? 142 : 0; // Green if active, red if inactive
        gaugeElement.style.background = `conic-gradient(
          hsl(${hue}, 70%, 50%) ${normalizedVoltage * 360}deg,
          #e5e7eb ${normalizedVoltage * 360}deg
        )`;
      }
  
      async function fetchGridVoltage() {
        try {
          const response = await fetch('<%= ingress_path %>/api/grid-voltage');
          const data = await response.json();
          updateGridStatus(data.voltage);
        } catch (error) {
          console.error('Error fetching grid voltage:', error);
        }
      }
  
      document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.period-btn').forEach(button => {
          button.addEventListener('click', function() {
            const period = this.dataset.period;
            document.querySelectorAll('.period-btn').forEach(btn => {
              btn.classList.remove('active');
            });
            this.classList.add('active');
            createEmissionsChart(periodsData[period], period.charAt(0).toUpperCase() + period.slice(1));
            updateSummary(periodsData[period]);
          });
        });
  
        // Initialize with week data
        createEmissionsChart(periodsData.week, 'Week');
        updateSummary(periodsData.week);
  
        // Initialize self-sufficiency chart
        createSelfSufficiencyChart(<%= selfSufficiencyScore %>);
  
        // Set up real-time grid voltage updates
        fetchGridVoltage();
        setInterval(fetchGridVoltage, 5000);
      });
    </script>

<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>>



</body>
</html>
