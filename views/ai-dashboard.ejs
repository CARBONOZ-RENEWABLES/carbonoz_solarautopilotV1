<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Dashboard - CARBONOZ SolarAutopilot</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {

 --primary-color: #DEAF0B;
            --bg-color: #f5f6fa;
            --text-color: #2f3640;
            --icon-color: #636e72;
            --green: #4CAF50;
            --red: #F44336;
            --blue: #2196F3;
            --amber: #FFC107;
            --gray: #757575;
            --primary: #DEAF0B;
            --secondary-color: #3498db;
            --success-color: #27ae60;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --info-color: #17a2b8;
            --dark-color: #343a40;
            --light-color: #f8f9fa;
        }

         body, html {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      height: 100%;
      
     }

     body.dark-mode { background-color: rgba(24, 27, 31, 1); color: #f5f6fa; }
      /* Sidebar styles */
      .sidebar {
          width: 280px;
          height: 100vh;
          background-color: white;
          border-right: 1px solid #e5e7eb;
          display: flex;
          flex-direction: column;
          position: fixed;
          top: 0;
          left: 0;
          z-index: 1000;
          transition: width 0.3s ease;
      }
     
             .logo-container {
                 padding: 1.5rem;
                 border-bottom: 1px solid #e5e7eb;
                 display: flex;
                 align-items: center;
                 gap: 0.75rem;
             }
     
             .logo-icon {
      width: 50px;
      height: 50px;
      border-radius: 8px;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-weight: bold;
      font-size: 20px;
     }
     
     .logo-text {
      margin-left: 10px;
      font-weight: bold;
      color: var(--text-color);
      font-size: 18px;
     }
     
     .logo-text .highlight {
      color: var(--primary-color);
      margin-left: 10px;
     }
     
     
     nav {
      flex-grow: 1;
     }
     
     nav ul {
      list-style-type: none;
      padding: 0;
      margin: 0;
     }
     nav li {
      padding: 15px 20px;
      display: flex;
      align-items: center;
      color: var(--text-color);
      cursor: pointer;
      transition: background-color 0.3s;
      font-size: 18px;
     }
     
     nav li a{
      text-decoration: none;
      color: #2f3640;
      font-weight: bold;
     }
     nav li:hover {
      background-color: var(--bg-color);
     }
     
     nav li i {
      margin-right: 15px;
      color: var(--icon-color);
      font-size: 24px;
     }
     
     .bottom-options {
      padding: 20px;
      border-top: 1px solid #dcdde1;
     }
     
     .toggle-sidebar {
      display: flex;
      align-items: center;
      justify-content: space-between;
      cursor: pointer;
      font-size: 16px;
     }
     
     .toggle-text {
      margin-right: 10px;
     }
     
     .toggle-switch {
      width: 50px;
      height: 25px;
      background-color: #dcdde1;
      border-radius: 12.5px;
      position: relative;
      transition: background-color 0.3s;
     }
     .toggle-switch::before {
      content: '';
      position: absolute;
      width: 21px;
      height: 21px;
      border-radius: 50%;
      background-color: white;
      top: 2px;
      left: 2px;
      transition: transform 0.3s;
     }
     
     .toggle-switch.active {
      background-color: var(--primary-color);
     }
     
     .toggle-switch.active::before {
      transform: translateX(25px);
     }
     
     .sidebar.collapsed .logo-text,
     .sidebar.collapsed .search,
     .sidebar.collapsed nav li span,
     .sidebar.collapsed .toggle-text {
      display: none;
     }
     
     .sidebar.collapsed .logo {
      justify-content: center;
     }
     
     .sidebar.collapsed nav li {
      justify-content: center;
     }
     
     .sidebar.collapsed nav li i {
      margin-right: 0;
     }
             /* Main content styles */
             .main-content {
                 flex: 1;
                 margin-left: 280px;
                 padding: 2rem;
             }
     
             .content-header {
                 margin-bottom: 2rem;
             }
     
             .content-header h2 {
                 font-size: 1.875rem;
                 font-weight: 700;
                 color: #111827;
             }
     
             .metrics-grid {
                 display: grid;
                 grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                 gap: 1.5rem;
                 margin-bottom: 2rem;
             }
     
             .metric-card {
                 background: white;
                 border-radius: 12px;
                 padding: 1.5rem;
                 box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
             }
     
             .metric-title {
                 font-size: 0.875rem;
                 font-weight: 600;
                 color: #4b5563;
                 margin-bottom: 0.5rem;
             }
     
             .metric-value {
                 font-size: 1.5rem;
                 font-weight: 700;
                 margin-bottom: 0.25rem;
             }
     
             .metric-subtitle {
                 font-size: 0.875rem;
                 color: #6b7280;
             }
     
             .chart-container {
                 background: white;
                 border-radius: 12px;
                 padding: 1.5rem;
                 margin-bottom: 2rem;
                 box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
             }
     
             .chart-wrapper {
                 height: 400px;
                 margin-top: 1rem;
             }
     
             .period-buttons {
                 display: flex;
                 gap: 0.75rem;
                 margin-bottom: 1rem;
             }
     
             .period-btn {
                 padding: 0.5rem 1rem;
                 border: none;
                 background-color: #e5e7eb;
                 color: #4b5563;
                 border-radius: 6px;
                 cursor: pointer;
                 font-weight: 500;
                 transition: all 0.2s;
             }
     
             .period-btn:hover {
                 background-color: #d1d5db;
             }
     
             .period-btn.active {
                 background-color: #DEAF0B;
                 color: white;
             }
     
             /* Toggle styles */
             .toggle {
                 position: relative;
                 display: inline-block;
                 width: 44px;
                 height: 24px;
             }
     
             .toggle input {
                 opacity: 0;
                 width: 0;
                 height: 0;
             }
     
             .slider {
                 position: absolute;
                 cursor: pointer;
                 top: 0;
                 left: 0;
                 right: 0;
                 bottom: 0;
                 background-color: #e5e7eb;
                 transition: .4s;
                 border-radius: 34px;
             }
     
             .slider:before {
                 position: absolute;
                 content: "";
                 height: 16px;
                 width: 16px;
                 left: 4px;
                 bottom: 4px;
                 background-color: white;
                 transition: .4s;
                 border-radius: 50%;
             }
     
             input:checked + .slider {
                 background-color: #DEAF0B;
             }
     
             input:checked + .slider:before {
                 transform: translateX(20px);
             }
     
             /* Updated and new styles */
             .bottom-controls {
                 padding: 1.5rem;
                 border-top: 1px solid #e5e7eb;
             }
     
             .control-item {
                 display: flex;
                 justify-content: space-between;
                 align-items: center;
                 margin-bottom: 1rem;
             }
     
             .control-label {
                 font-size: 0.875rem;
                 color: #4b5563;
             }
     
             .toggle {
                 position: relative;
                 display: inline-block;
                 width: 44px;
                 height: 24px;
             }
     
             .toggle input {
                 opacity: 0;
                 width: 0;
                 height: 0;
             }
     
             .sidebar {
      width: 280px;
      background-color: white;
      box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      transition: width 0.3s ease;
      z-index: 10;
     }
     
     .sidebar.collapsed {
      width: 80px;
     }
     
     .logo {
      display: flex;
      align-items: center;
      padding: 20px;
     }
     
     
             input:checked + .slider {
                 background-color: #DEAF0B;
             }
     
             input:checked + .slider:before {
                 transform: translateX(20px);
             }
     
             .total-emissions {
                 font-size: 1.25rem;
                 font-weight: 600;
                 margin-bottom: 1rem;
                 color: #374151;
             }
     
             .summary-grid {
                 display: grid;
                 grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                 gap: 1rem;
                 margin-bottom: 2rem;
             }
     
             .summary-item {
                 background-color: white;
                 border-radius: 8px;
                 padding: 1rem;
                 box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
             }
     
             .summary-label {
                 font-size: 0.875rem;
                 color: #6b7280;
                 display: block;
                 margin-bottom: 0.5rem;
             }
     
             .summary-value {
                 font-size: 1.25rem;
                 font-weight: 600;
             }
     
         
     
             /* Responsive styles */
             @media (max-width: 768px) {
                 .sidebar {
                     width: 100%;
                     height: auto;
                     position: static;
                     border-right: none;
                     border-bottom: 1px solid #e5e7eb;
                 }
     
                 .main-content {
                     margin-left: 0;
                 }
     
                 body.collapsed-sidebar .sidebar {
                     display: none;
                 }
     
                 body.collapsed-sidebar .main-content {
                     margin-left: 0;
                 }
     
                 .metrics-grid,
                 .summary-grid {
                     grid-template-columns: 1fr;
                 }
     
                 .period-buttons {
                     flex-wrap: wrap;
                 }
     
                 .period-btn {
                     flex: 1 0 calc(50% - 0.375rem);
                     margin-bottom: 0.75rem;
                 }
             }
  
  /* loading css */
  
  .loading-overlay {
   position: fixed;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
   background-color: #f8f9fa;
   display: flex;
   justify-content: center;
   align-items: center;
   z-index: 9999;
  }
  
  .loading-spinner {
   width: 60px;
   height: 60px;
   border: 5px solid #e0e0e0;
   border-top: 5px solid #3498db;
   border-radius: 50%;
   animation: spin 1s linear infinite;
  }
  
  
  @keyframes spin {
   0% { transform: rotate(0deg); }
   100% { transform: rotate(360deg); }
  }
  
  
  .dark-mode .main-content{
      color: #f5f6fa;
  }
  
  .dark-mode .sidebar {
      background-color: rgba(24, 27, 31, 1);
  }
  
  .dark-mode .sidebar .logo-icon {
   color: #2f3640;
  }
  
  .dark-mode .sidebar .logo-text {
   color: #f5f6fa;
  }
  
  .dark-mode .sidebar nav li {
   color: #f5f6fa;
  }
  
  .dark-mode .sidebar nav li:hover {
   background-color: #383838;
  }
  
  .dark-mode .sidebar nav li a {
   color: #f5f6fa;
  }
  
  .dark-mode .sidebar nav li i {
   color: #dcdde1;
  }
  
  .dark-mode .toggle-sidebar,
  .dark-mode .toggle-dark-mode {
   color: #f5f6fa;
  }
  
  .dark-mode .toggle-switch {
      background-color: var(--primary-color);
  }
  
  .dark-mode .toggle-switch.active {
   background-color: var(--primary-color);
  }
  
  .dark-mode header {
      background-color: rgb(17, 18, 23);
  }
  
  .dark-mode .content-card {
      background-color: rgba(24, 27, 31, 1);
   color: #fff;
  }
  
  
  .dark-mode .loading-overlay{
      background-color: rgba(24, 27, 31, 1);
  }
  
  /* Mobile Sidebar Improvements */
  @media (max-width: 768px) {
      /* Sidebar base styles */
      .sidebar {
          position: fixed;
          top: 0;
          left: 0;
          height: 100vh;
          width: 280px;
          transform: translateX(-100%);
          transition: transform 0.3s ease-in-out;
          z-index: 1000;
          overflow-y: auto;
          -webkit-overflow-scrolling: touch;
          box-shadow: none;
      }
  
      .sidebar.active {
          transform: translateX(0);
          box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
      }
  
      /* Improved hamburger button */
      .mobile-toggle {
          display: block;
          position: fixed;
          top: 1rem;
          left: 1rem;
          z-index: 1001;
          background: none;
          border: none;
          cursor: pointer;
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: white;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          padding: 8px;
      }
  
      .mobile-toggle span {
          display: block;
          width: 24px;
          height: 2px;
          background-color: var(--text-color);
          margin: 5px auto;
          transition: transform 0.3s ease, opacity 0.3s ease;
      }
  
      .mobile-toggle.active span:nth-child(1) {
          transform: translateY(7px) rotate(45deg);
      }
  
      .mobile-toggle.active span:nth-child(2) {
          opacity: 0;
      }
  
      .mobile-toggle.active span:nth-child(3) {
          transform: translateY(-7px) rotate(-45deg);
      }
  
      /* Improved nav items */
      .sidebar nav ul {
          padding: 1rem 0;
      }
  
      .sidebar nav li {
          padding: 0.875rem 1.5rem;
          margin: 0.25rem 1rem;
          border-radius: 8px;
          transition: background-color 0.2s ease;
      }
  
      .sidebar nav li a {
          display: flex;
          align-items: center;
          gap: 1rem;
          font-size: 1rem;
          color: var(--text-color);
      }
  
      .sidebar nav li i {
          font-size: 1.25rem;
          min-width: 24px;
          text-align: center;
      }
  
      .sidebar nav li:active {
          background-color: rgba(0, 0, 0, 0.05);
      }
  
      /* Improved overlay */
      .sidebar-overlay {
          display: none;
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: rgba(0, 0, 0, 0.4);
          backdrop-filter: blur(2px);
          z-index: 999;
          opacity: 0;
          transition: opacity 0.3s ease;
      }
  
      .sidebar-overlay.active {
          display: block;
          opacity: 1;
      }
  
      /* Dark mode adjustments */
      .dark-mode .mobile-toggle {
          background-color: rgba(255, 255, 255, 0.1);
      }
  
      .dark-mode .mobile-toggle span {
          background-color: #f5f6fa;
      }
  
      .dark-mode .sidebar nav li:active {
          background-color: rgba(255, 255, 255, 0.05);
      }
  }
  
  /* Ensure main content adjusts properly */
  @media (max-width: 768px) {
      .main-content {
          margin-left: 0;
          padding-top: 4.5rem;
          transition: margin-left 0.3s ease;
      }
  
      body.sidebar-open .main-content {
          filter: blur(2px);
          pointer-events: none;
      }
  }
  
  
    /* Main content styling */
  .main-content {
    flex: 1;
    margin-left: 280px;
    padding: 2rem;
   transition: margin-left 0.3s ease;
   
  }
  
  .main-content .container {
      width: 100%;
      max-width: none;
      padding: 0;
  }
  

     

        /* Dashboard Container */
        .dashboard-container {
            padding: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }

        /* Grid System */
        .row {
            display: flex;
            flex-wrap: wrap;
            margin: 0 -10px 20px -10px;
        }

        .col-12 { width: 100%; padding: 0 10px; }
        .col-6 { width: 50%; padding: 0 10px; }
        .col-4 { width: 33.333%; padding: 0 10px; }
        .col-3 { width: 25%; padding: 0 10px; }
        .col-8 { width: 66.666%; padding: 0 10px; }

        /* Card Styles */
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.95);
            margin-bottom: 20px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .dark-mode .card {
            background: rgba(34, 37, 41, 0.85);
            box-shadow: 0 8px 25px rgba(0,0,0,0.3);
            color: #f5f6fa;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 35px rgba(0,0,0,0.15);
        }

        .card-header {
            background: #DEAF0B;
            color: white;
            border-radius: 15px 15px 0 0;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-header h2,
        .card-header h5 {
            margin: 0;
            font-weight: 600;
        }

        .card-header h5 {
            font-size: 1.1rem;
        }

        .card-body {
            padding: 20px;
        }

        /* Metric Cards */
        .metric-card {
            text-align: center;
            padding: 20px;
            border-radius: 15px;
            color: white;
            margin-bottom: 15px;
            position: relative;
            overflow: hidden;
        }

        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05));
            pointer-events: none;
        }

        .metric-card.battery { background: linear-gradient(135deg, #27ae60, #2ecc71); }
        .metric-card.solar { background: linear-gradient(135deg, #f39c12, #e67e22); }
        .metric-card.grid { background: linear-gradient(135deg, #3498db, #2980b9); }
        .metric-card.load { background: linear-gradient(135deg, #9b59b6, #8e44ad); }

        .metric-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .metric-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        /* AI Status */
        .ai-status {
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .ai-status.active {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            color: white;
        }

        .ai-status.inactive {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
        }

        .ai-status-content h6 {
            margin: 0 0 5px 0;
            font-weight: 600;
        }

        .ai-status-content p {
            margin: 0;
        }

        .ai-status-icon {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .btn {
            padding: 8px 16px;
            border: 2px solid white;
            background: transparent;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn:hover {
            background: white;
            color: var(--primary-color);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Stats Grid */
        .stats-row {
            display: flex;
            gap: 20px;
            margin-top: 15px;
        }

        .stat-item {
            flex: 1;
        }

        .stat-label {
            font-size: 0.85rem;
            color: #666;
            margin-bottom: 5px;
        }
           .stat-value {
            font-size: 1.1rem;
            font-weight: bold;
        }

        /* Price Indicators */
        .price-display {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .price-indicator {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            text-transform: uppercase;
        }

        .price-very-cheap { background: #27ae60; color: white; }
        .price-cheap { background: #2ecc71; color: white; }
        .price-normal { background: #f39c12; color: white; }
        .price-expensive { background: #e67e22; color: white; }
        .price-very-expensive { background: #e74c3c; color: white; }

        /* Command Log */
        .command-log {
            max-height: 400px;
            overflow-y: auto;
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
        }
        .dark-mode .command-log {
            background: rgba(34, 37, 41, 0.85);
        }

        .command-item,
        .decision-card {
            background: white;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .dark-mode .command-item,
        .dark-mode .decision-card {
            background: rgba(24, 27, 31, 1);}

        .command-item {
            border-left: 4px solid var(--secondary-color);
        }

        .command-item.success {
            border-left-color: var(--success-color);
        }

        .decision-card {
            border-left: 4px solid var(--info-color);
        }

        .decision-timestamp,
        .command-timestamp {
            font-size: 0.8rem;
            color: #666;
            margin-bottom: 5px;
        }

        .dark-mode .decision-timestamp,
        .dark-mode .command-timestamp {
            color: #aaa;
        }
        .decision-action {
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 5px;
        }

        .decision-reasons {
            font-size: 0.9rem;
            color: #555;
            margin-top: 5px;
        }

        .command-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
        }

        .command-details {
            color: #666;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        .dark-mode .command-details {
            color: #aaa;
        }
        /* Chart Container */
        .chart-container {
            position: relative;
            height: 300px;
            margin: 20px 0;
        }

        /* Status Indicators */
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }

        .status-online { background: #27ae60; }
        .status-offline { background: #e74c3c; }
        .status-warning { background: #f39c12; }

        .status-display {
            display: flex;
            align-items: center;
        }


        .refresh-btn.spinning {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* Utility Classes */
        .text-center { text-align: center; }
        .text-muted { color: #666; }
        .fw-bold { font-weight: bold; }
        .d-flex { display: flex; }
        .align-items-center { align-items: center; }
        .justify-content-between { justify-content: space-between; }
        .gap-10 { gap: 10px; }
        .mt-1 { margin-top: 5px; }
        .mt-3 { margin-top: 15px; }
        .mb-0 { margin-bottom: 0; }
        .mb-1 { margin-bottom: 5px; }
        .me-1 { margin-right: 5px; }
        .me-2 { margin-right: 10px; }
        .h5 { font-size: 1.25rem; }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .col-8 { width: 100%; }
            .col-4 { width: 100%; }
        }

        @media (max-width: 768px) {
            .navbar-menu {
                display: none;
                position: absolute;
                top: 100%;
                left: 0;
                right: 0;
                background: white;
                flex-direction: column;
                padding: 20px;
                box-shadow: 0 5px 10px rgba(0,0,0,0.1);
            }

            .navbar-menu.active {
                display: flex;
            }

            .navbar-toggle {
                display: block;
            }

            .col-6,
            .col-4,
            .col-3 {
                width: 100%;
            }

            .metric-value {
                font-size: 2rem;
            }

            .chart-container {
                height: 250px;
            }

            .dashboard-container {
                padding: 10px;
            }

            .stats-row {
                flex-direction: column;
                gap: 10px;
            }
        }

        .dark-mode .chart-container{
          background-color: rgba(24, 27, 31, 1);
        }
    </style>
</head>
<body>
  <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"> </div>

        <%- include('partials/sidebar') %>
          
    <div class="main-content">
    <div class="dashboard-container">
        <!-- Header -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h2>
                            <i class="fas fa-robot me-2"></i>
                            AI Dashboard
                        </h2>
                        <div class="status-display">
                            <span class="status-indicator status-online"></span>
                            <span>Live Data</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- System Metrics Row -->
        <div class="row">
            <div class="col-3">
                <div class="metric-card battery">
                    <div class="metric-value" id="batterySOC">--</div>
                    <div class="metric-label">
                        <i class="fas fa-battery-three-quarters me-1"></i>
                        Battery SOC
                    </div>
                </div>
            </div>
            <div class="col-3">
                <div class="metric-card solar">
                    <div class="metric-value" id="pvPower">--</div>
                    <div class="metric-label">
                        <i class="fas fa-sun me-1"></i>
                        Solar Power
                    </div>
                </div>
            </div>
            <div class="col-3">
                <div class="metric-card grid">
                    <div class="metric-value" id="gridPower">--</div>
                    <div class="metric-label">
                        <i class="fas fa-plug me-1"></i>
                        Grid Power
                    </div>
                </div>
            </div>
            <div class="col-3">
                <div class="metric-card load">
                    <div class="metric-value" id="loadPower">--</div>
                    <div class="metric-label">
                        <i class="fas fa-home me-1"></i>
                        Load Power
                    </div>
                </div>
            </div>
        </div>

        <!-- AI Status and Price Info Row -->
        <div class="row">
            <div class="col-6">
                <div class="card">
                    <div class="card-header">
                        <h5>
                            <i class="fas fa-brain me-2"></i>
                            AI Charging Engine Status
                        </h5>
                    </div>
                    <div class="card-body">
                        <div id="aiStatus" class="ai-status">
                            <div class="ai-status-content">
                                <h6>Engine Status</h6>
                                <p id="aiStatusText">Loading...</p>
                            </div>
                            <div class="ai-status-icon">
                                <button id="aiToggleBtn" class="btn" onclick="toggleAIEngine()" disabled>
                                    <i class="fas fa-power-off"></i>
                                </button>
                                <i class="fas fa-robot fa-2x"></i>
                            </div>
                        </div>
                        <div class="stats-row">
                            <div class="stat-item">
                                <div class="stat-label">Last Decision:</div>
                                <div class="stat-value" id="lastDecision">--</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">Decision Count:</div>
                                <div class="stat-value" id="decisionCount">--</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="card">
                    <div class="card-header">
                        <h5>
                            <i class="fas fa-euro-sign me-2"></i>
                            Tibber Price Info
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="stats-row">
                            <div class="stat-item">
                                <div class="stat-label">Current Price:</div>
                                <div class="price-display">
                                    <span id="currentPrice" class="h5 mb-0">--</span>
                                    <span id="priceLevel" class="price-indicator">--</span>
                                </div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">Average Price:</div>
                                <div id="averagePrice" class="h5 mb-0">--</div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <div class="stat-label">Price Status:</div>
                            <div id="priceStatus" class="fw-bold">--</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row">
            <div class="col-8">
                <div class="card">
                    <div class="card-header">
                        <h5>
                            <i class="fas fa-chart-line me-2"></i>
                            Real-Time System Data
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="systemChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="card">
                    <div class="card-header">
                        <h5>
                            <i class="fas fa-chart-pie me-2"></i>
                            Energy Distribution
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="energyChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- AI Decisions and Commands Row -->
        <div class="row">
            <div class="col-6">
                <div class="card">
                    <div class="card-header">
                        <h5>
                            <i class="fas fa-lightbulb me-2"></i>
                            Recent AI Decisions
                        </h5>
                    </div>
                    <div class="card-body">
                        <div id="aiDecisions" class="command-log">
                            <div class="text-center text-muted">
                                <i class="fas fa-spinner fa-spin me-2"></i>
                                Loading AI decisions...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="card">
                    <div class="card-header">
                        <h5>
                            <i class="fas fa-terminal me-2"></i>
                            Commands Sent
                        </h5>
                    </div>
                    <div class="card-body">
                        <div id="commandLog" class="command-log">
                            <div class="text-center text-muted">
                                <i class="fas fa-spinner fa-spin me-2"></i>
                                Loading command history...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    </div>
    </div>

    <script>
        // Global variables
        let systemChart, energyChart;
        let systemData = {
            labels: [],
            battery: [],
            solar: [],
            grid: [],
            load: []
        };
        let refreshInterval;

        // Toggle mobile menu
        function toggleMenu() {
            const menu = document.getElementById('navbarMenu');
            menu.classList.toggle('active');
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            loadDashboardData();
            startAutoRefresh();
        });

        // Initialize charts
        function initializeCharts() {
            const systemCtx = document.getElementById('systemChart').getContext('2d');
            systemChart = new Chart(systemCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: 'Battery SOC (%)',
                            data: [],
                            borderColor: '#27ae60',
                            backgroundColor: 'rgba(39, 174, 96, 0.1)',
                            tension: 0.4,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Solar Power (W)',
                            data: [],
                            borderColor: '#f39c12',
                            backgroundColor: 'rgba(243, 156, 18, 0.1)',
                            tension: 0.4,
                            yAxisID: 'y1'
                        },
                        {
                            label: 'Grid Power (W)',
                            data: [],
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.1)',
                            tension: 0.4,
                            yAxisID: 'y1'
                        },
                        {
                            label: 'Load Power (W)',
                            data: [],
                            borderColor: '#9b59b6',
                            backgroundColor: 'rgba(155, 89, 182, 0.1)',
                            tension: 0.4,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Battery SOC (%)'
                            },
                            min: 0,
                            max: 100
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Power (W)'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'System Performance Over Time'
                        }
                    }
                }
            });

            const energyCtx = document.getElementById('energyChart').getContext('2d');
            energyChart = new Chart(energyCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Solar', 'Grid', 'Battery'],
                    datasets: [{
                        data: [0, 0, 0],
                        backgroundColor: [
                            '#f39c12',
                            '#3498db',
                            '#27ae60'
                        ],
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            text: 'Current Energy Sources'
                        }
                    }
                }
            });
        }

        // Load dashboard data
        async function loadDashboardData() {
            try {
                await loadSystemState();
                await loadAIStatus();
                await loadTibberData();
                await loadAIDecisions();
                await loadCommandHistory();
            } catch (error) {
                console.error('Error loading dashboard data:', error);
            }
        }

        // Load system state
        async function loadSystemState() {
            try {
                const response = await fetch('/api/system-state');
                const data = await response.json();
                
                if (data.current_state) {
                    const state = data.current_state;
                    updateMetricCard('batterySOC', state.battery_soc, '%');
                    updateMetricCard('pvPower', state.pv_power, 'W');
                    updateMetricCard('gridPower', state.grid_power, 'W');
                    updateMetricCard('loadPower', state.load, 'W');
                    updateSystemChart(state);
                    updateEnergyChart(state);
                }
            } catch (error) {
                console.error('Error loading system state:', error);
            }
        }

        // Load AI status
        async function loadAIStatus() {
            try {
                const response = await fetch('/api/ai/status');
                const data = await response.json();
                
                const statusElement = document.getElementById('aiStatus');
                const statusTextElement = document.getElementById('aiStatusText');
                const toggleBtn = document.getElementById('aiToggleBtn');
                
                if (data.success) {
                    const isActive = data.learner_mode && data.ai.enabled && data.ai.running;
                    
                    if (isActive) {
                        statusElement.className = 'ai-status active';
                        statusTextElement.textContent = 'AI Engine Active - Making Smart Decisions';
                        toggleBtn.innerHTML = '<i class="fas fa-stop"></i>';
                    } else {
                        statusElement.className = 'ai-status inactive';
                        statusTextElement.textContent = data.learner_mode ? 'AI Engine Ready - Click to Start' : 'Learner Mode Required';
                        toggleBtn.innerHTML = '<i class="fas fa-play"></i>';
                    }
                    
                    toggleBtn.disabled = !data.learner_mode;
                    
                    if (data.ai.lastDecision) {
                        document.getElementById('lastDecision').textContent = data.ai.lastDecision.decision || '--';
                    }
                    
                    if (data.ai.decisionCount !== undefined) {
                        document.getElementById('decisionCount').textContent = data.ai.decisionCount;
                    }
                }
            } catch (error) {
                console.error('Error loading AI status:', error);
            }
        }

        // Load Tibber data
        async function loadTibberData() {
            try {
                const response = await fetch('/api/tibber/current');
                const data = await response.json();
                
                if (data.success && data.data) {
                    const tibberData = data.data;
                    
                    if (tibberData.currentPrice) {
                        document.getElementById('currentPrice').textContent = 
                            `${tibberData.currentPrice.total.toFixed(2)} ${tibberData.currentPrice.currency}`;
                        
                        const levelElement = document.getElementById('priceLevel');
                        levelElement.textContent = tibberData.currentPrice.level || 'NORMAL';
                        levelElement.className = `price-indicator price-${(tibberData.currentPrice.level || 'normal').toLowerCase().replace('_', '-')}`;
                    }
                    
                    if (tibberData.config && tibberData.config.enabled) {
                        document.getElementById('priceStatus').textContent = 'Connected';
                        
                        if (tibberData.forecast && tibberData.forecast.length > 0) {
                            const avgPrice = tibberData.forecast.reduce((sum, p) => sum + p.total, 0) / tibberData.forecast.length;
                            document.getElementById('averagePrice').textContent = 
                                `${avgPrice.toFixed(2)} ${tibberData.currentPrice?.currency || 'EUR'}`;
                        }
                    } else {
                        document.getElementById('priceStatus').textContent = 'Not configured';
                    }
                } else {
                    document.getElementById('currentPrice').textContent = '--';
                    document.getElementById('averagePrice').textContent = '--';
                    document.getElementById('priceLevel').textContent = '--';
                    document.getElementById('priceStatus').textContent = 'Service unavailable';
                }
            } catch (error) {
                console.error('Error loading Tibber data:', error);
            }
        }

        // Load AI decisions
        async function loadAIDecisions() {
            try {
                const response = await fetch('/api/ai/decisions?limit=10');
                const data = await response.json();
                const decisionsContainer = document.getElementById('aiDecisions');
                
                if (data.success && data.decisions && data.decisions.length > 0) {
                    decisionsContainer.innerHTML = data.decisions.map(decision => `
                        <div class="decision-card">
                            <div class="decision-timestamp">
                                ${formatTimestamp(decision.timestamp)}
                            </div>
                            <div class="decision-action">
                                <i class="fas fa-lightbulb me-1"></i>
                                ${decision.decision}
                            </div>
                            <div class="decision-reasons">
                                ${decision.reasons ? decision.reasons.map(reason => `• ${reason}`).join('<br>') : 'No reasons provided'}
                            </div>
                        </div>
                    `).join('');
                } else {
                    decisionsContainer.innerHTML = 
                        '<div class="text-center text-muted">No AI decisions available yet</div>';
                }
            } catch (error) {
                console.error('Error loading AI decisions:', error);
            }
        }

        // Load command history
        async function loadCommandHistory() {
            try {
                const response = await fetch('/api/settings-changes?limit=10&type=grid_charge,charger_source_priority,energy_pattern,output_source_priority');
                const data = await response.json();
                const commandContainer = document.getElementById('commandLog');
                
                if (data.changes && data.changes.length > 0) {
                    commandContainer.innerHTML = data.changes.map(change => `
                        <div class="command-item success">
                            <div class="command-header">
                                <div>
                                    <strong>${change.topic}</strong> = ${change.new_value}
                                    <div class="command-details">
                                        Changed from: ${change.old_value || 'N/A'}
                                    </div>
                                </div>
                                <small class="text-muted command-timestamp">
                                    ${formatTimestamp(change.timestamp)}
                                </small>
                            </div>
                        </div>
                    `).join('');
                } else {
                    commandContainer.innerHTML = 
                        '<div class="text-center text-muted">No recent commands found</div>';
                }
            } catch (error) {
                console.error('Error loading command history:', error);
            }
        }

        // Update metric card
        function updateMetricCard(elementId, value, unit) {
            const element = document.getElementById(elementId);
            if (element && value !== null && value !== undefined) {
                element.textContent = `${Math.round(value)}${unit}`;
            } else {
                element.textContent = '--';
            }
        }

        // Update system chart
        function updateSystemChart(state) {
            const now = new Date();
            const timeLabel = now.toLocaleTimeString();
            
            if (systemData.labels.length >= 20) {
                systemData.labels.shift();
                systemData.battery.shift();
                systemData.solar.shift();
                systemData.grid.shift();
                systemData.load.shift();
            }
            
            systemData.labels.push(timeLabel);
            systemData.battery.push(state.battery_soc || 0);
            systemData.solar.push(state.pv_power || 0);
            systemData.grid.push(state.grid_power || 0);
            systemData.load.push(state.load || 0);
            
            systemChart.data.labels = systemData.labels;
            systemChart.data.datasets[0].data = systemData.battery;
            systemChart.data.datasets[1].data = systemData.solar;
            systemChart.data.datasets[2].data = systemData.grid;
            systemChart.data.datasets[3].data = systemData.load;
            
            systemChart.update('none');
        }

        // Update energy chart
        function updateEnergyChart(state) {
            const solar = Math.max(0, state.pv_power || 0);
            const grid = Math.max(0, Math.abs(state.grid_power || 0));
            const battery = Math.max(0, Math.abs(state.battery_power || 0));
            
            if (solar > 0 || grid > 0 || battery > 0) {
                energyChart.data.datasets[0].data = [solar, grid, battery];
                energyChart.update('none');
            }
        }

        // Format timestamp
        function formatTimestamp(timestamp) {
            return new Date(timestamp).toLocaleString();
        }

        // Refresh dashboard
        function refreshDashboard() {
            const refreshBtn = document.querySelector('.refresh-btn');
            refreshBtn.classList.add('spinning');
            
            loadDashboardData().finally(() => {
                setTimeout(() => {
                    refreshBtn.classList.remove('spinning');
                }, 1000);
            });
        }

        // Start auto refresh
        function startAutoRefresh() {
            refreshInterval = setInterval(loadDashboardData, 30000);
        }

        // Toggle AI Engine
        async function toggleAIEngine() {
            const toggleBtn = document.getElementById('aiToggleBtn');
            const originalContent = toggleBtn.innerHTML;
            
            try {
                toggleBtn.disabled = true;
                toggleBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                
                const response = await fetch('/api/ai/toggle', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    await loadAIStatus();
                    showNotification(data.message, 'success');
                } else {
                    throw new Error(data.error || 'Failed to toggle AI engine');
                }
            } catch (error) {
                console.error('Error toggling AI engine:', error);
                showNotification('Failed to toggle AI engine: ' + error.message, 'error');
                toggleBtn.innerHTML = originalContent;
                toggleBtn.disabled = false;
            }
        }
        
        // Show notification
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                min-width: 300px;
                padding: 15px 20px;
                background: ${type === 'success' ? '#27ae60' : '#e74c3c'};
                color: white;
                border-radius: 10px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.3);
                animation: slideIn 0.3s ease;
            `;
            notification.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; font-size: 1.2rem; cursor: pointer; margin-left: 15px;">×</button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
        });
    </script>

<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>