<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
 
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   <link rel="stylesheet" href="<%= ingress_path %>/css/main.css">
   <link rel="stylesheet" href="<%= ingress_path %>/css/settings.css">

</head>
<body>
   
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>
          <%- include('partials/sidebar') %>
        <div class="main-container">

            <div class="main-content">
                <div class="container-config">
                    <form id="gaugeForm">
                        <div class="timezone-container">
                            <h3>Timezone:</h3>
                            <select id="timezone" class="timezone-select">
                                <option value="Europe/Berlin">Germany (Berlin)</option>
                                <option value="Europe/Rome">Italy (Rome)</option>
                                <option value="America/Cayman">Cayman Islands</option>
                                <option value="Indian/Mauritius">Mauritius</option>
                                <option value="Asia/Shanghai">China (Shanghai)</option>
                                <option value="Europe/London">United Kingdom (London)</option>
                                <option value="America/New_York">USA (New York)</option>
                                <option value="Pacific/Auckland">New Zealand (Auckland)</option>
                            </select>
                        </div>
                        <div id="gaugeSettings"></div>
                        <button type="submit">Update Gauges</button>
                    </form>
                    <div id="responseMessage"></div>
                    <div class="form-container">
                      <% if (selectedZone) { %>
                        <div class="current-zone">
                          Currently selected zone: <%= zones.find(z => z.code === selectedZone)?.zoneName || selectedZone %>
                        </div>
                      <% } %>
                      <form action="<%= ingress_path %>/results" method="GET">
                        <label for="zone">Choose a Carbon Intensity zone:</label>
                        <select name="zone" id="zone">
                          <option value="">-- Select a zone --</option>
                          <% zones.forEach(function(zone) { %>
                            <option value="<%= zone.code %>" <%= selectedZone === zone.code ? 'selected' : '' %>>
                              <%= zone.zoneName %> (<%= zone.code %>)
                            </option>
                          <% }); %>
                        </select>
                        
                        <div class="button-container">
                          <button type="submit">Update Zone</button>
                          <% if (selectedZone) { %>
                            <a href="<%= ingress_path %>/clear-zone" class="button secondary-button" style="text-decoration: none; padding: 8px 15px; border-radius: 5px; background-color: #ff6666; color: white;">
                              Clear Selection
                            </a>
                            
                          <% } %>
                        </div>
                      </form>
                      
                      <div style="margin-top: 20px; text-align: center;">
                        <a href="<%= ingress_path %>/results" class="button" style="display: inline-block; text-decoration: none;">
                          View Current Results
                        </a>
                      </div>
                    </div>
                </div>
                <br>


    <script>
      
        // Fetch initial gauge values from the server
        fetch('<%= ingress_path %>/gauges')
            .then(response => response.json())
            .then(data => {
                const gaugeSettingsDiv = document.getElementById('gaugeSettings');
                Object.keys(data).forEach(gauge => {
                    const gaugeSettingHTML = `
                        <div class="gauge-card">
                            <div class="gauge-title">${gauge}</div>
                            <div class="input-group">
                                <div>
                                    <label for="${gauge}-min">Min</label>
                                    <input type="number" id="${gauge}-min" name="${gauge}-min" value="${data[gauge].min}">
                                </div>
                                <div>
                                    <label for="${gauge}-max">Max</label>
                                    <input type="number" id="${gauge}-max" name="${gauge}-max" value="${data[gauge].max}">
                                </div>
                            </div>
                        </div>
                    `;
                    gaugeSettingsDiv.innerHTML += gaugeSettingHTML;
                });
            });
    
        // Handle form submission and send updated gauge values to the server
        document.getElementById('gaugeForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const formData = new FormData(this);
            const gauges = {};
            formData.forEach((value, key) => {
                const [gauge, type] = key.split('-');
                if (!gauges[gauge]) gauges[gauge] = {};
                gauges[gauge][type] = Number(value);
            });
    
            // Include the selected timezone
            const timezone = document.getElementById('timezone').value;
            gauges.timezone = timezone;
    
            fetch('<%= ingress_path %>/gauges/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(gauges),
            })
            .then(response => response.json())
            .then(data => {
                const responseMessage = document.getElementById('responseMessage');
                responseMessage.innerText = data.message;
                responseMessage.className = data.success ? 'success' : 'error';
                responseMessage.style.display = 'block';
    
                // Hide the message after 3 seconds
                setTimeout(() => {
                    responseMessage.style.display = 'none';
                }, 3000);
            });
        });
    </script>

<script>
    const ingressPath = '<%= ingress_path %>';
  
  // Fetch current timezone
  fetch(`${ingressPath}/api/timezone`)
    .then(response => response.json())
    .then(data => {
      document.getElementById('timezone').value = data.timezone;
    });

  // Update timezone when changed
  document.getElementById('timezone').addEventListener('change', (event) => {
    fetch(`${ingressPath}/api/timezone`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ timezone: event.target.value }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('Timezone updated successfully');
      } else {
        alert('Failed to update timezone');
      }
    });
  });
 
</script>

<script>
      // toggle sidebar
      
      const sidebar = document.getElementById('sidebar');
    const toggleSidebar = document.getElementById('toggleSidebar');
    const toggleSwitch = document.getElementById('toggleSwitch');
    
    toggleSidebar.addEventListener('click', () => {
      sidebar.classList.toggle('collapsed');
      toggleSwitch.classList.toggle('active');
    });
</script>

<script>
     // loading js
        
     document.addEventListener('DOMContentLoaded', function() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    const pageContent = document.getElementById('pageContent');
  
    // Simulate loading time (you can adjust this as needed)
    setTimeout(() => {
      loadingOverlay.style.display = 'none';
      pageContent.style.display = 'block';
      // Trigger a custom event to signal that the page is ready
      document.dispatchEvent(new Event('pageReady'));
    }, 1500); // 1.5 seconds loading time
  });
</script>

<script>

// Toggle dark mode
const toggleDarkMode = document.getElementById('toggleDarkMode');
const darkModeSwitch = document.getElementById('darkModeSwitch');

// Function to update Grafana iframes based on dark mode
function updateGrafanaIframes(isDarkMode) {
    const iframes = document.querySelectorAll('iframe');
    iframes.forEach(iframe => {
        let src = iframe.src;

        // Remove any existing theme parameter to avoid multiple occurrences
        src = src.replace(/([?&]theme=)(light|dark)/, '');

        // Add the new theme parameter based on dark mode setting
        const separator = src.includes('?') ? '&' : '?';
        src = `${src}${separator}theme=${isDarkMode ? 'dark' : 'light'}`;

        // Only reload iframe if theme has changed
        if (iframe.src !== src) {
            iframe.src = src;
        }
    });
}

// Function to apply the mode (either from localStorage or default)
function applyModeFromLocalStorage() {
    const isDarkMode = localStorage.getItem('dark-mode') === 'enabled';

    if (isDarkMode) {
        document.body.classList.add('dark-mode');
        darkModeSwitch.classList.add('active');
    } else {
        document.body.classList.remove('dark-mode');
        darkModeSwitch.classList.remove('active');
    }

    // Update Grafana dashboards to match the saved mode
    updateGrafanaIframes(isDarkMode);
}

// Add click event listener for dark mode toggle
toggleDarkMode.addEventListener('click', () => {
    const isDarkMode = document.body.classList.toggle('dark-mode');
    darkModeSwitch.classList.toggle('active');

    // Update Grafana dashboards to match the dark mode setting
    updateGrafanaIframes(isDarkMode);

    // Save the dark mode state in localStorage
    if (isDarkMode) {
        localStorage.setItem('dark-mode', 'enabled');
    } else {
        localStorage.setItem('dark-mode', 'disabled');
    }
});

// Check and apply the user's dark mode preference on page load and when navigating back
document.addEventListener('DOMContentLoaded', () => {
    applyModeFromLocalStorage();
});

// Apply mode on `pageshow` event (works when navigating back in browser history)
window.addEventListener('pageshow', () => {
    applyModeFromLocalStorage();
});



</script>

</body>
</html>