<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Pricing - Solar Autopilot</title>
    <link rel="stylesheet" href="<%= ingress_path %>/css/dynamic-pricing.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
    
    <style>

body {
          font-family: 'Inter', sans-serif;
          background: var(--bg-color);
        }

           :root {
  /* Color Palette */
  --primary-color: #DEAF0B;
  --primary-light: #60a5fa;
  --primary-dark: #1d4ed8;
  --secondary-color: #64748b;
  --success-color: #10b981;
  --warning-color: #f59e0b;
  --error-color: #ef4444;
  --info-color: #06b6d4;
  
  /* Background Colors */
  --bg-primary: #f8fafc;
  --bg-secondary: #ffffff;
  --bg-tertiary: #DEAF0B;
  --bg-dark: #1e293b;
  --bg-card: #ffffff;
  
  /* Text Colors */
  --text-primary: #1e293b;
  --text-secondary: #64748b;
  --text-muted: #94a3b8;
  --text-light: #cbd5e1;
  --text-white: #ffffff;
  
  /* Border Colors */
  --border-color: #e2e8f0;
  --border-light: #f1f5f9;
  --border-dark: #cbd5e1;
  
  /* Weather Colors */
  --weather-sunny: #fbbf24;
  --weather-cloudy: #6b7280;
  --weather-rainy: #3b82f6;
  --weather-stormy: #6366f1;
  --weather-snowy: #e5e7eb;
  
  /* Price Level Colors */
  --price-very-cheap: #10b981;
  --price-cheap: #22c55e;
  --price-normal: #64748b;
  --price-expensive: #f59e0b;
  --price-very-expensive: #ef4444;
  
  /* Spacing */
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  --spacing-2xl: 3rem;
  
  /* Border Radius */
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-xl: 1rem;
  
  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  
  /* Transitions */
  --transition-fast: 150ms ease-in-out;
  --transition-normal: 300ms ease-in-out;
  --transition-slow: 500ms ease-in-out;
}

           
           body, html {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100%;
            
           }
            /* Sidebar styles */
            .sidebar {
                width: 280px;
                height: 100vh;
                background-color: white;
                border-right: 1px solid #e5e7eb;
                display: flex;
                flex-direction: column;
                position: fixed;
                top: 0;
                left: 0;
                z-index: 1000;
                transition: width 0.3s ease;
            }
           
                   .logo-container {
                       padding: 1.5rem;
                       border-bottom: 1px solid #e5e7eb;
                       display: flex;
                       align-items: center;
                       gap: 0.75rem;
                   }
           
                   .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-weight: bold;
            font-size: 20px;
           }
           
           .logo-text {
            margin-left: 10px;
            font-weight: bold;
            color: #000;
            font-size: 18px;
           }
           
           .logo-text .highlight {
            color: var(--primary-color);
            margin-left: 10px;
           }
           
           
           nav {
            flex-grow: 1;
           }
           
           nav ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
           }
           nav li {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            color: var(--text-color);
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 18px;
           }
           
           nav li a{
            text-decoration: none;
            color: #2f3640;
            font-weight: bold;
           }
           nav li:hover {
            background-color: var(--bg-color);
           }
           
           nav li i {
            margin-right: 15px;
            color: var(--icon-color);
            font-size: 24px;
           }
           
           .bottom-options {
            padding: 20px;
            border-top: 1px solid #dcdde1;
           }
           
           .toggle-sidebar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            font-size: 16px;
           }
           
           .toggle-text {
            margin-right: 10px;
           }
           
           .toggle-switch {
            width: 50px;
            height: 25px;
            background-color: #dcdde1;
            border-radius: 12.5px;
            position: relative;
            transition: background-color 0.3s;
           }
           .toggle-switch::before {
            content: '';
            position: absolute;
            width: 21px;
            height: 21px;
            border-radius: 50%;
            background-color: white;
            top: 2px;
            left: 2px;
            transition: transform 0.3s;
           }
           
           .toggle-switch.active {
            background-color: var(--primary-color);
           }
           
           .toggle-switch.active::before {
            transform: translateX(25px);
           }
           
           .sidebar.collapsed .logo-text,
           .sidebar.collapsed .search,
           .sidebar.collapsed nav li span,
           .sidebar.collapsed .toggle-text {
            display: none;
           }
           
           .sidebar.collapsed .logo {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li i {
            margin-right: 0;
           }
                   /* Main content styles */
                   .main-content {
                       flex: 1;
                       margin-left: 280px;
                       padding: 2rem;
                   }
           
                   .content-header {
                       margin-bottom: 2rem;
                   }
           
                   .content-header h2 {
                       font-size: 1.875rem;
                       font-weight: 700;
                       color: #111827;
                   }
           
                   .metrics-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                       gap: 1.5rem;
                       margin-bottom: 2rem;
                   }
           
                   .metric-card {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .metric-title {
                       font-size: 0.875rem;
                       font-weight: 600;
                       color: #4b5563;
                       margin-bottom: 0.5rem;
                   }
           
                   .metric-value {
                       font-size: 1.5rem;
                       font-weight: 700;
                       margin-bottom: 0.25rem;
                   }
           
                   .metric-subtitle {
                       font-size: 0.875rem;
                       color: #6b7280;
                   }
           
                   .chart-container {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       margin-bottom: 2rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .chart-wrapper {
                       height: 400px;
                       margin-top: 1rem;
                   }
           
                   .period-buttons {
                       display: flex;
                       gap: 0.75rem;
                       margin-bottom: 1rem;
                   }
           
                   .period-btn {
                       padding: 0.5rem 1rem;
                       border: none;
                       background-color: #e5e7eb;
                       color: #4b5563;
                       border-radius: 6px;
                       cursor: pointer;
                       font-weight: 500;
                       transition: all 0.2s;
                   }
           
                   .period-btn:hover {
                       background-color: #d1d5db;
                   }
           
                   .period-btn.active {
                       background-color: #DEAF0B;
                       color: white;
                   }
           
                   /* Toggle styles */
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .slider {
                       position: absolute;
                       cursor: pointer;
                       top: 0;
                       left: 0;
                       right: 0;
                       bottom: 0;
                       background-color: #e5e7eb;
                       transition: .4s;
                       border-radius: 34px;
                   }
           
                   .slider:before {
                       position: absolute;
                       content: "";
                       height: 16px;
                       width: 16px;
                       left: 4px;
                       bottom: 4px;
                       background-color: white;
                       transition: .4s;
                       border-radius: 50%;
                   }
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   /* Updated and new styles */
                   .bottom-controls {
                       padding: 1.5rem;
                       border-top: 1px solid #e5e7eb;
                   }
           
                   .control-item {
                       display: flex;
                       justify-content: space-between;
                       align-items: center;
                       margin-bottom: 1rem;
                   }
           
                   .control-label {
                       font-size: 0.875rem;
                       color: #4b5563;
                   }
           
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .sidebar {
            width: 280px;
            background-color: white;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            transition: width 0.3s ease;
            z-index: 10;
           }
           
           .sidebar.collapsed {
            width: 80px;
           }
           
           .logo {
            display: flex;
            align-items: center;
            padding: 20px;
           }
           
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   .total-emissions {
                       font-size: 1.25rem;
                       font-weight: 600;
                       margin-bottom: 1rem;
                       color: #374151;
                   }
           
                   .summary-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                       gap: 1rem;
                       margin-bottom: 2rem;
                   }
           
                   .summary-item {
                       background-color: white;
                       border-radius: 8px;
                       padding: 1rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .summary-label {
                       font-size: 0.875rem;
                       color: #6b7280;
                       display: block;
                       margin-bottom: 0.5rem;
                   }
           
                   .summary-value {
                       font-size: 1.25rem;
                       font-weight: 600;
                   }
           
               
           
                   /* Responsive styles */
                   @media (max-width: 768px) {
                       .sidebar {
                           width: 100%;
                           height: auto;
                           position: static;
                           border-right: none;
                           border-bottom: 1px solid #e5e7eb;
                       }
           
                       .main-content {
                           margin-left: 0;
                       }
           
                       body.collapsed-sidebar .sidebar {
                           display: none;
                       }
           
                       body.collapsed-sidebar .main-content {
                           margin-left: 0;
                       }
           
                       .metrics-grid,
                       .summary-grid {
                           grid-template-columns: 1fr;
                       }
           
                       .period-buttons {
                           flex-wrap: wrap;
                       }
           
                       .period-btn {
                           flex: 1 0 calc(50% - 0.375rem);
                           margin-bottom: 0.75rem;
                       }
                   }
        
        /* loading css */
        
        .loading-overlay {
         position: fixed;
         top: 0;
         left: 0;
         width: 100%;
         height: 100%;
         background-color: #f8f9fa;
         display: flex;
         justify-content: center;
         align-items: center;
         z-index: 9999;
        }
        
        .loading-spinner {
         width: 50px;
         height: 50px;
         border: 5px solid #e0e0e0;
         border-top: 5px solid #3498db;
         border-radius: 50%;
         animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
         0% { transform: rotate(0deg); }
         100% { transform: rotate(360deg); }
        }
        
        .dashboard-column {
        flex-basis: calc(33.33333% - 2px);
        margin-right: 2px;
        margin-bottom: 2px;
        }
        
        @media only screen and (max-width: 128em) {
        .dashboard-column {
         flex-basis: calc(50% - 2px);
        }
        }
        
        @media only screen and (max-width: 62em) {
        .dashboard-column {
         flex-basis: calc(100% - 2px);
        }
        }
        
        .dashboard-column .card {
        border: 0;
        }
        
        /* Dark mode styles */
        body.dark-mode {
            background-color: rgba(24, 27, 31, 1);
         color: #f5f6fa;
        }
        
        .dark-mode .main-content{
            background-color: rgba(24, 27, 31, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .sidebar {
            background-color: rgba(24, 27, 31, 1);
        }
        
        .dark-mode .sidebar .logo-icon {
         color: #2f3640;
        }
        
        .dark-mode .sidebar .logo-text {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li:hover {
         background-color: #383838;
        }
        
        .dark-mode .sidebar nav li a {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li i {
         color: #dcdde1;
        }
        
        .dark-mode .toggle-sidebar,
        .dark-mode .toggle-dark-mode {
         color: #f5f6fa;
        }
        
        .dark-mode .toggle-switch {
            background-color: var(--primary-color);
        }
        
        .dark-mode .toggle-switch.active {
         background-color: var(--primary-color);
        }
        
        .dark-mode header {
            background-color: rgb(17, 18, 23);
        }
        
        .dark-mode .content-card {
            background-color: rgba(24, 27, 31, 1);
         color: #fff;
        }
        
        
        .dark-mode .loading-overlay{
            background-color: rgba(24, 27, 31, 1);
        }
        
        /* Mobile Sidebar Improvements */
        @media (max-width: 768px) {
            /* Sidebar base styles */
            .sidebar {
                position: fixed;
                top: 0;
                left: 0;
                height: 100vh;
                width: 280px;
                transform: translateX(-100%);
                transition: transform 0.3s ease-in-out;
                z-index: 1000;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
                box-shadow: none;
            }
        
            .sidebar.active {
                transform: translateX(0);
                box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
            }
        
            /* Improved hamburger button */
            .mobile-toggle {
                display: block;
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 1001;
                background: none;
                border: none;
                cursor: pointer;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background-color: white;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                padding: 8px;
            }
        
            .mobile-toggle span {
                display: block;
                width: 24px;
                height: 2px;
                background-color: var(--text-color);
                margin: 5px auto;
                transition: transform 0.3s ease, opacity 0.3s ease;
            }
        
            .mobile-toggle.active span:nth-child(1) {
                transform: translateY(7px) rotate(45deg);
            }
        
            .mobile-toggle.active span:nth-child(2) {
                opacity: 0;
            }
        
            .mobile-toggle.active span:nth-child(3) {
                transform: translateY(-7px) rotate(-45deg);
            }
        
            /* Improved nav items */
            .sidebar nav ul {
                padding: 1rem 0;
            }
        
            .sidebar nav li {
                padding: 0.875rem 1.5rem;
                margin: 0.25rem 1rem;
                border-radius: 8px;
                transition: background-color 0.2s ease;
            }
        
            .sidebar nav li a {
                display: flex;
                align-items: center;
                gap: 1rem;
                font-size: 1rem;
                color: var(--text-color);
            }
        
            .sidebar nav li i {
                font-size: 1.25rem;
                min-width: 24px;
                text-align: center;
            }
        
            .sidebar nav li:active {
                background-color: rgba(0, 0, 0, 0.05);
            }
        
            /* Improved overlay */
            .sidebar-overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(0, 0, 0, 0.4);
                backdrop-filter: blur(2px);
                z-index: 999;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
        
            .sidebar-overlay.active {
                display: block;
                opacity: 1;
            }
        
            /* Dark mode adjustments */
            .dark-mode .mobile-toggle {
                background-color: rgba(255, 255, 255, 0.1);
            }
        
            .dark-mode .mobile-toggle span {
                background-color: #f5f6fa;
            }
        
            .dark-mode .sidebar nav li:active {
                background-color: rgba(255, 255, 255, 0.05);
            }
        }
        
        /* Ensure main content adjusts properly */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding-top: 4.5rem;
                transition: margin-left 0.3s ease;
            }
        
            body.sidebar-open .main-content {
                filter: blur(2px);
                pointer-events: none;
            }
        }
        
        
          /* Main content styling */
        .main-content {
          flex: 1;
          margin-left: 280px;
          padding: 2rem;
          color: var(--text-color);
          transition: margin-left 0.3s ease;
        }
        
        .main-content .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0;
        }



/* Header */
.header {
  background: #DEAF0B;
  color: var(--text-white);
  padding: var(--spacing-lg) var(--spacing-xl);
  border-radius: var(--radius-lg);
  margin-bottom: var(--spacing-xl);
  box-shadow: var(--shadow-lg);
}
.dark-mode .header {
  background: #DEAF0B;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: var(--spacing-md);
}

.header-left h1 {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: var(--spacing-xs);
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.header-left .subtitle {
  font-size: 1rem;
  opacity: 0.9;
  font-weight: 400;
}

.header-right {
  display: flex;
  gap: var(--spacing-lg);
  align-items: center;
}

.status-indicator, .learner-mode-indicator {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  padding: var(--spacing-xs) var(--spacing-sm);
  background: rgba(255, 255, 255, 0.2);
  border-radius: var(--radius-md);
  font-size: 0.875rem;
  backdrop-filter: blur(10px);
}

.status-indicator.connected .fa-circle {
  color: var(--success-color);
}

.status-indicator.disconnected .fa-circle {
  color: var(--error-color);
}

.status-indicator.connecting .fa-circle {
  color: var(--warning-color);
  animation: pulse 2s infinite;
}

.learner-mode-indicator.active {
  background: rgba(16, 185, 129, 0.2);
}

.learner-mode-indicator.inactive {
  background: rgba(239, 68, 68, 0.2);
}

/* Quick Actions */
.quick-actions {
  display: flex;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-xl);
  flex-wrap: wrap;
}

.quick-btn {
  flex: 1;
  min-width: 150px;
  padding: var(--spacing-md) var(--spacing-lg);
  border: none;
  border-radius: var(--radius-md);
  font-weight: 600;
  cursor: pointer;
  transition: all var(--transition-fast);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  box-shadow: var(--shadow-sm);
}

.quick-btn[data-action="charge"] {
  background: linear-gradient(135deg, var(--success-color), #22c55e);
  color: white;
}

.quick-btn[data-action="stop"] {
  background: linear-gradient(135deg, var(--error-color), #f87171);
  color: white;
}

.quick-btn:not([data-action]) {
  background: var(--bg-secondary);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
}

.quick-btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

.quick-btn:active {
  transform: translateY(0);
}

.quick-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

/* Dashboard Grid */
.dashboard-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--spacing-xl);
  margin-bottom: var(--spacing-xl);
}

@media (max-width: 1024px) {
  .dashboard-grid {
    grid-template-columns: 1fr;
  }
}

/* Panel Styles */
.panel {
  background: var(--bg-card);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  overflow: hidden;
  border: 1px solid var(--border-light);
  color: #fff;
}

.panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-lg);
  border-bottom: 1px solid var(--border-light);
  background: var(--bg-tertiary);
}

.panel-header h3 {
  font-size: 1.125rem;
  font-weight: 600;
  color: #fff;
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.panel-controls {
  display: flex;
  gap: var(--spacing-sm);
  align-items: center;
}

.panel-content {
  padding: var(--spacing-lg);
}

/* Status Panel */
.status-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: var(--spacing-lg);
  margin-bottom: var(--spacing-xl);
}

.status-card {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
  padding: var(--spacing-lg);
  background: var(--bg-tertiary);
  border-radius: var(--radius-md);
  transition: all var(--transition-fast);
}

.status-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

.status-icon {
  width: 48px;
  height: 48px;
  border-radius: var(--radius-md);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  color: white;
}

.status-icon.battery {
  background: linear-gradient(135deg, var(--success-color), #22c55e);
}

.status-icon.price {
  background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
}

.status-icon.pv {
  background: linear-gradient(135deg, var(--weather-sunny), #fcd34d);
}

.status-icon.load {
  background: linear-gradient(135deg, var(--secondary-color), #94a3b8);
}

.status-icon.grid {
  background: linear-gradient(135deg, var(--info-color), #67e8f9);
}

.status-info h4 {
  font-size: 0.875rem;
  color: #fff;
  font-weight: 500;
  margin-bottom: var(--spacing-xs);
}

.status-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--text-primary);
}

.status-unit {
  font-size: 0.875rem;
  color: var(--text-muted);
  margin-left: var(--spacing-xs);
}

/* Weather Card */
.weather-card {
  grid-column: span 2;
}

.weather-icon {
  width: 48px;
  height: 48px;
  border-radius: var(--radius-md);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  color: white;
  position: relative;
}

.weather-icon.sunny {
  background: linear-gradient(135deg, var(--weather-sunny), #fcd34d);
}

.weather-icon.cloudy {
  background: linear-gradient(135deg, var(--weather-cloudy), #9ca3af);
}

.weather-icon.rainy {
  background: linear-gradient(135deg, var(--weather-rainy), #60a5fa);
}

.weather-icon.stormy {
  background: linear-gradient(135deg, var(--weather-stormy), #8b5cf6);
}

.weather-icon.snowy {
  background: linear-gradient(135deg, var(--weather-snowy), #f3f4f6);
  color: var(--text-secondary);
}

.weather-info {
  flex: 1;
}

.weather-temp {
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--text-primary);
}

.weather-desc {
  font-size: 0.875rem;
  color: var(--text-secondary);
  text-transform: capitalize;
}

.weather-animation {
  position: absolute;
  top: -5px;
  right: -5px;
  width: 15px;
  height: 15px;
}

/* Weather Animations */
@keyframes rainDrop {
  0% { transform: translateY(-10px); opacity: 1; }
  100% { transform: translateY(10px); opacity: 0; }
}

@keyframes snowFlake {
  0% { transform: translateY(-10px) rotate(0deg); opacity: 1; }
  100% { transform: translateY(10px) rotate(360deg); opacity: 0; }
}

@keyframes lightning {
  0%, 90%, 100% { opacity: 0; }
  5%, 85% { opacity: 1; }
}

.weather-animation.rain::before {
  content: '💧';
  position: absolute;
  animation: rainDrop 1s infinite;
}

.weather-animation.snow::before {
  content: '❄️';
  position: absolute;
  animation: snowFlake 2s infinite;
}

.weather-animation.storm::before {
  content: '⚡';
  position: absolute;
  animation: lightning 2s infinite;
}

/* Price Level Indicator */
.price-level {
  display: inline-block;
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--radius-sm);
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  margin-top: var(--spacing-xs);
}

.price-level.very-cheap {
  background: rgba(16, 185, 129, 0.1);
  color: var(--price-very-cheap);
}

.price-level.cheap {
  background: rgba(34, 197, 94, 0.1);
  color: var(--price-cheap);
}

.price-level.normal {
  background: rgba(100, 116, 139, 0.1);
  color: var(--price-normal);
}

.price-level.expensive {
  background: rgba(245, 158, 11, 0.1);
  color: var(--price-expensive);
}

.price-level.very-expensive {
  background: rgba(239, 68, 68, 0.1);
  color: var(--price-very-expensive);
}

/* Charging Decision */
.charging-decision {
  padding: var(--spacing-lg);
  border-radius: var(--radius-md);
  text-align: center;
  font-weight: 600;
}

.charging-decision.should-charge {
  background: rgba(16, 185, 129, 0.1);
  border: 2px solid rgba(16, 185, 129, 0.2);
  color: var(--success-color);
}

.charging-decision.should-not-charge {
  background: rgba(239, 68, 68, 0.1);
  border: 2px solid rgba(239, 68, 68, 0.2);
  color: var(--error-color);
}

.charging-decision.analyzing {
  background: rgba(245, 158, 11, 0.1);
  border: 2px solid rgba(245, 158, 11, 0.2);
  color: var(--warning-color);
}

.decision-status {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-sm);
}

/* Chart Panel */
.chart-container {
  position: relative;
  height: 300px;
  margin-bottom: var(--spacing-lg);
}

.chart-legend {
  display: flex;
  justify-content: center;
  gap: var(--spacing-lg);
  flex-wrap: wrap;
}

.legend-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  font-size: 0.875rem;
}

.legend-dot {
  width: 12px;
  height: 12px;
  border-radius: 50%;
}

.legend-item.very-cheap .legend-dot {
  background: var(--price-very-cheap);
}

.legend-item.cheap .legend-dot {
  background: var(--price-cheap);
}

.legend-item.normal .legend-dot {
  background: var(--price-normal);
}

.legend-item.expensive .legend-dot {
  background: var(--price-expensive);
}

.legend-item.very-expensive .legend-dot {
  background: var(--price-very-expensive);
}

/* Configuration Tabs */
.config-tabs {
  background: var(--bg-card);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  overflow: hidden;
  border: 1px solid var(--border-light);
  margin-bottom: var(--spacing-xl);
}

.tabs-header {
  display: flex;
  border-bottom: 1px solid var(--border-light);
  background: var(--bg-tertiary);
  overflow-x: auto;
}

.tab-btn {
  flex: 1;
  min-width: 120px;
  padding: var(--spacing-md) var(--spacing-lg);
  border: none;
  background: transparent;
  color: #fff;
  cursor: pointer;
  transition: all var(--transition-fast);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  font-weight: 500;
  border-bottom: 3px solid transparent;
  white-space: nowrap;
}

.tab-btn:hover {
  background: rgba(37, 99, 235, 0.05);
  color: var(--text-primary);
}

.tab-btn.active {
  color: #fff;
  border-bottom-color: var(--primary-color);
  background: rgba(37, 99, 235, 0.05);
  

}

.tabs-content {
  padding: var(--spacing-xl);
}

.tab-content {
  display: none;
}

.tab-content.active {
  display: block;
}

/* Configuration Sections */
.config-section {
  margin-bottom: var(--spacing-xl);
}

.config-section h4 {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: var(--spacing-lg);
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding-bottom: var(--spacing-sm);
  border-bottom: 2px solid var(--border-light);
}
.dark-mode .config-section h4,h5 {
color: #fff;
}

.config-section h5 {
  font-size: 1rem;
  font-weight: 600;
  color: var(--text-primary);
  margin: var(--spacing-lg) 0 var(--spacing-md) 0;
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

/* Configuration Grid */
.config-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: var(--spacing-lg);
  align-items: start;
}

.config-item {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
}

.config-item.full-width {
  grid-column: 1 / -1;
}

.config-item label {
  font-weight: 500;
  color: var(--text-primary);
  font-size: 0.875rem;
}
.dark-mode .config-item label {
 color: #fff;
}
.config-input, .select-input {
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  background: var(--bg-secondary);
  color: var(--text-primary);
  transition: all var(--transition-fast);
  font-size: 0.875rem;
}

.dark-mode .config-input, .select-input {
 background-color: transparent;
 color: #fff;
}

.config-input:focus, .select-input:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

.input-group {
  display: flex;
  gap: 0;
  align-items: stretch;
}

.input-group .config-input {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  border-right: none;
}

.input-addon {
  padding: var(--spacing-sm) var(--spacing-md);
  background: var(--bg-tertiary);
  border: 1px solid var(--border-color);
  border-left: none;
  border-top-right-radius: var(--radius-md);
  border-bottom-right-radius: var(--radius-md);
  font-size: 0.875rem;
  color: var(--text-secondary);
  display: flex;
  align-items: center;
}

.help-text {
  font-size: 0.75rem;
  color: var(--text-muted);
  margin-top: var(--spacing-xs);
}

.dark-mode .help-text {
 color: #f8fafc;
}
/* Toggle Switches */
.toggle-group {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
}

.toggle-label {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  cursor: pointer;
  font-weight: 500;
}

.toggle-input {
  display: none;
}

.toggle-slider {
  width: 44px;
  height: 24px;
  background: var(--border-dark);
  border-radius: 12px;
  position: relative;
  transition: all var(--transition-fast);
}

.toggle-slider::before {
  content: '';
  position: absolute;
  top: 2px;
  left: 2px;
  width: 20px;
  height: 20px;
  background: white;
  border-radius: 50%;
  transition: all var(--transition-fast);
  box-shadow: var(--shadow-sm);
}

.toggle-input:checked + .toggle-slider {
  background: var(--primary-color);
}

.toggle-input:checked + .toggle-slider::before {
  transform: translateX(20px);
}

.toggle-text {
  color: var(--text-primary);
  font-size: 0.875rem;
}

.dark-mode .toggle-text {
color: #f1f5f9;
}

/* Checkbox Groups */
.checkbox-group {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
}

.checkbox-label {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  cursor: pointer;
  padding: var(--spacing-xs) 0;
  font-size: 0.875rem;
}

.checkbox-label input[type="checkbox"] {
  display: none;
}

.checkmark {
  width: 18px;
  height: 18px;
  border: 2px solid var(--border-color);
  border-radius: var(--radius-sm);
  position: relative;
  transition: all var(--transition-fast);
}

.checkbox-label input:checked + .checkmark {
  background: var(--primary-color);
  border-color: var(--primary-color);
}

.checkbox-label input:checked + .checkmark::after {
  content: '✓';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  font-size: 12px;
  font-weight: bold;
}

.checkbox-label.very-cheap input:checked + .checkmark {
  background: var(--price-very-cheap);
  border-color: var(--price-very-cheap);
}

.checkbox-label.cheap input:checked + .checkmark {
  background: var(--price-cheap);
  border-color: var(--price-cheap);
}

.checkbox-label.normal input:checked + .checkmark {
  background: var(--price-normal);
  border-color: var(--price-normal);
}

/* Status Displays */
.tibber-status {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: var(--spacing-md);
  padding: var(--spacing-lg);
  background: var(--bg-tertiary);
  border-radius: var(--radius-md);
  margin-top: var(--spacing-lg);
}

.status-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-sm) 0;
}

.status-item .label {
  font-size: 0.875rem;
  color: var(--text-secondary);
  font-weight: 500;
}

.status-item .value {
  font-size: 0.875rem;
  color: var(--text-primary);
  font-weight: 600;
}

/* Weather Display */
.weather-display {
  margin-top: var(--spacing-lg);
}

.weather-current {
  display: flex;
  gap: var(--spacing-lg);
  padding: var(--spacing-lg);
  background: var(--bg-tertiary);
  border-radius: var(--radius-md);
  align-items: center;
}

.weather-main {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
}

.weather-icon-large {
  width: 64px;
  height: 64px;
  border-radius: var(--radius-md);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  color: white;
  background: linear-gradient(135deg, var(--weather-cloudy), #9ca3af);
}

.weather-temp-large {
  font-size: 2rem;
  font-weight: 700;
  color: var(--text-primary);
}

.weather-details {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: var(--spacing-sm);
}

.weather-detail {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.weather-detail .label {
  font-size: 0.875rem;
  color: var(--text-secondary);
  font-weight: 500;
}

.weather-detail .value {
  font-size: 0.875rem;
  color: var(--text-primary);
  font-weight: 600;
}

/* Power Rules */
.power-rules {
  margin-top: var(--spacing-lg);
}

.power-rules-list {
  margin-top: var(--spacing-lg);
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.power-rule-item {
  padding: var(--spacing-lg);
  background: var(--bg-tertiary);
  border-radius: var(--radius-md);
  border: 1px solid var(--border-light);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.power-rule-info h6 {
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: var(--spacing-xs);
}
.dark-mode .power-rule-info h6,p  {
color: #f3f4f6;
}

.power-rule-info p {
  font-size: 0.875rem;
  color: var(--text-secondary);
  margin-bottom: var(--spacing-xs);
}

.power-rule-priority {
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--radius-sm);
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
}

.power-rule-priority.high {
  background: rgba(239, 68, 68, 0.1);
  color: var(--error-color);
}

.power-rule-priority.medium {
  background: rgba(245, 158, 11, 0.1);
  color: var(--warning-color);
}

.power-rule-priority.low {
  background: rgba(100, 116, 139, 0.1);
  color: var(--secondary-color);
}

.power-rule-actions {
  display: flex;
  gap: var(--spacing-sm);
}

/* Schedule Builder */
.schedule-builder {
  margin-top: var(--spacing-lg);
}

.schedules-list {
  margin-top: var(--spacing-lg);
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.schedule-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
  padding: var(--spacing-md);
  background: var(--bg-tertiary);
  border-radius: var(--radius-md);
  border: 1px solid var(--border-light);
}

.schedule-time {
  font-weight: 600;
  color: var(--text-primary);
  min-width: 120px;
}

.schedule-days {
  flex: 1;
  color: var(--text-secondary);
  font-size: 0.875rem;
}

/* Inverter Status */
.inverter-status {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: var(--spacing-md);
  margin-top: var(--spacing-md);
}

.inverter-item {
  padding: var(--spacing-lg);
  background: var(--bg-tertiary);
  border-radius: var(--radius-md);
  border: 1px solid var(--border-light);
}

.inverter-item h6 {
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: var(--spacing-sm);
}
.dark-mode .inverter-item h6 {
  color: #DEAF0B;
}
.inverter-type {
  display: inline-block;
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--radius-sm);
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  margin-bottom: var(--spacing-sm);
}

.inverter-type.legacy {
  background: rgba(100, 116, 139, 0.1);
  color: var(--secondary-color);
}

.inverter-type.new {
  background: rgba(37, 99, 235, 0.1);
  color: var(--primary-color);
}

.inverter-type.hybrid {
  background: rgba(16, 185, 129, 0.1);
  color: var(--success-color);
}

.inverter-type.unknown {
  background: rgba(245, 158, 11, 0.1);
  color: var(--warning-color);
}

/* Health Indicators */
.health-indicators {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: var(--spacing-md);
  margin-top: var(--spacing-md);
}

.health-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  padding: var(--spacing-md);
  background: var(--bg-tertiary);
  border-radius: var(--radius-md);
}

.health-icon {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1rem;
  color: white;
}

.health-icon.good {
  background: var(--success-color);
}

.health-icon.warning {
  background: var(--warning-color);
}

.health-icon.error {
  background: var(--error-color);
}

.health-info h6 {
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: var(--spacing-xs);
}

.health-info p {
  font-size: 0.875rem;
  color: var(--text-secondary);
}

/* Buttons */
.btn {
  padding: var(--spacing-sm) var(--spacing-lg);
  border-radius: var(--radius-md);
  font-weight: 600;
  cursor: pointer;
  transition: all var(--transition-fast);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  font-size: 0.875rem;
  text-decoration: none;
  border: 1px solid transparent;
}

.dark-mode.btn {
 background: #DEAF0B;
 color: #fff;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-primary {
  background: var(--primary-color);
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background: var(--primary-dark);
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

.btn-secondary {
  background: var(--secondary-color);
  color: white;
}

.btn-secondary:hover:not(:disabled) {
  background: #475569;
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

.btn-outline {
  background: transparent;
  color: var(--text-primary);
  border-color: var(--border-color);
}

.btn-outline:hover:not(:disabled) {
  background: var(--bg-tertiary);
  transform: translateY(-1px);
}

.btn-icon {
  padding: var(--spacing-sm);
  width: 36px;
  height: 36px;
  border-radius: var(--radius-md);
  background: transparent;
  color: var(--text-secondary);
  border: 1px solid var(--border-color);
}

.btn-icon:hover:not(:disabled) {
  background: var(--bg-tertiary);
  color: var(--text-primary);
}

/* Actions Footer */
.actions-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: var(--spacing-lg);
  padding: var(--spacing-lg);
  background: var(--bg-card);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  border: 1px solid var(--border-light);
  flex-wrap: wrap;
}

.actions-left, .actions-right {
  display: flex;
  gap: var(--spacing-md);
  flex-wrap: wrap;
}

/* Modals */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  backdrop-filter: blur(5px);
}

.modal.active {
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-content {
  background: var(--bg-card);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-xl);
  max-width: 600px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-lg);
  border-bottom: 1px solid var(--border-light);
}

.modal-header h3 {
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--text-primary);
}

.modal-close {
  background: none;
  border: none;
  font-size: 1.5rem;
  color: var(--text-secondary);
  cursor: pointer;
  padding: var(--spacing-xs);
}

.modal-close:hover {
  color: var(--text-primary);
}

.modal-body {
  padding: var(--spacing-lg);
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: var(--spacing-md);
  padding: var(--spacing-lg);
  border-top: 1px solid var(--border-light);
}

/* Toast Notifications */
.toast-container {
  position: fixed;
  top: var(--spacing-lg);
  right: var(--spacing-lg);
  z-index: 2000;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
}

.toast {
  padding: var(--spacing-md) var(--spacing-lg);
  border-radius: var(--radius-md);
  color: white;
  font-weight: 500;
  min-width: 250px;
  box-shadow: var(--shadow-lg);
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  transform: translateX(100%);
  transition: transform var(--transition-normal);
}

.toast.show {
  transform: translateX(0);
}

.toast.success {
  background: var(--success-color);
}

.toast.error {
  background: var(--error-color);
}

.toast.warning {
  background: var(--warning-color);
}

.toast.info {
  background: var(--info-color);
}

/* Animations */
@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.loading {
  animation: spin 1s linear infinite;
}

.fade-in {
  animation: fadeIn var(--transition-normal);
}

/* Responsive Design */
@media (max-width: 768px) {
  .container {
    padding: var(--spacing-sm);
  }
  
  .header-content {
    flex-direction: column;
    text-align: center;
  }
  
  .header-right {
    justify-content: center;
  }
  
  .quick-actions {
    flex-direction: column;
  }
  
  .quick-btn {
    min-width: auto;
  }
  
  .dashboard-grid {
    grid-template-columns: 1fr;
    gap: var(--spacing-lg);
  }
  
  .status-grid {
    grid-template-columns: 1fr;
  }
  
  .weather-card {
    grid-column: span 1;
  }
  
  .config-grid {
    grid-template-columns: 1fr;
  }
  
  .tabs-header {
    flex-wrap: wrap;
  }
  
  .tab-btn {
    flex: none;
    min-width: 100px;
  }
  
  .tabs-content {
    padding: var(--spacing-md);
  }
  
  .actions-footer {
    flex-direction: column;
  }
  
  .actions-left, .actions-right {
    width: 100%;
    justify-content: center;
  }
  
  .modal-content {
    width: 95%;
    margin: var(--spacing-md);
  }
  
  .weather-current {
    flex-direction: column;
    text-align: center;
  }
  
  .weather-details {
    grid-template-columns: 1fr;
  }
  
  .power-rule-item {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-md);
  }
  
  .schedule-item {
    flex-direction: column;
    align-items: flex-start;
  }
}

@media (max-width: 480px) {
  .header-left h1 {
    font-size: 1.5rem;
  }
  
  .status-card {
    flex-direction: column;
    text-align: center;
  }
  
  .chart-container {
    height: 250px;
  }
  
  .chart-legend {
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-sm);
  }
  
  .tibber-status {
    grid-template-columns: 1fr;
  }
  
  .toast-container {
    left: var(--spacing-sm);
    right: var(--spacing-sm);
  }
  
  .toast {
    min-width: auto;
  }
}

/* Print Styles */
@media print {
  .quick-actions,
  .actions-footer,
  .modal {
    display: none;
  }
  
  .container {
    max-width: none;
    padding: 0;
  }
  
  .dashboard-grid {
    grid-template-columns: 1fr;
  }
  
  .panel {
    box-shadow: none;
    border: 1px solid var(--border-color);
    page-break-inside: avoid;
    margin-bottom: var(--spacing-lg);
  }
}
.panel-content{
    color: #000;
}
.dark-mode  .panel-content,.panel, .chart-panel{
    background-color: rgb(32, 36, 41);
    color: #fff;
}

.dark-mode .chart-container{
    background-color: rgba(24, 27, 31, 1);
}

.dark-mode .tabs-content{
    background-color: rgb(32, 36, 41);
}

.dark-mode .modal-content{
    background-color: rgb(32, 36, 41);
}

.dark-mode .actions-footer{
    background-color: rgb(32, 36, 41);
    color: #fff;
}

    </style>
  
</head>
<body>
    <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
      <span></span>
      <span></span>
      <span></span>
  </button>
  <div class="container">
      <div id="loadingOverlay" class="loading-overlay">
          <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"> </div>

        <%- include('partials/sidebar') %>
        <div class="main-content">
    <div class="container">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="header-left">
                    <h1><i class="fas fa-bolt"></i> Dynamic Pricing Control</h1>
                    <p class="subtitle">Intelligent battery charging with Tibber integration</p>
                </div>
                <div class="header-right">
                    <div class="status-indicator" id="connectionStatus">
                        <i class="fas fa-circle"></i> <span>Connecting...</span>
                    </div>
                    <div class="learner-mode-indicator" id="learnerModeStatus">
                        <i class="fas fa-graduation-cap"></i> <span>Learner Mode</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Quick Actions Bar -->
        <div class="quick-actions">
            <button class="quick-btn" id="manualChargeBtn" data-action="charge">
                <i class="fas fa-play"></i> Start Charging
            </button>
            <button class="quick-btn" id="manualStopBtn" data-action="stop">
                <i class="fas fa-stop"></i> Stop Charging
            </button>
            <button class="quick-btn" id="refreshDataBtn">
                <i class="fas fa-refresh"></i> Refresh Data
            </button>
            <button class="quick-btn" id="testConditionsBtn">
                <i class="fas fa-flask"></i> Test Conditions
            </button>
        </div>

        <!-- Main Dashboard -->
        <div class="dashboard-grid">
            <!-- Current Status Panel -->
            <div class="panel status-panel">
                <div class="panel-header">
                    <h3><i class="fas fa-tachometer-alt"></i> Current Status</h3>
                    <div class="panel-controls">
                        <button class="btn btn-icon" id="refreshStatusBtn">
                            <i class="fas fa-sync"></i>
                        </button>
                    </div>
                </div>
                <div class="panel-content">
                    <div class="status-grid">
                        <!-- Battery Status -->
                        <div class="status-card">
                            <div class="status-icon battery">
                                <i class="fas fa-battery-three-quarters"></i>
                            </div>
                            <div class="status-info">
                                <h4>Battery SoC</h4>
                                <span class="status-value" id="batterySOC">--</span>
                                <span class="status-unit">%</span>
                            </div>
                        </div>

                        <!-- Current Price -->
                        <div class="status-card">
                            <div class="status-icon price">
                                <i class="fas fa-euro-sign"></i>
                            </div>
                            <div class="status-info">
                                <h4>Current Price</h4>
                                <span class="status-value" id="currentPrice">--</span>
                                <span class="status-unit" id="currentCurrency">EUR/kWh</span>
                                <div class="price-level" id="priceLevel"></div>
                            </div>
                        </div>

                        <!-- PV Power -->
                        <div class="status-card">
                            <div class="status-icon pv">
                                <i class="fas fa-sun"></i>
                            </div>
                            <div class="status-info">
                                <h4>PV Power</h4>
                                <span class="status-value" id="pvPower">--</span>
                                <span class="status-unit">W</span>
                            </div>
                        </div>

                        <!-- Load Power -->
                        <div class="status-card">
                            <div class="status-icon load">
                                <i class="fas fa-home"></i>
                            </div>
                            <div class="status-info">
                                <h4>Load</h4>
                                <span class="status-value" id="loadPower">--</span>
                                <span class="status-unit">W</span>
                            </div>
                        </div>

                        <!-- Battery Power -->
                        <div class="status-card">
                            <div class="status-icon battery-power">
                                <i class="fas fa-battery-bolt"></i>
                            </div>
                            <div class="status-info">
                                <h4>Battery Power</h4>
                                <span class="status-value" id="batteryPower">--</span>
                                <span class="status-unit">W</span>
                            </div>
                        </div>

                        <!-- Grid Power -->
                        <div class="status-card">
                            <div class="status-icon grid">
                                <i class="fas fa-plug"></i>
                            </div>
                            <div class="status-info">
                                <h4>Grid Power</h4>
                                <span class="status-value" id="gridPower">--</span>
                                <span class="status-unit">W</span>
                            </div>
                        </div>

                        <!-- Weather -->
                        <div class="status-card weather-card">
                            <div class="weather-icon" id="weatherIcon">
                                <i class="fas fa-cloud"></i>
                            </div>
                            <div class="weather-info">
                                <h4>Weather</h4>
                                <span class="weather-temp" id="weatherTemp">--°C</span>
                                <span class="weather-desc" id="weatherDesc">Loading...</span>
                                <div class="weather-animation" id="weatherAnimation"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Charging Decision -->
                    <div class="charging-decision" id="chargingDecision">
                        <div class="decision-status">
                            <i class="fas fa-question-circle"></i>
                            <span>Analyzing conditions...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Price Chart -->
            <div class="panel chart-panel">
                <div class="panel-header">
                    <h3><i class="fas fa-chart-line"></i> Price Forecast (24h)</h3>
                    <div class="panel-controls">
                        <select id="chartPeriod" class="select-input">
                            <option value="24h">Next 24 Hours</option>
                            <option value="48h">Next 48 Hours</option>
                            <option value="today">Today</option>
                            <option value="tomorrow">Tomorrow</option>
                        </select>
                    </div>
                </div>
                <div class="panel-content">
                    <div class="chart-container">
                        <canvas id="priceChart"></canvas>
                    </div>
                    <div class="chart-legend">
                        <div class="legend-item very-cheap">
                            <span class="legend-dot"></span> Very Cheap
                        </div>
                        <div class="legend-item cheap">
                            <span class="legend-dot"></span> Cheap
                        </div>
                        <div class="legend-item normal">
                            <span class="legend-dot"></span> Normal
                        </div>
                        <div class="legend-item expensive">
                            <span class="legend-dot"></span> Expensive
                        </div>
                        <div class="legend-item very-expensive">
                            <span class="legend-dot"></span> Very Expensive
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Configuration Tabs -->
        <div class="config-tabs">
            <div class="tabs-header">
                <button class="tab-btn active" data-tab="tibber">
                    <i class="fas fa-bolt"></i> Tibber Setup
                </button>
                <button class="tab-btn" data-tab="battery">
                    <i class="fas fa-battery-half"></i> Battery Settings
                </button>
                <button class="tab-btn" data-tab="weather">
                    <i class="fas fa-cloud-sun"></i> Weather Conditions
                </button>
                <button class="tab-btn" data-tab="power">
                    <i class="fas fa-lightning-bolt"></i> Power Rules
                </button>
                <button class="tab-btn" data-tab="schedule">
                    <i class="fas fa-clock"></i> Scheduling
                </button>
                <button class="tab-btn" data-tab="advanced">
                    <i class="fas fa-cog"></i> Advanced
                </button>
            </div>

            <div class="tabs-content">
                <!-- Tibber Configuration -->
                <div class="tab-content active" id="tibber-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-key"></i> Tibber API Configuration</h4>
                        <div class="config-grid">
                            <div class="config-item">
                                <label for="tibberApiKey">API Key</label>
                                <div class="input-group">
                                    <input type="password" id="tibberApiKey" class="config-input" placeholder="Enter your Tibber API key">
                                    <button class="btn btn-icon" id="toggleApiKey">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-secondary" id="testTibberBtn">Test</button>
                                </div>
                                <small class="help-text">Get your API key from Tibber Developer Portal</small>
                            </div>

                            <div class="config-item">
                                <label for="country">Country</label>
                                <select id="country" class="config-input">
                                    <option value="">Select Country</option>
                                    <option value="NO">Norway</option>
                                    <option value="SE">Sweden</option>
                                    <option value="DK">Denmark</option>
                                    <option value="FI">Finland</option>
                                    <option value="DE">Germany</option>
                                    <option value="NL">Netherlands</option>
                                    <option value="GB">United Kingdom</option>
                                </select>
                            </div>

                            <div class="config-item">
                                <label for="city">City</label>
                                <select id="city" class="config-input">
                                    <option value="">Select City</option>
                                </select>
                            </div>

                            <div class="config-item">
                                <label for="timezone">Timezone</label>
                                <select id="timezone" class="config-input">
                                    <option value="Europe/Oslo">Europe/Oslo</option>
                                    <option value="Europe/Stockholm">Europe/Stockholm</option>
                                    <option value="Europe/Copenhagen">Europe/Copenhagen</option>
                                    <option value="Europe/Helsinki">Europe/Helsinki</option>
                                    <option value="Europe/Berlin">Europe/Berlin</option>
                                    <option value="Europe/Amsterdam">Europe/Amsterdam</option>
                                    <option value="Europe/London">Europe/London</option>
                                </select>
                            </div>
                        </div>

                        <div class="tibber-status" id="tibberStatus">
                            <div class="status-item">
                                <span class="label">Connection:</span>
                                <span class="value" id="tibberConnection">Not tested</span>
                            </div>
                            <div class="status-item">
                                <span class="label">Last Price Update:</span>
                                <span class="value" id="lastPriceUpdate">Never</span>
                            </div>
                            <div class="status-item">
                                <span class="label">Data Points:</span>
                                <span class="value" id="dataPoints">0</span>
                            </div>
                        </div>
                    </div>

                    <div class="config-section">
                        <h4><i class="fas fa-euro-sign"></i> Price-Based Charging</h4>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enablePriceCharging" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Price-Based Charging</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="useTibberLevels" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Use Tibber Price Levels (Recommended)</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item" id="tibberLevelsConfig">
                                <label>Allowed Price Levels</label>
                                <div class="checkbox-group">
                                    <label class="checkbox-label very-cheap">
                                        <input type="checkbox" id="levelVeryCheap" value="VERY_CHEAP">
                                        <span class="checkmark"></span>
                                        Very Cheap
                                    </label>
                                    <label class="checkbox-label cheap">
                                        <input type="checkbox" id="levelCheap" value="CHEAP">
                                        <span class="checkmark"></span>
                                        Cheap
                                    </label>
                                    <label class="checkbox-label normal">
                                        <input type="checkbox" id="levelNormal" value="NORMAL">
                                        <span class="checkmark"></span>
                                        Normal
                                    </label>
                                </div>
                            </div>

                            <div class="config-item" id="priceThresholdConfig">
                                <label for="maxPriceThreshold">Maximum Price Threshold</label>
                                <div class="input-group">
                                    <input type="number" id="maxPriceThreshold" class="config-input" step="0.01" min="0" max="1">
                                    <span class="input-addon">EUR/kWh</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Battery Settings -->
                <div class="tab-content" id="battery-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-battery-half"></i> Battery Management</h4>
                        <div class="config-grid">
                            <div class="config-item">
                                <label for="emergencySOC">Emergency SoC</label>
                                <div class="input-group">
                                    <input type="number" id="emergencySOC" class="config-input" min="5" max="30">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Force charging below this level</small>
                            </div>

                            <div class="config-item">
                                <label for="minimumSOC">Minimum SoC</label>
                                <div class="input-group">
                                    <input type="number" id="minimumSOC" class="config-input" min="10" max="50">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Preferred minimum charge level</small>
                            </div>

                            <div class="config-item">
                                <label for="targetSOC">Target SoC</label>
                                <div class="input-group">
                                    <input type="number" id="targetSOC" class="config-input" min="50" max="95">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Stop charging at this level</small>
                            </div>

                            <div class="config-item">
                                <label for="maxSOC">Maximum SoC</label>
                                <div class="input-group">
                                    <input type="number" id="maxSOC" class="config-input" min="80" max="100">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Never charge above this level</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Weather Conditions -->
                <div class="tab-content" id="weather-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-cloud-sun"></i> Weather-Based Charging</h4>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enableWeatherConditions" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Weather-Based Charging</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="weatherApiKey">OpenWeatherMap API Key</label>
                                <div class="input-group">
                                    <input type="password" id="weatherApiKey" class="config-input" placeholder="Enter API key">
                                    <button class="btn btn-secondary" id="testWeatherBtn">Test</button>
                                </div>
                                <small class="help-text">Get free API key from openweathermap.org</small>
                            </div>

                            <div class="config-item">
                                <label for="cloudCoverThreshold">Cloud Cover Threshold</label>
                                <div class="input-group">
                                    <input type="number" id="cloudCoverThreshold" class="config-input" min="0" max="100">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Trigger charging above this cloud cover</small>
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="chargeOnCloudyDays" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Charge on Cloudy Days</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="chargeBeforeStorm" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Charge Before Storms</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Current Weather -->
                        <div class="weather-display" id="currentWeatherDisplay">
                            <h5><i class="fas fa-thermometer-half"></i> Current Weather</h5>
                            <div class="weather-current">
                                <div class="weather-main">
                                    <div class="weather-icon-large" id="currentWeatherIcon">
                                        <i class="fas fa-cloud"></i>
                                    </div>
                                    <div class="weather-temp-large" id="currentWeatherTemp">--°C</div>
                                </div>
                                <div class="weather-details">
                                    <div class="weather-detail">
                                        <span class="label">Description:</span>
                                        <span class="value" id="currentWeatherDesc">--</span>
                                    </div>
                                    <div class="weather-detail">
                                        <span class="label">Cloud Cover:</span>
                                        <span class="value" id="currentCloudCover">--%</span>
                                    </div>
                                    <div class="weather-detail">
                                        <span class="label">Humidity:</span>
                                        <span class="value" id="currentHumidity">--%</span>
                                    </div>
                                    <div class="weather-detail">
                                        <span class="label">Wind:</span>
                                        <span class="value" id="currentWind">-- m/s</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Power Rules -->
                <div class="tab-content" id="power-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-lightning-bolt"></i> Smart Power Conditions</h4>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enablePowerConditions" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Smart Power Conditions</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Power Rules Builder -->
                        <div class="power-rules" id="powerRulesSection">
                            <h5><i class="fas fa-plus-circle"></i> Custom Power Rules</h5>
                            <button class="btn btn-primary" id="addPowerRuleBtn">
                                <i class="fas fa-plus"></i> Add New Rule
                            </button>
                            
                            <div class="power-rules-list" id="powerRulesList">
                                <!-- Dynamic power rules will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Scheduling -->
                <div class="tab-content" id="schedule-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-clock"></i> Time-Based Conditions</h4>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enableTimeConditions" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Time-Based Conditions</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="avoidPeakHours" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Avoid Peak Hours</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="peakStart">Peak Start Time</label>
                                <input type="time" id="peakStart" class="config-input">
                            </div>

                            <div class="config-item">
                                <label for="peakEnd">Peak End Time</label>
                                <input type="time" id="peakEnd" class="config-input">
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="preferNightCharging" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Prefer Night Charging</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="nightStart">Night Start Time</label>
                                <input type="time" id="nightStart" class="config-input">
                            </div>

                            <div class="config-item">
                                <label for="nightEnd">Night End Time</label>
                                <input type="time" id="nightEnd" class="config-input">
                            </div>
                        </div>

                        <!-- Scheduled Charging -->
                        <h5><i class="fas fa-calendar-alt"></i> Scheduled Charging</h5>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enableScheduledCharging" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Scheduled Charging</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="schedule-builder" id="scheduleBuilder">
                            <button class="btn btn-primary" id="addScheduleBtn">
                                <i class="fas fa-plus"></i> Add Schedule
                            </button>
                            <div class="schedules-list" id="schedulesList">
                                <!-- Dynamic schedules will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Advanced Settings -->
                <div class="tab-content" id="advanced-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-cog"></i> Advanced Settings</h4>
                        
                        <!-- Cooldown Settings -->
                        <h5><i class="fas fa-clock"></i> Cooldown Management</h5>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enableCooldown" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Cooldown Protection</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="chargingCooldownMinutes">Charging Cooldown</label>
                                <div class="input-group">
                                    <input type="number" id="chargingCooldownMinutes" class="config-input" min="1" max="180">
                                    <span class="input-addon">minutes</span>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="maxChargingCyclesPerDay">Max Cycles Per Day</label>
                                <div class="input-group">
                                    <input type="number" id="maxChargingCyclesPerDay" class="config-input" min="1" max="50">
                                    <span class="input-addon">cycles</span>
                                </div>
                            </div>
                        </div>

                        <!-- Inverter Status -->
                        <h5><i class="fas fa-microchip"></i> Inverter Status</h5>
                        <div class="inverter-status" id="inverterStatusDisplay">
                            <!-- Inverter status will be populated dynamically -->
                        </div>

                        <!-- System Health -->
                        <h5><i class="fas fa-heartbeat"></i> System Health</h5>
                        <div class="health-indicators" id="healthIndicators">
                            <!-- Health indicators will be populated dynamically -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Actions Footer -->
        <div class="actions-footer">
            <div class="actions-left">
                <button class="btn btn-outline" id="resetSettingsBtn">
                    <i class="fas fa-undo"></i> Reset to Defaults
                </button>
                <button class="btn btn-outline" id="exportSettingsBtn">
                    <i class="fas fa-download"></i> Export Settings
                </button>
                <button class="btn btn-outline" id="importSettingsBtn">
                    <i class="fas fa-upload"></i> Import Settings
                </button>
            </div>
            <div class="actions-right">
                <button class="btn btn-secondary" id="disableBtn">
                    <i class="fas fa-power-off"></i> Disable
                </button>
                <button class="btn btn-primary" id="saveSettingsBtn">
                    <i class="fas fa-save"></i> Save Settings
                </button>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div class="modal" id="powerRuleModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Power Rule Configuration</h3>
                <button class="modal-close" id="closePowerRuleModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="config-grid">
                    <div class="config-item full-width">
                        <label for="ruleName">Rule Name</label>
                        <input type="text" id="ruleName" class="config-input" placeholder="Enter rule name">
                    </div>
                    <div class="config-item full-width">
                        <label for="rulePriority">Priority</label>
                        <select id="rulePriority" class="config-input">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                    <div class="config-item full-width">
                        <label for="ruleDescription">Description</label>
                        <textarea id="ruleDescription" class="config-input" rows="2" placeholder="Describe what this rule does"></textarea>
                    </div>
                </div>
                
                <h4>Conditions</h4>
                <div id="ruleConditions">
                    <!-- Dynamic conditions will be added here -->
                </div>
                <button class="btn btn-secondary" id="addConditionBtn">
                    <i class="fas fa-plus"></i> Add Condition
                </button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="cancelRuleBtn">Cancel</button>
                <button class="btn btn-primary" id="saveRuleBtn">Save Rule</button>
            </div>
        </div>
    </div>
</div>
        
</div>
    <!-- Toast Notifications -->
    <div class="toast-container" id="toastContainer"></div>

   <script>
    // Dynamic Pricing Dashboard JavaScript
// Enhanced with beautiful charts and real-time updates

class DynamicPricingDashboard {
    constructor() {
        this.config = {};
        this.systemState = {};
        this.priceChart = null;
        this.isConnected = false;
        this.updateInterval = null;
        this.toastContainer = document.getElementById('toastContainer');
        
        // Initialize the dashboard
        this.init();
    }

    async init() {
        try {
            console.log('🔋 Initializing Dynamic Pricing Dashboard...');
            
            // Hide loading overlay
            this.hideLoading();
            
            // Setup event listeners
            this.setupEventListeners();
            
            // Initialize chart
            this.initializeChart();
            
            // Load initial data
            await this.loadConfiguration();
            await this.loadSystemStatus();
            
            // Start periodic updates
            this.startPeriodicUpdates();
            
            // Setup tab functionality
            this.setupTabs();
            
            console.log('✅ Dashboard initialized successfully');
            this.showToast('Dashboard loaded successfully', 'success');
        } catch (error) {
            console.error('❌ Error initializing dashboard:', error);
            this.showToast('Error initializing dashboard: ' + error.message, 'error');
        }
    }

    // =============================================================================
    // CHART INITIALIZATION AND MANAGEMENT
    // =============================================================================

    initializeChart() {
        const ctx = document.getElementById('priceChart');
        if (!ctx) return;

        // Beautiful chart configuration
        this.priceChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Price',
                    data: [],
                    borderColor: '#3b82f6',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointRadius: 0,
                    pointHoverRadius: 6,
                    pointBackgroundColor: '#3b82f6',
                    pointBorderColor: '#ffffff',
                    pointBorderWidth: 2,
                    segment: {
                        borderColor: (ctx) => this.getSegmentColor(ctx),
                        backgroundColor: (ctx) => this.getSegmentBackgroundColor(ctx)
                    }
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#ffffff',
                        bodyColor: '#ffffff',
                        borderColor: '#3b82f6',
                        borderWidth: 1,
                        cornerRadius: 8,
                        displayColors: false,
                        callbacks: {
                            title: (tooltipItems) => {
                                const dataIndex = tooltipItems[0].dataIndex;
                                const rawData = this.priceChart.data.datasets[0].rawData;
                                if (rawData && rawData[dataIndex]) {
                                    const time = new Date(rawData[dataIndex].timestamp);
                                    return time.toLocaleString();
                                }
                                return tooltipItems[0].label;
                            },
                            label: (context) => {
                                const dataIndex = context.dataIndex;
                                const rawData = this.priceChart.data.datasets[0].rawData;
                                if (rawData && rawData[dataIndex]) {
                                    const item = rawData[dataIndex];
                                    const level = item.level ? ` (${item.level})` : '';
                                    return `Price: ${context.parsed.y.toFixed(4)} ${item.currency || 'EUR'}/kWh${level}`;
                                }
                                return `Price: ${context.parsed.y.toFixed(4)} EUR/kWh`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        display: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)',
                            drawBorder: false
                        },
                        ticks: {
                            color: '#6b7280',
                            font: {
                                size: 11
                            },
                            maxTicksLimit: 12,
                            callback: function(value, index) {
                                const rawData = this.chart.data.datasets[0].rawData;
                                if (rawData && rawData[index]) {
                                    const time = new Date(rawData[index].timestamp);
                                    return time.getHours().toString().padStart(2, '0') + ':00';
                                }
                                return this.getLabelForValue(value);
                            }
                        }
                    },
                    y: {
                        display: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)',
                            drawBorder: false
                        },
                        ticks: {
                            color: '#6b7280',
                            font: {
                                size: 11
                            },
                            callback: function(value) {
                                return value.toFixed(3);
                            }
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeInOutQuart'
                }
            }
        });

        // Setup chart period selector
        document.getElementById('chartPeriod')?.addEventListener('change', (e) => {
            this.updateChart(e.target.value);
        });
    }

    getSegmentColor(ctx) {
        const rawData = ctx.chart.data.datasets[0].rawData;
        if (!rawData || !rawData[ctx.p0DataIndex]) return '#3b82f6';
        
        const level = rawData[ctx.p0DataIndex].level;
        return this.getPriceLevelColor(level);
    }

    getSegmentBackgroundColor(ctx) {
        const color = this.getSegmentColor(ctx);
        return color + '20'; // Add transparency
    }

    getPriceLevelColor(level) {
        const colors = {
            'VERY_CHEAP': '#10b981',   // Green
            'CHEAP': '#22c55e',        // Light green
            'NORMAL': '#64748b',       // Gray
            'EXPENSIVE': '#f59e0b',    // Orange
            'VERY_EXPENSIVE': '#ef4444' // Red
        };
        return colors[level] || '#3b82f6';
    }

    async updateChart(period = '24h') {
        try {
            const response = await fetch('/api/dynamic-pricing/pricing-data');
            const data = await response.json();
            
            if (!data.success || !data.data) {
                console.warn('No pricing data available');
                return;
            }

            let filteredData = data.data;
            const now = new Date();

            // Filter data based on period
            switch (period) {
                case '24h':
                    filteredData = data.data.slice(0, 24);
                    break;
                case '48h':
                    filteredData = data.data.slice(0, 48);
                    break;
                case 'today':
                    filteredData = data.data.filter(item => {
                        const itemDate = new Date(item.timestamp);
                        return itemDate.toDateString() === now.toDateString();
                    });
                    break;
                case 'tomorrow':
                    const tomorrow = new Date(now);
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    filteredData = data.data.filter(item => {
                        const itemDate = new Date(item.timestamp);
                        return itemDate.toDateString() === tomorrow.toDateString();
                    });
                    break;
            }

            if (filteredData.length === 0) {
                console.warn('No data for selected period');
                return;
            }

            // Update chart data
            const labels = filteredData.map(item => {
                const time = new Date(item.timestamp);
                return time.getHours().toString().padStart(2, '0') + ':00';
            });

            const prices = filteredData.map(item => item.price);

            this.priceChart.data.labels = labels;
            this.priceChart.data.datasets[0].data = prices;
            this.priceChart.data.datasets[0].rawData = filteredData;

            // Update y-axis range for better visualization
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);
            const padding = (maxPrice - minPrice) * 0.1;
            
            this.priceChart.options.scales.y.min = Math.max(0, minPrice - padding);
            this.priceChart.options.scales.y.max = maxPrice + padding;

            this.priceChart.update('active');
            
            console.log(`📊 Chart updated with ${filteredData.length} data points for ${period}`);
        } catch (error) {
            console.error('Error updating chart:', error);
            this.showToast('Error updating price chart', 'error');
        }
    }

    // =============================================================================
    // EVENT LISTENERS
    // =============================================================================

    setupEventListeners() {
        // Quick action buttons
        document.getElementById('manualChargeBtn')?.addEventListener('click', () => {
            this.manualCharge(true);
        });

        document.getElementById('manualStopBtn')?.addEventListener('click', () => {
            this.manualCharge(false);
        });

        document.getElementById('refreshDataBtn')?.addEventListener('click', () => {
            this.refreshAllData();
        });

        document.getElementById('testConditionsBtn')?.addEventListener('click', () => {
            this.showTestConditionsModal();
        });

        // Configuration form handlers
        document.getElementById('saveSettingsBtn')?.addEventListener('click', () => {
            this.saveConfiguration();
        });

        document.getElementById('testTibberBtn')?.addEventListener('click', () => {
            this.testTibberConnection();
        });

        document.getElementById('testWeatherBtn')?.addEventListener('click', () => {
            this.testWeatherAPI();
        });

        // Country/city selectors
        document.getElementById('country')?.addEventListener('change', (e) => {
            this.updateCitiesList(e.target.value);
        });

        // API key toggle
        document.getElementById('toggleApiKey')?.addEventListener('click', () => {
            this.togglePasswordField('tibberApiKey');
        });

        // Conditional field toggles
        document.getElementById('useTibberLevels')?.addEventListener('change', (e) => {
            this.toggleTibberLevelsConfig(e.target.checked);
        });

        // Modal handlers
        document.getElementById('addPowerRuleBtn')?.addEventListener('click', () => {
            this.showPowerRuleModal();
        });

        document.getElementById('closePowerRuleModal')?.addEventListener('click', () => {
            this.hidePowerRuleModal();
        });

        // Refresh buttons
        document.getElementById('refreshStatusBtn')?.addEventListener('click', () => {
            this.loadSystemStatus();
        });

        // Settings import/export
        document.getElementById('exportSettingsBtn')?.addEventListener('click', () => {
            this.exportSettings();
        });

        document.getElementById('importSettingsBtn')?.addEventListener('click', () => {
            this.importSettings();
        });
    }

    setupTabs() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');

        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const targetTab = button.getAttribute('data-tab');
                
                // Remove active class from all tabs and contents
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                // Add active class to clicked tab and corresponding content
                button.classList.add('active');
                document.getElementById(targetTab + '-tab')?.classList.add('active');
            });
        });
    }

    // =============================================================================
    // DATA LOADING AND UPDATES
    // =============================================================================

    async loadConfiguration() {
        try {
            const response = await fetch('/api/dynamic-pricing/settings');
            const data = await response.json();
            
            if (data.success) {
                this.config = data.config;
                this.populateConfigurationForm(data.config);
                this.updateConnectionStatus(true);
                console.log('📋 Configuration loaded successfully');
            } else {
                throw new Error(data.error || 'Failed to load configuration');
            }
        } catch (error) {
            console.error('Error loading configuration:', error);
            this.updateConnectionStatus(false);
            this.showToast('Error loading configuration: ' + error.message, 'error');
        }
    }

    async loadSystemStatus() {
        try {
            const response = await fetch('/api/dynamic-pricing/status');
            const data = await response.json();
            
            if (data.success) {
                this.systemState = data.systemState;
                this.updateStatusDisplay(data);
                this.updateChargingDecision(data.status.currentDecision);
                this.updateInverterStatus(data.inverterStatus);
                this.updateHealthIndicators(data);
                console.log('📊 System status updated');
            } else {
                throw new Error(data.error || 'Failed to load system status');
            }
        } catch (error) {
            console.error('Error loading system status:', error);
            this.showToast('Error loading system status: ' + error.message, 'error');
        }
    }

    async loadCurrentPrice() {
        try {
            const response = await fetch('/api/dynamic-pricing/current-price');
            const data = await response.json();
            
            if (data.success && data.currentPrice) {
                this.updateCurrentPriceDisplay(data.currentPrice);
            }
        } catch (error) {
            console.warn('Could not load current price:', error);
        }
    }

    startPeriodicUpdates() {
        // Update every 30 seconds
        this.updateInterval = setInterval(() => {
            this.loadSystemStatus();
            this.loadCurrentPrice();
            this.updateChart();
        }, 30000);

        console.log('🔄 Started periodic updates (30s interval)');
    }

    stopPeriodicUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            console.log('⏹️ Stopped periodic updates');
        }
    }

    // =============================================================================
    // UI UPDATES
    // =============================================================================

    updateStatusDisplay(data) {
        const state = data.systemState;
        
        // Update status cards
        this.updateStatusCard('batterySOC', state.battery_soc, '%');
        this.updateStatusCard('pvPower', state.pv_power, 'W');
        this.updateStatusCard('loadPower', state.load, 'W');
        this.updateStatusCard('gridPower', state.grid_power, 'W');
        this.updateStatusCard('batteryPower', state.battery_power, 'W');

        // Update learner mode indicator
        const learnerMode = data.learnerModeActive;
        const learnerIndicator = document.getElementById('learnerModeStatus');
        if (learnerIndicator) {
            learnerIndicator.className = `learner-mode-indicator ${learnerMode ? 'active' : 'inactive'}`;
            learnerIndicator.querySelector('span').textContent = learnerMode ? 'Learner Mode: Active' : 'Learner Mode: Inactive';
        }
    }

    updateStatusCard(elementId, value, unit) {
        const element = document.getElementById(elementId);
        if (element) {
            if (value !== null && value !== undefined) {
                element.textContent = this.formatNumber(value);
            } else {
                element.textContent = '--';
            }
        }
    }

    updateCurrentPriceDisplay(priceData) {
        const priceElement = document.getElementById('currentPrice');
        const currencyElement = document.getElementById('currentCurrency');
        const levelElement = document.getElementById('priceLevel');
        
        if (priceElement && priceData) {
            priceElement.textContent = priceData.price.toFixed(4);
            
            if (currencyElement) {
                currencyElement.textContent = `${priceData.currency || 'EUR'}/kWh`;
            }
            
            if (levelElement && priceData.level) {
                levelElement.textContent = priceData.level.replace('_', ' ');
                levelElement.className = `price-level ${priceData.level.toLowerCase().replace('_', '-')}`;
            }
        }
    }

    updateChargingDecision(decision) {
        const decisionElement = document.getElementById('chargingDecision');
        if (!decisionElement || !decision) return;

        const icon = decisionElement.querySelector('i');
        const text = decisionElement.querySelector('span');
        
        if (decision.shouldCharge === true) {
            decisionElement.className = 'charging-decision should-charge';
            icon.className = 'fas fa-check-circle';
            text.textContent = `Recommended: CHARGE - ${decision.reason}`;
        } else if (decision.shouldCharge === false) {
            decisionElement.className = 'charging-decision should-not-charge';
            icon.className = 'fas fa-times-circle';
            text.textContent = `Recommended: DON'T CHARGE - ${decision.reason}`;
        } else {
            decisionElement.className = 'charging-decision analyzing';
            icon.className = 'fas fa-question-circle';
            text.textContent = 'Analyzing conditions...';
        }
    }

    updateConnectionStatus(connected) {
        this.isConnected = connected;
        const indicator = document.getElementById('connectionStatus');
        
        if (indicator) {
            if (connected) {
                indicator.className = 'status-indicator connected';
                indicator.querySelector('span').textContent = 'Connected';
            } else {
                indicator.className = 'status-indicator disconnected';
                indicator.querySelector('span').textContent = 'Disconnected';
            }
        }
    }

    updateInverterStatus(inverterStatus) {
        const container = document.getElementById('inverterStatusDisplay');
        if (!container || !inverterStatus) return;

        container.innerHTML = '';

        if (inverterStatus.totalInverters === 0) {
            container.innerHTML = '<p class="text-muted">No inverters detected yet. Waiting for MQTT messages...</p>';
            return;
        }

        Object.entries(inverterStatus.typesSummary).forEach(([type, count]) => {
            const div = document.createElement('div');
            div.className = 'inverter-item';
            div.innerHTML = `
                <h6>Inverter Type: ${type.charAt(0).toUpperCase() + type.slice(1)}</h6>
                <span class="inverter-type ${type}">${count} inverter${count !== 1 ? 's' : ''}</span>
                <p>Auto-detection and command mapping enabled</p>
            `;
            container.appendChild(div);
        });
    }

    updateHealthIndicators(data) {
        const container = document.getElementById('healthIndicators');
        if (!container) return;

        const indicators = [
            {
                icon: 'database',
                label: 'Configuration',
                status: data.success ? 'good' : 'error',
                value: data.success ? 'Loaded' : 'Error'
            },
            {
                icon: 'wifi',
                label: 'Connection',
                status: this.isConnected ? 'good' : 'error',
                value: this.isConnected ? 'Connected' : 'Disconnected'
            },
            {
                icon: 'graduation-cap',
                label: 'Learner Mode',
                status: data.learnerModeActive ? 'good' : 'warning',
                value: data.learnerModeActive ? 'Active' : 'Inactive'
            }
        ];

        container.innerHTML = indicators.map(indicator => `
            <div class="health-item">
                <div class="health-icon ${indicator.status}">
                    <i class="fas fa-${indicator.icon}"></i>
                </div>
                <div class="health-info">
                    <h6>${indicator.label}</h6>
                    <p>${indicator.value}</p>
                </div>
            </div>
        `).join('');
    }

    // =============================================================================
    // CONFIGURATION FORM HANDLING
    // =============================================================================

    populateConfigurationForm(config) {
        try {
            // Tibber settings
            this.setFieldValue('tibberApiKey', config.tibberApiKey || '');
            this.setFieldValue('country', config.country || '');
            this.setFieldValue('timezone', config.timezone || 'Europe/Berlin');
            
            // Update cities when country is set
            if (config.country) {
                this.updateCitiesList(config.country).then(() => {
                    this.setFieldValue('city', config.city || '');
                });
            }

            // Price-based charging
            this.setCheckboxValue('enablePriceCharging', config.priceBasedCharging?.enabled);
            this.setCheckboxValue('useTibberLevels', config.priceBasedCharging?.useTibberLevels);
            this.setFieldValue('maxPriceThreshold', config.priceBasedCharging?.maxPriceThreshold || 0.20);

            // Tibber levels
            const allowedLevels = config.priceBasedCharging?.allowedTibberLevels || [];
            ['VERY_CHEAP', 'CHEAP', 'NORMAL'].forEach(level => {
                const checkbox = document.getElementById(`level${level.charAt(0) + level.slice(1).toLowerCase().replace('_', '')}`);
                if (checkbox) {
                    checkbox.checked = allowedLevels.includes(level);
                }
            });

            // Battery settings
            this.setFieldValue('emergencySOC', config.battery?.emergencySoC || 15);
            this.setFieldValue('minimumSOC', config.battery?.minimumSoC || 20);
            this.setFieldValue('targetSOC', config.battery?.targetSoC || 80);
            this.setFieldValue('maxSOC', config.battery?.maxSoC || 95);

            // Weather settings
            this.setCheckboxValue('enableWeatherConditions', config.weatherConditions?.enabled);
            this.setFieldValue('weatherApiKey', config.weatherConditions?.weatherApiKey || '');
            this.setFieldValue('cloudCoverThreshold', config.weatherConditions?.cloudCoverThreshold || 70);
            this.setCheckboxValue('chargeOnCloudyDays', config.weatherConditions?.chargeOnCloudyDays);
            this.setCheckboxValue('chargeBeforeStorm', config.weatherConditions?.chargeBeforeStorm);

            // Time conditions
            this.setCheckboxValue('enableTimeConditions', config.timeConditions?.enabled);
            this.setCheckboxValue('avoidPeakHours', config.timeConditions?.avoidPeakHours);
            this.setFieldValue('peakStart', config.timeConditions?.peakStart || '17:00');
            this.setFieldValue('peakEnd', config.timeConditions?.peakEnd || '21:00');
            this.setCheckboxValue('preferNightCharging', config.timeConditions?.preferNightCharging);
            this.setFieldValue('nightStart', config.timeConditions?.nightStart || '22:00');
            this.setFieldValue('nightEnd', config.timeConditions?.nightEnd || '06:00');

            // Scheduled charging
            this.setCheckboxValue('enableScheduledCharging', config.scheduledCharging);

            // Cooldown settings
            this.setCheckboxValue('enableCooldown', config.cooldown?.enabled);
            this.setFieldValue('chargingCooldownMinutes', config.cooldown?.chargingCooldownMinutes || 30);
            this.setFieldValue('maxChargingCyclesPerDay', config.cooldown?.maxChargingCyclesPerDay || 8);

            // Smart power conditions
            this.setCheckboxValue('enablePowerConditions', config.smartPowerConditions?.enabled);

            // Toggle conditional sections
            this.toggleTibberLevelsConfig(config.priceBasedCharging?.useTibberLevels);

            console.log('📋 Configuration form populated');
        } catch (error) {
            console.error('Error populating configuration form:', error);
        }
    }

    setFieldValue(fieldId, value) {
        const field = document.getElementById(fieldId);
        if (field && value !== undefined && value !== null) {
            field.value = value;
        }
    }

    setCheckboxValue(fieldId, value) {
        const field = document.getElementById(fieldId);
        if (field) {
            field.checked = Boolean(value);
        }
    }

    async updateCitiesList(countryCode) {
        try {
            const response = await fetch('/api/dynamic-pricing/countries-cities');
            const data = await response.json();
            
            const citySelect = document.getElementById('city');
            if (!citySelect) return;

            citySelect.innerHTML = '<option value="">Select City</option>';

            const country = data.countries.find(c => c.code === countryCode);
            if (country && country.cities) {
                country.cities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city.name;
                    option.textContent = city.name;
                    citySelect.appendChild(option);
                });
            }

            // Update timezone based on country
            if (country && country.timezone) {
                this.setFieldValue('timezone', country.timezone);
            }
        } catch (error) {
            console.error('Error updating cities list:', error);
        }
    }

    toggleTibberLevelsConfig(useTibberLevels) {
        const tibberLevelsConfig = document.getElementById('tibberLevelsConfig');
        const priceThresholdConfig = document.getElementById('priceThresholdConfig');
        
        if (tibberLevelsConfig) {
            tibberLevelsConfig.style.display = useTibberLevels ? 'block' : 'none';
        }
        
        if (priceThresholdConfig) {
            priceThresholdConfig.style.display = useTibberLevels ? 'none' : 'block';
        }
    }

    togglePasswordField(fieldId) {
        const field = document.getElementById(fieldId);
        const button = document.querySelector(`button[onclick*="${fieldId}"]`);
        
        if (field && button) {
            if (field.type === 'password') {
                field.type = 'text';
                button.querySelector('i').className = 'fas fa-eye-slash';
            } else {
                field.type = 'password';
                button.querySelector('i').className = 'fas fa-eye';
            }
        }
    }

    // =============================================================================
    // API ACTIONS
    // =============================================================================

    async saveConfiguration() {
        try {
            const saveBtn = document.getElementById('saveSettingsBtn');
            const originalText = saveBtn.innerHTML;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            saveBtn.disabled = true;

            const config = this.collectConfigurationData();
            
            const response = await fetch('/api/dynamic-pricing/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            const data = await response.json();

            if (data.success) {
                this.config = data.config;
                this.showToast('Configuration saved successfully', 'success');
                console.log('✅ Configuration saved');
                
                // Refresh data after saving
                await this.loadSystemStatus();
                await this.updateChart();
            } else {
                throw new Error(data.error || 'Failed to save configuration');
            }
        } catch (error) {
            console.error('Error saving configuration:', error);
            this.showToast('Error saving configuration: ' + error.message, 'error');
        } finally {
            const saveBtn = document.getElementById('saveSettingsBtn');
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Save Settings';
            saveBtn.disabled = false;
        }
    }

    collectConfigurationData() {
        return {
            enabled: true, // Always enable when saving
            
            // Tibber settings
            tibberApiKey: document.getElementById('tibberApiKey')?.value || '',
            country: document.getElementById('country')?.value || '',
            city: document.getElementById('city')?.value || '',
            timezone: document.getElementById('timezone')?.value || 'Europe/Berlin',

            // Price-based charging
            priceBasedCharging: {
                enabled: document.getElementById('enablePriceCharging')?.checked || false,
                useRealTibberPrices: true,
                useTibberLevels: document.getElementById('useTibberLevels')?.checked || false,
                allowedTibberLevels: this.getSelectedTibberLevels(),
                maxPriceThreshold: parseFloat(document.getElementById('maxPriceThreshold')?.value) || 0.20,
                preferTibberLevels: document.getElementById('useTibberLevels')?.checked || false
            },

            // Battery settings
            battery: {
                emergencySoC: parseInt(document.getElementById('emergencySOC')?.value) || 15,
                minimumSoC: parseInt(document.getElementById('minimumSOC')?.value) || 20,
                targetSoC: parseInt(document.getElementById('targetSOC')?.value) || 80,
                maxSoC: parseInt(document.getElementById('maxSOC')?.value) || 95
            },

            // Weather conditions
            weatherConditions: {
                enabled: document.getElementById('enableWeatherConditions')?.checked || false,
                weatherApiKey: document.getElementById('weatherApiKey')?.value || '',
                chargeOnCloudyDays: document.getElementById('chargeOnCloudyDays')?.checked || false,
                chargeBeforeStorm: document.getElementById('chargeBeforeStorm')?.checked || false,
                cloudCoverThreshold: parseInt(document.getElementById('cloudCoverThreshold')?.value) || 70
            },

            // Time conditions
            timeConditions: {
                enabled: document.getElementById('enableTimeConditions')?.checked || false,
                avoidPeakHours: document.getElementById('avoidPeakHours')?.checked || false,
                peakStart: document.getElementById('peakStart')?.value || '17:00',
                peakEnd: document.getElementById('peakEnd')?.value || '21:00',
                preferNightCharging: document.getElementById('preferNightCharging')?.checked || false,
                nightStart: document.getElementById('nightStart')?.value || '22:00',
                nightEnd: document.getElementById('nightEnd')?.value || '06:00'
            },

            // Smart power conditions
            smartPowerConditions: {
                enabled: document.getElementById('enablePowerConditions')?.checked || false,
                rules: [] // TODO: Implement power rules collection
            },

            // Scheduled charging
            scheduledCharging: document.getElementById('enableScheduledCharging')?.checked || false,
            chargingHours: [], // TODO: Implement schedule collection

            // Cooldown settings
            cooldownSettings: {
                enabled: document.getElementById('enableCooldown')?.checked || false,
                chargingCooldownMinutes: parseInt(document.getElementById('chargingCooldownMinutes')?.value) || 30,
                maxChargingCyclesPerDay: parseInt(document.getElementById('maxChargingCyclesPerDay')?.value) || 8
            }
        };
    }

    getSelectedTibberLevels() {
        const levels = [];
        ['VERY_CHEAP', 'CHEAP', 'NORMAL'].forEach(level => {
            const fieldId = `level${level.charAt(0) + level.slice(1).toLowerCase().replace('_', '')}`;
            const checkbox = document.getElementById(fieldId);
            if (checkbox && checkbox.checked) {
                levels.push(level);
            }
        });
        return levels.length > 0 ? levels : ['VERY_CHEAP', 'CHEAP'];
    }

    async manualCharge(enable) {
        try {
            const button = enable ? document.getElementById('manualChargeBtn') : document.getElementById('manualStopBtn');
            const originalText = button.innerHTML;
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
            button.disabled = true;

            const response = await fetch('/api/dynamic-pricing/manual-charge', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enable: enable })
            });

            const data = await response.json();

            if (data.success) {
                const action = enable ? 'started' : 'stopped';
                this.showToast(`Charging ${action} successfully`, 'success');
                console.log(`🔋 Manual charging ${action}`);
                
                // Refresh status after manual action
                setTimeout(() => this.loadSystemStatus(), 2000);
            } else {
                if (data.canForce) {
                    // Show option to force the command
                    const force = confirm(`Conditions not met: ${data.message}\n\nDo you want to force this command anyway?`);
                    if (force) {
                        return this.manualChargeForce(enable);
                    }
                } else {
                    throw new Error(data.message || `Failed to ${enable ? 'start' : 'stop'} charging`);
                }
            }
        } catch (error) {
            console.error('Error with manual charge command:', error);
            this.showToast('Error: ' + error.message, 'error');
        } finally {
            const button = enable ? document.getElementById('manualChargeBtn') : document.getElementById('manualStopBtn');
            const originalIcon = enable ? 'fa-play' : 'fa-stop';
            const originalText = enable ? 'Start Charging' : 'Stop Charging';
            
            button.innerHTML = `<i class="fas ${originalIcon}"></i> ${originalText}`;
            button.disabled = false;
        }
    }

    async manualChargeForce(enable) {
        try {
            const response = await fetch('/api/dynamic-pricing/manual-charge', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enable: enable, force: true })
            });

            const data = await response.json();

            if (data.success) {
                const action = enable ? 'started' : 'stopped';
                this.showToast(`Charging ${action} (forced)`, 'warning');
                setTimeout(() => this.loadSystemStatus(), 2000);
            } else {
                throw new Error(data.message || 'Failed to force charging command');
            }
        } catch (error) {
            this.showToast('Error forcing command: ' + error.message, 'error');
        }
    }

    async testTibberConnection() {
        try {
            const button = document.getElementById('testTibberBtn');
            const originalText = button.textContent;
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            button.disabled = true;

            const apiKey = document.getElementById('tibberApiKey')?.value;
            if (!apiKey) {
                throw new Error('Please enter a Tibber API key first');
            }

            const response = await fetch('/api/dynamic-pricing/test-tibber', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ apiKey: apiKey })
            });

            const data = await response.json();

            if (data.success) {
                this.showToast(`Tibber connection successful! Found ${data.homes} home(s)`, 'success');
                
                // Update status display
                document.getElementById('tibberConnection').textContent = 'Connected';
                
                if (data.currentPrice) {
                    this.updateCurrentPriceDisplay(data.currentPrice);
                }
            } else {
                throw new Error(data.error || 'Tibber connection failed');
            }
        } catch (error) {
            console.error('Tibber test failed:', error);
            this.showToast('Tibber test failed: ' + error.message, 'error');
            document.getElementById('tibberConnection').textContent = 'Failed';
        } finally {
            const button = document.getElementById('testTibberBtn');
            button.textContent = 'Test';
            button.disabled = false;
        }
    }

    async testWeatherAPI() {
        try {
            const button = document.getElementById('testWeatherBtn');
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            button.disabled = true;

            const weatherApiKey = document.getElementById('weatherApiKey')?.value;
            const country = document.getElementById('country')?.value;
            const city = document.getElementById('city')?.value;

            if (!weatherApiKey) {
                throw new Error('Please enter a weather API key first');
            }

            const response = await fetch('/api/dynamic-pricing/test-weather', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    weatherApiKey: weatherApiKey,
                    country: country,
                    city: city
                })
            });

            const data = await response.json();

            if (data.success) {
                this.showToast('Weather API connection successful!', 'success');
                
                if (data.current) {
                    this.updateWeatherDisplay(data.current);
                }
            } else {
                throw new Error(data.error || 'Weather API test failed');
            }
        } catch (error) {
            console.error('Weather test failed:', error);
            this.showToast('Weather test failed: ' + error.message, 'error');
        } finally {
            const button = document.getElementById('testWeatherBtn');
            button.textContent = 'Test';
            button.disabled = false;
        }
    }

    async refreshAllData() {
        try {
            const button = document.getElementById('refreshDataBtn');
            const originalText = button.innerHTML;
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Refreshing...';
            button.disabled = true;

            // Refresh all data sources
            await Promise.all([
                this.loadConfiguration(),
                this.loadSystemStatus(),
                this.loadCurrentPrice(),
                this.updateChart()
            ]);

            this.showToast('All data refreshed successfully', 'success');
            console.log('🔄 All data refreshed');
        } catch (error) {
            console.error('Error refreshing data:', error);
            this.showToast('Error refreshing data: ' + error.message, 'error');
        } finally {
            const button = document.getElementById('refreshDataBtn');
            button.innerHTML = '<i class="fas fa-refresh"></i> Refresh Data';
            button.disabled = false;
        }
    }

    // =============================================================================
    // UTILITY FUNCTIONS
    // =============================================================================

    formatNumber(value) {
        if (value === null || value === undefined) return '--';
        if (typeof value !== 'number') return value;
        
        if (Math.abs(value) >= 1000) {
            return (value / 1000).toFixed(1) + 'k';
        }
        
        return value.toLocaleString();
    }

    showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icon = this.getToastIcon(type);
        toast.innerHTML = `<i class="fas ${icon}"></i> ${message}`;
        
        this.toastContainer.appendChild(toast);
        
        // Trigger animation
        setTimeout(() => toast.classList.add('show'), 100);
        
        // Remove after 5 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 5000);
    }

    getToastIcon(type) {
        const icons = {
            success: 'fa-check-circle',
            error: 'fa-exclamation-circle',
            warning: 'fa-exclamation-triangle',
            info: 'fa-info-circle'
        };
        return icons[type] || icons.info;
    }

    hideLoading() {
        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) {
            loadingOverlay.style.display = 'none';
        }
    }

    showTestConditionsModal() {
        // TODO: Implement test conditions modal
        this.showToast('Test conditions feature coming soon', 'info');
    }

    showPowerRuleModal() {
        // TODO: Implement power rule modal
        this.showToast('Power rule configuration coming soon', 'info');
    }

    hidePowerRuleModal() {
        const modal = document.getElementById('powerRuleModal');
        if (modal) {
            modal.classList.remove('active');
        }
    }

    exportSettings() {
        const dataStr = JSON.stringify(this.config, null, 2);
        const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
        
        const exportFileDefaultName = 'dynamic-pricing-settings.json';
        
        const linkElement = document.createElement('a');
        linkElement.setAttribute('href', dataUri);
        linkElement.setAttribute('download', exportFileDefaultName);
        linkElement.click();
        
        this.showToast('Settings exported successfully', 'success');
    }

    importSettings() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const settings = JSON.parse(e.target.result);
                        this.populateConfigurationForm(settings);
                        this.showToast('Settings imported successfully', 'success');
                    } catch (error) {
                        this.showToast('Error importing settings: Invalid file format', 'error');
                    }
                };
                reader.readAsText(file);
            }
        };
        
        input.click();
    }

    updateWeatherDisplay(weatherData) {
        // Update weather status card
        const weatherIcon = document.getElementById('weatherIcon');
        const weatherTemp = document.getElementById('weatherTemp');
        const weatherDesc = document.getElementById('weatherDesc');
        
        if (weatherData) {
            if (weatherTemp) {
                weatherTemp.textContent = `${Math.round(weatherData.main?.temp || 0)}°C`;
            }
            
            if (weatherDesc) {
                weatherDesc.textContent = weatherData.weather?.[0]?.description || 'Unknown';
            }
            
            if (weatherIcon) {
                const iconClass = this.getWeatherIconClass(weatherData.weather?.[0]?.main);
                weatherIcon.innerHTML = `<i class="fas ${iconClass}"></i>`;
                weatherIcon.className = `weather-icon ${this.getWeatherClass(weatherData.weather?.[0]?.main)}`;
            }
        }
    }

    getWeatherIconClass(weatherMain) {
        const icons = {
            'Clear': 'fa-sun',
            'Clouds': 'fa-cloud',
            'Rain': 'fa-cloud-rain',
            'Drizzle': 'fa-cloud-drizzle',
            'Thunderstorm': 'fa-bolt',
            'Snow': 'fa-snowflake',
            'Mist': 'fa-smog',
            'Fog': 'fa-smog'
        };
        return icons[weatherMain] || 'fa-cloud';
    }

    getWeatherClass(weatherMain) {
        const classes = {
            'Clear': 'sunny',
            'Clouds': 'cloudy',
            'Rain': 'rainy',
            'Drizzle': 'rainy',
            'Thunderstorm': 'stormy',
            'Snow': 'snowy'
        };
        return classes[weatherMain] || 'cloudy';
    }

    // Cleanup function
    destroy() {
        this.stopPeriodicUpdates();
        
        if (this.priceChart) {
            this.priceChart.destroy();
        }
        
        console.log('🧹 Dashboard destroyed');
    }
}

// Initialize dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.dynamicPricingDashboard = new DynamicPricingDashboard();
});

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
    if (window.dynamicPricingDashboard) {
        window.dynamicPricingDashboard.destroy();
    }
});
   </script>



<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>