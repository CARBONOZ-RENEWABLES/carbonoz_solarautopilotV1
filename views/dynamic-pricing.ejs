<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Dynamic Pricing with Tibber - Carbonoz SolarAutopilot</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>  
 
       
        :root {
            --primary-color: #DEAF0B;
                --primary: #DEAF0B;
                --primary-light: #6384ff;
                --primary-dark: #3a56b9;
                --secondary: #29b9a0;
                --secondary-light: #40d0b6;
                --secondary-dark: #1c9b84;
                --danger: #e74c3c;
                --success: #2ecc71;
                --warning: #f39c12;
                --dark: #343a40;
                --light: #f8f9fa;
                --gray: #6c757d;
                --background: #f5f7ff;
                --card-bg: #ffffff;
                --bg-color: #f5f6fa;
                --text: #333333;
                --border: #e0e0e0;
                --shadow: rgba(0, 0, 0, 0.1);
                --text-color: #2f3640;
            }
            body {
      font-family: 'Inter', sans-serif;
      background: var(--bg-color);
    }
    body.dark-mode { background-color: rgba(24, 27, 31, 1); color: #f5f6fa; }
           body, html {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100%;
            
           }
            /* Sidebar styles */
            .sidebar {
                width: 280px;
                height: 100vh;
                background-color: white;
                border-right: 1px solid #e5e7eb;
                display: flex;
                flex-direction: column;
                position: fixed;
                top: 0;
                left: 0;
                z-index: 1000;
                transition: width 0.3s ease;
            }
           
                   .logo-container {
                       padding: 1.5rem;
                       border-bottom: 1px solid #e5e7eb;
                       display: flex;
                       align-items: center;
                       gap: 0.75rem;
                   }
           
                   .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-weight: bold;
            font-size: 20px;
           }
           
           .logo-text {
            margin-left: 10px;
            font-weight: bold;
            color: var(--text-color);
            font-size: 18px;
           }
           
           .logo-text .highlight {
            color: var(--primary-color);
            margin-left: 10px;
           }
           
           
           nav {
            flex-grow: 1;
           }
           
           nav ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
           }
           nav li {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            color: var(--text-color);
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 18px;
           }
           
           nav li a{
            text-decoration: none;
            color: #2f3640;
            font-weight: bold;
           }
           nav li:hover {
            background-color: var(--bg-color);
           }
           
           nav li i {
            margin-right: 15px;
            color: var(--icon-color);
            font-size: 24px;
           }
           
           .bottom-options {
            padding: 20px;
            border-top: 1px solid #dcdde1;
           }
           
           .toggle-sidebar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            font-size: 16px;
           }
           
           .toggle-text {
            margin-right: 10px;
           }
           
           .toggle-switch {
            width: 50px;
            height: 25px;
            background-color: #dcdde1;
            border-radius: 12.5px;
            position: relative;
            transition: background-color 0.3s;
           }
           .toggle-switch::before {
            content: '';
            position: absolute;
            width: 21px;
            height: 21px;
            border-radius: 50%;
            background-color: white;
            top: 2px;
            left: 2px;
            transition: transform 0.3s;
           }
           
           .toggle-switch.active {
            background-color: var(--primary-color);
           }
           
           .toggle-switch.active::before {
            transform: translateX(25px);
           }
           
           .sidebar.collapsed .logo-text,
           .sidebar.collapsed .search,
           .sidebar.collapsed nav li span,
           .sidebar.collapsed .toggle-text {
            display: none;
           }
           
           .sidebar.collapsed .logo {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li i {
            margin-right: 0;
           }
                   /* Main content styles */
                   .main-content {
                       flex: 1;
                       margin-left: 280px;
                       padding: 2rem;
                   }
           
                   .content-header {
                       margin-bottom: 2rem;
                   }
           
                   .content-header h2 {
                       font-size: 1.875rem;
                       font-weight: 700;
                       color: #111827;
                   }
           
                   .metrics-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                       gap: 1.5rem;
                       margin-bottom: 2rem;
                   }
           
                   .metric-card {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .metric-title {
                       font-size: 0.875rem;
                       font-weight: 600;
                       color: #4b5563;
                       margin-bottom: 0.5rem;
                   }
           
                   .metric-value {
                       font-size: 1.5rem;
                       font-weight: 700;
                       margin-bottom: 0.25rem;
                   }
           
                   .metric-subtitle {
                       font-size: 0.875rem;
                       color: #6b7280;
                   }
           
                   .chart-container {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       margin-bottom: 2rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .chart-wrapper {
                       height: 400px;
                       margin-top: 1rem;
                   }
           
                   .period-buttons {
                       display: flex;
                       gap: 0.75rem;
                       margin-bottom: 1rem;
                   }
           
                   .period-btn {
                       padding: 0.5rem 1rem;
                       border: none;
                       background-color: #e5e7eb;
                       color: #4b5563;
                       border-radius: 6px;
                       cursor: pointer;
                       font-weight: 500;
                       transition: all 0.2s;
                   }
           
                   .period-btn:hover {
                       background-color: #d1d5db;
                   }
           
                   .period-btn.active {
                       background-color: #DEAF0B;
                       color: white;
                   }
           
                   /* Toggle styles */
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .slider {
                       position: absolute;
                       cursor: pointer;
                       top: 0;
                       left: 0;
                       right: 0;
                       bottom: 0;
                       background-color: #e5e7eb;
                       transition: .4s;
                       border-radius: 34px;
                   }
           
                   .slider:before {
                       position: absolute;
                       content: "";
                       height: 16px;
                       width: 16px;
                       left: 4px;
                       bottom: 4px;
                       background-color: white;
                       transition: .4s;
                       border-radius: 50%;
                   }
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   /* Updated and new styles */
                   .bottom-controls {
                       padding: 1.5rem;
                       border-top: 1px solid #e5e7eb;
                   }
           
                   .control-item {
                       display: flex;
                       justify-content: space-between;
                       align-items: center;
                       margin-bottom: 1rem;
                   }
           
                   .control-label {
                       font-size: 0.875rem;
                       color: #4b5563;
                   }
           
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .sidebar {
            width: 280px;
            background-color: white;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            transition: width 0.3s ease;
            z-index: 10;
           }
           
           .sidebar.collapsed {
            width: 80px;
           }
           
           .logo {
            display: flex;
            align-items: center;
            padding: 20px;
           }
           
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   .total-emissions {
                       font-size: 1.25rem;
                       font-weight: 600;
                       margin-bottom: 1rem;
                       color: #374151;
                   }
           
                   .summary-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                       gap: 1rem;
                       margin-bottom: 2rem;
                   }
           
                   .summary-item {
                       background-color: white;
                       border-radius: 8px;
                       padding: 1rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .summary-label {
                       font-size: 0.875rem;
                       color: #6b7280;
                       display: block;
                       margin-bottom: 0.5rem;
                   }
           
                   .summary-value {
                       font-size: 1.25rem;
                       font-weight: 600;
                   }
           
               
           
                   /* Responsive styles */
                   @media (max-width: 768px) {
                       .sidebar {
                           width: 100%;
                           height: auto;
                           position: static;
                           border-right: none;
                           border-bottom: 1px solid #e5e7eb;
                       }
           
                       .main-content {
                           margin-left: 0;
                       }
           
                       body.collapsed-sidebar .sidebar {
                           display: none;
                       }
           
                       body.collapsed-sidebar .main-content {
                           margin-left: 0;
                       }
           
                       .metrics-grid,
                       .summary-grid {
                           grid-template-columns: 1fr;
                       }
           
                       .period-buttons {
                           flex-wrap: wrap;
                       }
           
                       .period-btn {
                           flex: 1 0 calc(50% - 0.375rem);
                           margin-bottom: 0.75rem;
                       }
                   }
        
        /* loading css */
        
        .loading-overlay {
         position: fixed;
         top: 0;
         left: 0;
         width: 100%;
         height: 100%;
         background-color: #f8f9fa;
         display: flex;
         justify-content: center;
         align-items: center;
         z-index: 9999;
        }
        
        .loading-spinner {
         width: 50px;
         height: 50px;
         border: 5px solid #e0e0e0;
         border-top: 5px solid #3498db;
         border-radius: 50%;
         animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
         0% { transform: rotate(0deg); }
         100% { transform: rotate(360deg); }
        }
        
       
        
       
        
        /* Dark mode styles */
        body.dark-mode {
            background-color: rgba(24, 27, 31, 1);
         color: #f5f6fa;
        }
        
        .dark-mode .main-content{
            background-color: rgba(24, 27, 31, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .sidebar {
            background-color: rgba(24, 27, 31, 1);
        }
        
        .dark-mode .sidebar .logo-icon {
         color: #2f3640;
        }
        
        .dark-mode .sidebar .logo-text {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li:hover {
         background-color: #383838;
        }
        
        .dark-mode .sidebar nav li a {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li i {
         color: #dcdde1;
        }
        
        .dark-mode .toggle-sidebar,
        .dark-mode .toggle-dark-mode {
         color: #f5f6fa;
        }
        
        .dark-mode .toggle-switch {
            background-color: var(--primary-color);
        }
        
        .dark-mode .toggle-switch.active {
         background-color: var(--primary-color);
        }
        
        .dark-mode header {
            background-color: rgb(17, 18, 23);
        }
        
        .dark-mode .content-card {
            background-color: rgba(24, 27, 31, 1);
         color: #fff;
        }
        
        
        .dark-mode .loading-overlay{
            background-color: rgba(24, 27, 31, 1);
        }
        
        /* Mobile Sidebar Improvements */
        @media (max-width: 768px) {
            /* Sidebar base styles */
            .sidebar {
                position: fixed;
                top: 0;
                left: 0;
                height: 100vh;
                width: 280px;
                transform: translateX(-100%);
                transition: transform 0.3s ease-in-out;
                z-index: 1000;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
                box-shadow: none;
            }
        
            .sidebar.active {
                transform: translateX(0);
                box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
            }
        
            /* Improved hamburger button */
            .mobile-toggle {
                display: block;
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 1001;
                background: none;
                border: none;
                cursor: pointer;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background-color: white;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                padding: 8px;
            }
        
            .mobile-toggle span {
                display: block;
                width: 24px;
                height: 2px;
                background-color: var(--text-color);
                margin: 5px auto;
                transition: transform 0.3s ease, opacity 0.3s ease;
            }
        
            .mobile-toggle.active span:nth-child(1) {
                transform: translateY(7px) rotate(45deg);
            }
        
            .mobile-toggle.active span:nth-child(2) {
                opacity: 0;
            }
        
            .mobile-toggle.active span:nth-child(3) {
                transform: translateY(-7px) rotate(-45deg);
            }
        
            /* Improved nav items */
            .sidebar nav ul {
                padding: 1rem 0;
            }
        
            .sidebar nav li {
                padding: 0.875rem 1.5rem;
                margin: 0.25rem 1rem;
                border-radius: 8px;
                transition: background-color 0.2s ease;
            }
        
            .sidebar nav li a {
                display: flex;
                align-items: center;
                gap: 1rem;
                font-size: 1rem;
                color: var(--text-color);
            }
        
            .sidebar nav li i {
                font-size: 1.25rem;
                min-width: 24px;
                text-align: center;
            }
        
            .sidebar nav li:active {
                background-color: rgba(0, 0, 0, 0.05);
            }
        
            /* Improved overlay */
            .sidebar-overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(0, 0, 0, 0.4);
                backdrop-filter: blur(2px);
                z-index: 999;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
        
            .sidebar-overlay.active {
                display: block;
                opacity: 1;
            }
        
            /* Dark mode adjustments */
            .dark-mode .mobile-toggle {
                background-color: rgba(255, 255, 255, 0.1);
            }
        
            .dark-mode .mobile-toggle span {
                background-color: #f5f6fa;
            }
        
            .dark-mode .sidebar nav li:active {
                background-color: rgba(255, 255, 255, 0.05);
            }
        }
        
        /* Ensure main content adjusts properly */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding-top: 4.5rem;
                transition: margin-left 0.3s ease;
            }
        
            body.sidebar-open .main-content {
                filter: blur(2px);
                pointer-events: none;
            }
        }
        
        
          /* Main content styling */
        .main-content {
          flex: 1;
          margin-left: 280px;
          padding: 2rem;
          color: var(--text-color);
          transition: margin-left 0.3s ease;
        }
        
        
        .container {
            margin-left: 280px;
            padding: 0 var(--spacer);
            margin: 0 auto;
        }
    
        .page-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
                padding-bottom: 15px;
                border-bottom: 1px solid var(--border);
            }
    
            .page-title {
                font-size: 24px;
                font-weight: 600;
                color: #000;
                display: flex;
                align-items: center;
                gap: 10px;
            }
    
            .page-title i {
                color: var(--primary);
            }
    
            .card {
                background: var(--card-bg);
                border-radius: 8px;
                box-shadow: 0 4px 8px var(--shadow);
                margin-bottom: 20px;
                overflow: hidden;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
    
            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 16px var(--shadow);
            }
    
            .card-header {
                padding: 15px 20px;
                background: var(--primary);
                color: white;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
    
            .card-title {
                font-size: 18px;
                font-weight: 600;
            }
    
            .card-body {
                padding: 20px;
            }
    
            .grid-2 {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
            }
    
            .grid-3 {
                display: grid;
                grid-template-columns: 1fr 1fr 1fr;
                gap: 20px;
            }
    
            .pricing-chart-container {
                height: 300px;
                position: relative;
            }
    
            .pricing-stats {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));
                gap: 15px;
                margin-top: 20px;
            }
    
            .stat-card {
                background: var(--light);
                border-radius: 8px;
                padding: 15px;
                text-align: center;
                box-shadow: 0 2px 4px var(--shadow);
            }
    
            .stat-value {
                font-size: 20px;
                font-weight: 700;
                margin: 8px 0;
                color: var(--primary);
            }
    
            .stat-label {
                font-size: 14px;
                color: var(--gray);
            }
    
            /* Form controls */
            .form-group {
                margin-bottom: 15px;
            }
    
            .form-label {
                display: block;
                margin-bottom: 5px;
                font-weight: 500;
            }
    
            .form-control {
                width: 100%;
                padding: 10px;
                border: 1px solid var(--border);
                border-radius: 4px;
                font-size: 16px;
                transition: border-color 0.3s ease, box-shadow 0.3s ease;
            }
    
            .form-control:focus {
                border-color: var(--primary);
                outline: none;
                box-shadow: 0 0 0 3px rgba(76, 111, 229, 0.2);
            }
    
            .form-select {
                width: 100%;
                padding: 10px;
                border: 1px solid var(--border);
                border-radius: 4px;
                background-color: white;
                font-size: 16px;
                transition: border-color 0.3s ease, box-shadow 0.3s ease;
            }
    
            .form-select:focus {
                border-color: var(--primary);
                outline: none;
                box-shadow: 0 0 0 3px rgba(76, 111, 229, 0.2);
            }
    
            .form-check {
                display: flex;
                align-items: center;
                margin-bottom: 10px;
            }
    
            .form-check-input {
                margin-right: 10px;
                width: 18px;
                height: 18px;
            }
    
            .time-period {
                display: flex;
                align-items: center;
                gap: 10px;
                margin-bottom: 10px;
                background: var(--light);
                padding: 10px;
                border-radius: 4px;
            }
    
            .time-input {
                width: 100px;
            }
    
            .add-time-btn {
                background: var(--secondary);
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
                display: flex;
                align-items: center;
                gap: 5px;
            }
    
            .delete-time-btn {
                background: var(--danger);
                color: white;
                border: none;
                width: 30px;
                height: 30px;
                border-radius: 4px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
            }
    
            /* Buttons */
            .btn {
                padding: 10px 20px;
                border: none;
                border-radius: 4px;
                font-size: 16px;
                cursor: pointer;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
                transition: background-color 0.3s ease, transform 0.3s ease;
            }
    
            .btn:hover {
                transform: translateY(-2px);
            }
    
            .btn-primary {
                background-color: var(--primary);
                color: white;
            }
    
            .btn-primary:hover {
                background-color: var(--primary-dark);
            }
    
            .btn-secondary {
                background-color: var(--secondary);
                color: white;
            }
    
            .btn-secondary:hover {
                background-color: var(--secondary-dark);
            }
    
            .btn-danger {
                background-color: var(--danger);
                color: white;
            }
    
            .btn-danger:hover {
                background-color: #c0392b;
            }
    
            .btn-success {
                background-color: var(--success);
                color: white;
            }
    
            .btn-success:hover {
                background-color: #27ae60;
            }
    
            .btn-sm {
                padding: 6px 12px;
                font-size: 14px;
            }
    
            .btn-group {
                display: flex;
                gap: 10px;
            }
    
            /* Toggle switch */
            .toggle-switch {
                position: relative;
                display: inline-block;
                width: 50px;
                height: 24px;
            }
    
            .toggle-switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }
    
            .toggle-slider {
                position: absolute;
                cursor: pointer;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: #ccc;
                transition: .4s;
                border-radius: 34px;
            }
    
            .toggle-slider:before {
                position: absolute;
                content: "";
                height: 16px;
                width: 16px;
                left: 4px;
                bottom: 4px;
                background-color: white;
                transition: .4s;
                border-radius: 50%;
            }
    
            input:checked + .toggle-slider {
                background-color:#1c9b84;
            }
    
            input:checked + .toggle-slider:before {
                transform: translateX(26px);
            }
    
            .toggle-label {
                margin-left: 60px;
            }
    
            /* Alert messages */
            .alert {
                padding: 12px 20px;
                border-radius: 4px;
                margin-bottom: 20px;
                display: flex;
                align-items: center;
                gap: 10px;
            }
    
            .alert-success {
                background-color: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
    
            .alert-danger {
                background-color: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
    
            .alert-warning {
                background-color: #fff3cd;
                color: #856404;
                border: 1px solid #ffeeba;
            }
    
            .alert-info {
                background-color: #d1ecf1;
                color: #0c5460;
                border: 1px solid #bee5eb;
            }
    
            /* Badge for status */
            .badge {
                display: inline-block;
                padding: 4px 8px;
                border-radius: 50px;
                font-size: 12px;
                font-weight: 600;
            }
    
            .badge-success {
                background-color: var(--success);
                color: white;
            }
    
            .badge-danger {
                background-color: var(--danger);
                color: white;
            }
    
            .badge-warning {
                background-color: var(--warning);
                color: white;
            }
    
            /* Loading indicator */
            .loading {
                display: inline-block;
                width: 20px;
                height: 20px;
                border: 3px solid rgba(255, 255, 255, 0.3);
                border-radius: 50%;
                border-top-color: white;
                animation: spin 1s ease-in-out infinite;
            }
    
            @keyframes spin {
                to {
                    transform: rotate(360deg);
                }
            }
    
            /* Hide elements */
            .hidden {
                display: none !important;
            }
    
            /* Price indicators */
            .price-indicator {
                display: flex;
                align-items: center;
                gap: 5px;
                margin-top: 5px;
            }
    
            .price-dot {
                width: 12px;
                height: 12px;
                border-radius: 50%;
            }
    
            .price-low {
                background-color: var(--success);
            }
    
            .price-medium {
                background-color: var(--warning);
            }
    
            .price-high {
                background-color: var(--danger);
            }
    
            .price-now {
                background-color: var(--primary);
            }
    
            /* Best times list */
            .best-times-list {
                margin-top: 15px;
            }
    
            .best-time-item {
                display: flex;
                justify-content: space-between;
                padding: 10px;
                border-bottom: 1px solid var(--border);
            }
    
            .best-time-item:last-child {
                border-bottom: none;
            }
    
            .time-slot {
                font-weight: 600;
            }
    
            .price-value {
                color: var(--primary);
                font-weight: 600;
            }
    
            /* Responsive styles */
            @media (max-width: 920px) {
                .grid-2, .grid-3 {
                    grid-template-columns: 1fr;
                }
            }
    
            @media (max-width: 600px) {
                .pricing-stats {
                    grid-template-columns: 1fr 1fr;
                }
                
                .card-header {
                    flex-direction: column;
                    align-items: flex-start;
                    gap: 10px;
                }
                
                .page-header {
                    flex-direction: column;
                    align-items: flex-start;
                    gap: 10px;
                }
            }
    
            /* Tooltip styles */
            .tooltip {
                position: relative;
                display: inline-block;
                cursor: help;
            }
    
            .tooltip .tooltip-text {
                visibility: hidden;
                width: 200px;
                background-color: var(--dark);
                color: white;
                text-align: center;
                border-radius: 6px;
                padding: 5px;
                position: absolute;
                z-index: 1;
                bottom: 125%;
                left: 50%;
                transform: translateX(-50%);
                opacity: 0;
                transition: opacity 0.3s;
                font-size: 14px;
            }
    
            .tooltip:hover .tooltip-text {
                visibility: visible;
                opacity: 1;
            }
        /* Enhanced Responsive & Dark Mode Styles for Carbonoz SolarAutopilot */
    
    /* Main Content Responsive Adjustments */
    .main-content {
        transition: margin-left 0.3s ease, background-color 0.3s ease, color 0.3s ease;
        padding: 2rem;
        overflow-x: hidden;
    }
    
    @media (max-width: 1200px) {
        .main-content {
            padding: 1.5rem;
        }
        
        .grid-2, .grid-3 {
            grid-template-columns: 1fr;
            gap: 1rem;
        }
        
        .card {
            margin-bottom: 1rem;
        }
    }
    
    @media (max-width: 768px) {
        .main-content {
            padding: 1rem;
            margin-left: 0;
            padding-top: 4.5rem;
        }
        
        .page-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }
        
        .container {
            padding: 0 10px;
        }
        
        .card-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
            padding: 15px;
        }
        
        .pricing-stats {
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        
        .btn-group {
            flex-direction: column;
            gap: 8px;
            width: 100%;
        }
        
        .btn {
            width: 100%;
        }
        
        .pricing-chart-container {
            height: 250px;
        }
        
        .form-group {
            margin-bottom: 12px;
        }
    }
    
    @media (max-width: 480px) {
        .main-content {
            padding: 0.75rem;
        }
        
        .pricing-stats {
            grid-template-columns: 1fr;
        }
        
        .page-title {
            font-size: 20px;
        }
        
        .card-title {
            font-size: 16px;
        }
        
        .stat-value {
            font-size: 18px;
        }
        
        .time-period {
            flex-direction: column;
            gap: 10px;
            padding: 15px;
        }
        
        .form-control, .form-select {
            font-size: 14px;
            padding: 8px;
        }
    }
    
    /* Fix for chart responsiveness */
    .pricing-chart-container {
        position: relative;
        width: 100%;
    }
    
    /* Price indicators responsiveness */
    @media (max-width: 768px) {
        .price-indicator {
            flex-direction: column;
            align-items: center;
            gap: 2px;
            font-size: 12px;
        }
    }
    
    /* Improved Card Transitions */
    .card {
        transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
    }
    
    /* Toggle Switch Improvements */
    .toggle-switch {
        min-width: 50px;
    }
    
    .form-check {
        flex-wrap: wrap;
    }
    
    /* Time Period Inputs Responsiveness */
    .time-period {
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .time-input {
        min-width: 80px;
    }
    
    /* Dark Mode Styles */
    body.dark-mode .main-content {
        background-color: rgba(24, 27, 31, 1);
        color: #f5f6fa;
    }
    
    body.dark-mode .card {
        background-color: rgba(30, 33, 43, 1);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.25);
        border: 1px solid rgba(45, 50, 60, 1);
    }
    
    body.dark-mode .card-header {
        background: var(--primary);
    }
    
    body.dark-mode .card-title {
        color: #f5f6fa;
    }
    
    body.dark-mode .page-title {
        color: #f5f6fa;
    }
    
    body.dark-mode .page-header {
        border-bottom: 1px solid rgba(55, 60, 75, 1);
    }
    
    body.dark-mode .form-control, 
    body.dark-mode .form-select {
        background-color: rgba(38, 41, 51, 1);
        border-color: rgba(55, 60, 75, 1);
        color: #f5f6fa;
    }
    
    body.dark-mode .form-label,
    body.dark-mode .form-check-label,
    body.dark-mode .toggle-label {
        color: #f5f6fa;
    }
    
    body.dark-mode .stat-card {
        background-color: rgba(38, 41, 51, 1);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
    
    body.dark-mode .stat-label {
        color: #bdc3c7;
    }
    
    body.dark-mode .stat-value {
        color: var(--primary);
    }
    
    body.dark-mode .btn-primary {
        background-color: var(--primary);
    }
    
    body.dark-mode .btn-primary:hover {
        background-color: var(--primary-dark);
    }
    
    body.dark-mode .alert-info {
        background-color: rgba(41, 58, 74, 1);
        color: #a8d7fd;
        border-color: rgba(70, 90, 120, 1);
    }
    
    body.dark-mode .alert-success {
        background-color: rgba(39, 70, 50, 1);
        color: #a2f0bc;
        border-color: rgba(60, 105, 75, 1);
    }
    
    body.dark-mode .alert-warning {
        background-color: rgba(77, 58, 25, 1);
        color: #ffd699;
        border-color: rgba(102, 81, 40, 1);
    }
    
    body.dark-mode .alert-danger {
        background-color: rgba(73, 40, 40, 1);
        color: #ffb8b8;
        border-color: rgba(105, 60, 60, 1);
    }
    
    body.dark-mode .time-period {
        background-color: rgba(38, 41, 51, 1);
    }
    
    body.dark-mode .best-time-item {
        border-bottom: 1px solid rgba(55, 60, 75, 1);
    }
    
    body.dark-mode .best-time-item:last-child {
        border-bottom: none;
    }
    
    body.dark-mode .tooltip .tooltip-text {
        background-color: rgba(60, 65, 80, 1);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
    }
    
    /* Chart colors for dark mode */
    body.dark-mode .chart-container {
        background-color: rgba(30, 33, 43, 1);
    }
    
    /* Fix for toggle switches in dark mode */
    body.dark-mode .toggle-slider {
        background-color: rgba(70, 75, 90, 1);
    }
    
    body.dark-mode input:checked + .toggle-slider {
        background-color: var(--secondary);
    }
    
    /* Notification styling in dark mode */
    body.dark-mode #notification {
        background-color: rgba(35, 40, 50, 1);
        border: 1px solid rgba(55, 60, 75, 1);
    }
    
    /* Improved focus states for dark mode */
    body.dark-mode .form-control:focus,
    body.dark-mode .form-select:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.3);
        outline: none;
    }
    
    /* Media query for very small devices */
    @media (max-width: 360px) {
        .main-content {
            padding: 0.5rem;
        }
        
        .card {
            border-radius: 6px;
        }
        
        .card-body {
            padding: 15px 10px;
        }
        
        .stat-card {
            padding: 10px;
        }
        
        .best-time-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 5px;
        }
        
        .pricing-chart-container {
            height: 200px;
        }
    
    }
    
    
    body.dark-mode .actions-log-item {
                background-color: rgba(38, 41, 51, 1) !important;
                border: 1px solid rgba(55, 60, 75, 1);
                color: #f5f6fa;
            }
    
            body.dark-mode .actions-log-item .action-time {
                color: #bdc3c7 !important;
            }
    
            body.dark-mode .actions-log-item .action-text {
                color: #f5f6fa !important;
            }
    
    
            /* If you want to be more specific, you can also add this rule */
            body.dark-mode #actionsLog > div {
                background-color: rgba(38, 41, 51, 1) !important;
                border: 1px solid rgba(55, 60, 75, 1);
                color: #f5f6fa;
            }
    
            body.dark-mode #actionsLog > div > div:first-child {
                color: #bdc3c7 !important; /* Time color */
            }
    
            body.dark-mode #actionsLog > div > div:last-child {
                color: #f5f6fa !important; /* Action text color */
            }

             /* Enhanced Dynamic Pricing Styles */
        .grid-4 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .stat-card {
            background: var(--light);
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            position: relative;
        }
        
        .stat-header {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            margin-bottom: 10px;
            color: var(--gray);
            font-size: 14px;
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
            color: var(--dark);
        }
        
        .stat-value.positive {
            color: var(--success);
        }
        
        .stat-value.negative {
            color: var(--danger);
        }
        
        .stat-label {
            font-size: 12px;
            color: var(--gray);
        }
        
        /* Price level specific styling */
        .price-card.level-very-cheap .stat-value {
            color: #00C851;
        }
        
        .price-card.level-cheap .stat-value {
            color: #2E7D32;
        }
        
        .price-card.level-normal .stat-value {
            color: #FF6F00;
        }
        
        .price-card.level-expensive .stat-value {
            color: #D84315;
        }
        
        .price-card.level-very-expensive .stat-value {
            color: #B71C1C;
        }
        
        .conditions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }
        
        .condition-status {
            text-align: center;
            padding: 15px 10px;
            background: var(--light);
            border: 1px solid var(--border);
            border-radius: 8px;
        }
        
        .condition-status i {
            font-size: 20px;
            margin-bottom: 8px;
            display: block;
        }
        
        .condition-status span {
            font-size: 12px;
            display: block;
            margin-bottom: 8px;
        }
        
        .status-indicator {
            font-size: 10px;
            font-weight: bold;
            padding: 4px 8px;
            border-radius: 4px;
            display: inline-block;
            min-width: 60px;
        }
        
        .status-indicator.status-active {
            background: var(--success);
            color: white;
        }
        
        .status-indicator.status-disabled {
            background: var(--gray);
            color: white;
        }
        
        .status-indicator.status-checking {
            background: var(--warning);
            color: white;
        }
        
        .status-indicator.status-ready {
            background: var(--success);
            color: white;
        }
        
        .status-indicator.status-cooldown {
            background: var(--danger);
            color: white;
        }
        
        .power-rule-item {
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            background: var(--light);
        }
        
        .rule-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .rule-priority {
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 4px;
            font-weight: bold;
        }
        
        .priority-high {
            background: var(--danger);
            color: white;
        }
        
        .priority-medium {
            background: var(--warning);
            color: white;
        }
        
        .priority-low {
            background: var(--info);
            color: white;
        }
        
        .rule-description {
            font-size: 14px;
            color: var(--gray);
            margin-bottom: 10px;
        }
        
        .rule-conditions {
            font-family: monospace;
            font-size: 12px;
            background: var(--dark);
            color: var(--light);
            padding: 8px;
            border-radius: 4px;
        }
        
        .system-metrics {
            display: grid;
            gap: 10px;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid var(--border);
        }

        .metric {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid var(--border);
        }
        
        .metric:last-child {
            border-bottom: none;
        }
        
        .metric-label {
            color: var(--gray);
        }
        
        .metric-value {
            font-weight: bold;
            color: var(--dark);
        }
        
        .decision-analysis {
            background-color: var(--light);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid var(--primary);
        }
        
        .btn-group-vertical {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .btn-group-vertical .btn {
            margin: 0;
        }
        
        #testResults {
            margin-top: 20px;
            padding: 15px;
            background-color: var(--light);
            border-radius: 8px;
            border: 1px solid var(--border);
        }
        
        #testOutput {
            background-color: var(--dark);
            color: var(--light);
            padding: 10px;
            border-radius: 4px;
            font-size: 12px;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .input-group {
            display: flex;
        }
        
        .input-group .form-control {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
        
        .input-group-text {
            background-color: var(--light);
            border: 1px solid var(--border);
            border-left: none;
            padding: 8px 12px;
            border-top-right-radius: 4px;
            border-bottom-right-radius: 4px;
            font-size: 14px;
            color: var(--gray);
        }
        
        .hidden {
            display: none !important;
        }
        
        .info-box {
            background-color: var(--light);
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid var(--primary);
        }
        
        .info-box h4 {
            color: var(--primary);
            margin-top: 0;
            margin-bottom: 10px;
        }
        
        .info-box p {
            margin: 0;
            color: var(--gray);
            line-height: 1.5;
        }

        .empty-rules {
    padding: 20px;
    text-align: center;
    color: var(--gray);
    border: 2px dashed var(--border);
    border-radius: 8px;
    margin-bottom: 15px;
}

.empty-rules i {
    font-size: 2em;
    margin-bottom: 10px;
    display: block;
}

.power-rule-item.user-rule {
    border: 1px solid var(--border);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    background: var(--card-bg);
    transition: all 0.3s ease;
}

.power-rule-item.user-rule:hover {
    border-color: var(--primary);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.rule-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.rule-actions {
    display: flex;
    align-items: center;
    gap: 10px;
}

.rule-priority {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    font-weight: bold;
    text-transform: uppercase;
}

.priority-high {
    background: rgba(220, 53, 69, 0.2);
    color: #dc3545;
    border: 1px solid rgba(220, 53, 69, 0.3);
}

.priority-medium {
    background: rgba(255, 193, 7, 0.2);
    color: #ffc107;
    border: 1px solid rgba(255, 193, 7, 0.3);
}

.priority-low {
    background: rgba(108, 117, 125, 0.2);
    color: #6c757d;
    border: 1px solid rgba(108, 117, 125, 0.3);
}

.rule-description {
    color: var(--gray);
    font-style: italic;
    margin-bottom: 10px;
}

.rule-conditions {
    background: rgba(0, 123, 255, 0.1);
    padding: 8px 12px;
    border-radius: 4px;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.9em;
    border-left: 3px solid var(--primary);
}

/* Modal Styling */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.modal-content {
    background: var(--card-bg);
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-width: 600px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 20px 10px;
    border-bottom: 1px solid var(--border);
}

.modal-header h3 {
    margin: 0;
    color: var(--primary);
}

.modal-body {
    padding: 20px;
}

.modal-footer {
    padding: 10px 20px 20px;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    border-top: 1px solid var(--border);
}

/* Condition Rows */
.condition-row {
    margin-bottom: 15px;
}

.condition-row .grid-4 {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr auto;
    gap: 10px;
    align-items: center;
}

.remove-condition-btn {
    background: #dc3545;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
}

.remove-condition-btn:hover {
    background: #c82333;
}

/* Loading Spinner for Buttons */
.loading {
    display: inline-block;
    width: 14px;
    height: 14px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Status Indicators for Conditions */
.conditions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-top: 10px;
}

.condition-status {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px;
    background: var(--card-bg);
    border: 1px solid var(--border);
    border-radius: 6px;
}

.condition-status i {
    width: 20px;
    text-align: center;
}

.status-indicator {
    margin-left: auto;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    font-weight: bold;
}

.status-active {
    background: rgba(40, 167, 69, 0.2);
    color: #28a745;
    border: 1px solid rgba(40, 167, 69, 0.3);
}

.status-disabled {
    background: rgba(108, 117, 125, 0.2);
    color: #6c757d;
    border: 1px solid rgba(108, 117, 125, 0.3);
}

.status-checking {
    background: rgba(255, 193, 7, 0.2);
    color: #ffc107;
    border: 1px solid rgba(255, 193, 7, 0.3);
}

.status-ready {
    background: rgba(40, 167, 69, 0.2);
    color: #28a745;
    border: 1px solid rgba(40, 167, 69, 0.3);
}

.status-cooldown {
    background: rgba(220, 53, 69, 0.2);
    color: #dc3545;
    border: 1px solid rgba(220, 53, 69, 0.3);
}

/* Price Level Styling */
.price-card.level-very-cheap {
    border-left: 4px solid #28a745;
}

.price-card.level-cheap {
    border-left: 4px solid #6f42c1;
}

.price-card.level-normal {
    border-left: 4px solid #007bff;
}

.price-card.level-expensive {
    border-left: 4px solid #fd7e14;
}

.price-card.level-very-expensive {
    border-left: 4px solid #dc3545;
}

/* Responsive Design */
@media (max-width: 768px) {
    .condition-row .grid-4 {
        grid-template-columns: 1fr;
        gap: 8px;
    }
    
    .modal-content {
        width: 95%;
        margin: 20px;
    }
    
    .rule-header {
        flex-direction: column;
        align-items: stretch;
        gap: 10px;
    }
    
    .rule-actions {
        justify-content: flex-end;
    }
}
        </style>
</head>
<body>
    <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"></div>

        <%- include('partials/sidebar') %>

        <div class="main-content">
            <div class="container">
                <div class="page-header">
                    <h1 class="page-title">
                        <i class="fas fa-brain"></i>Enhanced Dynamic Pricing with Tibber
                        <small style="color: var(--gray); font-size: 0.6em; margin-left: 10px;">
                            <i class="fas fa-bolt"></i> Real-time pricing & smart power conditions
                        </small>
                    </h1>
                    <div class="btn-group" id="headerButtons">
                        <button class="btn btn-primary" id="refreshDataBtn">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <button class="btn btn-secondary" id="testConditionsBtn">
                            <i class="fas fa-vial"></i> Test Conditions
                        </button>
                        <button class="btn btn-success" id="refreshPricesBtn">
                            <i class="fas fa-euro-sign"></i> Refresh Tibber Prices
                        </button>
                    </div>
                </div>

                <div class="alert alert-info hidden" id="notification">
                    <i class="fas fa-info-circle"></i>
                    <span id="notificationMessage"></span>
                    <button class="btn btn-sm" style="margin-left: auto" onclick="hideNotification()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <!-- Real-time Status Dashboard -->
                <div class="card" id="realTimeStatusCard">
                    <div class="card-header">
                        <h2 class="card-title">
                            <i class="fas fa-tachometer-alt"></i> Real-time Status Dashboard
                            <div id="lastUpdateTime" style="font-size: 0.8em; color: var(--gray); font-weight: normal;">
                                Last updated: Never
                            </div>
                        </h2>
                        <div class="form-check">
                            <label class="toggle-switch">
                                <input type="checkbox" id="enableEnhancedPricing">
                                <span class="toggle-slider"></span>
                            </label>
                            <span class="toggle-label">Enable Enhanced Dynamic Pricing</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="grid-4">
                            <!-- Current Price Card -->
                            <div class="stat-card price-card">
                                <div class="stat-header">
                                    <i class="fas fa-euro-sign"></i>
                                    <span>Current Price</span>
                                </div>
                                <div class="stat-value" id="currentPrice">Loading...</div>
                                <div class="stat-label">
                                    <span id="priceLevel">--</span> • <span id="priceCurrency">EUR/kWh</span>
                                </div>
                            </div>

                            <!-- Battery Status -->
                            <div class="stat-card battery-card">
                                <div class="stat-header">
                                    <i class="fas fa-battery-half"></i>
                                    <span>Battery Status</span>
                                </div>
                                <div class="stat-value" id="batterySoC">0%</div>
                                <div class="stat-label">
                                    SoC: <span id="batteryTarget">80</span>% target
                                </div>
                            </div>

                            <!-- Current Decision -->
                            <div class="stat-card decision-card">
                                <div class="stat-header">
                                    <i class="fas fa-brain"></i>
                                    <span>Smart Decision</span>
                                </div>
                                <div class="stat-value" id="currentDecision">ANALYZING</div>
                                <div class="stat-label" id="decisionReason">Evaluating conditions...</div>
                            </div>

                            <!-- System Power -->
                            <div class="stat-card power-card">
                                <div class="stat-header">
                                    <i class="fas fa-bolt"></i>
                                    <span>System Power</span>
                                </div>
                                <div class="stat-value" id="systemPowerStatus">--</div>
                                <div class="stat-label">
                                    PV: <span id="pvPower">0</span>W • Load: <span id="loadPower">0</span>W
                                </div>
                            </div>
                        </div>

                        <!-- Live Conditions Status -->
                        <div style="margin-top: 20px;">
                            <h4><i class="fas fa-traffic-light"></i> Live Conditions Status</h4>
                            <div class="conditions-grid">
                                <div class="condition-status" id="priceCondition">
                                    <i class="fas fa-euro-sign"></i>
                                    <span>Price Check</span>
                                    <div class="status-indicator" id="priceStatus">CHECKING</div>
                                </div>
                                <div class="condition-status" id="smartPowerCondition">
                                    <i class="fas fa-cogs"></i>
                                    <span>Smart Power</span>
                                    <div class="status-indicator" id="smartPowerStatus">DISABLED</div>
                                </div>
                                <div class="condition-status" id="weatherCondition">
                                    <i class="fas fa-cloud-sun"></i>
                                    <span>Weather</span>
                                    <div class="status-indicator" id="weatherStatus">DISABLED</div>
                                </div>
                                <div class="condition-status" id="timeCondition">
                                    <i class="fas fa-clock"></i>
                                    <span>Time Rules</span>
                                    <div class="status-indicator" id="timeStatus">CHECKING</div>
                                </div>
                                <div class="condition-status" id="cooldownCondition">
                                    <i class="fas fa-hourglass"></i>
                                    <span>Cooldown</span>
                                    <div class="status-indicator" id="cooldownStatus">READY</div>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Action Buttons -->
                        <div class="btn-group" style="margin-top: 20px;">
                            <button class="btn btn-success" id="smartChargeBtn">
                                <i class="fas fa-charging-station"></i> Smart Charge
                            </button>
                            <button class="btn btn-warning" id="forceChargeBtn">
                                <i class="fas fa-exclamation-triangle"></i> Force Charge
                            </button>
                            <button class="btn btn-danger" id="stopChargeBtn">
                                <i class="fas fa-power-off"></i> Stop Charging
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Main Configuration Panels -->
                <div class="grid-2">
                    <!-- Tibber Integration Panel -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-plug"></i> Tibber Integration
                            </h2>
                            <button class="btn btn-sm btn-secondary" id="saveTibberBtn">
                                <i class="fas fa-save"></i> Save
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-key"></i> Tibber API Key
                                    <div class="tooltip">
                                        <i class="fas fa-info-circle"></i>
                                        <span class="tooltip-text">Get your API key from https://developer.tibber.com/</span>
                                    </div>
                                </label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="tibberApiKey" placeholder="Enter Tibber API key">
                                    <button class="btn btn-outline-primary" id="testTibberBtn">Test</button>
                                </div>
                                <div id="tibberTestResult" class="hidden"></div>
                            </div>

                            <div class="grid-2">
                                <div class="form-group">
                                    <label class="form-label">Country</label>
                                    <select class="form-control" id="tibberCountry">
                                        <option value="">Select Country</option>
                                        <option value="NO">Norway</option>
                                        <option value="SE">Sweden</option>
                                        <option value="DK">Denmark</option>
                                        <option value="FI">Finland</option>
                                        <option value="DE">Germany</option>
                                        <option value="NL">Netherlands</option>
                                        <option value="GB">United Kingdom</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">City</label>
                                    <select class="form-control" id="tibberCity" disabled>
                                        <option value="">Select City</option>
                                    </select>
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Timezone</label>
                                <input type="text" class="form-control" id="timezone" readonly placeholder="Auto-set from country">
                            </div>

                            <!-- Price Settings -->
                            <h4 style="margin-top: 20px;">Price Settings</h4>
                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="useRealTibberPrices" checked>
                                    <label class="form-check-label">Use Real-time Tibber Prices</label>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="useTibberLevels" checked>
                                    <label class="form-check-label">Use Tibber Price Levels (Recommended)</label>
                                </div>
                            </div>

                            <div id="tibberLevelsConfig">
                                <label class="form-label">Allowed Price Levels</label>
                                <div class="checkbox-group">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="levelVeryCheap" value="VERY_CHEAP" checked>
                                        <label class="form-check-label">Very Cheap</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="levelCheap" value="CHEAP" checked>
                                        <label class="form-check-label">Cheap</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="levelNormal" value="NORMAL">
                                        <label class="form-check-label">Normal</label>
                                    </div>
                                </div>
                            </div>

                            <div id="priceThresholdConfig">
                                <div class="form-group">
                                    <label class="form-label">Fallback Price Threshold</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="maxPriceThreshold" min="0" max="1" step="0.001" value="0.20">
                                        <span class="input-group-text">EUR/kWh</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Smart Power Conditions Panel -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-cogs"></i> Smart Power Conditions
                            </h2>
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="enableSmartPower" checked>
                                <label class="form-check-label">Enable Smart Power Rules</label>
                            </div>
                        </div>
                        <div class="card-body" id="smartPowerRulesContainer">
                            <p>Smart power rules help decide when to charge based on real-time power conditions.</p>
                            <div id="powerRulesList">
                                <!-- Rules will be loaded here -->
                            </div>
                            <button class="btn btn-outline-primary btn-sm" id="addPowerRuleBtn">
                                <i class="fas fa-plus"></i> Add Custom Rule
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Weather and Time Conditions -->
                <div class="grid-2">
                    <!-- Weather Conditions -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-cloud-sun"></i> Weather Conditions
                            </h2>
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="enableWeatherConditions">
                                <label class="form-check-label">Enable Weather-Based Charging</label>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="weatherOptions" class="hidden">
                                <div class="form-group">
                                    <label class="form-label">OpenWeatherMap API Key</label>
                                    <input type="password" class="form-control" id="weatherApiKey" placeholder="Enter API key">
                                    <small>Get free API key from openweathermap.org</small>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">Cloud Cover Threshold (%)</label>
                                    <input type="range" class="form-control" id="cloudCoverThreshold" min="30" max="90" value="70">
                                    <div class="range-labels">
                                        <span>30%</span>
                                        <span id="cloudCoverValue">70%</span>
                                        <span>90%</span>
                                    </div>
                                </div>

                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="chargeOnCloudy" checked>
                                    <label class="form-check-label">Charge on cloudy days</label>
                                </div>
                                
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="chargeBeforeStorm" checked>
                                    <label class="form-check-label">Charge before storms</label>
                                </div>

                                <button type="button" class="btn btn-sm btn-outline-primary" id="testWeatherBtn">
                                    <i class="fas fa-vial"></i> Test Weather API
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Time Conditions -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-clock"></i> Time Conditions
                            </h2>
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="enableTimeConditions" checked>
                                <label class="form-check-label">Enable Time-Based Rules</label>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="timeOptions">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="preferNightCharging">
                                    <label class="form-check-label">Prefer night charging</label>
                                </div>
                                
                                <div id="nightTimeOptions" class="hidden">
                                    <div class="grid-2">
                                        <div class="form-group">
                                            <label class="form-label">Night starts</label>
                                            <input type="time" class="form-control" id="nightStart" value="22:00">
                                        </div>
                                        <div class="form-group">
                                            <label class="form-label">Night ends</label>
                                            <input type="time" class="form-control" id="nightEnd" value="06:00">
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="avoidPeakHours" checked>
                                    <label class="form-check-label">Avoid peak hours</label>
                                </div>
                                
                                <div id="peakHoursOptions">
                                    <div class="grid-2">
                                        <div class="form-group">
                                            <label class="form-label">Peak starts</label>
                                            <input type="time" class="form-control" id="peakStart" value="17:00">
                                        </div>
                                        <div class="form-group">
                                            <label class="form-label">Peak ends</label>
                                            <input type="time" class="form-control" id="peakEnd" value="21:00">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Battery and Cooldown Settings -->
                <div class="grid-2">
                    <!-- Battery Settings -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-battery-half"></i> Battery Settings
                            </h2>
                        </div>
                        <div class="card-body">
                            <div class="grid-2">
                                <div class="form-group">
                                    <label class="form-label">Target SoC (%)</label>
                                    <input type="number" class="form-control" id="targetSoC" min="20" max="100" value="80">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Emergency SoC (%)</label>
                                    <input type="number" class="form-control" id="emergencySoC" min="0" max="50" value="15">
                                </div>
                            </div>
                            <div class="grid-2">
                                <div class="form-group">
                                    <label class="form-label">Minimum SoC (%)</label>
                                    <input type="number" class="form-control" id="minimumSoC" min="0" max="50" value="20">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Maximum SoC (%)</label>
                                    <input type="number" class="form-control" id="maxSoC" min="80" max="100" value="95">
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Cooldown Settings -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">
                                <i class="fas fa-hourglass"></i> Cooldown Settings
                            </h2>
                        </div>
                        <div class="card-body">
                            <div class="grid-2">
                                <div class="form-group">
                                    <label class="form-label">Cooldown Period (minutes)</label>
                                    <input type="number" class="form-control" id="cooldownMinutes" min="5" max="180" value="30">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Max Cycles per Day</label>
                                    <input type="number" class="form-control" id="maxCyclesPerDay" min="1" max="20" value="8">
                                </div>
                            </div>
                            <div class="cooldown-status">
                                <div class="stat">
                                    <span>Cycles Used Today:</span>
                                    <span id="cyclesUsedToday">0</span>
                                </div>
                                <div class="stat">
                                    <span>Next Charge Available:</span>
                                    <span id="nextChargeTime">Now</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Save Configuration -->
                <div class="card">
                    <div class="card-body text-center">
                        <button class="btn btn-primary btn-lg" id="saveAllConfigBtn">
                            <i class="fas fa-save"></i> Save All Configuration
                        </button>
                        <button class="btn btn-secondary btn-lg" id="resetConfigBtn">
                            <i class="fas fa-undo"></i> Reset to Defaults
                        </button>
                    </div>
                </div>

                <!-- Actions and Testing -->
                <div class="grid-2">
                    <!-- Actions Log -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Recent Actions</h2>
                            <button class="btn btn-sm btn-secondary" id="refreshActionsBtn">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                        </div>
                        <div class="card-body">
                            <div id="actionsLog">Loading...</div>
                        </div>
                    </div>

                    <!-- Condition Testing -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Condition Testing</h2>
                        </div>
                        <div class="card-body">
                            <div class="btn-group-vertical">
                                <button class="btn btn-outline-primary" data-test="tibber">
                                    <i class="fas fa-plug"></i> Test Tibber Connection
                                </button>
                                <button class="btn btn-outline-primary" data-test="price">
                                    <i class="fas fa-euro-sign"></i> Test Price Conditions
                                </button>
                                <button class="btn btn-outline-primary" data-test="smartpower">
                                    <i class="fas fa-cogs"></i> Test Smart Power Rules
                                </button>
                                <button class="btn btn-outline-primary" data-test="weather">
                                    <i class="fas fa-cloud"></i> Test Weather API
                                </button>
                                <button class="btn btn-outline-primary" data-test="time">
                                    <i class="fas fa-clock"></i> Test Time Conditions
                                </button>
                            </div>
                            <div id="testResults" class="hidden">
                                <h4>Test Results</h4>
                                <pre id="testOutput"></pre>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- System Information -->
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">System Information</h2>
                    </div>
                    <div class="card-body">
                        <div class="grid-3">
                            <div class="info-section">
                                <h4><i class="fas fa-bolt"></i> Current System State</h4>
                                <div class="system-metrics" id="systemMetrics">
                                    <div class="metric">
                                        <span>Battery SoC:</span>
                                        <span id="systemBatterySoC">0%</span>
                                    </div>
                                    <div class="metric">
                                        <span>PV Power:</span>
                                        <span id="systemPvPower">0 W</span>
                                    </div>
                                    <div class="metric">
                                        <span>Load Power:</span>
                                        <span id="systemLoadPower">0 W</span>
                                    </div>
                                    <div class="metric">
                                        <span>Grid Power:</span>
                                        <span id="systemGridPower">0 W</span>
                                    </div>
                                    <div class="metric">
                                        <span>Battery Power:</span>
                                        <span id="systemBatteryPower">0 W</span>
                                    </div>
                                    <div class="metric">
                                        <span>Grid Voltage:</span>
                                        <span id="systemGridVoltage">0 V</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="info-section">
                                <h4><i class="fas fa-brain"></i> Decision Analysis</h4>
                                <div id="decisionAnalysis">Loading...</div>
                            </div>
                            
                            <div class="info-section">
                                <h4><i class="fas fa-chart-line"></i> Pricing Data</h4>
                                <div id="pricingInfo">
                                    <div class="metric">
                                        <span>Provider:</span>
                                        <span id="priceProvider">--</span>
                                    </div>
                                    <div class="metric">
                                        <span>Data Points:</span>
                                        <span id="priceDataPoints">--</span>
                                    </div>
                                    <div class="metric">
                                        <span>Last Update:</span>
                                        <span id="priceLastUpdate">--</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Enhanced Dynamic Pricing with Tibber Integration
        
        document.addEventListener('DOMContentLoaded', function() {
            let enhancedConfig = null;
            let systemState = {};
            let currentStatus = null;
            let autoRefreshInterval = null;
            let priceRefreshInterval = null;
            let countriesData = null;
            
            // Initialize
            init();
            
            async function init() {
                try {
                    await loadCountriesData();
                    await loadEnhancedConfig();
                    await updateStatus();
                    await refreshCurrentPrice();
                    setupEventListeners();
                    startAutoRefresh();
                    loadActionsLog();
                    console.log('Enhanced Dynamic Pricing with Tibber initialized successfully');
                } catch (error) {
                    console.error('Initialization error:', error);
                    showNotification('Initialization failed: ' + error.message, 'danger');
                }
            }
            
            // Load countries and cities data
            async function loadCountriesData() {
                try {
                    const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/countries-cities');
                    const data = await response.json();
                    
                    if (data.success) {
                        countriesData = data;
                        updateCountryOptions();
                    }
                } catch (error) {
                    console.error('Error loading countries data:', error);
                }
            }
            
            // Update country dropdown options
            function updateCountryOptions() {
                const countrySelect = document.getElementById('tibberCountry');
                
                if (countriesData && countriesData.countries) {
                    countriesData.countries.forEach(country => {
                        const option = document.createElement('option');
                        option.value = country.code;
                        option.textContent = country.name;
                        countrySelect.appendChild(option);
                    });
                }
            }
            
            // Load enhanced configuration
            async function loadEnhancedConfig() {
                try {
                    const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings');
                    
                    if (!response.ok) {
                        throw new Error('Failed to load enhanced configuration');
                    }
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        enhancedConfig = data.config;
                        currentStatus = data.status;
                        updateConfigUI();
                        console.log('Enhanced configuration loaded successfully');
                    } else {
                        throw new Error(data.error || 'Failed to load configuration');
                    }
                } catch (error) {
                    console.error('Error loading enhanced configuration:', error);
                    showNotification('Error loading configuration: ' + error.message, 'warning');
                }
            }
            
            // Update UI with configuration
            function updateConfigUI() {
                if (!enhancedConfig) return;
                
                // Main toggle
                document.getElementById('enableEnhancedPricing').checked = enhancedConfig.enabled;
                
                // Tibber settings
                document.getElementById('tibberApiKey').value = enhancedConfig.tibberApiKey || '';
                document.getElementById('tibberCountry').value = enhancedConfig.country || 'DE';
                document.getElementById('timezone').value = enhancedConfig.timezone || 'Europe/Berlin';
                
                // Update city options based on selected country
                updateCityOptions(enhancedConfig.country);
                document.getElementById('tibberCity').value = enhancedConfig.city || '';
                
                // Price settings
                document.getElementById('useRealTibberPrices').checked = 
                    enhancedConfig.priceBasedCharging?.useRealTibberPrices !== false;
                document.getElementById('useTibberLevels').checked = 
                    enhancedConfig.priceBasedCharging?.useTibberLevels !== false;
                document.getElementById('maxPriceThreshold').value = 
                    enhancedConfig.priceBasedCharging?.maxPriceThreshold || 0.20;
                
                // Tibber levels
                const allowedLevels = enhancedConfig.priceBasedCharging?.allowedTibberLevels || ['VERY_CHEAP', 'CHEAP'];
                document.getElementById('levelVeryCheap').checked = allowedLevels.includes('VERY_CHEAP');
                document.getElementById('levelCheap').checked = allowedLevels.includes('CHEAP');
                document.getElementById('levelNormal').checked = allowedLevels.includes('NORMAL');
                
                // Smart power conditions
                document.getElementById('enableSmartPower').checked = 
                    enhancedConfig.smartPowerConditions?.enabled !== false;
                
                // Weather conditions
                document.getElementById('enableWeatherConditions').checked = 
                    enhancedConfig.weatherConditions?.enabled || false;
                document.getElementById('weatherApiKey').value = 
                    enhancedConfig.weatherConditions?.weatherApiKey || '';
                document.getElementById('cloudCoverThreshold').value = 
                    enhancedConfig.weatherConditions?.cloudCoverThreshold || 70;
                document.getElementById('chargeOnCloudy').checked = 
                    enhancedConfig.weatherConditions?.chargeOnCloudyDays !== false;
                document.getElementById('chargeBeforeStorm').checked = 
                    enhancedConfig.weatherConditions?.chargeBeforeStorm !== false;
                
                // Time conditions
                document.getElementById('enableTimeConditions').checked = 
                    enhancedConfig.timeConditions?.enabled !== false;
                document.getElementById('preferNightCharging').checked = 
                    enhancedConfig.timeConditions?.preferNightCharging || false;
                document.getElementById('nightStart').value = 
                    enhancedConfig.timeConditions?.nightStart || '22:00';
                document.getElementById('nightEnd').value = 
                    enhancedConfig.timeConditions?.nightEnd || '06:00';
                document.getElementById('avoidPeakHours').checked = 
                    enhancedConfig.timeConditions?.avoidPeakHours !== false;
                document.getElementById('peakStart').value = 
                    enhancedConfig.timeConditions?.peakStart || '17:00';
                document.getElementById('peakEnd').value = 
                    enhancedConfig.timeConditions?.peakEnd || '21:00';
                
                // Battery settings
                document.getElementById('targetSoC').value = enhancedConfig.battery?.targetSoC || 80;
                document.getElementById('emergencySoC').value = enhancedConfig.battery?.emergencySoC || 15;
                document.getElementById('minimumSoC').value = enhancedConfig.battery?.minimumSoC || 20;
                document.getElementById('maxSoC').value = enhancedConfig.battery?.maxSoC || 95;
                
                // Cooldown settings
                document.getElementById('cooldownMinutes').value = 
                    enhancedConfig.cooldown?.chargingCooldownMinutes || 30;
                document.getElementById('maxCyclesPerDay').value = 
                    enhancedConfig.cooldown?.maxChargingCyclesPerDay || 8;
                
                // Show/hide options based on settings
                updateUIVisibility();
                updateSmartPowerRules();
                
                console.log('Enhanced UI updated with configuration');
            }
            
            // Update city options based on selected country
            function updateCityOptions(countryCode) {
                const citySelect = document.getElementById('tibberCity');
                citySelect.innerHTML = '<option value="">Select City</option>';
                
                if (countriesData && countryCode) {
                    const country = countriesData.countries.find(c => c.code === countryCode);
                    if (country && country.cities) {
                        country.cities.forEach(city => {
                            const option = document.createElement('option');
                            option.value = city.name;
                            option.textContent = city.name;
                            citySelect.appendChild(option);
                        });
                        citySelect.disabled = false;
                        
                        // Update timezone
                        document.getElementById('timezone').value = country.timezone;
                    }
                }
            }
            
            // Update UI visibility based on settings
            function updateUIVisibility() {
                // Weather options
                const weatherEnabled = document.getElementById('enableWeatherConditions').checked;
                document.getElementById('weatherOptions').classList.toggle('hidden', !weatherEnabled);
                
                // Night time options
                const nightEnabled = document.getElementById('preferNightCharging').checked;
                document.getElementById('nightTimeOptions').classList.toggle('hidden', !nightEnabled);
                
                // Tibber levels vs threshold
                const useTibberLevels = document.getElementById('useTibberLevels').checked;
                document.getElementById('tibberLevelsConfig').classList.toggle('hidden', !useTibberLevels);
                document.getElementById('priceThresholdConfig').classList.toggle('hidden', useTibberLevels);
                
                // Cloud cover value display
                const cloudThreshold = document.getElementById('cloudCoverThreshold').value;
                document.getElementById('cloudCoverValue').textContent = cloudThreshold + '%';
            }
            
            // Update smart power rules display
            function updateSmartPowerRules() {
                const rulesContainer = document.getElementById('powerRulesList');
                rulesContainer.innerHTML = '';
                
                if (!enhancedConfig.smartPowerConditions?.rules) return;
                
                enhancedConfig.smartPowerConditions.rules.forEach((rule, index) => {
                    const ruleDiv = document.createElement('div');
                    ruleDiv.className = 'power-rule-item';
                    ruleDiv.innerHTML = `
                        <div class="rule-header">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="rule_${rule.id}" ${rule.enabled ? 'checked' : ''}>
                                <label class="form-check-label"><strong>${rule.name}</strong></label>
                            </div>
                            <span class="rule-priority priority-${rule.priority}">${rule.priority}</span>
                        </div>
                        <p class="rule-description">${rule.description}</p>
                        <div class="rule-conditions">
                            ${Object.entries(rule.conditions).map(([param, cond]) => {
                                if (cond.compare) {
                                    return `${param} ${cond.operator} ${cond.compare}${cond.offset ? ' + ' + cond.offset : ''}`;
                                } else {
                                    return `${param} ${cond.operator} ${cond.value}`;
                                }
                            }).join(' AND ')}
                        </div>
                    `;
                    rulesContainer.appendChild(ruleDiv);
                });
            }
            
            // Refresh current Tibber price
            async function refreshCurrentPrice() {
                if (!enhancedConfig || !enhancedConfig.tibberApiKey) {
                    document.getElementById('currentPrice').textContent = 'No API Key';
                    document.getElementById('priceLevel').textContent = '--';
                    return;
                }
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/current-price');
                    const data = await response.json();
                    
                    if (data.success && data.currentPrice) {
                        const price = data.currentPrice.price;
                        const level = data.currentPrice.level;
                        const currency = data.currentPrice.currency;
                        
                        document.getElementById('currentPrice').textContent = price.toFixed(4);
                        document.getElementById('priceLevel').textContent = level;
                        document.getElementById('priceCurrency').textContent = currency + '/kWh';
                        
                        // Update price card color based on level
                        const priceCard = document.querySelector('.price-card');
                        priceCard.className = 'stat-card price-card level-' + level.toLowerCase().replace('_', '-');
                    }
                } catch (error) {
                    console.error('Error refreshing current price:', error);
                    document.getElementById('currentPrice').textContent = 'Error';
                }
            }
            
            // Update system status
            async function updateStatus() {
                try {
                    const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/status');
                    const data = await response.json();
                    
                    if (data.success) {
                        currentStatus = data.status;
                        systemState = data.systemState;
                        updateStatusDisplay();
                        updateSystemMetrics();
                        updateConditionsStatus();
                    }
                } catch (error) {
                    console.error('Error updating status:', error);
                }
            }
            
            // Update status display
            function updateStatusDisplay() {
                if (!currentStatus) return;
                
                // Update battery display
                const batterySoC = Math.round(systemState.battery_soc || 0);
                document.getElementById('batterySoC').textContent = batterySoC + '%';
                document.getElementById('batteryTarget').textContent = enhancedConfig?.battery?.targetSoC || 80;
                
                // Update decision display
                if (currentStatus.currentDecision) {
                    const decision = currentStatus.currentDecision;
                    const decisionElement = document.getElementById('currentDecision');
                    const reasonElement = document.getElementById('decisionReason');
                    
                    decisionElement.textContent = decision.shouldCharge ? 'CHARGE NOW' : 'DON\'T CHARGE';
                    decisionElement.className = 'stat-value ' + (decision.shouldCharge ? 'positive' : 'negative');
                    reasonElement.textContent = decision.reason;
                }
                
                // Update system power status
                const pvPower = systemState.pv_power || 0;
                const loadPower = systemState.load || 0;
                const gridPower = systemState.grid_power || 0;
                
                document.getElementById('pvPower').textContent = Math.round(pvPower);
                document.getElementById('loadPower').textContent = Math.round(loadPower);
                
                let powerStatus = 'Normal';
                if (pvPower > loadPower) {
                    powerStatus = 'Excess PV';
                } else if (gridPower > 1000) {
                    powerStatus = 'Grid Import';
                }
                document.getElementById('systemPowerStatus').textContent = powerStatus;
                
                // Update cooldown info
                if (currentStatus.cooldown) {
                    document.getElementById('cyclesUsedToday').textContent = 
                        currentStatus.cooldown.chargingCyclesUsed || 0;
                        
                    const nextCharge = currentStatus.cooldown.nextChargingAllowed;
                    if (nextCharge) {
                        const nextTime = new Date(nextCharge).toLocaleTimeString();
                        document.getElementById('nextChargeTime').textContent = nextTime;
                    } else {
                        document.getElementById('nextChargeTime').textContent = 'Now';
                    }
                }
                
                // Update last update time
                document.getElementById('lastUpdateTime').textContent = 
                    'Last updated: ' + new Date().toLocaleTimeString();
            }
            
            // Update system metrics
            function updateSystemMetrics() {
    document.getElementById('systemBatterySoC').textContent = 
        Math.round(systemState.battery_soc || 0) + '%';
    document.getElementById('systemPvPower').textContent = 
        Math.round(systemState.pv_power || 0) + ' W';
    document.getElementById('systemLoadPower').textContent = 
        Math.round(systemState.load || 0) + ' W';
    document.getElementById('systemGridPower').textContent = 
        Math.round(systemState.grid_power || 0) + ' W';
    document.getElementById('systemBatteryPower').textContent = 
        Math.round(systemState.battery_power || 0) + ' W';  // FIXED: Now displays battery power
    document.getElementById('systemGridVoltage').textContent = 
        Math.round(systemState.grid_voltage || 0) + ' V';
}
            
            // Update conditions status indicators
            function updateConditionsStatus() {
                // This would show real-time status of each condition
                // For now, just show basic enabled/disabled status
                
                const priceEnabled = enhancedConfig?.priceBasedCharging?.enabled;
                updateConditionStatus('priceStatus', priceEnabled ? 'ACTIVE' : 'DISABLED');
                
                const smartPowerEnabled = enhancedConfig?.smartPowerConditions?.enabled;
                updateConditionStatus('smartPowerStatus', smartPowerEnabled ? 'ACTIVE' : 'DISABLED');
                
                const weatherEnabled = enhancedConfig?.weatherConditions?.enabled;
                updateConditionStatus('weatherStatus', weatherEnabled ? 'ACTIVE' : 'DISABLED');
                
                const timeEnabled = enhancedConfig?.timeConditions?.enabled;
                updateConditionStatus('timeStatus', timeEnabled ? 'ACTIVE' : 'DISABLED');
                
                const inCooldown = currentStatus?.cooldown?.inCooldown;
                updateConditionStatus('cooldownStatus', inCooldown ? 'COOLDOWN' : 'READY');
            }
            
            function updateConditionStatus(elementId, status) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.textContent = status;
                    element.className = 'status-indicator status-' + status.toLowerCase().replace(' ', '-');
                }
            }
            
            // Save enhanced configuration
            async function saveEnhancedConfiguration() {
                try {
                    showNotification('Saving enhanced configuration...', 'info');
                    
                    // Collect Tibber levels
                    const allowedLevels = [];
                    if (document.getElementById('levelVeryCheap').checked) allowedLevels.push('VERY_CHEAP');
                    if (document.getElementById('levelCheap').checked) allowedLevels.push('CHEAP');
                    if (document.getElementById('levelNormal').checked) allowedLevels.push('NORMAL');
                    
                    const formData = {
                        enabled: document.getElementById('enableEnhancedPricing').checked,
                        
                        // Tibber integration
                        tibberApiKey: document.getElementById('tibberApiKey').value,
                        country: document.getElementById('tibberCountry').value,
                        city: document.getElementById('tibberCity').value,
                        timezone: document.getElementById('timezone').value,
                        
                        // Price settings
                        priceBasedCharging: {
                            enabled: true,
                            useRealTibberPrices: document.getElementById('useRealTibberPrices').checked,
                            useTibberLevels: document.getElementById('useTibberLevels').checked,
                            allowedTibberLevels: allowedLevels,
                            maxPriceThreshold: parseFloat(document.getElementById('maxPriceThreshold').value) || 0.20,
                            preferTibberLevels: document.getElementById('useTibberLevels').checked
                        },
                        
                        // Smart power conditions
                        smartPowerConditions: {
                            enabled: document.getElementById('enableSmartPower').checked,
                            rules: enhancedConfig?.smartPowerConditions?.rules || []
                        },
                        
                        // Weather conditions  
                        weatherConditions: {
                            enabled: document.getElementById('enableWeatherConditions').checked,
                            weatherApiKey: document.getElementById('weatherApiKey').value,
                            cloudCoverThreshold: parseInt(document.getElementById('cloudCoverThreshold').value) || 70,
                            chargeOnCloudyDays: document.getElementById('chargeOnCloudy').checked,
                            chargeBeforeStorm: document.getElementById('chargeBeforeStorm').checked
                        },
                        
                        // Time conditions
                        timeConditions: {
                            enabled: document.getElementById('enableTimeConditions').checked,
                            preferNightCharging: document.getElementById('preferNightCharging').checked,
                            nightStart: document.getElementById('nightStart').value,
                            nightEnd: document.getElementById('nightEnd').value,
                            avoidPeakHours: document.getElementById('avoidPeakHours').checked,
                            peakStart: document.getElementById('peakStart').value,
                            peakEnd: document.getElementById('peakEnd').value
                        },
                        
                        // Battery settings
                        battery: {
                            targetSoC: parseInt(document.getElementById('targetSoC').value) || 80,
                            emergencySoC: parseInt(document.getElementById('emergencySoC').value) || 15,
                            minimumSoC: parseInt(document.getElementById('minimumSoC').value) || 20,
                            maxSoC: parseInt(document.getElementById('maxSoC').value) || 95
                        },
                        
                        // Cooldown settings
                        cooldownSettings: {
                            enabled: true,
                            chargingCooldownMinutes: parseInt(document.getElementById('cooldownMinutes').value) || 30,
                            maxChargingCyclesPerDay: parseInt(document.getElementById('maxCyclesPerDay').value) || 8,
                            errorCooldownMinutes: 60
                        }
                    };
                    
                    const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        enhancedConfig = data.config;
                        currentStatus = data.status;
                        showNotification('Enhanced configuration saved successfully', 'success');
                        updateStatusDisplay();
                        updateConditionsStatus();
                    } else {
                        throw new Error(data.error || 'Failed to save configuration');
                    }
                } catch (error) {
                    console.error('Error saving enhanced configuration:', error);
                    showNotification('Error saving configuration: ' + error.message, 'danger');
                }
            }
            
            // Send charging command
            async function sendChargingCommand(enable, force = false) {
                try {
                    const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/manual-charge', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            enable: enable,
                            force: force
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        const action = enable ? 'enabled' : 'disabled';
                        showNotification(`Enhanced grid charging ${action} successfully`, 'success');
                        await updateStatus();
                        loadActionsLog();
                    } else {
                        if (data.canForce && !force) {
                            const forceConfirm = confirm(`${data.message}\n\nForce charging anyway?`);
                            if (forceConfirm) {
                                return sendChargingCommand(enable, true);
                            }
                        } else {
                            showNotification(data.message || 'Command failed', 'warning');
                        }
                    }
                } catch (error) {
                    console.error('Error sending charging command:', error);
                    showNotification('Error sending command: ' + error.message, 'danger');
                }
            }
            
            // Test Tibber connection
            async function testTibberConnection() {
                const apiKey = document.getElementById('tibberApiKey').value;
                const testBtn = document.getElementById('testTibberBtn');
                const resultDiv = document.getElementById('tibberTestResult');
                
                if (!apiKey || apiKey.includes('...')) {
                    showNotification('Please enter a valid Tibber API key', 'warning');
                    return;
                }
                
                testBtn.innerHTML = '<span class="loading"></span> Testing...';
                testBtn.disabled = true;
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/test-tibber', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ apiKey: apiKey })
                    });
                    
                    const data = await response.json();
                    
                    resultDiv.classList.remove('hidden');
                    
                    if (data.success) {
                        resultDiv.innerHTML = `
                            <div class="alert alert-success">
                                <strong>Connection successful!</strong><br>
                                User: ${data.user?.name || 'Unknown'}<br>
                                Homes: ${data.homes || 0}<br>
                                ${data.currentPrice ? `Current Price: ${data.currentPrice.price} ${data.currentPrice.currency}/kWh (${data.currentPrice.level})` : ''}
                            </div>
                        `;
                        showNotification('Tibber API test successful', 'success');
                    } else {
                        resultDiv.innerHTML = `
                            <div class="alert alert-danger">
                                <strong>Connection failed:</strong><br>
                                ${data.error}<br>
                                ${data.details || ''}
                            </div>
                        `;
                        showNotification('Tibber API test failed: ' + data.error, 'danger');
                    }
                } catch (error) {
                    resultDiv.classList.remove('hidden');
                    resultDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <strong>Test error:</strong><br>
                            ${error.message}
                        </div>
                    `;
                    showNotification('Test failed: ' + error.message, 'danger');
                } finally {
                    testBtn.innerHTML = 'Test';
                    testBtn.disabled = false;
                }
            }
            
            // Load actions log
            async function loadActionsLog() {
                try {
                    const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/actions-log?limit=5');
                    const data = await response.json();
                    
                    const logContainer = document.getElementById('actionsLog');
                    
                    if (data.success && data.actions.length > 0) {
                        let html = '';
                        data.actions.forEach(action => {
                            const actionTime = new Date(action.timestamp).toLocaleString();
                            html += `
                                <div class="action-item">
                                    <div class="action-time">${actionTime}</div>
                                    <div class="action-text">${action.action}</div>
                                </div>
                            `;
                        });
                        logContainer.innerHTML = html;
                    } else {
                        logContainer.innerHTML = '<p>No recent actions.</p>';
                    }
                } catch (error) {
                    console.error('Error loading actions log:', error);
                    document.getElementById('actionsLog').innerHTML = '<p>Error loading actions.</p>';
                }
            }
            
            // Enhanced smart power rules management (REPLACE the existing updateSmartPowerRules function)
function updateSmartPowerRules() {
    const rulesContainer = document.getElementById('powerRulesList');
    rulesContainer.innerHTML = '';
    
    if (!enhancedConfig.smartPowerConditions?.rules || enhancedConfig.smartPowerConditions.rules.length === 0) {
        rulesContainer.innerHTML = `
            <div class="empty-rules">
                <p><i class="fas fa-info-circle"></i> No smart power rules defined yet.</p>
                <p>Create custom rules to automatically control charging based on your system's power conditions.</p>
            </div>
        `;
        return;
    }
    
    enhancedConfig.smartPowerConditions.rules.forEach((rule, index) => {
        const ruleDiv = document.createElement('div');
        ruleDiv.className = 'power-rule-item user-rule';
        ruleDiv.innerHTML = `
            <div class="rule-header">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input rule-enabled" id="rule_${rule.id}" ${rule.enabled ? 'checked' : ''} data-rule-id="${rule.id}">
                    <label class="form-check-label"><strong>${rule.name}</strong></label>
                </div>
                <div class="rule-actions">
                    <span class="rule-priority priority-${rule.priority}">${rule.priority}</span>
                    <button class="btn btn-sm btn-outline-primary edit-rule-btn" data-rule-id="${rule.id}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger delete-rule-btn" data-rule-id="${rule.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <p class="rule-description">${rule.description}</p>
            <div class="rule-conditions">
                ${Object.entries(rule.conditions).map(([param, cond]) => {
                    if (cond.compare) {
                        return `${param} ${cond.operator} ${cond.compare}${cond.offset ? ' + ' + cond.offset : ''}`;
                    } else {
                        return `${param} ${cond.operator} ${cond.value}`;
                    }
                }).join(' AND ')}
            </div>
        `;
        rulesContainer.appendChild(ruleDiv);
    });
    
    // Add event listeners for rule actions
    setupRuleEventListeners();
}

// Setup event listeners for rule management
function setupRuleEventListeners() {
    // Enable/disable rule checkboxes
    document.querySelectorAll('.rule-enabled').forEach(checkbox => {
        checkbox.addEventListener('change', async function() {
            const ruleId = this.dataset.ruleId;
            const enabled = this.checked;
            
            try {
                const response = await fetch(`<%= ingress_path %>/api/dynamic-pricing/smart-power-rule/${ruleId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        rule: { enabled: enabled }
                    })
                });
                
                const data = await response.json();
                if (data.success) {
                    // Update local config
                    const rule = enhancedConfig.smartPowerConditions.rules.find(r => r.id === ruleId);
                    if (rule) rule.enabled = enabled;
                    
                    showNotification(`Rule ${enabled ? 'enabled' : 'disabled'}`, 'success');
                } else {
                    // Revert checkbox state
                    this.checked = !enabled;
                    showNotification('Failed to update rule: ' + data.error, 'danger');
                }
            } catch (error) {
                // Revert checkbox state
                this.checked = !enabled;
                showNotification('Error updating rule: ' + error.message, 'danger');
            }
        });
    });
    
    // Edit rule buttons
    document.querySelectorAll('.edit-rule-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const ruleId = this.dataset.ruleId;
            editSmartPowerRule(ruleId);
        });
    });
    
    // Delete rule buttons
    document.querySelectorAll('.delete-rule-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const ruleId = this.dataset.ruleId;
            deleteSmartPowerRule(ruleId);
        });
    });
}

// Show smart power rule creation modal
function showCreateRuleModal() {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>Create Smart Power Rule</h3>
                <button class="btn btn-sm" onclick="this.closest('.modal-overlay').remove()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label">Rule Name</label>
                    <input type="text" class="form-control" id="newRuleName" placeholder="Enter rule name">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" id="newRuleDescription" placeholder="Describe when this rule should trigger"></textarea>
                </div>
                
                <div class="grid-2">
                    <div class="form-group">
                        <label class="form-label">Priority</label>
                        <select class="form-control" id="newRulePriority">
                            <option value="low">Low</option>
                            <option value="medium" selected>Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Enabled</label>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="newRuleEnabled" checked>
                            <label class="form-check-label">Enable this rule</label>
                        </div>
                    </div>
                </div>
                
                <h4>Conditions</h4>
                <p>All conditions must be met for the rule to trigger charging:</p>
                
                <div id="ruleConditions">
                    <div class="condition-row">
                        <div class="grid-4">
                            <select class="form-control condition-param">
                                <option value="">Select Parameter</option>
                                <option value="battery_soc">Battery SoC (%)</option>
                                <option value="pv_power">PV Power (W)</option>
                                <option value="load">Load Power (W)</option>
                                <option value="grid_power">Grid Power (W)</option>
                                <option value="battery_power">Battery Power (W)</option>
                                <option value="grid_voltage">Grid Voltage (V)</option>
                            </select>
                            <select class="form-control condition-operator">
                                <option value="gt">Greater Than (>)</option>
                                <option value="lt">Less Than (<)</option>
                                <option value="gte">Greater Than or Equal (>=)</option>
                                <option value="lte">Less Than or Equal (<=)</option>
                                <option value="eq">Equal (=)</option>
                            </select>
                            <input type="number" class="form-control condition-value" placeholder="Value">
                            <button type="button" class="btn btn-sm btn-outline-danger remove-condition-btn">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <button type="button" class="btn btn-sm btn-outline-primary" id="addConditionBtn">
                    <i class="fas fa-plus"></i> Add Condition
                </button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="this.closest('.modal-overlay').remove()">Cancel</button>
                <button class="btn btn-primary" id="saveNewRuleBtn">Create Rule</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Setup modal event listeners
    setupRuleModalEventListeners(modal);
}

// Setup event listeners for rule creation modal
function setupRuleModalEventListeners(modal) {
    // Add condition button
    modal.querySelector('#addConditionBtn').addEventListener('click', function() {
        const conditionsDiv = modal.querySelector('#ruleConditions');
        const newCondition = document.createElement('div');
        newCondition.className = 'condition-row';
        newCondition.innerHTML = `
            <div class="grid-4">
                <select class="form-control condition-param">
                    <option value="">Select Parameter</option>
                    <option value="battery_soc">Battery SoC (%)</option>
                    <option value="pv_power">PV Power (W)</option>
                    <option value="load">Load Power (W)</option>
                    <option value="grid_power">Grid Power (W)</option>
                    <option value="battery_power">Battery Power (W)</option>
                    <option value="grid_voltage">Grid Voltage (V)</option>
                </select>
                <select class="form-control condition-operator">
                    <option value="gt">Greater Than (>)</option>
                    <option value="lt">Less Than (<)</option>
                    <option value="gte">Greater Than or Equal (>=)</option>
                    <option value="lte">Less Than or Equal (<=)</option>
                    <option value="eq">Equal (=)</option>
                </select>
                <input type="number" class="form-control condition-value" placeholder="Value">
                <button type="button" class="btn btn-sm btn-outline-danger remove-condition-btn">
                    <i class="fas fa-minus"></i>
                </button>
            </div>
        `;
        conditionsDiv.appendChild(newCondition);
        
        // Add remove listener to new condition
        newCondition.querySelector('.remove-condition-btn').addEventListener('click', function() {
            newCondition.remove();
        });
    });
    
    // Remove condition buttons
    modal.querySelectorAll('.remove-condition-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            this.closest('.condition-row').remove();
        });
    });
    
    // Save rule button
    modal.querySelector('#saveNewRuleBtn').addEventListener('click', async function() {
        await saveNewSmartPowerRule(modal);
    });
}

// Save new smart power rule
async function saveNewSmartPowerRule(modal) {
    try {
        const name = modal.querySelector('#newRuleName').value.trim();
        const description = modal.querySelector('#newRuleDescription').value.trim();
        const priority = modal.querySelector('#newRulePriority').value;
        const enabled = modal.querySelector('#newRuleEnabled').checked;
        
        if (!name) {
            showNotification('Rule name is required', 'warning');
            return;
        }
        
        // Collect conditions
        const conditions = {};
        const conditionRows = modal.querySelectorAll('.condition-row');
        
        for (const row of conditionRows) {
            const param = row.querySelector('.condition-param').value;
            const operator = row.querySelector('.condition-operator').value;
            const value = parseFloat(row.querySelector('.condition-value').value);
            
            if (param && operator && !isNaN(value)) {
                conditions[param] = { operator, value };
            }
        }
        
        if (Object.keys(conditions).length === 0) {
            showNotification('At least one condition is required', 'warning');
            return;
        }
        
        const newRule = {
            name,
            description,
            priority,
            enabled,
            conditions
        };
        
        const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/smart-power-rule', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ rule: newRule })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('Smart power rule created successfully', 'success');
            modal.remove();
            
            // Reload configuration to show new rule
            await loadEnhancedConfig();
        } else {
            showNotification('Failed to create rule: ' + data.error, 'danger');
        }
    } catch (error) {
        console.error('Error creating rule:', error);
        showNotification('Error creating rule: ' + error.message, 'danger');
    }
}

// Delete smart power rule
async function deleteSmartPowerRule(ruleId) {
    if (!confirm('Are you sure you want to delete this rule?')) {
        return;
    }
    
    try {
        const response = await fetch(`<%= ingress_path %>/api/dynamic-pricing/smart-power-rule/${ruleId}`, {
            method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('Rule deleted successfully', 'success');
            
            // Remove from local config
            const ruleIndex = enhancedConfig.smartPowerConditions.rules.findIndex(r => r.id === ruleId);
            if (ruleIndex !== -1) {
                enhancedConfig.smartPowerConditions.rules.splice(ruleIndex, 1);
            }
            
            // Update UI
            updateSmartPowerRules();
        } else {
            showNotification('Failed to delete rule: ' + data.error, 'danger');
        }
    } catch (error) {
        console.error('Error deleting rule:', error);
        showNotification('Error deleting rule: ' + error.message, 'danger');
    }
}

// Test weather API with better error handling
async function testWeatherAPI() {
    const weatherApiKey = document.getElementById('weatherApiKey').value;
    const country = document.getElementById('tibberCountry').value;
    const city = document.getElementById('tibberCity').value;
    
    if (!weatherApiKey) {
        showNotification('Weather API key is required', 'warning');
        return;
    }
    
    const testBtn = document.getElementById('testWeatherBtn');
    const originalText = testBtn.innerHTML;
    testBtn.innerHTML = '<span class="loading"></span> Testing...';
    testBtn.disabled = true;
    
    try {
        const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/test-weather', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                weatherApiKey,
                country,
                city
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showNotification(`Weather API test successful! Got forecast for ${data.location}`, 'success');
            
            // Show weather test results
            document.getElementById('testResults').classList.remove('hidden');
            document.getElementById('testOutput').textContent = JSON.stringify({
                location: data.location,
                coordinates: data.coordinates,
                forecastPeriods: data.forecast ? data.forecast.length : 0,
                apiResponseCode: data.apiResponseCode
            }, null, 2);
        } else {
            showNotification('Weather API test failed: ' + data.error, 'danger');
            
            // Show detailed error
            document.getElementById('testResults').classList.remove('hidden');
            document.getElementById('testOutput').textContent = JSON.stringify(data, null, 2);
        }
    } catch (error) {
        console.error('Error testing weather API:', error);
        showNotification('Weather API test error: ' + error.message, 'danger');
    } finally {
        testBtn.innerHTML = originalText;
        testBtn.disabled = false;
    }
}


            // Setup all event listeners
            function setupEventListeners() {
                // Main toggle
                document.getElementById('enableEnhancedPricing').addEventListener('change', saveEnhancedConfiguration);
                
                // Save buttons
                document.getElementById('saveTibberBtn').addEventListener('click', saveEnhancedConfiguration);
                document.getElementById('saveAllConfigBtn').addEventListener('click', saveEnhancedConfiguration);
                
                // Country/city selection
                document.getElementById('tibberCountry').addEventListener('change', function() {
                    updateCityOptions(this.value);
                });
                
                // Charging control buttons
                document.getElementById('smartChargeBtn').addEventListener('click', () => sendChargingCommand(true, false));
                document.getElementById('forceChargeBtn').addEventListener('click', () => sendChargingCommand(true, true));
                document.getElementById('stopChargeBtn').addEventListener('click', () => sendChargingCommand(false, false));
                document.getElementById('addPowerRuleBtn').addEventListener('click', showCreateRuleModal);
    
    // Weather API test button
               document.getElementById('testWeatherBtn').addEventListener('click', testWeatherAPI);
                
                // Test buttons
                document.getElementById('testTibberBtn').addEventListener('click', testTibberConnection);
                
                // Refresh buttons
                document.getElementById('refreshDataBtn').addEventListener('click', updateStatus);
                document.getElementById('refreshActionsBtn').addEventListener('click', loadActionsLog);
                document.getElementById('refreshPricesBtn').addEventListener('click', async function() {
                    this.innerHTML = '<span class="loading"></span> Refreshing...';
                    this.disabled = true;
                    
                    try {
                        const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/refresh-prices', {
                            method: 'POST'
                        });
                        const data = await response.json();
                        
                        if (data.success) {
                            showNotification(data.message, 'success');
                            await refreshCurrentPrice();
                        } else {
                            showNotification('Price refresh failed: ' + data.error, 'danger');
                        }
                    } catch (error) {
                        showNotification('Price refresh error: ' + error.message, 'danger');
                    } finally {
                        this.innerHTML = '<i class="fas fa-euro-sign"></i> Refresh Tibber Prices';
                        this.disabled = false;
                    }
                });
                
                // UI visibility toggles
                document.getElementById('enableWeatherConditions').addEventListener('change', updateUIVisibility);
                document.getElementById('preferNightCharging').addEventListener('change', updateUIVisibility);
                document.getElementById('useTibberLevels').addEventListener('change', updateUIVisibility);
                
                // Cloud cover threshold display
                document.getElementById('cloudCoverThreshold').addEventListener('input', updateUIVisibility);
                
                // Test condition buttons
                document.querySelectorAll('[data-test]').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const testType = this.dataset.test;
                        testCondition(testType);
                    });
                });
            }
            
            // Test specific condition
            async function testCondition(testType) {
                try {
                    const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/test-conditions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ testType })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        document.getElementById('testResults').classList.remove('hidden');
                        document.getElementById('testOutput').textContent = JSON.stringify(data.result, null, 2);
                        showNotification(`${testType} condition test completed`, 'success');
                    } else {
                        throw new Error(data.error || 'Test failed');
                    }
                } catch (error) {
                    console.error('Error testing condition:', error);
                    showNotification('Test failed: ' + error.message, 'danger');
                }
            }
            
            // Start automatic refresh
            function startAutoRefresh() {
                // Update status every 30 seconds
                autoRefreshInterval = setInterval(updateStatus, 30000);
                
                // Refresh price every 5 minutes
                priceRefreshInterval = setInterval(refreshCurrentPrice, 300000);
                
                // Update actions log every 2 minutes
                setInterval(loadActionsLog, 120000);
            }
            
            // Utility functions
            function showNotification(message, type = 'info') {
                const notification = document.getElementById('notification');
                const notificationMessage = document.getElementById('notificationMessage');
                
                notification.className = 'alert';
                notification.classList.add(`alert-${type}`);
                notificationMessage.textContent = message;
                notification.classList.remove('hidden');
                
                setTimeout(() => {
                    notification.classList.add('hidden');
                }, 5000);
            }
            
            window.hideNotification = function() {
                document.getElementById('notification').classList.add('hidden');
            };
        });
    </script>
    <script src="<%= ingress_path %>/js/loading.js"></script>
    <script src="<%= ingress_path %>/js/dark-mode.js"></script>
    <script src="<%= ingress_path %>/js/mobile.js"></script>
   >

</body>
</html>