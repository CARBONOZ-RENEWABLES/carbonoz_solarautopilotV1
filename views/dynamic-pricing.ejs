<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solar Autopilot</title>
    <link rel="stylesheet" href="<%= ingress_path %>/css/dynamic-pricing.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
  
</head>
<body>
    <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
      <span></span>
      <span></span>
      <span></span>
  </button>
  <div class="container">
      <div id="loadingOverlay" class="loading-overlay">
          <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"> </div>

        <%- include('partials/sidebar') %>
        <div class="main-content">
    <div class="container">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="header-left">
                    <h1><i class="fas fa-bolt"></i> Dynamic Pricing Control</h1>
                    <p class="subtitle">Intelligent battery charging with Tibber integration</p>
                </div>
                <div class="header-right">
                    <div class="status-indicator" id="connectionStatus">
                        <i class="fas fa-circle"></i> <span>Connecting...</span>
                    </div>
                    <div class="learner-mode-indicator" id="learnerModeStatus">
                        <i class="fas fa-graduation-cap"></i> <span>Learner Mode</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Quick Actions Bar -->
        <div class="quick-actions">
            <button class="quick-btn" id="manualChargeBtn" data-action="charge">
                <i class="fas fa-play"></i> Manual Charging Test
            </button>
            <button class="quick-btn" id="manualStopBtn" data-action="stop">
                <i class="fas fa-stop"></i> Manual Charge Stop Test
            </button>
            <button class="quick-btn" id="refreshDataBtn">
                <i class="fas fa-refresh"></i> Refresh Data
            </button>
            <button class="quick-btn" id="testConditionsBtn">
                <i class="fas fa-flask"></i> Test Conditions
            </button>
        </div>

        <!-- Main Dashboard -->
        <div class="dashboard-grid">
            <!-- Current Status Panel -->
            <div class="panel status-panel">
                <div class="panel-header">
                    <h3><i class="fas fa-tachometer-alt"></i> Current Status</h3>
                    <div class="panel-controls">
                        <button class="btn btn-icon" id="refreshStatusBtn">
                            <i class="fas fa-sync"></i>
                        </button>
                    </div>
                </div>
                <div class="panel-content">
                    <div class="status-grid">
                        <!-- Battery Status -->
                        <div class="status-card">
                            <div class="status-icon battery">
                                <i class="fas fa-battery-three-quarters"></i>
                            </div>
                            <div class="status-info">
                                <h4>Battery SoC</h4>
                                <span class="status-value" id="batterySOC">--</span>
                                <span class="status-unit">%</span>
                            </div>
                        </div>

                        <!-- Current Price -->
                        <div class="status-card">
                            <div class="status-icon price">
                                <i class="fas fa-euro-sign"></i>
                            </div>
                            <div class="status-info">
                                <h4>Current Price</h4>
                                <span class="status-value" id="currentPrice">--</span>
                                <span class="status-unit" id="currentCurrency">EUR/kWh</span>
                                <div class="price-level" id="priceLevel"></div>
                            </div>
                        </div>

                        <!-- PV Power -->
                        <div class="status-card">
                            <div class="status-icon pv">
                                <i class="fas fa-sun"></i>
                            </div>
                            <div class="status-info">
                                <h4>PV Power</h4>
                                <span class="status-value" id="pvPower">--</span>
                                <span class="status-unit">W</span>
                            </div>
                        </div>

                        <!-- Load Power -->
                        <div class="status-card">
                            <div class="status-icon load">
                                <i class="fas fa-home"></i>
                            </div>
                            <div class="status-info">
                                <h4>Load</h4>
                                <span class="status-value" id="loadPower">--</span>
                                <span class="status-unit">W</span>
                            </div>
                        </div>

                        <!-- Battery Power -->
                        <div class="status-card">
                            <div class="status-icon battery-power">
                                <i class="fas fa-battery-bolt"></i>
                            </div>
                            <div class="status-info">
                                <h4>Battery Power</h4>
                                <span class="status-value" id="batteryPower">--</span>
                                <span class="status-unit">W</span>
                            </div>
                        </div>

                        <!-- Grid Power -->
                        <div class="status-card">
                            <div class="status-icon grid">
                                <i class="fas fa-plug"></i>
                            </div>
                            <div class="status-info">
                                <h4>Grid Power</h4>
                                <span class="status-value" id="gridPower">--</span>
                                <span class="status-unit">W</span>
                            </div>
                        </div>

                        <!-- Weather -->
                        <div class="status-card weather-card">
                            <div class="weather-icon" id="weatherIcon">
                                <i class="fas fa-cloud"></i>
                            </div>
                            <div class="weather-info">
                                <h4>Weather</h4>
                                <span class="weather-temp" id="weatherTemp">--Â°C</span>
                                <span class="weather-desc" id="weatherDesc">Loading...</span>
                                <div class="weather-animation" id="weatherAnimation"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Charging Decision -->
                    <div class="charging-decision" id="chargingDecision">
                        <div class="decision-status">
                            <i class="fas fa-question-circle"></i>
                            <span>Analyzing conditions...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Price Chart -->
            <div class="panel chart-panel">
                <div class="panel-header">
                    <h3><i class="fas fa-chart-line"></i> Price Forecast (24h)</h3>
                    <div class="panel-controls">
                        <select id="chartPeriod" class="select-input">
                            <option value="24h">Next 24 Hours</option>
                            <option value="48h">Next 48 Hours</option>
                            <option value="today">Today</option>
                            <option value="tomorrow">Tomorrow</option>
                        </select>
                    </div>
                </div>
                <div class="panel-content">
                    <div class="chart-container">
                        <canvas id="priceChart"></canvas>
                    </div>
                    <div class="chart-legend">
                        <div class="legend-item very-cheap">
                            <span class="legend-dot"></span> Very Cheap
                        </div>
                        <div class="legend-item cheap">
                            <span class="legend-dot"></span> Cheap
                        </div>
                        <div class="legend-item normal">
                            <span class="legend-dot"></span> Normal
                        </div>
                        <div class="legend-item expensive">
                            <span class="legend-dot"></span> Expensive
                        </div>
                        <div class="legend-item very-expensive">
                            <span class="legend-dot"></span> Very Expensive
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Configuration Tabs -->
        <div class="config-tabs">
            <div class="tabs-header">
                <button class="tab-btn active" data-tab="tibber">
                    <i class="fas fa-bolt"></i> Tibber Setup
                </button>
                <button class="tab-btn" data-tab="battery">
                    <i class="fas fa-battery-half"></i> Battery Settings
                </button>
                <button class="tab-btn" data-tab="weather">
                    <i class="fas fa-cloud-sun"></i> Weather Conditions
                </button>
                <button class="tab-btn" data-tab="power">
                    <i class="fas fa-lightning-bolt"></i> Power Rules
                </button>
                <button class="tab-btn" data-tab="schedule">
                    <i class="fas fa-clock"></i> Scheduling
                </button>
                <button class="tab-btn" data-tab="advanced">
                    <i class="fas fa-cog"></i> Advanced
                </button>
            </div>

            <div class="tabs-content">
                <!-- Tibber Configuration -->
                <div class="tab-content active" id="tibber-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-key"></i> Tibber API Configuration</h4>
                        <div class="config-grid">
                            <div class="config-item">
                                <label for="tibberApiKey">API Key</label>
                                <div class="input-group">
                                    <input type="password" id="tibberApiKey" class="config-input" placeholder="Enter your Tibber API key">
                                    <button class="btn btn-icon" id="toggleApiKey">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-secondary" id="testTibberBtn">Test</button>
                                </div>
                                <small class="help-text">Get your API key from Tibber Developer Portal</small>
                            </div>

                            <div class="config-item">
                                <label for="country">Country</label>
                                <select id="country" class="config-input">
                                    <option value="">Select Country</option>
                                    <option value="NO">Norway</option>
                                    <option value="SE">Sweden</option>
                                    <option value="DK">Denmark</option>
                                    <option value="FI">Finland</option>
                                    <option value="DE">Germany</option>
                                    <option value="NL">Netherlands</option>
                                    <option value="GB">United Kingdom</option>
                                </select>
                            </div>

                            <div class="config-item">
                                <label for="city">City</label>
                                <select id="city" class="config-input">
                                    <option value="">Select City</option>
                                </select>
                            </div>

                            <div class="config-item">
                                <label for="timezone">Timezone</label>
                                <select id="timezone" class="config-input">
                                    <option value="Europe/Oslo">Europe/Oslo</option>
                                    <option value="Europe/Stockholm">Europe/Stockholm</option>
                                    <option value="Europe/Copenhagen">Europe/Copenhagen</option>
                                    <option value="Europe/Helsinki">Europe/Helsinki</option>
                                    <option value="Europe/Berlin">Europe/Berlin</option>
                                    <option value="Europe/Amsterdam">Europe/Amsterdam</option>
                                    <option value="Europe/London">Europe/London</option>
                                </select>
                            </div>
                        </div>

                        <div class="tibber-status" id="tibberStatus">
                            <div class="status-item">
                                <span class="label">Connection:</span>
                                <span class="value" id="tibberConnection">Not tested</span>
                            </div>
                            <div class="status-item">
                                <span class="label">Last Price Update:</span>
                                <span class="value" id="lastPriceUpdate">Never</span>
                            </div>
                            <div class="status-item">
                                <span class="label">Data Points:</span>
                                <span class="value" id="dataPoints">0</span>
                            </div>
                        </div>
                    </div>

                    <div class="config-section">
                        <h4><i class="fas fa-euro-sign"></i> Price-Based Charging</h4>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enablePriceCharging" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Price-Based Charging</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="useTibberLevels" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Use Tibber Price Levels (Recommended)</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item" id="tibberLevelsConfig">
                                <label>Allowed Price Levels</label>
                                <div class="checkbox-group">
                                    <label class="checkbox-label very-cheap">
                                        <input type="checkbox" id="levelVeryCheap" value="VERY_CHEAP">
                                        <span class="checkmark"></span>
                                        Very Cheap
                                    </label>
                                    <label class="checkbox-label cheap">
                                        <input type="checkbox" id="levelCheap" value="CHEAP">
                                        <span class="checkmark"></span>
                                        Cheap
                                    </label>
                                    <label class="checkbox-label normal">
                                        <input type="checkbox" id="levelNormal" value="NORMAL">
                                        <span class="checkmark"></span>
                                        Normal
                                    </label>
                                </div>
                            </div>

                            <div class="config-item" id="priceThresholdConfig">
                                <label for="maxPriceThreshold">Maximum Price Threshold</label>
                                <div class="input-group">
                                    <input type="number" id="maxPriceThreshold" class="config-input" step="0.01" min="0" max="1">
                                    <span class="input-addon">EUR/kWh</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Battery Settings -->
                <div class="tab-content" id="battery-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-battery-half"></i> Battery Management</h4>
                        <div class="config-grid">
                            <div class="config-item">
                                <label for="emergencySOC">Emergency SoC</label>
                                <div class="input-group">
                                    <input type="number" id="emergencySOC" class="config-input" min="5" max="30">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Force charging below this level</small>
                            </div>

                            <div class="config-item">
                                <label for="minimumSOC">Minimum SoC</label>
                                <div class="input-group">
                                    <input type="number" id="minimumSOC" class="config-input" min="10" max="50">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Preferred minimum charge level</small>
                            </div>

                            <div class="config-item">
                                <label for="targetSOC">Target SoC</label>
                                <div class="input-group">
                                    <input type="number" id="targetSOC" class="config-input" min="50" max="95">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Stop charging at this level</small>
                            </div>

                            <div class="config-item">
                                <label for="maxSOC">Maximum SoC</label>
                                <div class="input-group">
                                    <input type="number" id="maxSOC" class="config-input" min="80" max="100">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Never charge above this level</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Weather Conditions -->
                <div class="tab-content" id="weather-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-cloud-sun"></i> Weather-Based Charging</h4>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enableWeatherConditions" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Weather-Based Charging</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="weatherApiKey">OpenWeatherMap API Key</label>
                                <div class="input-group">
                                    <input type="password" id="weatherApiKey" class="config-input" placeholder="Enter API key">
                                    <button class="btn btn-secondary" id="testWeatherBtn">Test</button>
                                </div>
                                <small class="help-text">Get free API key from openweathermap.org</small>
                            </div>

                            <div class="config-item">
                                <label for="cloudCoverThreshold">Cloud Cover Threshold</label>
                                <div class="input-group">
                                    <input type="number" id="cloudCoverThreshold" class="config-input" min="0" max="100">
                                    <span class="input-addon">%</span>
                                </div>
                                <small class="help-text">Trigger charging above this cloud cover</small>
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="chargeOnCloudyDays" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Charge on Cloudy Days</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="chargeBeforeStorm" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Charge Before Storms</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Current Weather -->
                        <div class="weather-display" id="currentWeatherDisplay">
                            <h5><i class="fas fa-thermometer-half"></i> Current Weather</h5>
                            <div class="weather-current">
                                <div class="weather-main">
                                    <div class="weather-icon-large" id="currentWeatherIcon">
                                        <i class="fas fa-cloud"></i>
                                    </div>
                                    <div class="weather-temp-large" id="currentWeatherTemp">--Â°C</div>
                                </div>
                                <div class="weather-details">
                                    <div class="weather-detail">
                                        <span class="label">Description:</span>
                                        <span class="value" id="currentWeatherDesc">--</span>
                                    </div>
                                    <div class="weather-detail">
                                        <span class="label">Cloud Cover:</span>
                                        <span class="value" id="currentCloudCover">--%</span>
                                    </div>
                                    <div class="weather-detail">
                                        <span class="label">Humidity:</span>
                                        <span class="value" id="currentHumidity">--%</span>
                                    </div>
                                    <div class="weather-detail">
                                        <span class="label">Wind:</span>
                                        <span class="value" id="currentWind">-- m/s</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Power Rules -->
                <div class="tab-content" id="power-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-lightning-bolt"></i> Smart Power Conditions</h4>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enablePowerConditions" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Smart Power Conditions</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Power Rules Builder -->
                        <div class="power-rules" id="powerRulesSection">
                            <h5><i class="fas fa-plus-circle"></i> Custom Power Rules</h5>
                            <button class="btn btn-primary" id="addPowerRuleBtn">
                                <i class="fas fa-plus"></i> Add New Rule
                            </button>
                            
                            <div class="power-rules-list" id="powerRulesList">
                                <!-- Dynamic power rules will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Scheduling -->
                <div class="tab-content" id="schedule-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-clock"></i> Time-Based Conditions</h4>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enableTimeConditions" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Time-Based Conditions</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="avoidPeakHours" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Avoid Peak Hours</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="peakStart">Peak Start Time</label>
                                <input type="time" id="peakStart" class="config-input">
                            </div>

                            <div class="config-item">
                                <label for="peakEnd">Peak End Time</label>
                                <input type="time" id="peakEnd" class="config-input">
                            </div>

                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="preferNightCharging" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Prefer Night Charging</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="nightStart">Night Start Time</label>
                                <input type="time" id="nightStart" class="config-input">
                            </div>

                            <div class="config-item">
                                <label for="nightEnd">Night End Time</label>
                                <input type="time" id="nightEnd" class="config-input">
                            </div>
                        </div>

                        <!-- Scheduled Charging -->
                        <h5><i class="fas fa-calendar-alt"></i> Scheduled Charging</h5>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enableScheduledCharging" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Scheduled Charging</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="schedule-builder" id="scheduleBuilder">
                            <button class="btn btn-primary" id="addScheduleBtn">
                                <i class="fas fa-plus"></i> Add Schedule
                            </button>
                            <div class="schedules-list" id="schedulesList">
                                <!-- Dynamic schedules will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Advanced Settings -->
                <div class="tab-content" id="advanced-tab">
                    <div class="config-section">
                        <h4><i class="fas fa-cog"></i> Advanced Settings</h4>
                        
                        <!-- Cooldown Settings -->
                        <h5><i class="fas fa-clock"></i> Cooldown Management</h5>
                        <div class="config-grid">
                            <div class="config-item full-width">
                                <div class="toggle-group">
                                    <label class="toggle-label">
                                        <input type="checkbox" id="enableCooldown" class="toggle-input">
                                        <span class="toggle-slider"></span>
                                        <span class="toggle-text">Enable Cooldown Protection</span>
                                    </label>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="chargingCooldownMinutes">Charging Cooldown</label>
                                <div class="input-group">
                                    <input type="number" id="chargingCooldownMinutes" class="config-input" min="1" max="180">
                                    <span class="input-addon">minutes</span>
                                </div>
                            </div>

                            <div class="config-item">
                                <label for="maxChargingCyclesPerDay">Max Cycles Per Day</label>
                                <div class="input-group">
                                    <input type="number" id="maxChargingCyclesPerDay" class="config-input" min="1" max="50">
                                    <span class="input-addon">cycles</span>
                                </div>
                            </div>
                        </div>

                        <!-- Inverter Status -->
                        <h5><i class="fas fa-microchip"></i> Inverter Status</h5>
                        <div class="inverter-status" id="inverterStatusDisplay">
                            <!-- Inverter status will be populated dynamically -->
                        </div>

                        <!-- System Health -->
                        <h5><i class="fas fa-heartbeat"></i> System Health</h5>
                        <div class="health-indicators" id="healthIndicators">
                            <!-- Health indicators will be populated dynamically -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Actions Footer -->
        <div class="actions-footer">
            <div class="actions-right">
                <button class="btn btn-secondary" id="disableBtn">
                    <i class="fas fa-power-off"></i> Disable
                </button>
                <button class="btn btn-primary" id="saveSettingsBtn">
                    <i class="fas fa-save"></i> Save Settings
                </button>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div class="modal" id="powerRuleModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Power Rule Configuration</h3>
                <button class="modal-close" id="closePowerRuleModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="config-grid">
                    <div class="config-item full-width">
                        <label for="ruleName">Rule Name</label>
                        <input type="text" id="ruleName" class="config-input" placeholder="Enter rule name">
                    </div>
                    <div class="config-item full-width">
                        <label for="rulePriority">Priority</label>
                        <select id="rulePriority" class="config-input">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                    <div class="config-item full-width">
                        <label for="ruleDescription">Description</label>
                        <textarea id="ruleDescription" class="config-input" rows="2" placeholder="Describe what this rule does"></textarea>
                    </div>
                </div>
                
                <h4>Conditions</h4>
                <div id="ruleConditions">
                    <!-- Dynamic conditions will be added here -->
                </div>
                <button class="btn btn-secondary" id="addConditionBtn">
                    <i class="fas fa-plus"></i> Add Condition
                </button>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="cancelRuleBtn">Cancel</button>
                <button class="btn btn-primary" id="saveRuleBtn">Save Rule</button>
            </div>
        </div>
    </div>
</div>
        
</div>
    <!-- Toast Notifications -->
    <div class="toast-container" id="toastContainer"></div>

<script>
    // Dynamic Pricing Dashboard JavaScript
// Enhanced with complete power rules and scheduling functionality

class DynamicPricingDashboard {
    constructor() {
        this.config = {};
        this.systemState = {};
        this.priceChart = null;
        this.isConnected = false;
        this.updateInterval = null;
        this.toastContainer = document.getElementById('toastContainer');
        this.powerRules = [];
        this.schedules = [];
        this.editingRuleId = null;
        this.editingScheduleId = null;
        
        // Initialize the dashboard
        this.init();
    }

    async init() {
        try {
            console.log('ð Initializing Dynamic Pricing Dashboard...');
            
            // Hide loading overlay
            this.hideLoading();
            
            // Setup event listeners
            this.setupEventListeners();
            
            // Initialize chart
            this.initializeChart();
            
            // Load initial data
            await this.loadConfiguration();
            await this.loadSystemStatus();
            
            // Start periodic updates
            this.startPeriodicUpdates();
            
            // Setup tab functionality
            this.setupTabs();
            
            console.log('â Dashboard initialized successfully');
            this.showToast('Dashboard loaded successfully', 'success');
        } catch (error) {
            console.error('â Error initializing dashboard:', error);
            this.showToast('Error initializing dashboard: ' + error.message, 'error');
        }
    }

    // =============================================================================
    // CHART INITIALIZATION AND MANAGEMENT
    // =============================================================================

    initializeChart() {
        const ctx = document.getElementById('priceChart');
        if (!ctx) return;

        // Beautiful chart configuration
        this.priceChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Price',
                    data: [],
                    borderColor: '#3b82f6',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointRadius: 0,
                    pointHoverRadius: 6,
                    pointBackgroundColor: '#3b82f6',
                    pointBorderColor: '#ffffff',
                    pointBorderWidth: 2,
                    segment: {
                        borderColor: (ctx) => this.getSegmentColor(ctx),
                        backgroundColor: (ctx) => this.getSegmentBackgroundColor(ctx)
                    }
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#ffffff',
                        bodyColor: '#ffffff',
                        borderColor: '#3b82f6',
                        borderWidth: 1,
                        cornerRadius: 8,
                        displayColors: false,
                        callbacks: {
                            title: (tooltipItems) => {
                                const dataIndex = tooltipItems[0].dataIndex;
                                const rawData = this.priceChart.data.datasets[0].rawData;
                                if (rawData && rawData[dataIndex]) {
                                    const time = new Date(rawData[dataIndex].timestamp);
                                    return time.toLocaleString();
                                }
                                return tooltipItems[0].label;
                            },
                            label: (context) => {
                                const dataIndex = context.dataIndex;
                                const rawData = this.priceChart.data.datasets[0].rawData;
                                if (rawData && rawData[dataIndex]) {
                                    const item = rawData[dataIndex];
                                    const level = item.level ? ` (${item.level})` : '';
                                    return `Price: ${context.parsed.y.toFixed(4)} ${item.currency || 'EUR'}/kWh${level}`;
                                }
                                return `Price: ${context.parsed.y.toFixed(4)} EUR/kWh`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        display: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)',
                            drawBorder: false
                        },
                        ticks: {
                            color: '#6b7280',
                            font: {
                                size: 11
                            },
                            maxTicksLimit: 12,
                            callback: function(value, index) {
                                const rawData = this.chart.data.datasets[0].rawData;
                                if (rawData && rawData[index]) {
                                    const time = new Date(rawData[index].timestamp);
                                    return time.getHours().toString().padStart(2, '0') + ':00';
                                }
                                return this.getLabelForValue(value);
                            }
                        }
                    },
                    y: {
                        display: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)',
                            drawBorder: false
                        },
                        ticks: {
                            color: '#6b7280',
                            font: {
                                size: 11
                            },
                            callback: function(value) {
                                return value.toFixed(3);
                            }
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeInOutQuart'
                }
            }
        });

        // Setup chart period selector
        document.getElementById('chartPeriod')?.addEventListener('change', (e) => {
            this.updateChart(e.target.value);
        });
    }

    getSegmentColor(ctx) {
        const rawData = ctx.chart.data.datasets[0].rawData;
        if (!rawData || !rawData[ctx.p0DataIndex]) return '#3b82f6';
        
        const level = rawData[ctx.p0DataIndex].level;
        return this.getPriceLevelColor(level);
    }

    getSegmentBackgroundColor(ctx) {
        const color = this.getSegmentColor(ctx);
        return color + '20'; // Add transparency
    }

    getPriceLevelColor(level) {
        const colors = {
            'VERY_CHEAP': '#10b981',   // Green
            'CHEAP': '#22c55e',        // Light green
            'NORMAL': '#64748b',       // Gray
            'EXPENSIVE': '#f59e0b',    // Orange
            'VERY_EXPENSIVE': '#ef4444' // Red
        };
        return colors[level] || '#3b82f6';
    }

    async updateChart(period = '24h') {
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/pricing-data');
            const data = await response.json();
            
            if (!data.success || !data.data) {
                console.warn('No pricing data available');
                return;
            }

            let filteredData = data.data;
            const now = new Date();

            // Filter data based on period
            switch (period) {
                case '24h':
                    filteredData = data.data.slice(0, 24);
                    break;
                case '48h':
                    filteredData = data.data.slice(0, 48);
                    break;
                case 'today':
                    filteredData = data.data.filter(item => {
                        const itemDate = new Date(item.timestamp);
                        return itemDate.toDateString() === now.toDateString();
                    });
                    break;
                case 'tomorrow':
                    const tomorrow = new Date(now);
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    filteredData = data.data.filter(item => {
                        const itemDate = new Date(item.timestamp);
                        return itemDate.toDateString() === tomorrow.toDateString();
                    });
                    break;
            }

            if (filteredData.length === 0) {
                console.warn('No data for selected period');
                return;
            }

            // Update chart data
            const labels = filteredData.map(item => {
                const time = new Date(item.timestamp);
                return time.getHours().toString().padStart(2, '0') + ':00';
            });

            const prices = filteredData.map(item => item.price);

            this.priceChart.data.labels = labels;
            this.priceChart.data.datasets[0].data = prices;
            this.priceChart.data.datasets[0].rawData = filteredData;

            // Update y-axis range for better visualization
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);
            const padding = (maxPrice - minPrice) * 0.1;
            
            this.priceChart.options.scales.y.min = Math.max(0, minPrice - padding);
            this.priceChart.options.scales.y.max = maxPrice + padding;

            this.priceChart.update('active');
            
            console.log(`ð Chart updated with ${filteredData.length} data points for ${period}`);
        } catch (error) {
            console.error('Error updating chart:', error);
            this.showToast('Error updating price chart', 'error');
        }
    }

    // =============================================================================
    // EVENT LISTENERS
    // =============================================================================

    setupEventListeners() {
        // Quick action buttons
        document.getElementById('manualChargeBtn')?.addEventListener('click', () => {
            this.manualCharge(true);
        });

        document.getElementById('manualStopBtn')?.addEventListener('click', () => {
            this.manualCharge(false);
        });

        document.getElementById('refreshDataBtn')?.addEventListener('click', () => {
            this.refreshAllData();
        });

        document.getElementById('testConditionsBtn')?.addEventListener('click', () => {
            this.showTestConditionsModal();
        });

        // Configuration form handlers
        document.getElementById('saveSettingsBtn')?.addEventListener('click', () => {
            this.saveConfiguration();
        });

        document.getElementById('testTibberBtn')?.addEventListener('click', () => {
            this.testTibberConnection();
        });

        document.getElementById('testWeatherBtn')?.addEventListener('click', () => {
            this.testWeatherAPI();
        });

        // Country/city selectors
        document.getElementById('country')?.addEventListener('change', (e) => {
            this.updateCitiesList(e.target.value);
        });

        // API key toggle
        document.getElementById('toggleApiKey')?.addEventListener('click', () => {
            this.togglePasswordField('tibberApiKey');
        });

        // Conditional field toggles
        document.getElementById('useTibberLevels')?.addEventListener('change', (e) => {
            this.toggleTibberLevelsConfig(e.target.checked);
        });

        // Power Rule Modal handlers
        document.getElementById('addPowerRuleBtn')?.addEventListener('click', () => {
            this.showPowerRuleModal();
        });

        document.getElementById('closePowerRuleModal')?.addEventListener('click', () => {
            this.hidePowerRuleModal();
        });

        document.getElementById('saveRuleBtn')?.addEventListener('click', () => {
            this.savePowerRule();
        });

        document.getElementById('cancelRuleBtn')?.addEventListener('click', () => {
            this.hidePowerRuleModal();
        });

        document.getElementById('addConditionBtn')?.addEventListener('click', () => {
            this.addConditionRow();
        });

        // Schedule handlers
        document.getElementById('addScheduleBtn')?.addEventListener('click', () => {
            this.addScheduleRow();
        });

        // Refresh buttons
        document.getElementById('refreshStatusBtn')?.addEventListener('click', () => {
            this.loadSystemStatus();
        });

        // Modal background click to close
        document.getElementById('powerRuleModal')?.addEventListener('click', (e) => {
            if (e.target.id === 'powerRuleModal') {
                this.hidePowerRuleModal();
            }
        });
    }

    setupTabs() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');

        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const targetTab = button.getAttribute('data-tab');
                
                // Remove active class from all tabs and contents
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                // Add active class to clicked tab and corresponding content
                button.classList.add('active');
                document.getElementById(targetTab + '-tab')?.classList.add('active');
            });
        });
    }

    // =============================================================================
    // POWER RULES MANAGEMENT
    // =============================================================================

    showPowerRuleModal(ruleId = null) {
        const modal = document.getElementById('powerRuleModal');
        if (!modal) return;

        this.editingRuleId = ruleId;
        
        // Clear existing form
        this.clearPowerRuleForm();
        
        if (ruleId) {
            // Load existing rule data
            this.loadPowerRuleData(ruleId);
        } else {
            // Add default condition row for new rules
            this.addConditionRow();
        }

        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    hidePowerRuleModal() {
        const modal = document.getElementById('powerRuleModal');
        if (modal) {
            modal.classList.remove('active');
            document.body.style.overflow = '';
            this.editingRuleId = null;
        }
    }

    clearPowerRuleForm() {
        document.getElementById('ruleName').value = '';
        document.getElementById('rulePriority').value = 'medium';
        document.getElementById('ruleDescription').value = '';
        
        const conditionsContainer = document.getElementById('ruleConditions');
        conditionsContainer.innerHTML = '';
    }

    loadPowerRuleData(ruleId) {
        const rule = this.powerRules.find(r => r.id === ruleId);
        if (!rule) return;

        document.getElementById('ruleName').value = rule.name || '';
        document.getElementById('rulePriority').value = rule.priority || 'medium';
        document.getElementById('ruleDescription').value = rule.description || '';

        // Load conditions
        if (rule.conditions) {
            Object.entries(rule.conditions).forEach(([parameter, condition]) => {
                this.addConditionRow(parameter, condition);
            });
        }
    }

    addConditionRow(parameter = '', condition = {}) {
        const conditionsContainer = document.getElementById('ruleConditions');
        const conditionId = 'condition_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        
        const conditionRow = document.createElement('div');
        conditionRow.className = 'condition-row';
        conditionRow.setAttribute('data-condition-id', conditionId);
        
        conditionRow.innerHTML = `
            <div class="condition-controls">
                <select class="condition-parameter" onchange="dashboard.updateConditionOperators('${conditionId}')">
                    <option value="">Select Parameter</option>
                    <option value="battery_soc" ${parameter === 'battery_soc' ? 'selected' : ''}>Battery SoC (%)</option>
                    <option value="pv_power" ${parameter === 'pv_power' ? 'selected' : ''}>PV Power (W)</option>
                    <option value="load" ${parameter === 'load' ? 'selected' : ''}>Load Power (W)</option>
                    <option value="grid_power" ${parameter === 'grid_power' ? 'selected' : ''}>Grid Power (W)</option>
                    <option value="battery_power" ${parameter === 'battery_power' ? 'selected' : ''}>Battery Power (W)</option>
                    <option value="grid_voltage" ${parameter === 'grid_voltage' ? 'selected' : ''}>Grid Voltage (V)</option>
                    <option value="net_power" ${parameter === 'net_power' ? 'selected' : ''}>Net Power (W)</option>
                </select>
                
                <select class="condition-operator">
                    <option value="gt" ${condition.operator === 'gt' ? 'selected' : ''}>Greater Than (>)</option>
                    <option value="lt" ${condition.operator === 'lt' ? 'selected' : ''}>Less Than (<)</option>
                    <option value="gte" ${condition.operator === 'gte' ? 'selected' : ''}>Greater Than or Equal (â¥)</option>
                    <option value="lte" ${condition.operator === 'lte' ? 'selected' : ''}>Less Than or Equal (â¤)</option>
                    <option value="eq" ${condition.operator === 'eq' ? 'selected' : ''}>Equal (=)</option>
                    <option value="ne" ${condition.operator === 'ne' ? 'selected' : ''}>Not Equal (â )</option>
                </select>
                
                <input type="number" class="condition-value" placeholder="Value" value="${condition.value || ''}" step="0.1">
                
                <button type="button" class="btn btn-outline btn-sm" onclick="dashboard.removeConditionRow('${conditionId}')">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
            <div class="condition-help">
                <small class="help-text" id="help_${conditionId}">Select a parameter to see current value</small>
            </div>
        `;
        
        conditionsContainer.appendChild(conditionRow);
        
        // Update help text and operators
        this.updateConditionOperators(conditionId);
    }

    removeConditionRow(conditionId) {
        const conditionRow = document.querySelector(`[data-condition-id="${conditionId}"]`);
        if (conditionRow) {
            conditionRow.remove();
        }
    }

    updateConditionOperators(conditionId) {
        const conditionRow = document.querySelector(`[data-condition-id="${conditionId}"]`);
        if (!conditionRow) return;

        const parameterSelect = conditionRow.querySelector('.condition-parameter');
        const helpText = conditionRow.querySelector(`#help_${conditionId}`);
        const parameter = parameterSelect.value;

        if (parameter && this.systemState) {
            const currentValue = this.getCurrentParameterValue(parameter);
            const unit = this.getParameterUnit(parameter);
            
            if (currentValue !== null && currentValue !== undefined) {
                helpText.textContent = `Current ${parameter.replace('_', ' ')}: ${this.formatNumber(currentValue)}${unit}`;
            } else {
                helpText.textContent = `${parameter.replace('_', ' ')} data not available`;
            }
        } else {
            helpText.textContent = 'Select a parameter to see current value';
        }
    }

    getCurrentParameterValue(parameter) {
        if (!this.systemState) return null;
        
        switch (parameter) {
            case 'battery_soc':
                return this.systemState.battery_soc;
            case 'pv_power':
                return this.systemState.pv_power;
            case 'load':
                return this.systemState.load;
            case 'grid_power':
                return this.systemState.grid_power;
            case 'battery_power':
                return this.systemState.battery_power;
            case 'grid_voltage':
                return this.systemState.grid_voltage;
            case 'net_power':
                return (this.systemState.pv_power || 0) - (this.systemState.load || 0);
            default:
                return null;
        }
    }

    getParameterUnit(parameter) {
        const units = {
            'battery_soc': '%',
            'pv_power': 'W',
            'load': 'W',
            'grid_power': 'W',
            'battery_power': 'W',
            'grid_voltage': 'V',
            'net_power': 'W'
        };
        return units[parameter] || '';
    }

    async savePowerRule() {
        try {
            const saveBtn = document.getElementById('saveRuleBtn');
            const originalText = saveBtn.innerHTML;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            saveBtn.disabled = true;

            // Collect form data
            const ruleData = this.collectPowerRuleData();
            
            // Validate rule data
            if (!this.validatePowerRuleData(ruleData)) {
                return;
            }

            let response;
            if (this.editingRuleId) {
                // Update existing rule
                response = await fetch(`<%= ingress_path %>/api/dynamic-pricing/smart-power-rule/${this.editingRuleId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ rule: ruleData })
                });
            } else {
                // Create new rule
                response = await fetch('<%= ingress_path %>/api/dynamic-pricing/smart-power-rule', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ rule: ruleData })
                });
            }

            const data = await response.json();

            if (data.success) {
                this.showToast(this.editingRuleId ? 'Rule updated successfully' : 'Rule created successfully', 'success');
                this.hidePowerRuleModal();
                await this.loadPowerRules();
                this.displayPowerRules();
            } else {
                throw new Error(data.error || 'Failed to save rule');
            }
        } catch (error) {
            console.error('Error saving power rule:', error);
            this.showToast('Error saving rule: ' + error.message, 'error');
        } finally {
            const saveBtn = document.getElementById('saveRuleBtn');
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Save Rule';
            saveBtn.disabled = false;
        }
    }

    collectPowerRuleData() {
        const ruleData = {
            name: document.getElementById('ruleName').value.trim(),
            priority: document.getElementById('rulePriority').value,
            description: document.getElementById('ruleDescription').value.trim(),
            enabled: true,
            conditions: {}
        };

        // Collect conditions
        const conditionRows = document.querySelectorAll('.condition-row');
        conditionRows.forEach(row => {
            const parameter = row.querySelector('.condition-parameter').value;
            const operator = row.querySelector('.condition-operator').value;
            const value = parseFloat(row.querySelector('.condition-value').value);

            if (parameter && operator && !isNaN(value)) {
                ruleData.conditions[parameter] = {
                    operator: operator,
                    value: value
                };
            }
        });

        return ruleData;
    }

    validatePowerRuleData(ruleData) {
        if (!ruleData.name) {
            this.showToast('Please enter a rule name', 'error');
            return false;
        }

        if (Object.keys(ruleData.conditions).length === 0) {
            this.showToast('Please add at least one condition', 'error');
            return false;
        }

        return true;
    }

    async loadPowerRules() {
        try {
            // Load power rules from configuration
            if (this.config && this.config.smartPowerConditions && this.config.smartPowerConditions.rules) {
                this.powerRules = this.config.smartPowerConditions.rules;
            }
        } catch (error) {
            console.error('Error loading power rules:', error);
        }
    }

    displayPowerRules() {
        const container = document.getElementById('powerRulesList');
        if (!container) return;

        if (this.powerRules.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-lightning-bolt"></i>
                    <p>No custom power rules defined yet</p>
                    <small>Click "Add New Rule" to create your first smart power rule</small>
                </div>
            `;
            return;
        }

        container.innerHTML = this.powerRules.map(rule => `
            <div class="power-rule-item" data-rule-id="${rule.id}">
                <div class="rule-header">
                    <div class="rule-info">
                        <h6>${rule.name}</h6>
                        <span class="rule-priority priority-${rule.priority}">${rule.priority.toUpperCase()}</span>
                        <span class="rule-status ${rule.enabled ? 'enabled' : 'disabled'}">
                            ${rule.enabled ? 'Enabled' : 'Disabled'}
                        </span>
                    </div>
                    <div class="rule-actions">
                        <button class="btn btn-sm btn-outline" onclick="dashboard.editPowerRule('${rule.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline" onclick="dashboard.togglePowerRule('${rule.id}')">
                            <i class="fas fa-${rule.enabled ? 'pause' : 'play'}"></i>
                        </button>
                        <button class="btn btn-sm btn-outline text-danger" onclick="dashboard.deletePowerRule('${rule.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="rule-description">
                    <p>${rule.description || 'No description'}</p>
                </div>
                <div class="rule-conditions">
                    <small><strong>Conditions:</strong></small>
                    ${Object.entries(rule.conditions).map(([param, cond]) => `
                        <span class="condition-tag">
                            ${param.replace('_', ' ')} ${this.getOperatorSymbol(cond.operator)} ${cond.value}${this.getParameterUnit(param)}
                        </span>
                    `).join('')}
                </div>
            </div>
        `).join('');
    }

    getOperatorSymbol(operator) {
        const symbols = {
            'gt': '>',
            'lt': '<',
            'gte': 'â¥',
            'lte': 'â¤',
            'eq': '=',
            'ne': 'â '
        };
        return symbols[operator] || operator;
    }

    editPowerRule(ruleId) {
        this.showPowerRuleModal(ruleId);
    }

    async togglePowerRule(ruleId) {
        try {
            const rule = this.powerRules.find(r => r.id === ruleId);
            if (!rule) return;

            rule.enabled = !rule.enabled;

            const response = await fetch(`<%= ingress_path %>/api/dynamic-pricing/smart-power-rule/${ruleId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ rule: rule })
            });

            const data = await response.json();

            if (data.success) {
                this.showToast(`Rule ${rule.enabled ? 'enabled' : 'disabled'}`, 'success');
                this.displayPowerRules();
            } else {
                throw new Error(data.error || 'Failed to toggle rule');
            }
        } catch (error) {
            console.error('Error toggling power rule:', error);
            this.showToast('Error toggling rule: ' + error.message, 'error');
        }
    }

    async deletePowerRule(ruleId) {
        try {
            const rule = this.powerRules.find(r => r.id === ruleId);
            if (!rule) return;

            if (!confirm(`Are you sure you want to delete the rule "${rule.name}"?`)) {
                return;
            }

            const response = await fetch(`<%= ingress_path %>/api/dynamic-pricing/smart-power-rule/${ruleId}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (data.success) {
                this.showToast('Rule deleted successfully', 'success');
                this.powerRules = this.powerRules.filter(r => r.id !== ruleId);
                this.displayPowerRules();
            } else {
                throw new Error(data.error || 'Failed to delete rule');
            }
        } catch (error) {
            console.error('Error deleting power rule:', error);
            this.showToast('Error deleting rule: ' + error.message, 'error');
        }
    }

    // =============================================================================
    // SCHEDULE MANAGEMENT
    // =============================================================================

    addScheduleRow(schedule = null) {
        const container = document.getElementById('schedulesList');
        if (!container) return;

        const scheduleId = schedule ? schedule.id : 'schedule_' + Date.now();
        const isEditing = !!schedule;

        const scheduleRow = document.createElement('div');
        scheduleRow.className = 'schedule-item';
        scheduleRow.setAttribute('data-schedule-id', scheduleId);

        scheduleRow.innerHTML = `
            <div class="schedule-controls">
                <div class="schedule-time">
                    <label>Start Time:</label>
                    <input type="time" class="schedule-start" value="${schedule?.start || '22:00'}">
                    
                    <label>End Time:</label>
                    <input type="time" class="schedule-end" value="${schedule?.end || '06:00'}">
                </div>
                
                <div class="schedule-days">
                    <label>Days:</label>
                    <div class="days-selector">
                        ${['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map(day => `
                            <label class="day-checkbox">
                                <input type="checkbox" value="${day}" ${schedule?.days?.includes(day) ? 'checked' : ''}>
                                <span>${day.charAt(0).toUpperCase()}</span>
                            </label>
                        `).join('')}
                    </div>
                </div>
                
                <div class="schedule-actions">
                    <div class="toggle-group">
                        <label class="toggle-label">
                            <input type="checkbox" class="schedule-enabled" ${schedule?.enabled !== false ? 'checked' : ''}>
                            <span class="toggle-slider"></span>
                            <span class="toggle-text">Enabled</span>
                        </label>
                    </div>
                    
                    <button type="button" class="btn btn-outline btn-sm" onclick="dashboard.removeScheduleRow('${scheduleId}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            
            <div class="schedule-description">
                <input type="text" class="schedule-desc" placeholder="Description (optional)" value="${schedule?.description || ''}">
            </div>
        `;

        if (isEditing) {
            // Replace existing schedule
            const existingRow = container.querySelector(`[data-schedule-id="${scheduleId}"]`);
            if (existingRow) {
                container.replaceChild(scheduleRow, existingRow);
            } else {
                container.appendChild(scheduleRow);
            }
        } else {
            container.appendChild(scheduleRow);
        }

        this.showToast('Schedule added - remember to save settings', 'info');
    }

    removeScheduleRow(scheduleId) {
        const scheduleRow = document.querySelector(`[data-schedule-id="${scheduleId}"]`);
        if (scheduleRow) {
            scheduleRow.remove();
            this.showToast('Schedule removed - remember to save settings', 'info');
        }
    }

    collectScheduleData() {
        const schedules = [];
        const scheduleRows = document.querySelectorAll('.schedule-item');

        scheduleRows.forEach((row, index) => {
            const scheduleId = row.getAttribute('data-schedule-id');
            const start = row.querySelector('.schedule-start').value;
            const end = row.querySelector('.schedule-end').value;
            const enabled = row.querySelector('.schedule-enabled').checked;
            const description = row.querySelector('.schedule-desc').value.trim();

            // Collect selected days
            const days = [];
            row.querySelectorAll('.days-selector input[type="checkbox"]:checked').forEach(checkbox => {
                days.push(checkbox.value);
            });

            if (start && end) {
                schedules.push({
                    id: scheduleId,
                    start: start,
                    end: end,
                    days: days,
                    enabled: enabled,
                    description: description || `Schedule ${index + 1}`
                });
            }
        });

        return schedules;
    }

    displaySchedules() {
        const container = document.getElementById('schedulesList');
        if (!container) return;

        if (this.schedules.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-clock"></i>
                    <p>No charging schedules defined</p>
                    <small>Click "Add Schedule" to create time-based charging periods</small>
                </div>
            `;
            return;
        }

        // Clear container and add each schedule
        container.innerHTML = '';
        this.schedules.forEach(schedule => {
            this.addScheduleRow(schedule);
        });
    }

    // =============================================================================
    // DATA LOADING AND UPDATES
    // =============================================================================

    async loadConfiguration() {
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings');
            const data = await response.json();
            
            if (data.success) {
                this.config = data.config;
                this.populateConfigurationForm(data.config);
                this.updateConnectionStatus(true);
                
                // Load power rules and schedules
                await this.loadPowerRules();
                this.displayPowerRules();
                
                if (data.config.chargingHours) {
                    this.schedules = data.config.chargingHours;
                    this.displaySchedules();
                }
                
                console.log('ð Configuration loaded successfully');
            } else {
                throw new Error(data.error || 'Failed to load configuration');
            }
        } catch (error) {
            console.error('Error loading configuration:', error);
            this.updateConnectionStatus(false);
            this.showToast('Error loading configuration: ' + error.message, 'error');
        }
    }

    async loadSystemStatus() {
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/status');
            const data = await response.json();
            
            if (data.success) {
                this.systemState = data.systemState;
                this.updateStatusDisplay(data);
                this.updateChargingDecision(data.status.currentDecision);
                this.updateInverterStatus(data.inverterStatus);
                this.updateHealthIndicators(data);
                console.log('ð System status updated');
            } else {
                throw new Error(data.error || 'Failed to load system status');
            }
        } catch (error) {
            console.error('Error loading system status:', error);
            this.showToast('Error loading system status: ' + error.message, 'error');
        }
    }

    async loadCurrentPrice() {
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/current-price');
            const data = await response.json();
            
            if (data.success && data.currentPrice) {
                this.updateCurrentPriceDisplay(data.currentPrice);
            }
        } catch (error) {
            console.warn('Could not load current price:', error);
        }
    }

    startPeriodicUpdates() {
        // Update every 30 seconds
        this.updateInterval = setInterval(() => {
            this.loadSystemStatus();
            this.loadCurrentPrice();
            this.updateChart();
        }, 30000);

        console.log('ð Started periodic updates (30s interval)');
    }

    stopPeriodicUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            console.log('â¹ï¸ Stopped periodic updates');
        }
    }

    // =============================================================================
    // UI UPDATES
    // =============================================================================

    updateStatusDisplay(data) {
        const state = data.systemState;
        
        // Update status cards
        this.updateStatusCard('batterySOC', state.battery_soc, '%');
        this.updateStatusCard('pvPower', state.pv_power, 'W');
        this.updateStatusCard('loadPower', state.load, 'W');
        this.updateStatusCard('gridPower', state.grid_power, 'W');
        this.updateStatusCard('batteryPower', state.battery_power, 'W');

        // Update learner mode indicator
        const learnerMode = data.learnerModeActive;
        const learnerIndicator = document.getElementById('learnerModeStatus');
        if (learnerIndicator) {
            learnerIndicator.className = `learner-mode-indicator ${learnerMode ? 'active' : 'inactive'}`;
            learnerIndicator.querySelector('span').textContent = learnerMode ? 'Learner Mode: Active' : 'Learner Mode: Inactive';
        }
    }

    updateStatusCard(elementId, value, unit) {
        const element = document.getElementById(elementId);
        if (element) {
            if (value !== null && value !== undefined) {
                element.textContent = this.formatNumber(value);
            } else {
                element.textContent = '--';
            }
        }
    }

    updateCurrentPriceDisplay(priceData) {
        const priceElement = document.getElementById('currentPrice');
        const currencyElement = document.getElementById('currentCurrency');
        const levelElement = document.getElementById('priceLevel');
        
        if (priceElement && priceData) {
            priceElement.textContent = priceData.price.toFixed(4);
            
            if (currencyElement) {
                currencyElement.textContent = `${priceData.currency || 'EUR'}/kWh`;
            }
            
            if (levelElement && priceData.level) {
                levelElement.textContent = priceData.level.replace('_', ' ');
                levelElement.className = `price-level ${priceData.level.toLowerCase().replace('_', '-')}`;
            }
        }
    }

    updateChargingDecision(decision) {
        const decisionElement = document.getElementById('chargingDecision');
        if (!decisionElement || !decision) return;

        const icon = decisionElement.querySelector('i');
        const text = decisionElement.querySelector('span');
        
        if (decision.shouldCharge === true) {
            decisionElement.className = 'charging-decision should-charge';
            icon.className = 'fas fa-check-circle';
            text.textContent = `Recommended: CHARGE - ${decision.reason}`;
        } else if (decision.shouldCharge === false) {
            decisionElement.className = 'charging-decision should-not-charge';
            icon.className = 'fas fa-times-circle';
            text.textContent = `Recommended: DON'T CHARGE - ${decision.reason}`;
        } else {
            decisionElement.className = 'charging-decision analyzing';
            icon.className = 'fas fa-question-circle';
            text.textContent = 'Analyzing conditions...';
        }
    }

    updateConnectionStatus(connected) {
        this.isConnected = connected;
        const indicator = document.getElementById('connectionStatus');
        
        if (indicator) {
            if (connected) {
                indicator.className = 'status-indicator connected';
                indicator.querySelector('span').textContent = 'Connected';
            } else {
                indicator.className = 'status-indicator disconnected';
                indicator.querySelector('span').textContent = 'Disconnected';
            }
        }
    }

    updateInverterStatus(inverterStatus) {
        const container = document.getElementById('inverterStatusDisplay');
        if (!container || !inverterStatus) return;

        container.innerHTML = '';

        if (inverterStatus.totalInverters === 0) {
            container.innerHTML = '<p class="text-muted">No inverters detected yet. Waiting for MQTT messages...</p>';
            return;
        }

        Object.entries(inverterStatus.typesSummary).forEach(([type, count]) => {
            const div = document.createElement('div');
            div.className = 'inverter-item';
            div.innerHTML = `
                <h6>Inverter Type: ${type.charAt(0).toUpperCase() + type.slice(1)}</h6>
                <span class="inverter-type ${type}">${count} inverter${count !== 1 ? 's' : ''}</span>
                <p>Auto-detection and command mapping enabled</p>
            `;
            container.appendChild(div);
        });
    }

    updateHealthIndicators(data) {
        const container = document.getElementById('healthIndicators');
        if (!container) return;

        const indicators = [
            {
                icon: 'database',
                label: 'Configuration',
                status: data.success ? 'good' : 'error',
                value: data.success ? 'Loaded' : 'Error'
            },
            {
                icon: 'wifi',
                label: 'Connection',
                status: this.isConnected ? 'good' : 'error',
                value: this.isConnected ? 'Connected' : 'Disconnected'
            },
            {
                icon: 'graduation-cap',
                label: 'Learner Mode',
                status: data.learnerModeActive ? 'good' : 'warning',
                value: data.learnerModeActive ? 'Active' : 'Inactive'
            }
        ];

        container.innerHTML = indicators.map(indicator => `
            <div class="health-item">
                <div class="health-icon ${indicator.status}">
                    <i class="fas fa-${indicator.icon}"></i>
                </div>
                <div class="health-info">
                    <h6>${indicator.label}</h6>
                    <p>${indicator.value}</p>
                </div>
            </div>
        `).join('');
    }

    // =============================================================================
    // CONFIGURATION FORM HANDLING
    // =============================================================================

    populateConfigurationForm(config) {
        try {
            // Tibber settings
            this.setFieldValue('tibberApiKey', config.tibberApiKey || '');
            this.setFieldValue('country', config.country || '');
            this.setFieldValue('timezone', config.timezone || 'Europe/Berlin');
            
            // Update cities when country is set
            if (config.country) {
                this.updateCitiesList(config.country).then(() => {
                    this.setFieldValue('city', config.city || '');
                });
            }

            // Price-based charging
            this.setCheckboxValue('enablePriceCharging', config.priceBasedCharging?.enabled);
            this.setCheckboxValue('useTibberLevels', config.priceBasedCharging?.useTibberLevels);
            this.setFieldValue('maxPriceThreshold', config.priceBasedCharging?.maxPriceThreshold || 0.20);

            // Tibber levels
            const allowedLevels = config.priceBasedCharging?.allowedTibberLevels || [];
            ['VERY_CHEAP', 'CHEAP', 'NORMAL'].forEach(level => {
                const checkbox = document.getElementById(`level${level.charAt(0) + level.slice(1).toLowerCase().replace('_', '')}`);
                if (checkbox) {
                    checkbox.checked = allowedLevels.includes(level);
                }
            });

            // Battery settings
            this.setFieldValue('emergencySOC', config.battery?.emergencySoC || 15);
            this.setFieldValue('minimumSOC', config.battery?.minimumSoC || 20);
            this.setFieldValue('targetSOC', config.battery?.targetSoC || 80);
            this.setFieldValue('maxSOC', config.battery?.maxSoC || 95);

            // Weather settings
            this.setCheckboxValue('enableWeatherConditions', config.weatherConditions?.enabled);
            this.setFieldValue('weatherApiKey', config.weatherConditions?.weatherApiKey || '');
            this.setFieldValue('cloudCoverThreshold', config.weatherConditions?.cloudCoverThreshold || 70);
            this.setCheckboxValue('chargeOnCloudyDays', config.weatherConditions?.chargeOnCloudyDays);
            this.setCheckboxValue('chargeBeforeStorm', config.weatherConditions?.chargeBeforeStorm);

            // Time conditions
            this.setCheckboxValue('enableTimeConditions', config.timeConditions?.enabled);
            this.setCheckboxValue('avoidPeakHours', config.timeConditions?.avoidPeakHours);
            this.setFieldValue('peakStart', config.timeConditions?.peakStart || '17:00');
            this.setFieldValue('peakEnd', config.timeConditions?.peakEnd || '21:00');
            this.setCheckboxValue('preferNightCharging', config.timeConditions?.preferNightCharging);
            this.setFieldValue('nightStart', config.timeConditions?.nightStart || '22:00');
            this.setFieldValue('nightEnd', config.timeConditions?.nightEnd || '06:00');

            // Scheduled charging
            this.setCheckboxValue('enableScheduledCharging', config.scheduledCharging);

            // Cooldown settings
            this.setCheckboxValue('enableCooldown', config.cooldown?.enabled);
            this.setFieldValue('chargingCooldownMinutes', config.cooldown?.chargingCooldownMinutes || 30);
            this.setFieldValue('maxChargingCyclesPerDay', config.cooldown?.maxChargingCyclesPerDay || 8);

            // Smart power conditions
            this.setCheckboxValue('enablePowerConditions', config.smartPowerConditions?.enabled);

            // Toggle conditional sections
            this.toggleTibberLevelsConfig(config.priceBasedCharging?.useTibberLevels);

            console.log('ð Configuration form populated');
        } catch (error) {
            console.error('Error populating configuration form:', error);
        }
    }

    setFieldValue(fieldId, value) {
        const field = document.getElementById(fieldId);
        if (field && value !== undefined && value !== null) {
            field.value = value;
        }
    }

    setCheckboxValue(fieldId, value) {
        const field = document.getElementById(fieldId);
        if (field) {
            field.checked = Boolean(value);
        }
    }

    async updateCitiesList(countryCode) {
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/countries-cities');
            const data = await response.json();
            
            const citySelect = document.getElementById('city');
            if (!citySelect) return;

            citySelect.innerHTML = '<option value="">Select City</option>';

            const country = data.countries.find(c => c.code === countryCode);
            if (country && country.cities) {
                country.cities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city.name;
                    option.textContent = city.name;
                    citySelect.appendChild(option);
                });
            }

            // Update timezone based on country
            if (country && country.timezone) {
                this.setFieldValue('timezone', country.timezone);
            }
        } catch (error) {
            console.error('Error updating cities list:', error);
        }
    }

    toggleTibberLevelsConfig(useTibberLevels) {
        const tibberLevelsConfig = document.getElementById('tibberLevelsConfig');
        const priceThresholdConfig = document.getElementById('priceThresholdConfig');
        
        if (tibberLevelsConfig) {
            tibberLevelsConfig.style.display = useTibberLevels ? 'block' : 'none';
        }
        
        if (priceThresholdConfig) {
            priceThresholdConfig.style.display = useTibberLevels ? 'none' : 'block';
        }
    }

    togglePasswordField(fieldId) {
        const field = document.getElementById(fieldId);
        const button = document.querySelector(`button[onclick*="${fieldId}"]`);
        
        if (field && button) {
            if (field.type === 'password') {
                field.type = 'text';
                button.querySelector('i').className = 'fas fa-eye-slash';
            } else {
                field.type = 'password';
                button.querySelector('i').className = 'fas fa-eye';
            }
        }
    }

    // =============================================================================
    // API ACTIONS
    // =============================================================================

    async saveConfiguration() {
        try {
            const saveBtn = document.getElementById('saveSettingsBtn');
            const originalText = saveBtn.innerHTML;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            saveBtn.disabled = true;

            const config = this.collectConfigurationData();
            
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            const data = await response.json();

            if (data.success) {
                this.config = data.config;
                this.showToast('Configuration saved successfully', 'success');
                console.log('â Configuration saved');
                
                // Refresh data after saving
                await this.loadSystemStatus();
                await this.updateChart();
            } else {
                throw new Error(data.error || 'Failed to save configuration');
            }
        } catch (error) {
            console.error('Error saving configuration:', error);
            this.showToast('Error saving configuration: ' + error.message, 'error');
        } finally {
            const saveBtn = document.getElementById('saveSettingsBtn');
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Save Settings';
            saveBtn.disabled = false;
        }
    }

    collectConfigurationData() {
        return {
            enabled: true, // Always enable when saving
            
            // Tibber settings
            tibberApiKey: document.getElementById('tibberApiKey')?.value || '',
            country: document.getElementById('country')?.value || '',
            city: document.getElementById('city')?.value || '',
            timezone: document.getElementById('timezone')?.value || 'Europe/Berlin',

            // Price-based charging
            priceBasedCharging: {
                enabled: document.getElementById('enablePriceCharging')?.checked || false,
                useRealTibberPrices: true,
                useTibberLevels: document.getElementById('useTibberLevels')?.checked || false,
                allowedTibberLevels: this.getSelectedTibberLevels(),
                maxPriceThreshold: parseFloat(document.getElementById('maxPriceThreshold')?.value) || 0.20,
                preferTibberLevels: document.getElementById('useTibberLevels')?.checked || false
            },

            // Battery settings
            battery: {
                emergencySoC: parseInt(document.getElementById('emergencySOC')?.value) || 15,
                minimumSoC: parseInt(document.getElementById('minimumSOC')?.value) || 20,
                targetSoC: parseInt(document.getElementById('targetSOC')?.value) || 80,
                maxSoC: parseInt(document.getElementById('maxSOC')?.value) || 95
            },

            // Weather conditions
            weatherConditions: {
                enabled: document.getElementById('enableWeatherConditions')?.checked || false,
                weatherApiKey: document.getElementById('weatherApiKey')?.value || '',
                chargeOnCloudyDays: document.getElementById('chargeOnCloudyDays')?.checked || false,
                chargeBeforeStorm: document.getElementById('chargeBeforeStorm')?.checked || false,
                cloudCoverThreshold: parseInt(document.getElementById('cloudCoverThreshold')?.value) || 70
            },

            // Time conditions
            timeConditions: {
                enabled: document.getElementById('enableTimeConditions')?.checked || false,
                avoidPeakHours: document.getElementById('avoidPeakHours')?.checked || false,
                peakStart: document.getElementById('peakStart')?.value || '17:00',
                peakEnd: document.getElementById('peakEnd')?.value || '21:00',
                preferNightCharging: document.getElementById('preferNightCharging')?.checked || false,
                nightStart: document.getElementById('nightStart')?.value || '22:00',
                nightEnd: document.getElementById('nightEnd')?.value || '06:00'
            },

            // Smart power conditions with collected rules
            smartPowerConditions: {
                enabled: document.getElementById('enablePowerConditions')?.checked || false,
                rules: this.powerRules // Use the power rules array
            },

            // Scheduled charging with collected schedules
            scheduledCharging: document.getElementById('enableScheduledCharging')?.checked || false,
            chargingHours: this.collectScheduleData(),

            // Cooldown settings
            cooldownSettings: {
                enabled: document.getElementById('enableCooldown')?.checked || false,
                chargingCooldownMinutes: parseInt(document.getElementById('chargingCooldownMinutes')?.value) || 30,
                maxChargingCyclesPerDay: parseInt(document.getElementById('maxChargingCyclesPerDay')?.value) || 8
            }
        };
    }

    getSelectedTibberLevels() {
        const levels = [];
        ['VERY_CHEAP', 'CHEAP', 'NORMAL'].forEach(level => {
            const fieldId = `level${level.charAt(0) + level.slice(1).toLowerCase().replace('_', '')}`;
            const checkbox = document.getElementById(fieldId);
            if (checkbox && checkbox.checked) {
                levels.push(level);
            }
        });
        return levels.length > 0 ? levels : ['VERY_CHEAP', 'CHEAP'];
    }

    async manualCharge(enable) {
        try {
            const button = enable ? document.getElementById('manualChargeBtn') : document.getElementById('manualStopBtn');
            const originalText = button.innerHTML;
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
            button.disabled = true;

            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/manual-charge', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enable: enable })
            });

            const data = await response.json();

            if (data.success) {
                const action = enable ? 'started' : 'stopped';
                this.showToast(`Charging ${action} successfully`, 'success');
                console.log(`ð Manual charging ${action}`);
                
                // Refresh status after manual action
                setTimeout(() => this.loadSystemStatus(), 2000);
            } else {
                if (data.canForce) {
                    // Show option to force the command
                    const force = confirm(`Conditions not met: ${data.message}\n\nDo you want to force this command anyway?`);
                    if (force) {
                        return this.manualChargeForce(enable);
                    }
                } else {
                    throw new Error(data.message || `Failed to ${enable ? 'start' : 'stop'} charging`);
                }
            }
        } catch (error) {
            console.error('Error with manual charge command:', error);
            this.showToast('Error: ' + error.message, 'error');
        } finally {
            const button = enable ? document.getElementById('manualChargeBtn') : document.getElementById('manualStopBtn');
            const originalIcon = enable ? 'fa-play' : 'fa-stop';
            const originalText = enable ? 'Manual Charging Test' : 'Manual Charge Stop Test';
            
            button.innerHTML = `<i class="fas ${originalIcon}"></i> ${originalText}`;
            button.disabled = false;
        }
    }

    async manualChargeForce(enable) {
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/manual-charge', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enable: enable, force: true })
            });

            const data = await response.json();

            if (data.success) {
                const action = enable ? 'started' : 'stopped';
                this.showToast(`Charging ${action} (forced)`, 'warning');
                setTimeout(() => this.loadSystemStatus(), 2000);
            } else {
                throw new Error(data.message || 'Failed to force charging command');
            }
        } catch (error) {
            this.showToast('Error forcing command: ' + error.message, 'error');
        }
    }

    async testTibberConnection() {
        try {
            const button = document.getElementById('testTibberBtn');
            const originalText = button.textContent;
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            button.disabled = true;

            const apiKey = document.getElementById('tibberApiKey')?.value;
            if (!apiKey) {
                throw new Error('Please enter a Tibber API key first');
            }

            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/test-tibber', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ apiKey: apiKey })
            });

            const data = await response.json();

            if (data.success) {
                this.showToast(`Tibber connection successful! Found ${data.homes} home(s)`, 'success');
                
                // Update status display
                document.getElementById('tibberConnection').textContent = 'Connected';
                
                if (data.currentPrice) {
                    this.updateCurrentPriceDisplay(data.currentPrice);
                }
            } else {
                throw new Error(data.error || 'Tibber connection failed');
            }
        } catch (error) {
            console.error('Tibber test failed:', error);
            this.showToast('Tibber test failed: ' + error.message, 'error');
            document.getElementById('tibberConnection').textContent = 'Failed';
        } finally {
            const button = document.getElementById('testTibberBtn');
            button.textContent = 'Test';
            button.disabled = false;
        }
    }

    async testWeatherAPI() {
        try {
            const button = document.getElementById('testWeatherBtn');
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            button.disabled = true;

            const weatherApiKey = document.getElementById('weatherApiKey')?.value;
            const country = document.getElementById('country')?.value;
            const city = document.getElementById('city')?.value;

            if (!weatherApiKey) {
                throw new Error('Please enter a weather API key first');
            }

            const response = await fetch('/api/dynamic-pricing/test-weather', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    weatherApiKey: weatherApiKey,
                    country: country,
                    city: city
                })
            });

            const data = await response.json();

            if (data.success) {
                this.showToast('Weather API connection successful!', 'success');
                
                if (data.current) {
                    this.updateWeatherDisplay(data.current);
                }
            } else {
                throw new Error(data.error || 'Weather API test failed');
            }
        } catch (error) {
            console.error('Weather test failed:', error);
            this.showToast('Weather test failed: ' + error.message, 'error');
        } finally {
            const button = document.getElementById('testWeatherBtn');
            button.textContent = 'Test';
            button.disabled = false;
        }
    }

    async refreshAllData() {
        try {
            const button = document.getElementById('refreshDataBtn');
            const originalText = button.innerHTML;
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Refreshing...';
            button.disabled = true;

            // Refresh all data sources
            await Promise.all([
                this.loadConfiguration(),
                this.loadSystemStatus(),
                this.loadCurrentPrice(),
                this.updateChart()
            ]);

            this.showToast('All data refreshed successfully', 'success');
            console.log('ð All data refreshed');
        } catch (error) {
            console.error('Error refreshing data:', error);
            this.showToast('Error refreshing data: ' + error.message, 'error');
        } finally {
            const button = document.getElementById('refreshDataBtn');
            button.innerHTML = '<i class="fas fa-refresh"></i> Refresh Data';
            button.disabled = false;
        }
    }

    // =============================================================================
    // UTILITY FUNCTIONS
    // =============================================================================

    formatNumber(value) {
        if (value === null || value === undefined) return '--';
        if (typeof value !== 'number') return value;
        
        if (Math.abs(value) >= 1000) {
            return (value / 1000).toFixed(1) + 'k';
        }
        
        return value.toLocaleString();
    }

    showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icon = this.getToastIcon(type);
        toast.innerHTML = `<i class="fas ${icon}"></i> ${message}`;
        
        this.toastContainer.appendChild(toast);
        
        // Trigger animation
        setTimeout(() => toast.classList.add('show'), 100);
        
        // Remove after 5 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 5000);
    }

    getToastIcon(type) {
        const icons = {
            success: 'fa-check-circle',
            error: 'fa-exclamation-circle',
            warning: 'fa-exclamation-triangle',
            info: 'fa-info-circle'
        };
        return icons[type] || icons.info;
    }

    hideLoading() {
        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) {
            loadingOverlay.style.display = 'none';
        }
    }

    showTestConditionsModal() {
        // TODO: Implement test conditions modal
        this.showToast('Test conditions feature coming soon', 'info');
    }

    updateWeatherDisplay(weatherData) {
        // Update weather status card
        const weatherIcon = document.getElementById('weatherIcon');
        const weatherTemp = document.getElementById('weatherTemp');
        const weatherDesc = document.getElementById('weatherDesc');
        
        if (weatherData) {
            if (weatherTemp) {
                weatherTemp.textContent = `${Math.round(weatherData.main?.temp || 0)}Â°C`;
            }
            
            if (weatherDesc) {
                weatherDesc.textContent = weatherData.weather?.[0]?.description || 'Unknown';
            }
            
            if (weatherIcon) {
                const iconClass = this.getWeatherIconClass(weatherData.weather?.[0]?.main);
                weatherIcon.innerHTML = `<i class="fas ${iconClass}"></i>`;
                weatherIcon.className = `weather-icon ${this.getWeatherClass(weatherData.weather?.[0]?.main)}`;
            }
        }
    }

    getWeatherIconClass(weatherMain) {
        const icons = {
            'Clear': 'fa-sun',
            'Clouds': 'fa-cloud',
            'Rain': 'fa-cloud-rain',
            'Drizzle': 'fa-cloud-drizzle',
            'Thunderstorm': 'fa-bolt',
            'Snow': 'fa-snowflake',
            'Mist': 'fa-smog',
            'Fog': 'fa-smog'
        };
        return icons[weatherMain] || 'fa-cloud';
    }

    getWeatherClass(weatherMain) {
        const classes = {
            'Clear': 'sunny',
            'Clouds': 'cloudy',
            'Rain': 'rainy',
            'Drizzle': 'rainy',
            'Thunderstorm': 'stormy',
            'Snow': 'snowy'
        };
        return classes[weatherMain] || 'cloudy';
    }

    // Cleanup function
    destroy() {
        this.stopPeriodicUpdates();
        
        if (this.priceChart) {
            this.priceChart.destroy();
        }
        
        console.log('ð§¹ Dashboard destroyed');
    }
}

// Make dashboard available globally for onclick handlers
window.dashboard = null;

// Initialize dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.dashboard = new DynamicPricingDashboard();
    window.dynamicPricingDashboard = window.dashboard; // For backward compatibility
});

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
    if (window.dashboard) {
        window.dashboard.destroy();
    }
});
</script>



<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>