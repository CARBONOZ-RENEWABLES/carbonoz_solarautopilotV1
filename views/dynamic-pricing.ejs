<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tibber Dynamic Pricing - Carbonoz SolarAutopilot</title>
   <!-- Font Awesome for icons -->
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
   <!-- Chart.js for price charts -->
   <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
   <style>  
 
       
    :root {
        --primary-color: #DEAF0B;
            --primary: #DEAF0B;
            --primary-light: #6384ff;
            --primary-dark: #3a56b9;
            --secondary: #29b9a0;
            --secondary-light: #40d0b6;
            --secondary-dark: #1c9b84;
            --danger: #e74c3c;
            --success: #2ecc71;
            --warning: #f39c12;
            --dark: #343a40;
            --light: #f8f9fa;
            --gray: #6c757d;
            --background: #f5f7ff;
            --card-bg: #ffffff;
            --bg-color: #f5f6fa;
            --text: #333333;
            --border: #e0e0e0;
            --shadow: rgba(0, 0, 0, 0.1);
            --text-color: #2f3640;
        }
        body {
  font-family: 'Inter', sans-serif;
  background: var(--bg-color);
}
body.dark-mode { background-color: rgba(24, 27, 31, 1); color: #f5f6fa; }
       body, html {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        height: 100%;
        
       }
        /* Sidebar styles */
        .sidebar {
            width: 280px;
            height: 100vh;
            background-color: white;
            border-right: 1px solid #e5e7eb;
            display: flex;
            flex-direction: column;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1000;
            transition: width 0.3s ease;
        }
       
               .logo-container {
                   padding: 1.5rem;
                   border-bottom: 1px solid #e5e7eb;
                   display: flex;
                   align-items: center;
                   gap: 0.75rem;
               }
       
               .logo-icon {
        width: 50px;
        height: 50px;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-weight: bold;
        font-size: 20px;
       }
       
       .logo-text {
        margin-left: 10px;
        font-weight: bold;
        color: var(--text-color);
        font-size: 18px;
       }
       
       .logo-text .highlight {
        color: var(--primary-color);
        margin-left: 10px;
       }
       
       
       nav {
        flex-grow: 1;
       }
       
       nav ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
       }
       nav li {
        padding: 15px 20px;
        display: flex;
        align-items: center;
        color: var(--text-color);
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 18px;
       }
       
       nav li a{
        text-decoration: none;
        color: #2f3640;
        font-weight: bold;
       }
       nav li:hover {
        background-color: var(--bg-color);
       }
       
       nav li i {
        margin-right: 15px;
        color: var(--icon-color);
        font-size: 24px;
       }
       
       .bottom-options {
        padding: 20px;
        border-top: 1px solid #dcdde1;
       }
       
       .toggle-sidebar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        cursor: pointer;
        font-size: 16px;
       }
       
       .toggle-text {
        margin-right: 10px;
       }
       
       .toggle-switch {
        width: 50px;
        height: 25px;
        background-color: #dcdde1;
        border-radius: 12.5px;
        position: relative;
        transition: background-color 0.3s;
       }
       .toggle-switch::before {
        content: '';
        position: absolute;
        width: 21px;
        height: 21px;
        border-radius: 50%;
        background-color: white;
        top: 2px;
        left: 2px;
        transition: transform 0.3s;
       }
       
       .toggle-switch.active {
        background-color: var(--primary-color);
       }
       
       .toggle-switch.active::before {
        transform: translateX(25px);
       }
       
       .sidebar.collapsed .logo-text,
       .sidebar.collapsed .search,
       .sidebar.collapsed nav li span,
       .sidebar.collapsed .toggle-text {
        display: none;
       }
       
       .sidebar.collapsed .logo {
        justify-content: center;
       }
       
       .sidebar.collapsed nav li {
        justify-content: center;
       }
       
       .sidebar.collapsed nav li i {
        margin-right: 0;
       }
               /* Main content styles */
               .main-content {
                   flex: 1;
                   margin-left: 280px;
                   padding: 2rem;
               }
       
               .content-header {
                   margin-bottom: 2rem;
               }
       
               .content-header h2 {
                   font-size: 1.875rem;
                   font-weight: 700;
                   color: #111827;
               }
       
               .metrics-grid {
                   display: grid;
                   grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                   gap: 1.5rem;
                   margin-bottom: 2rem;
               }
       
               .metric-card {
                   background: white;
                   border-radius: 12px;
                   padding: 1.5rem;
                   box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
               }
       
               .metric-title {
                   font-size: 0.875rem;
                   font-weight: 600;
                   color: #4b5563;
                   margin-bottom: 0.5rem;
               }
       
               .metric-value {
                   font-size: 1.5rem;
                   font-weight: 700;
                   margin-bottom: 0.25rem;
               }
       
               .metric-subtitle {
                   font-size: 0.875rem;
                   color: #6b7280;
               }
       
               .chart-container {
                   background: white;
                   border-radius: 12px;
                   padding: 1.5rem;
                   margin-bottom: 2rem;
                   box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
               }
       
               .chart-wrapper {
                   height: 400px;
                   margin-top: 1rem;
               }
       
               .period-buttons {
                   display: flex;
                   gap: 0.75rem;
                   margin-bottom: 1rem;
               }
       
               .period-btn {
                   padding: 0.5rem 1rem;
                   border: none;
                   background-color: #e5e7eb;
                   color: #4b5563;
                   border-radius: 6px;
                   cursor: pointer;
                   font-weight: 500;
                   transition: all 0.2s;
               }
       
               .period-btn:hover {
                   background-color: #d1d5db;
               }
       
               .period-btn.active {
                   background-color: #DEAF0B;
                   color: white;
               }
       
               /* Toggle styles */
               .toggle {
                   position: relative;
                   display: inline-block;
                   width: 44px;
                   height: 24px;
               }
       
               .toggle input {
                   opacity: 0;
                   width: 0;
                   height: 0;
               }
       
               .slider {
                   position: absolute;
                   cursor: pointer;
                   top: 0;
                   left: 0;
                   right: 0;
                   bottom: 0;
                   background-color: #e5e7eb;
                   transition: .4s;
                   border-radius: 34px;
               }
       
               .slider:before {
                   position: absolute;
                   content: "";
                   height: 16px;
                   width: 16px;
                   left: 4px;
                   bottom: 4px;
                   background-color: white;
                   transition: .4s;
                   border-radius: 50%;
               }
       
               input:checked + .slider {
                   background-color: #DEAF0B;
               }
       
               input:checked + .slider:before {
                   transform: translateX(20px);
               }
       
               /* Updated and new styles */
               .bottom-controls {
                   padding: 1.5rem;
                   border-top: 1px solid #e5e7eb;
               }
       
               .control-item {
                   display: flex;
                   justify-content: space-between;
                   align-items: center;
                   margin-bottom: 1rem;
               }
       
               .control-label {
                   font-size: 0.875rem;
                   color: #4b5563;
               }
       
               .toggle {
                   position: relative;
                   display: inline-block;
                   width: 44px;
                   height: 24px;
               }
       
               .toggle input {
                   opacity: 0;
                   width: 0;
                   height: 0;
               }
       
               .sidebar {
        width: 280px;
        background-color: white;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        transition: width 0.3s ease;
        z-index: 10;
       }
       
       .sidebar.collapsed {
        width: 80px;
       }
       
       .logo {
        display: flex;
        align-items: center;
        padding: 20px;
       }
       
       
               input:checked + .slider {
                   background-color: #DEAF0B;
               }
       
               input:checked + .slider:before {
                   transform: translateX(20px);
               }
       
               .total-emissions {
                   font-size: 1.25rem;
                   font-weight: 600;
                   margin-bottom: 1rem;
                   color: #374151;
               }
       
               .summary-grid {
                   display: grid;
                   grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                   gap: 1rem;
                   margin-bottom: 2rem;
               }
       
               .summary-item {
                   background-color: white;
                   border-radius: 8px;
                   padding: 1rem;
                   box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
               }
       
               .summary-label {
                   font-size: 0.875rem;
                   color: #6b7280;
                   display: block;
                   margin-bottom: 0.5rem;
               }
       
               .summary-value {
                   font-size: 1.25rem;
                   font-weight: 600;
               }
       
           
       
               /* Responsive styles */
               @media (max-width: 768px) {
                   .sidebar {
                       width: 100%;
                       height: auto;
                       position: static;
                       border-right: none;
                       border-bottom: 1px solid #e5e7eb;
                   }
       
                   .main-content {
                       margin-left: 0;
                   }
       
                   body.collapsed-sidebar .sidebar {
                       display: none;
                   }
       
                   body.collapsed-sidebar .main-content {
                       margin-left: 0;
                   }
       
                   .metrics-grid,
                   .summary-grid {
                       grid-template-columns: 1fr;
                   }
       
                   .period-buttons {
                       flex-wrap: wrap;
                   }
       
                   .period-btn {
                       flex: 1 0 calc(50% - 0.375rem);
                       margin-bottom: 0.75rem;
                   }
               }
    
    /* loading css */
    
    .loading-overlay {
     position: fixed;
     top: 0;
     left: 0;
     width: 100%;
     height: 100%;
     background-color: #f8f9fa;
     display: flex;
     justify-content: center;
     align-items: center;
     z-index: 9999;
    }
    
    .loading-spinner {
     width: 50px;
     height: 50px;
     border: 5px solid #e0e0e0;
     border-top: 5px solid #3498db;
     border-radius: 50%;
     animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
     0% { transform: rotate(0deg); }
     100% { transform: rotate(360deg); }
    }
    
   
    
   
    
    /* Dark mode styles */
    body.dark-mode {
        background-color: rgba(24, 27, 31, 1);
     color: #f5f6fa;
    }
    
    .dark-mode .main-content{
        background-color: rgba(24, 27, 31, 1);
        color: #f5f6fa;
    }
    
    .dark-mode .sidebar {
        background-color: rgba(24, 27, 31, 1);
    }
    
    .dark-mode .sidebar .logo-icon {
     color: #2f3640;
    }
    
    .dark-mode .sidebar .logo-text {
     color: #f5f6fa;
    }
    
    .dark-mode .sidebar nav li {
     color: #f5f6fa;
    }
    
    .dark-mode .sidebar nav li:hover {
     background-color: #383838;
    }
    
    .dark-mode .sidebar nav li a {
     color: #f5f6fa;
    }
    
    .dark-mode .sidebar nav li i {
     color: #dcdde1;
    }
    
    .dark-mode .toggle-sidebar,
    .dark-mode .toggle-dark-mode {
     color: #f5f6fa;
    }
    
    .dark-mode .toggle-switch {
        background-color: var(--primary-color);
    }
    
    .dark-mode .toggle-switch.active {
     background-color: var(--primary-color);
    }
    
    .dark-mode header {
        background-color: rgb(17, 18, 23);
    }
    
    .dark-mode .content-card {
        background-color: rgba(24, 27, 31, 1);
     color: #fff;
    }
    
    
    .dark-mode .loading-overlay{
        background-color: rgba(24, 27, 31, 1);
    }
    
    /* Mobile Sidebar Improvements */
    @media (max-width: 768px) {
        /* Sidebar base styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: 280px;
            transform: translateX(-100%);
            transition: transform 0.3s ease-in-out;
            z-index: 1000;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
            box-shadow: none;
        }
    
        .sidebar.active {
            transform: translateX(0);
            box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
        }
    
        /* Improved hamburger button */
        .mobile-toggle {
            display: block;
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 1001;
            background: none;
            border: none;
            cursor: pointer;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: white;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            padding: 8px;
        }
    
        .mobile-toggle span {
            display: block;
            width: 24px;
            height: 2px;
            background-color: var(--text-color);
            margin: 5px auto;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }
    
        .mobile-toggle.active span:nth-child(1) {
            transform: translateY(7px) rotate(45deg);
        }
    
        .mobile-toggle.active span:nth-child(2) {
            opacity: 0;
        }
    
        .mobile-toggle.active span:nth-child(3) {
            transform: translateY(-7px) rotate(-45deg);
        }
    
        /* Improved nav items */
        .sidebar nav ul {
            padding: 1rem 0;
        }
    
        .sidebar nav li {
            padding: 0.875rem 1.5rem;
            margin: 0.25rem 1rem;
            border-radius: 8px;
            transition: background-color 0.2s ease;
        }
    
        .sidebar nav li a {
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 1rem;
            color: var(--text-color);
        }
    
        .sidebar nav li i {
            font-size: 1.25rem;
            min-width: 24px;
            text-align: center;
        }
    
        .sidebar nav li:active {
            background-color: rgba(0, 0, 0, 0.05);
        }
    
        /* Improved overlay */
        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(2px);
            z-index: 999;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
    
        .sidebar-overlay.active {
            display: block;
            opacity: 1;
        }
    
        /* Dark mode adjustments */
        .dark-mode .mobile-toggle {
            background-color: rgba(255, 255, 255, 0.1);
        }
    
        .dark-mode .mobile-toggle span {
            background-color: #f5f6fa;
        }
    
        .dark-mode .sidebar nav li:active {
            background-color: rgba(255, 255, 255, 0.05);
        }
    }
    
    /* Ensure main content adjusts properly */
    @media (max-width: 768px) {
        .main-content {
            margin-left: 0;
            padding-top: 4.5rem;
            transition: margin-left 0.3s ease;
        }
    
        body.sidebar-open .main-content {
            filter: blur(2px);
            pointer-events: none;
        }
    }
    
    
      /* Main content styling */
    .main-content {
      flex: 1;
      margin-left: 280px;
      padding: 2rem;
      color: var(--text-color);
      transition: margin-left 0.3s ease;
    }
    
    
    .container {
        margin-left: 280px;
        padding: 0 var(--spacer);
        margin: 0 auto;
    }

    .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border);
        }

        .page-title {
            font-size: 24px;
            font-weight: 600;
            color: #000;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .page-title i {
            color: var(--primary);
        }

        .card {
            background: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 4px 8px var(--shadow);
            margin-bottom: 20px;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px var(--shadow);
        }

        .card-header {
            padding: 15px 20px;
            background: var(--primary);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
        }

        .card-body {
            padding: 20px;
        }

        .grid-2 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .grid-3 {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
        }

        .pricing-chart-container {
            height: 300px;
            position: relative;
        }

        .pricing-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .stat-card {
            background: var(--light);
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            box-shadow: 0 2px 4px var(--shadow);
        }

        .stat-value {
            font-size: 20px;
            font-weight: 700;
            margin: 8px 0;
            color: var(--primary);
        }

        .stat-label {
            font-size: 14px;
            color: var(--gray);
        }

        /* Form controls */
        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border);
            border-radius: 4px;
            font-size: 16px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(76, 111, 229, 0.2);
        }

        .form-select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border);
            border-radius: 4px;
            background-color: white;
            font-size: 16px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-select:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(76, 111, 229, 0.2);
        }

        .form-check {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .form-check-input {
            margin-right: 10px;
            width: 18px;
            height: 18px;
        }

        .time-period {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
            background: var(--light);
            padding: 10px;
            border-radius: 4px;
        }

        .time-input {
            width: 100px;
        }

        .add-time-btn {
            background: var(--secondary);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .delete-time-btn {
            background: var(--danger);
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Buttons */
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

        .btn-secondary {
            background-color: var(--secondary);
            color: white;
        }

        .btn-secondary:hover {
            background-color: var(--secondary-dark);
        }

        .btn-danger {
            background-color: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background-color: #c0392b;
        }

        .btn-success {
            background-color: var(--success);
            color: white;
        }

        .btn-success:hover {
            background-color: #27ae60;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 14px;
        }

        .btn-group {
            display: flex;
            gap: 10px;
        }

        /* Toggle switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color:#1c9b84;
        }

        input:checked + .toggle-slider:before {
            transform: translateX(26px);
        }

        .toggle-label {
            margin-left: 60px;
        }

        /* Alert messages */
        .alert {
            padding: 12px 20px;
            border-radius: 4px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-warning {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }

        .alert-info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        /* Badge for status */
        .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 50px;
            font-size: 12px;
            font-weight: 600;
        }

        .badge-success {
            background-color: var(--success);
            color: white;
        }

        .badge-danger {
            background-color: var(--danger);
            color: white;
        }

        .badge-warning {
            background-color: var(--warning);
            color: white;
        }

        /* Loading indicator */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Hide elements */
        .hidden {
            display: none !important;
        }

        /* Price indicators */
        .price-indicator {
            display: flex;
            align-items: center;
            gap: 5px;
            margin-top: 5px;
        }

        .price-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .price-low {
            background-color: var(--success);
        }

        .price-medium {
            background-color: var(--warning);
        }

        .price-high {
            background-color: var(--danger);
        }

        .price-now {
            background-color: var(--primary);
        }

        /* Best times list */
        .best-times-list {
            margin-top: 15px;
        }

        .best-time-item {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border-bottom: 1px solid var(--border);
        }

        .best-time-item:last-child {
            border-bottom: none;
        }

        .time-slot {
            font-weight: 600;
        }

        .price-value {
            color: var(--primary);
            font-weight: 600;
        }

        /* Responsive styles */
        @media (max-width: 920px) {
            .grid-2, .grid-3 {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 600px) {
            .pricing-stats {
                grid-template-columns: 1fr 1fr;
            }
            
            .card-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }

        /* Tooltip styles */
        .tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
        }

        .tooltip .tooltip-text {
            visibility: hidden;
            width: 200px;
            background-color: var(--dark);
            color: white;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 14px;
        }

        .tooltip:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
    /* Enhanced Responsive & Dark Mode Styles for Carbonoz SolarAutopilot */

/* Main Content Responsive Adjustments */
.main-content {
    transition: margin-left 0.3s ease, background-color 0.3s ease, color 0.3s ease;
    padding: 2rem;
    overflow-x: hidden;
}

@media (max-width: 1200px) {
    .main-content {
        padding: 1.5rem;
    }
    
    .grid-2, .grid-3 {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .card {
        margin-bottom: 1rem;
    }
}

@media (max-width: 768px) {
    .main-content {
        padding: 1rem;
        margin-left: 0;
        padding-top: 4.5rem;
    }
    
    .page-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }
    
    .container {
        padding: 0 10px;
    }
    
    .card-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
        padding: 15px;
    }
    
    .pricing-stats {
        grid-template-columns: 1fr 1fr;
        gap: 10px;
    }
    
    .btn-group {
        flex-direction: column;
        gap: 8px;
        width: 100%;
    }
    
    .btn {
        width: 100%;
    }
    
    .pricing-chart-container {
        height: 250px;
    }
    
    .form-group {
        margin-bottom: 12px;
    }
}

@media (max-width: 480px) {
    .main-content {
        padding: 0.75rem;
    }
    
    .pricing-stats {
        grid-template-columns: 1fr;
    }
    
    .page-title {
        font-size: 20px;
    }
    
    .card-title {
        font-size: 16px;
    }
    
    .stat-value {
        font-size: 18px;
    }
    
    .time-period {
        flex-direction: column;
        gap: 10px;
        padding: 15px;
    }
    
    .form-control, .form-select {
        font-size: 14px;
        padding: 8px;
    }
}

/* Fix for chart responsiveness */
.pricing-chart-container {
    position: relative;
    width: 100%;
}

/* Price indicators responsiveness */
@media (max-width: 768px) {
    .price-indicator {
        flex-direction: column;
        align-items: center;
        gap: 2px;
        font-size: 12px;
    }
}

/* Improved Card Transitions */
.card {
    transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
}

/* Toggle Switch Improvements */
.toggle-switch {
    min-width: 50px;
}

.form-check {
    flex-wrap: wrap;
}

/* Time Period Inputs Responsiveness */
.time-period {
    flex-wrap: wrap;
    gap: 10px;
}

.time-input {
    min-width: 80px;
}

/* Dark Mode Styles */
body.dark-mode .main-content {
    background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
}

body.dark-mode .card {
    background-color: rgba(30, 33, 43, 1);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.25);
    border: 1px solid rgba(45, 50, 60, 1);
}

body.dark-mode .card-header {
    background: var(--primary);
}

body.dark-mode .card-title {
    color: #f5f6fa;
}

body.dark-mode .page-title {
    color: #f5f6fa;
}

body.dark-mode .page-header {
    border-bottom: 1px solid rgba(55, 60, 75, 1);
}

body.dark-mode .form-control, 
body.dark-mode .form-select {
    background-color: rgba(38, 41, 51, 1);
    border-color: rgba(55, 60, 75, 1);
    color: #f5f6fa;
}

body.dark-mode .form-label,
body.dark-mode .form-check-label,
body.dark-mode .toggle-label {
    color: #f5f6fa;
}

body.dark-mode .stat-card {
    background-color: rgba(38, 41, 51, 1);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

body.dark-mode .stat-label {
    color: #bdc3c7;
}

body.dark-mode .stat-value {
    color: var(--primary);
}

body.dark-mode .btn-primary {
    background-color: var(--primary);
}

body.dark-mode .btn-primary:hover {
    background-color: var(--primary-dark);
}

body.dark-mode .alert-info {
    background-color: rgba(41, 58, 74, 1);
    color: #a8d7fd;
    border-color: rgba(70, 90, 120, 1);
}

body.dark-mode .alert-success {
    background-color: rgba(39, 70, 50, 1);
    color: #a2f0bc;
    border-color: rgba(60, 105, 75, 1);
}

body.dark-mode .alert-warning {
    background-color: rgba(77, 58, 25, 1);
    color: #ffd699;
    border-color: rgba(102, 81, 40, 1);
}

body.dark-mode .alert-danger {
    background-color: rgba(73, 40, 40, 1);
    color: #ffb8b8;
    border-color: rgba(105, 60, 60, 1);
}

body.dark-mode .time-period {
    background-color: rgba(38, 41, 51, 1);
}

body.dark-mode .best-time-item {
    border-bottom: 1px solid rgba(55, 60, 75, 1);
}

body.dark-mode .best-time-item:last-child {
    border-bottom: none;
}

body.dark-mode .tooltip .tooltip-text {
    background-color: rgba(60, 65, 80, 1);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

/* Chart colors for dark mode */
body.dark-mode .chart-container {
    background-color: rgba(30, 33, 43, 1);
}

/* Fix for toggle switches in dark mode */
body.dark-mode .toggle-slider {
    background-color: rgba(70, 75, 90, 1);
}

body.dark-mode input:checked + .toggle-slider {
    background-color: var(--secondary);
}

/* Notification styling in dark mode */
body.dark-mode #notification {
    background-color: rgba(35, 40, 50, 1);
    border: 1px solid rgba(55, 60, 75, 1);
}

/* Improved focus states for dark mode */
body.dark-mode .form-control:focus,
body.dark-mode .form-select:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.3);
    outline: none;
}

/* Media query for very small devices */
@media (max-width: 360px) {
    .main-content {
        padding: 0.5rem;
    }
    
    .card {
        border-radius: 6px;
    }
    
    .card-body {
        padding: 15px 10px;
    }
    
    .stat-card {
        padding: 10px;
    }
    
    .best-time-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }
    
    .pricing-chart-container {
        height: 200px;
    }

}


body.dark-mode .actions-log-item {
            background-color: rgba(38, 41, 51, 1) !important;
            border: 1px solid rgba(55, 60, 75, 1);
            color: #f5f6fa;
        }

        body.dark-mode .actions-log-item .action-time {
            color: #bdc3c7 !important;
        }

        body.dark-mode .actions-log-item .action-text {
            color: #f5f6fa !important;
        }


        /* If you want to be more specific, you can also add this rule */
        body.dark-mode #actionsLog > div {
            background-color: rgba(38, 41, 51, 1) !important;
            border: 1px solid rgba(55, 60, 75, 1);
            color: #f5f6fa;
        }

        body.dark-mode #actionsLog > div > div:first-child {
            color: #bdc3c7 !important; /* Time color */
        }

        body.dark-mode #actionsLog > div > div:last-child {
            color: #f5f6fa !important; /* Action text color */
        }
    </style>
</head>
<body>
    <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"></div>

        <%- include('partials/sidebar') %>

        <div class="main-content">
            <div class="container">
                <div class="page-header">
                    <h1 class="page-title">
                        <i class="fas fa-bolt"></i> Tibber Dynamic Pricing
                        <small style="color: var(--gray); font-size: 0.6em; margin-left: 10px;">
                            <i class="fas fa-leaf"></i> Smart electricity pricing
                        </small>
                    </h1>
                    <div class="btn-group" id="headerButtons">
                        <button class="btn btn-primary" id="refreshDataBtn">
                            <i class="fas fa-sync-alt"></i> Refresh Prices
                        </button>
                    </div>
                </div>

                <div class="alert alert-info hidden" id="notification">
                    <i class="fas fa-info-circle"></i>
                    <span id="notificationMessage"></span>
                    <button class="btn btn-sm" style="margin-left: auto" onclick="hideNotification()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <div class="grid-2">
                    <!-- Current Status Card -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Current Status</h2>
                            <div class="form-check">
                                <label class="toggle-switch">
                                    <input type="checkbox" id="enableDynamicPricing">
                                    <span class="toggle-slider"></span>
                                </label>
                                <span class="toggle-label">Enable Tibber Dynamic Pricing</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="statusContent">
                                <p id="loadingStatus">Loading Tibber status...</p>
                                <div id="statusDetails" class="hidden">
                                    <div class="pricing-stats">
                                        <div class="stat-card">
                                            <div class="stat-label">Current Price</div>
                                            <div class="stat-value" id="currentPrice">0.00</div>
                                            <small id="priceCurrency">EUR/kWh</small>
                                        </div>
                                        <div class="stat-card">
                                            <div class="stat-label">Price Level</div>
                                            <div class="stat-value" id="priceLevel">NORMAL</div>
                                            <small>Tibber Level</small>
                                        </div>
                                        <div class="stat-card">
                                            <div class="stat-label">Battery SoC</div>
                                            <div class="stat-value" id="batterySoC">0</div>
                                            <small>%</small>
                                        </div>
                                        <div class="stat-card">
                                            <div class="stat-label">Charging</div>
                                            <div class="stat-value" id="chargingStatus">No</div>
                                            <small id="chargingReason">N/A</small>
                                        </div>
                                    </div>

                                    <div class="form-group" style="margin-top: 20px;">
                                        <label class="form-label">Tibber Recommendation:</label>
                                        <div class="alert" id="recommendationAlert">
                                            <i class="fas fa-lightbulb"></i>
                                            <span id="recommendationText">Calculating recommendation...</span>
                                        </div>
                                    </div>

                                    <div class="btn-group" style="margin-top: 20px;">
                                        <button class="btn btn-success" id="enableChargingBtn">
                                            <i class="fas fa-charging-station"></i> Enable Grid Charging
                                        </button>
                                        <button class="btn btn-danger" id="disableChargingBtn">
                                            <i class="fas fa-power-off"></i> Disable Grid Charging
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Configuration Card -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Tibber Configuration</h2>
                            <button class="btn btn-sm btn-secondary" id="saveConfigBtn">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                        </div>
                        <div class="card-body">
                            <form id="configForm">
                                <div class="grid-2">
                                    <div class="form-group">
                                        <label class="form-label">Country</label>
                                        <select class="form-select" id="country">
                                            <option value="DE">Germany</option>
                                            <option value="NO">Norway</option>
                                            <option value="SE">Sweden</option>
                                            <option value="DK">Denmark</option>
                                            <option value="FI">Finland</option>
                                            <option value="NL">Netherlands</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Timezone</label>
                                        <select class="form-select" id="timezone">
                                            <option value="Europe/Berlin">Europe/Berlin</option>
                                            <option value="Europe/Oslo">Europe/Oslo</option>
                                            <option value="Europe/Stockholm">Europe/Stockholm</option>
                                            <option value="Europe/Copenhagen">Europe/Copenhagen</option>
                                            <option value="Europe/Helsinki">Europe/Helsinki</option>
                                            <option value="Europe/Amsterdam">Europe/Amsterdam</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">Tibber API Token</label>
                                    <div class="tooltip">
                                        <i class="fas fa-info-circle"></i>
                                        <span class="tooltip-text">Get your API token from the Tibber app: Settings → Account → API Token</span>
                                    </div>
                                    <input type="password" class="form-control" id="apiKey" placeholder="Enter your Tibber API token">
                                    <small style="color: var(--gray); font-size: 12px;">
                                        <i class="fas fa-mobile-alt"></i> Available in Tibber mobile app → Settings → Account → API Token
                                    </small>
                                </div>

                                <div class="grid-2">
                                    <div class="form-group">
                                        <label class="form-label">Target SoC (%)</label>
                                        <div class="tooltip">
                                            <i class="fas fa-info-circle"></i>
                                            <span class="tooltip-text">Stop charging when battery reaches this level.</span>
                                        </div>
                                        <input type="number" class="form-control" id="targetSoC" min="0" max="100" step="1" placeholder="e.g. 80">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Minimum SoC (%)</label>
                                        <div class="tooltip">
                                            <i class="fas fa-info-circle"></i>
                                            <span class="tooltip-text">Emergency charging when battery falls below this level.</span>
                                        </div>
                                        <input type="number" class="form-control" id="minimumSoC" min="0" max="100" step="1" placeholder="e.g. 20">
                                    </div>
                                </div>

                                <!-- Tibber-specific settings -->
                                <div class="form-group">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="useTibberLevels" checked>
                                        <label class="form-check-label">Use Tibber Price Level Intelligence</label>
                                        <div class="tooltip">
                                            <i class="fas fa-info-circle"></i>
                                            <span class="tooltip-text">Use Tibber's intelligent price levels (VERY_CHEAP, CHEAP, etc.) instead of manual thresholds</span>
                                        </div>
                                    </div>
                                </div>

                                <div id="tibberLevelOptions">
                                    <label class="form-label">Charge During These Price Levels</label>
                                    <div class="checkbox-group">
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input price-level-checkbox" id="level_very_cheap" value="VERY_CHEAP" checked>
                                            <label class="form-check-label" style="color: #27ae60;">
                                                <i class="fas fa-circle"></i> VERY CHEAP
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input price-level-checkbox" id="level_cheap" value="CHEAP" checked>
                                            <label class="form-check-label" style="color: #2ecc71;">
                                                <i class="fas fa-circle"></i> CHEAP
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input price-level-checkbox" id="level_normal" value="NORMAL">
                                            <label class="form-check-label" style="color: #f39c12;">
                                                <i class="fas fa-circle"></i> NORMAL
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input price-level-checkbox" id="level_expensive" value="EXPENSIVE">
                                            <label class="form-check-label" style="color: #e67e22;">
                                                <i class="fas fa-circle"></i> EXPENSIVE
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input price-level-checkbox" id="level_very_expensive" value="VERY_EXPENSIVE">
                                            <label class="form-check-label" style="color: #e74c3c;">
                                                <i class="fas fa-circle"></i> VERY EXPENSIVE
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <div id="manualThresholdOptions" class="hidden">
                                    <div class="form-group">
                                        <label class="form-label">Manual Price Threshold</label>
                                        <div class="tooltip">
                                            <i class="fas fa-info-circle"></i>
                                            <span class="tooltip-text">Only charge when price is below this threshold. Set to 0 to use automatic calculation.</span>
                                        </div>
                                        <input type="number" class="form-control" id="priceThreshold" min="0" max="1" step="0.01" placeholder="e.g. 0.10">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="scheduledCharging">
                                        <label class="form-check-label">Enable Additional Scheduled Charging</label>
                                    </div>
                                </div>

                                <div id="schedulingOptions" class="hidden">
                                    <label class="form-label">Additional Charging Time Periods</label>
                                    <small style="color: var(--gray); display: block; margin-bottom: 10px;">
                                        These periods will charge regardless of Tibber price levels
                                    </small>
                                    <div id="chargingPeriods">
                                        <!-- Time periods will be dynamically added here -->
                                    </div>
                                    <button type="button" class="add-time-btn" id="addPeriodBtn">
                                        <i class="fas fa-plus"></i> Add Time Period
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Pricing Chart Card -->
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Tibber Electricity Prices (24 Hours)</h2>
                        <span id="lastUpdateTime">Last updated: Never</span>
                    </div>
                    <div class="card-body">
                        <div class="pricing-chart-container">
                            <canvas id="pricingChart"></canvas>
                        </div>
                        <div style="display: flex; justify-content: center; gap: 20px; margin-top: 15px; flex-wrap: wrap;">
                            <div class="price-indicator">
                                <div class="price-dot" style="background-color: #27ae60;"></div>
                                <span>VERY CHEAP</span>
                            </div>
                            <div class="price-indicator">
                                <div class="price-dot" style="background-color: #2ecc71;"></div>
                                <span>CHEAP</span>
                            </div>
                            <div class="price-indicator">
                                <div class="price-dot" style="background-color: #f39c12;"></div>
                                <span>NORMAL</span>
                            </div>
                            <div class="price-indicator">
                                <div class="price-dot" style="background-color: #e67e22;"></div>
                                <span>EXPENSIVE</span>
                            </div>
                            <div class="price-indicator">
                                <div class="price-dot" style="background-color: #e74c3c;"></div>
                                <span>VERY EXPENSIVE</span>
                            </div>
                            <div class="price-indicator">
                                <div class="price-dot" style="background-color: #3498db; border: 2px solid #2c3e50;"></div>
                                <span>Current Hour</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="grid-2">
                    <!-- Best Charging Times Card -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Best Charging Times</h2>
                        </div>
                        <div class="card-body">
                            <p>Based on Tibber's price intelligence, these are the most economical times to charge your battery:</p>
                            <div class="best-times-list" id="bestTimesList">
                                <p>Loading best charging times...</p>
                            </div>
                        </div>
                    </div>

                    <!-- Automated Actions Card -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Recent Actions</h2>
                        </div>
                        <div class="card-body">
                            <p>List of recent automated actions taken by the Tibber pricing system:</p>
                            <div id="actionsLog">
                                <p>No recent actions recorded.</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tibber Info Card -->
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">About Tibber Integration</h2>
                    </div>
                    <div class="card-body">
                        <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 15px;">
                            <div style="background: linear-gradient(135deg, #5ee05c, #39c13b); width: 60px; height: 60px; border-radius: 12px; display: flex; align-items: center; justify-content: center;">
                                <i class="fas fa-leaf" style="color: white; font-size: 24px;"></i>
                            </div>
                            <div>
                                <h3 style="margin: 0; color: var(--primary);">Smart Electricity Pricing</h3>
                                <p style="margin: 5px 0; color: var(--gray);">Optimize your battery charging with Tibber's intelligent price levels</p>
                            </div>
                        </div>
                        
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                            <div class="info-box">
                                <h4><i class="fas fa-brain"></i> Intelligent Price Levels</h4>
                                <p>Tibber categorizes electricity prices into 5 levels: VERY_CHEAP, CHEAP, NORMAL, EXPENSIVE, and VERY_EXPENSIVE. The system automatically charges during favorable price levels.</p>
                            </div>
                            <div class="info-box">
                                <h4><i class="fas fa-clock"></i> Real-time Updates</h4>
                                <p>Pricing data is updated multiple times daily, with tomorrow's prices typically available around 13:00. The system automatically fetches the latest prices.</p>
                            </div>
                            <div class="info-box">
                                <h4><i class="fas fa-shield-alt"></i> Learner Mode Protection</h4>
                                <p>Commands are only sent when Learner Mode is active, ensuring you maintain full control over your system while testing the automation.</p>
                            </div>
                            <div class="info-box">
                                <h4><i class="fas fa-mobile-alt"></i> Easy Setup</h4>
                                <p>Get your API token from the Tibber mobile app: Settings → Account → API Token. No additional registration required if you're already a Tibber customer.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>
// Tibber Dynamic Pricing Frontend JavaScript

document.addEventListener('DOMContentLoaded', function() {
    // Initialize variables
    let pricingData = [];
    let lowPricePeriods = [];
    let config = null;
    let pricingChart = null;
    let isLoading = false;
    let currentTimezone = 'Europe/Berlin';
    let currentCurrency = 'EUR';

    // Initialize elements
    const enableDynamicPricingToggle = document.getElementById('enableDynamicPricing');
    const saveConfigBtn = document.getElementById('saveConfigBtn');
    const refreshDataBtn = document.getElementById('refreshDataBtn');
    const enableChargingBtn = document.getElementById('enableChargingBtn');
    const disableChargingBtn = document.getElementById('disableChargingBtn');
    const addPeriodBtn = document.getElementById('addPeriodBtn');
    const scheduledChargingCheckbox = document.getElementById('scheduledCharging');
    const schedulingOptions = document.getElementById('schedulingOptions');
    const chargingPeriods = document.getElementById('chargingPeriods');
    const useTibberLevelsCheckbox = document.getElementById('useTibberLevels');
    const tibberLevelOptions = document.getElementById('tibberLevelOptions');
    const manualThresholdOptions = document.getElementById('manualThresholdOptions');
    const notification = document.getElementById('notification');
    const notificationMessage = document.getElementById('notificationMessage');
    const statusContent = document.getElementById('statusContent');
    const loadingStatus = document.getElementById('loadingStatus');
    const statusDetails = document.getElementById('statusDetails');
    const currentPrice = document.getElementById('currentPrice');
    const priceLevel = document.getElementById('priceLevel');
    const priceCurrency = document.getElementById('priceCurrency');
    const batterySoC = document.getElementById('batterySoC');
    const chargingStatus = document.getElementById('chargingStatus');
    const chargingReason = document.getElementById('chargingReason');
    const recommendationAlert = document.getElementById('recommendationAlert');
    const recommendationText = document.getElementById('recommendationText');
    const lastUpdateTime = document.getElementById('lastUpdateTime');
    const bestTimesList = document.getElementById('bestTimesList');
    const actionsLog = document.getElementById('actionsLog');

    // Form elements
    const countrySelect = document.getElementById('country');
    const timezoneSelect = document.getElementById('timezone');
    const apiKeyInput = document.getElementById('apiKey');
    const priceThresholdInput = document.getElementById('priceThreshold');
    const targetSoCInput = document.getElementById('targetSoC');
    const minimumSoCInput = document.getElementById('minimumSoC');

    // Initialize the page
    init();

    // Main initialization function
    async function init() {
        // Load available countries and timezones
        await loadCountriesAndTimezones();
        
        // Load configuration
        await loadConfig();
        
        // Load pricing data
        await loadPricingData();
        
        // Initialize chart
        initializeChart();
        
        // Update UI with system state
        updateSystemState();
        
        // Set up event listeners
        setupEventListeners();
        
        // Set up periodic refreshes
        setInterval(updateSystemState, 60000); // Update system state every minute
        setInterval(loadPricingData, 300000); // Refresh pricing data every 5 minutes
        
        // Initial automatic price refresh only if API key is configured
        if (config && config.apiKey && config.apiKey.trim() !== '') {
            setTimeout(() => refreshPrices(true), 2000);
        }
        
        // Load actions log
        setTimeout(loadActionsLog, 3000);
    }

    // Load countries and timezones for Tibber
    async function loadCountriesAndTimezones() {
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/countries-timezones');
            
            if (!response.ok) {
                throw new Error('Failed to load Tibber countries and timezones');
            }
            
            const data = await response.json();
            
            if (data.success) {
                populateCountrySelect(data.countries);
                populateTimezoneSelect(data.timezones);
                console.log(`Loaded ${data.countries.length} Tibber-supported countries`);
            } else {
                throw new Error(data.error || 'Failed to load countries and timezones');
            }
        } catch (error) {
            console.error('Error loading Tibber countries and timezones:', error);
            showNotification('Error loading Tibber countries: ' + error.message, 'warning');
        }
    }

    // Populate country dropdown
    function populateCountrySelect(countries) {
        countrySelect.innerHTML = '';
        
        countries.forEach(country => {
            const option = document.createElement('option');
            option.value = country.code;
            option.textContent = `${country.name} (${country.code})`;
            option.dataset.timezone = country.timezone;
            option.dataset.currency = country.currency;
            countrySelect.appendChild(option);
        });
        
        // Auto-update timezone when country changes
        countrySelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            const autoTimezone = selectedOption.dataset.timezone;
            const autoCurrency = selectedOption.dataset.currency;
            
            if (autoTimezone) {
                timezoneSelect.value = autoTimezone;
                currentTimezone = autoTimezone;
            }
            
            if (autoCurrency) {
                currentCurrency = autoCurrency;
            }
        });
    }

    // Populate timezone dropdown
    function populateTimezoneSelect(timezones) {
        timezoneSelect.innerHTML = '';
        
        timezones.forEach(timezone => {
            const option = document.createElement('option');
            option.value = timezone;
            option.textContent = timezone.replace('_', ' ');
            timezoneSelect.appendChild(option);
        });
    }

    // Load configuration from API
    async function loadConfig() {
        showNotification('Loading Tibber configuration...', 'info');
        
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings');
            
            if (!response.ok) {
                throw new Error('Failed to load Tibber configuration');
            }
            
            const data = await response.json();
            
            if (data.success) {
                config = data.config;
                currentTimezone = config.timezone || 'Europe/Berlin';
                currentCurrency = config.currency || 'EUR';
                updateConfigUI();
                showNotification('Tibber configuration loaded successfully', 'success');
            } else {
                throw new Error(data.error || 'Failed to load configuration');
            }
        } catch (error) {
            console.error('Error loading Tibber configuration:', error);
            showNotification('Error loading configuration: ' + error.message, 'danger');
        }
    }

    // Update UI with configuration
    function updateConfigUI() {
        if (!config) return;
        
        // Update toggle state
        enableDynamicPricingToggle.checked = config.enabled;
        
        // Update form fields
        countrySelect.value = config.country || 'DE';
        timezoneSelect.value = config.timezone || 'Europe/Berlin';
        apiKeyInput.value = config.apiKey || '';
        priceThresholdInput.value = config.priceThreshold || 0;
        targetSoCInput.value = config.targetSoC || 80;
        minimumSoCInput.value = config.minimumSoC || 20;
        scheduledChargingCheckbox.checked = config.scheduledCharging || false;
        useTibberLevelsCheckbox.checked = config.useTibberLevels !== false; // Default to true
        
        // Update price level checkboxes
        const lowPriceLevels = config.lowPriceLevels || ['VERY_CHEAP', 'CHEAP'];
        document.querySelectorAll('.price-level-checkbox').forEach(checkbox => {
            checkbox.checked = lowPriceLevels.includes(checkbox.value);
        });
        
        // Update current timezone and currency
        currentTimezone = config.timezone || 'Europe/Berlin';
        currentCurrency = config.currency || 'EUR';
        
        // Update currency display
        priceCurrency.textContent = currentCurrency + '/kWh';
        
        // Show/hide scheduling options
        schedulingOptions.classList.toggle('hidden', !config.scheduledCharging);
        
        // Show/hide Tibber level vs manual threshold options
        const useLevels = useTibberLevelsCheckbox.checked;
        tibberLevelOptions.classList.toggle('hidden', !useLevels);
        manualThresholdOptions.classList.toggle('hidden', useLevels);
        
        // Render charging periods
        renderChargingPeriods();
        
        console.log(`Tibber configuration updated: Country=${config.country}, Currency=${currentCurrency}, Use Levels=${useLevels}`);
    }

    // Render charging time periods UI
    function renderChargingPeriods() {
        chargingPeriods.innerHTML = '';
        
        if (!config || !config.chargingHours || !Array.isArray(config.chargingHours)) {
            return;
        }
        
        if (config.chargingHours.length === 0) {
            addTimePeriod('22:00', '06:00');
        } else {
            config.chargingHours.forEach(period => {
                addTimePeriod(period.start, period.end);
            });
        }
    }

    // Add time period UI element
    function addTimePeriod(start = '22:00', end = '06:00') {
        const periodElement = document.createElement('div');
        periodElement.className = 'time-period';
        periodElement.innerHTML = `
            <label>From</label>
            <input type="time" class="form-control time-input period-start" value="${start}">
            <label>To</label>
            <input type="time" class="form-control time-input period-end" value="${end}">
            <button type="button" class="delete-time-btn"><i class="fas fa-trash"></i></button>
        `;
        
        // Add delete button functionality
        const deleteBtn = periodElement.querySelector('.delete-time-btn');
        deleteBtn.addEventListener('click', function() {
            periodElement.remove();
        });
        
        chargingPeriods.appendChild(periodElement);
    }

    // Load pricing data from Tibber API
    async function loadPricingData() {
        if (isLoading) return;
        isLoading = true;
        
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/pricing-data');
            
            if (!response.ok) {
                throw new Error('Failed to load Tibber pricing data');
            }
            
            const data = await response.json();
            
            if (data.success) {
                pricingData = data.pricingData || [];
                lowPricePeriods = data.lowPricePeriods || [];
                
                // Update timezone and currency from response
                if (data.timezone) {
                    currentTimezone = data.timezone;
                }
                
                if (data.currency) {
                    currentCurrency = data.currency;
                    priceCurrency.textContent = currentCurrency + '/kWh';
                }
                
                if (data.lastUpdate) {
                    const updateTime = new Date(data.lastUpdate);
                    lastUpdateTime.textContent = 'Last updated: ' + updateTime.toLocaleString('en-US', {
                        timeZone: currentTimezone,
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                }
                
                // Show data source information only for real data
                if (data.dataSource === 'real') {
                    showNotification('✅ Using real Tibber pricing data', 'success');
                }
                
                updatePricingDisplay();
                updateBestTimesList();
                
                console.log(`Loaded ${pricingData.length} Tibber pricing data points for timezone ${currentTimezone}`);
            } else {
                // Handle specific error cases
                if (data.needsApiKey) {
                    showNotification('⚠️ Configure your Tibber API token to fetch real pricing data', 'warning');
                    
                    // Clear existing data if no API key
                    pricingData = [];
                    lowPricePeriods = [];
                    updatePricingDisplay();
                    updateBestTimesList();
                } else {
                    throw new Error(data.error || 'Failed to load Tibber pricing data');
                }
            }
        } catch (error) {
            console.error('Error loading Tibber pricing data:', error);
            
            // Don't show error notification if it's just missing API key on first load
            if (!error.message.includes('API token')) {
                showNotification('Error loading pricing data: ' + error.message, 'danger');
                
                // Only trigger automatic refresh if we have config and API key
                if (config && config.apiKey && config.apiKey.trim() !== '') {
                    setTimeout(() => refreshPrices(true), 5000);
                }
            }
        } finally {
            isLoading = false;
        }
    }

    // Initialize Chart.js chart for Tibber data
    function initializeChart() {
        const ctx = document.getElementById('pricingChart').getContext('2d');
        
        pricingChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [],
                datasets: [{
                    label: 'Electricity Price',
                    data: [],
                    backgroundColor: [],
                    borderColor: [],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const price = context.parsed.y.toFixed(4);
                                const level = pricingData[context.dataIndex]?.level || 'UNKNOWN';
                                return `${price} ${currentCurrency}/kWh (${level})`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: `Price (${currentCurrency}/kWh)`
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time (' + currentTimezone + ')'
                        }
                    }
                }
            }
        });
    }

    // Update pricing chart with Tibber data and price levels
    function updatePricingDisplay() {
        if (!pricingChart) return;
        
        if (!pricingData || pricingData.length === 0) {
            // Clear chart when no data
            pricingChart.data.labels = [];
            pricingChart.data.datasets[0].data = [];
            pricingChart.data.datasets[0].backgroundColor = [];
            pricingChart.data.datasets[0].borderColor = [];
            pricingChart.update();
            
            // Clear current price display
            currentPrice.textContent = '0.00';
            priceLevel.textContent = 'NO DATA';
            priceLevel.style.color = 'var(--gray)';
            
            return;
        }
        
        const now = new Date();
        const nowInTimezone = new Date(now.toLocaleString("en-US", {timeZone: currentTimezone}));
        
        // Get next 24 hours of prices
        const next24Hours = pricingData.filter(p => {
            const priceTime = new Date(p.timestamp);
            const priceInTimezone = new Date(priceTime.toLocaleString("en-US", {timeZone: currentTimezone}));
            
            return priceInTimezone >= nowInTimezone || 
                   (priceInTimezone.getDate() === nowInTimezone.getDate() && 
                    priceInTimezone.getHours() === nowInTimezone.getHours());
        }).slice(0, 24);
        
        if (next24Hours.length === 0) return;
        
        // Create Tibber-specific color mapping
        const tibberLevelColors = {
            'VERY_CHEAP': '#27ae60',
            'CHEAP': '#2ecc71',
            'NORMAL': '#f39c12',
            'EXPENSIVE': '#e67e22',
            'VERY_EXPENSIVE': '#e74c3c'
        };
        
        // Update chart data
        const labels = next24Hours.map(p => {
            const priceTime = new Date(p.timestamp);
            return priceTime.toLocaleTimeString('en-US', {
                timeZone: currentTimezone,
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            });
        });
        
        const data = next24Hours.map(p => p.price);
        
        const backgroundColor = next24Hours.map(p => {
            const priceTime = new Date(p.timestamp);
            const priceInTimezone = new Date(priceTime.toLocaleString("en-US", {timeZone: currentTimezone}));
            const currentHour = nowInTimezone.getHours();
            
            // Highlight current hour
            if (priceInTimezone.getHours() === currentHour && 
                priceInTimezone.getDate() === nowInTimezone.getDate()) {
                return '#3498db'; // Blue for current hour
            }
            
            // Use Tibber level colors if available
            if (p.level && tibberLevelColors[p.level]) {
                return tibberLevelColors[p.level];
            }
            
            // Fallback to generic coloring
            return '#95a5a6';
        });
        
        const borderColor = backgroundColor.map(color => color);
        
        // Update chart
        pricingChart.data.labels = labels;
        pricingChart.data.datasets[0].data = data;
        pricingChart.data.datasets[0].backgroundColor = backgroundColor;
        pricingChart.data.datasets[0].borderColor = borderColor;
        pricingChart.data.datasets[0].label = `Electricity Price (${currentCurrency}/kWh)`;
        
        // Update chart title and axis labels
        pricingChart.options.scales.x.title.text = 'Time (' + currentTimezone + ')';
        pricingChart.options.scales.y.title.text = `Price (${currentCurrency}/kWh)`;
        pricingChart.update();
        
        // Update current price display
        const currentHourPrice = next24Hours.find(p => {
            const priceTime = new Date(p.timestamp);
            const priceInTimezone = new Date(priceTime.toLocaleString("en-US", {timeZone: currentTimezone}));
            
            return priceInTimezone.getHours() === nowInTimezone.getHours() && 
                   priceInTimezone.getDate() === nowInTimezone.getDate();
        });
        
        if (currentHourPrice) {
            currentPrice.textContent = currentHourPrice.price.toFixed(4);
            priceLevel.textContent = currentHourPrice.level || 'UNKNOWN';
            
            // Color the price level indicator
            if (currentHourPrice.level && tibberLevelColors[currentHourPrice.level]) {
                priceLevel.style.color = tibberLevelColors[currentHourPrice.level];
            }
        }
    }

    // Update best charging times list using Tibber intelligence
    function updateBestTimesList() {
        if (!pricingData || pricingData.length === 0) {
            bestTimesList.innerHTML = '<p style="color: var(--gray); font-style: italic;">Configure Tibber API token to see best charging times</p>';
            return;
        }
        
        const now = new Date();
        const futurePrices = pricingData.filter(p => new Date(p.timestamp) > now);
        
        if (futurePrices.length === 0) {
            bestTimesList.innerHTML = '<p>No future pricing data available</p>';
            return;
        }
        
        // Sort by Tibber levels first, then by price
        const tibberLevelPriority = {
            'VERY_CHEAP': 1,
            'CHEAP': 2,
            'NORMAL': 3,
            'EXPENSIVE': 4,
            'VERY_EXPENSIVE': 5
        };
        
        const sortedPrices = futurePrices.sort((a, b) => {
            const priorityA = tibberLevelPriority[a.level] || 3;
            const priorityB = tibberLevelPriority[b.level] || 3;
            
            if (priorityA !== priorityB) {
                return priorityA - priorityB;
            }
            
            return a.price - b.price;
        });
        
        const bestTimes = sortedPrices.slice(0, 5);
        
        let html = '';
        bestTimes.forEach((timeSlot, index) => {
            const priceTime = new Date(timeSlot.timestamp);
            
            const formattedTime = priceTime.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                timeZone: currentTimezone,
                hour12: false
            });
            
            const formattedDate = priceTime.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                timeZone: currentTimezone
            });
            
            const levelColor = {
                'VERY_CHEAP': '#27ae60',
                'CHEAP': '#2ecc71',
                'NORMAL': '#f39c12',
                'EXPENSIVE': '#e67e22',
                'VERY_EXPENSIVE': '#e74c3c'
            }[timeSlot.level] || '#95a5a6';
            
            html += `
                <div class="best-time-item">
                    <div>
                        <span class="time-slot">${formattedTime}</span>
                        <small> ${formattedDate}</small>
                        <div style="color: ${levelColor}; font-size: 12px; font-weight: bold;">
                            ${timeSlot.level || 'UNKNOWN'}
                        </div>
                    </div>
                    <div class="price-value">${timeSlot.price.toFixed(4)} ${currentCurrency}/kWh</div>
                </div>
            `;
        });
        
        bestTimesList.innerHTML = html;
    }

    // Update system state display
    async function updateSystemState() {
        try {
            const response = await fetch('<%= ingress_path %>/api/system-state');
            
            if (!response.ok) {
                throw new Error('Failed to load system state');
            }
            
            const data = await response.json();
            const systemState = data.current_state;
            
            // Update battery SoC display
            if (systemState && systemState.battery_soc !== undefined) {
                batterySoC.textContent = Math.round(systemState.battery_soc);
            }
            
            // Update charging status and recommendation
            updateChargingStatus();
            updateRecommendation(systemState);
            
            // Show status details
            loadingStatus.classList.add('hidden');
            statusDetails.classList.remove('hidden');
        } catch (error) {
            console.error('Error updating system state:', error);
        }
    }

    // Update charging status display
    function updateChargingStatus() {
        // This would ideally get the actual grid charging status from the backend
        const charging = Math.random() > 0.5;
        
        if (charging) {
            chargingStatus.textContent = 'Yes';
            chargingStatus.style.color = 'var(--success)';
            chargingReason.textContent = 'Tibber price favorable';
        } else {
            chargingStatus.textContent = 'No';
            chargingStatus.style.color = 'var(--danger)';
            chargingReason.textContent = 'Tibber price unfavorable';
        }
    }

    // Update recommendation using Tibber intelligence
    function updateRecommendation(systemState) {
        if (!config || !systemState) return;
        
        const batterySoCValue = systemState.battery_soc || 0;
        
        const now = new Date();
        const nowInTimezone = new Date(now.toLocaleString("en-US", {timeZone: currentTimezone}));
        
        const currentHourPrice = pricingData.find(p => {
            const priceTime = new Date(p.timestamp);
            const priceInTimezone = new Date(priceTime.toLocaleString("en-US", {timeZone: currentTimezone}));
            
            return nowInTimezone.getHours() === priceInTimezone.getHours() && 
                   nowInTimezone.getDate() === priceInTimezone.getDate();
        });
        
        if (!currentHourPrice) {
            recommendationAlert.className = 'alert alert-warning';
            recommendationText.innerHTML = 'Cannot determine recommendation - no Tibber price data for current hour';
            return;
        }
        
        // Battery is full
        if (batterySoCValue >= config.targetSoC) {
            recommendationAlert.className = 'alert alert-success';
            recommendationText.innerHTML = `
                <strong>Keep Grid Charging OFF</strong><br>
                Battery SoC (${Math.round(batterySoCValue)}%) has reached target (${config.targetSoC}%)
            `;
            return;
        }
        
        // Battery is very low
        if (batterySoCValue < config.minimumSoC) {
            recommendationAlert.className = 'alert alert-danger';
            recommendationText.innerHTML = `
                <strong>Turn Grid Charging ON (Emergency)</strong><br>
                Battery SoC (${Math.round(batterySoCValue)}%) is below minimum (${config.minimumSoC}%)
            `;
            return;
        }
        
        // Use Tibber price level intelligence
        if (currentHourPrice.level && config.useTibberLevels) {
            const lowPriceLevels = config.lowPriceLevels || ['VERY_CHEAP', 'CHEAP'];
            const isLowPrice = lowPriceLevels.includes(currentHourPrice.level);
            
            if (isLowPrice) {
                recommendationAlert.className = 'alert alert-success';
                recommendationText.innerHTML = `
                    <strong>Turn Grid Charging ON</strong><br>
                    Tibber price level is favorable (${currentHourPrice.level})<br>
                    Current price: ${currentHourPrice.price.toFixed(4)} ${currentCurrency}/kWh
                `;
            } else {
                recommendationAlert.className = 'alert alert-warning';
                recommendationText.innerHTML = `
                    <strong>Keep Grid Charging OFF</strong><br>
                    Tibber price level is not optimal (${currentHourPrice.level})<br>
                    Current price: ${currentHourPrice.price.toFixed(4)} ${currentCurrency}/kWh
                `;
            }
        } else {
            // Fallback to threshold-based recommendation
            recommendationAlert.className = 'alert alert-info';
            recommendationText.innerHTML = `
                <strong>Price-based recommendation</strong><br>
                Current price: ${currentHourPrice.price.toFixed(4)} ${currentCurrency}/kWh<br>
                Enable Tibber price levels for intelligent recommendations
            `;
        }
    }

    // Show notification
    function showNotification(message, type = 'info') {
        notification.className = 'alert';
        notification.classList.add(`alert-${type}`);
        notificationMessage.textContent = message;
        notification.classList.remove('hidden');
        
        setTimeout(hideNotification, 5000);
    }

    // Hide notification
    function hideNotification() {
        notification.classList.add('hidden');
    }

    // Save configuration
    async function saveConfiguration() {
        showNotification('Saving Tibber configuration...', 'info');
        
        // Get selected price levels
        const lowPriceLevels = [];
        document.querySelectorAll('.price-level-checkbox:checked').forEach(checkbox => {
            lowPriceLevels.push(checkbox.value);
        });
        
        const formData = {
            enabled: enableDynamicPricingToggle.checked,
            country: countrySelect.value,
            timezone: timezoneSelect.value,
            apiKey: apiKeyInput.value,
            priceThreshold: parseFloat(priceThresholdInput.value) || 0,
            minimumSoC: parseInt(minimumSoCInput.value),
            targetSoC: parseInt(targetSoCInput.value),
            scheduledCharging: scheduledChargingCheckbox.checked,
            chargingHours: getChargingPeriods(),
            useTibberLevels: useTibberLevelsCheckbox.checked,
            lowPriceLevels: lowPriceLevels
        };
        
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });
            
            if (!response.ok) {
                throw new Error('Failed to save Tibber configuration');
            }
            
            const data = await response.json();
            
            if (data.success) {
                config = data.config;
                
                // Update current timezone and currency if changed
                if (formData.timezone !== currentTimezone) {
                    currentTimezone = formData.timezone;
                    console.log('Timezone changed to:', currentTimezone);
                }
                
                showNotification('Tibber configuration saved successfully', 'success');
                
                // Automatically refresh pricing data if API key was provided
                if (formData.apiKey && formData.apiKey.trim() !== '' && !formData.apiKey.includes('...')) {
                    console.log('API key provided, automatically refreshing Tibber prices...');
                    setTimeout(() => refreshPrices(true), 1000);
                } else {
                    // Just reload pricing data to reflect timezone changes
                    await loadPricingData();
                }
            } else {
                throw new Error(data.error || 'Failed to save configuration');
            }
        } catch (error) {
            console.error('Error saving Tibber configuration:', error);
            showNotification('Error saving configuration: ' + error.message, 'danger');
        }
    }

    // Get charging periods from UI
    function getChargingPeriods() {
        const periods = [];
        const periodElements = chargingPeriods.querySelectorAll('.time-period');
        
        periodElements.forEach(element => {
            const start = element.querySelector('.period-start').value;
            const end = element.querySelector('.period-end').value;
            
            if (start && end) {
                periods.push({ start, end });
            }
        });
        
        return periods;
    }

    // Refresh Tibber prices
    async function refreshPrices(isAutomatic = false) {
        if (!isAutomatic) {
            refreshDataBtn.innerHTML = '<span class="loading"></span> Refreshing...';
            refreshDataBtn.disabled = true;
        }
        
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/update-prices', {
                method: 'POST'
            });
            
            if (!response.ok) {
                throw new Error('Failed to refresh Tibber prices');
            }
            
            const data = await response.json();
            
            if (data.success) {
                if (!isAutomatic) {
                    showNotification('Tibber price update completed successfully.', 'success');
                }
                
                await loadPricingData();
            } else {
                // Handle specific error cases
                if (data.needsApiKey) {
                    if (!isAutomatic) {
                        showNotification('⚠️ Tibber API token required for fetching real pricing data', 'warning');
                    }
                } else {
                    throw new Error(data.error || 'Failed to refresh prices');
                }
            }
        } catch (error) {
            console.error('Error refreshing Tibber prices:', error);
            if (!isAutomatic) {
                showNotification('Error refreshing prices: ' + error.message, 'danger');
            }
        } finally {
            if (!isAutomatic) {
                refreshDataBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh Prices';
                refreshDataBtn.disabled = false;
            }
        }
    }

    // Send grid charging command
    async function sendGridChargeCommand(enable) {
        const actionBtn = enable ? enableChargingBtn : disableChargingBtn;
        const originalText = actionBtn.innerHTML;
        
        actionBtn.innerHTML = '<span class="loading"></span> Sending...';
        actionBtn.disabled = true;
        
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    gridChargingOverride: enable
                })
            });
            
            if (!response.ok) {
                throw new Error('Failed to send Tibber grid charge command');
            }
            
            const data = await response.json();
            
            if (data.success) {
                showNotification(`Tibber grid charging ${enable ? 'enabled' : 'disabled'} successfully`, 'success');
                updateChargingStatus();
                loadActionsLog();
            } else {
                throw new Error(data.error || 'Failed to send grid charge command');
            }
        } catch (error) {
            console.error('Error sending Tibber grid charge command:', error);
            showNotification('Error sending command: ' + error.message, 'danger');
        } finally {
            actionBtn.innerHTML = originalText;
            actionBtn.disabled = false;
        }
    }

    // Load actions log
    async function loadActionsLog() {
        try {
            const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/actions-log?limit=5');
            
            if (!response.ok) {
                throw new Error('Failed to load Tibber actions log');
            }
            
            const data = await response.json();
            
            if (data.success && data.actions.length > 0) {
                let html = '';
                data.actions.forEach(action => {
                    const actionTime = new Date(action.timestamp);
                    const formattedTime = actionTime.toLocaleString('en-US', {
                        timeZone: currentTimezone,
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                    
                    html += `
                        <div style="margin-bottom: 10px; padding: 8px; background-color: var(--light); border-radius: 4px;">
                            <div style="font-size: 12px; color: var(--gray); margin-bottom: 4px;">${formattedTime}</div>
                            <div style="font-size: 14px;">${action.action}</div>
                        </div>
                    `;
                });
                actionsLog.innerHTML = html;
            } else {
                actionsLog.innerHTML = '<p>No recent Tibber actions recorded.</p>';
            }
        } catch (error) {
            console.error('Error loading Tibber actions log:', error);
            actionsLog.innerHTML = '<p>Error loading actions log.</p>';
        }
    }

    // Set up event listeners
    function setupEventListeners() {
        // Enable/disable Tibber dynamic pricing
        enableDynamicPricingToggle.addEventListener('change', function() {
            saveConfiguration();
        });
        
        // Save configuration button
        saveConfigBtn.addEventListener('click', function() {
            saveConfiguration();
        });
        
        // Refresh data button
        refreshDataBtn.addEventListener('click', function() {
            refreshPrices(false);
        });
        
        // Enable/disable charging buttons
        enableChargingBtn.addEventListener('click', function() {
            sendGridChargeCommand(true);
        });
        
        disableChargingBtn.addEventListener('click', function() {
            sendGridChargeCommand(false);
        });
        
        // Toggle scheduled charging options
        scheduledChargingCheckbox.addEventListener('change', function() {
            schedulingOptions.classList.toggle('hidden', !this.checked);
        });
        
        // Toggle Tibber levels vs manual threshold
        useTibberLevelsCheckbox.addEventListener('change', function() {
            const useLevels = this.checked;
            tibberLevelOptions.classList.toggle('hidden', !useLevels);
            manualThresholdOptions.classList.toggle('hidden', useLevels);
        });
        
        // Add time period button
        addPeriodBtn.addEventListener('click', function() {
            addTimePeriod();
        });
        
        // Set up automatic refresh every hour - only if API key is configured
        setInterval(() => {
            if (config && config.apiKey && config.apiKey.trim() !== '') {
                console.log('Automatic hourly Tibber price refresh...');
                refreshPrices(true);
            }
        }, 3600000);
    }

    // Make hideNotification available globally
    window.hideNotification = hideNotification;
});
</script>

<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>

</body>
</html>