<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
   <!-- Font Awesome for icons -->
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
   <!-- Chart.js for price charts -->
   <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
   
   <style>  
  body {
  font-family: 'Inter', sans-serif;
  background: var(--bg-color);
}
       
    :root {
        --primary-color: #DEAF0B;
            --primary: #DEAF0B;
            --primary-light: #6384ff;
            --primary-dark: #3a56b9;
            --secondary: #29b9a0;
            --secondary-light: #40d0b6;
            --secondary-dark: #1c9b84;
            --danger: #e74c3c;
            --success: #2ecc71;
            --warning: #f39c12;
            --dark: #343a40;
            --light: #f8f9fa;
            --gray: #6c757d;
            --background: #f5f7ff;
            --card-bg: #ffffff;
            --text: #333333;
            --border: #e0e0e0;
            --shadow: rgba(0, 0, 0, 0.1);
            --text-color: #2f3640;
        }
   
       body, html {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        height: 100%;
        
       }
        /* Sidebar styles */
        .sidebar {
            width: 280px;
            height: 100vh;
            background-color: white;
            border-right: 1px solid #e5e7eb;
            display: flex;
            flex-direction: column;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1000;
            transition: width 0.3s ease;
        }
       
               .logo-container {
                   padding: 1.5rem;
                   border-bottom: 1px solid #e5e7eb;
                   display: flex;
                   align-items: center;
                   gap: 0.75rem;
               }
       
               .logo-icon {
        width: 50px;
        height: 50px;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-weight: bold;
        font-size: 20px;
       }
       
       .logo-text {
        margin-left: 10px;
        font-weight: bold;
        color: var(--text-color);
        font-size: 18px;
       }
       
       .logo-text .highlight {
        color: var(--primary-color);
        margin-left: 10px;
       }
       
       
       nav {
        flex-grow: 1;
       }
       
       nav ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
       }
       nav li {
        padding: 15px 20px;
        display: flex;
        align-items: center;
        color: var(--text-color);
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 18px;
       }
       
       nav li a{
        text-decoration: none;
        color: #2f3640;
        font-weight: bold;
       }
       nav li:hover {
        background-color: var(--bg-color);
       }
       
       nav li i {
        margin-right: 15px;
        color: var(--icon-color);
        font-size: 24px;
       }
       
       .bottom-options {
        padding: 20px;
        border-top: 1px solid #dcdde1;
       }
       
       .toggle-sidebar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        cursor: pointer;
        font-size: 16px;
       }
       
       .toggle-text {
        margin-right: 10px;
       }
       
       .toggle-switch {
        width: 50px;
        height: 25px;
        background-color: #dcdde1;
        border-radius: 12.5px;
        position: relative;
        transition: background-color 0.3s;
       }
       .toggle-switch::before {
        content: '';
        position: absolute;
        width: 21px;
        height: 21px;
        border-radius: 50%;
        background-color: white;
        top: 2px;
        left: 2px;
        transition: transform 0.3s;
       }
       
       .toggle-switch.active {
        background-color: var(--primary-color);
       }
       
       .toggle-switch.active::before {
        transform: translateX(25px);
       }
       
       .sidebar.collapsed .logo-text,
       .sidebar.collapsed .search,
       .sidebar.collapsed nav li span,
       .sidebar.collapsed .toggle-text {
        display: none;
       }
       
       .sidebar.collapsed .logo {
        justify-content: center;
       }
       
       .sidebar.collapsed nav li {
        justify-content: center;
       }
       
       .sidebar.collapsed nav li i {
        margin-right: 0;
       }
               /* Main content styles */
               .main-content {
                   flex: 1;
                   margin-left: 280px;
                   padding: 2rem;
               }
       
               .content-header {
                   margin-bottom: 2rem;
               }
       
               .content-header h2 {
                   font-size: 1.875rem;
                   font-weight: 700;
                   color: #111827;
               }
       
               .metrics-grid {
                   display: grid;
                   grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                   gap: 1.5rem;
                   margin-bottom: 2rem;
               }
       
               .metric-card {
                   background: white;
                   border-radius: 12px;
                   padding: 1.5rem;
                   box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
               }
       
               .metric-title {
                   font-size: 0.875rem;
                   font-weight: 600;
                   color: #4b5563;
                   margin-bottom: 0.5rem;
               }
       
               .metric-value {
                   font-size: 1.5rem;
                   font-weight: 700;
                   margin-bottom: 0.25rem;
               }
       
               .metric-subtitle {
                   font-size: 0.875rem;
                   color: #6b7280;
               }
       
               .chart-container {
                   background: white;
                   border-radius: 12px;
                   padding: 1.5rem;
                   margin-bottom: 2rem;
                   box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
               }
       
               .chart-wrapper {
                   height: 400px;
                   margin-top: 1rem;
               }
       
               .period-buttons {
                   display: flex;
                   gap: 0.75rem;
                   margin-bottom: 1rem;
               }
       
               .period-btn {
                   padding: 0.5rem 1rem;
                   border: none;
                   background-color: #e5e7eb;
                   color: #4b5563;
                   border-radius: 6px;
                   cursor: pointer;
                   font-weight: 500;
                   transition: all 0.2s;
               }
       
               .period-btn:hover {
                   background-color: #d1d5db;
               }
       
               .period-btn.active {
                   background-color: #DEAF0B;
                   color: white;
               }
       
               /* Toggle styles */
               .toggle {
                   position: relative;
                   display: inline-block;
                   width: 44px;
                   height: 24px;
               }
       
               .toggle input {
                   opacity: 0;
                   width: 0;
                   height: 0;
               }
       
               .slider {
                   position: absolute;
                   cursor: pointer;
                   top: 0;
                   left: 0;
                   right: 0;
                   bottom: 0;
                   background-color: #e5e7eb;
                   transition: .4s;
                   border-radius: 34px;
               }
       
               .slider:before {
                   position: absolute;
                   content: "";
                   height: 16px;
                   width: 16px;
                   left: 4px;
                   bottom: 4px;
                   background-color: white;
                   transition: .4s;
                   border-radius: 50%;
               }
       
               input:checked + .slider {
                   background-color: #DEAF0B;
               }
       
               input:checked + .slider:before {
                   transform: translateX(20px);
               }
       
               /* Updated and new styles */
               .bottom-controls {
                   padding: 1.5rem;
                   border-top: 1px solid #e5e7eb;
               }
       
               .control-item {
                   display: flex;
                   justify-content: space-between;
                   align-items: center;
                   margin-bottom: 1rem;
               }
       
               .control-label {
                   font-size: 0.875rem;
                   color: #4b5563;
               }
       
               .toggle {
                   position: relative;
                   display: inline-block;
                   width: 44px;
                   height: 24px;
               }
       
               .toggle input {
                   opacity: 0;
                   width: 0;
                   height: 0;
               }
       
               .sidebar {
        width: 280px;
        background-color: white;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        transition: width 0.3s ease;
        z-index: 10;
       }
       
       .sidebar.collapsed {
        width: 80px;
       }
       
       .logo {
        display: flex;
        align-items: center;
        padding: 20px;
       }
       
       
               input:checked + .slider {
                   background-color: #DEAF0B;
               }
       
               input:checked + .slider:before {
                   transform: translateX(20px);
               }
       
               .total-emissions {
                   font-size: 1.25rem;
                   font-weight: 600;
                   margin-bottom: 1rem;
                   color: #374151;
               }
       
               .summary-grid {
                   display: grid;
                   grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                   gap: 1rem;
                   margin-bottom: 2rem;
               }
       
               .summary-item {
                   background-color: white;
                   border-radius: 8px;
                   padding: 1rem;
                   box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
               }
       
               .summary-label {
                   font-size: 0.875rem;
                   color: #6b7280;
                   display: block;
                   margin-bottom: 0.5rem;
               }
       
               .summary-value {
                   font-size: 1.25rem;
                   font-weight: 600;
               }
       
           
       
               /* Responsive styles */
               @media (max-width: 768px) {
                   .sidebar {
                       width: 100%;
                       height: auto;
                       position: static;
                       border-right: none;
                       border-bottom: 1px solid #e5e7eb;
                   }
       
                   .main-content {
                       margin-left: 0;
                   }
       
                   body.collapsed-sidebar .sidebar {
                       display: none;
                   }
       
                   body.collapsed-sidebar .main-content {
                       margin-left: 0;
                   }
       
                   .metrics-grid,
                   .summary-grid {
                       grid-template-columns: 1fr;
                   }
       
                   .period-buttons {
                       flex-wrap: wrap;
                   }
       
                   .period-btn {
                       flex: 1 0 calc(50% - 0.375rem);
                       margin-bottom: 0.75rem;
                   }
               }
    
    /* loading css */
    
    .loading-overlay {
     position: fixed;
     top: 0;
     left: 0;
     width: 100%;
     height: 100%;
     background-color: #f8f9fa;
     display: flex;
     justify-content: center;
     align-items: center;
     z-index: 9999;
    }
    
    .loading-spinner {
     width: 50px;
     height: 50px;
     border: 5px solid #e0e0e0;
     border-top: 5px solid #3498db;
     border-radius: 50%;
     animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
     0% { transform: rotate(0deg); }
     100% { transform: rotate(360deg); }
    }
    
   
    
   
    
    /* Dark mode styles */
    body.dark-mode {
        background-color: rgba(24, 27, 31, 1);
     color: #f5f6fa;
    }
    
    .dark-mode .main-content{
        background-color: rgba(24, 27, 31, 1);
        color: #f5f6fa;
    }
    
    .dark-mode .sidebar {
        background-color: rgba(24, 27, 31, 1);
    }
    
    .dark-mode .sidebar .logo-icon {
     color: #2f3640;
    }
    
    .dark-mode .sidebar .logo-text {
     color: #f5f6fa;
    }
    
    .dark-mode .sidebar nav li {
     color: #f5f6fa;
    }
    
    .dark-mode .sidebar nav li:hover {
     background-color: #383838;
    }
    
    .dark-mode .sidebar nav li a {
     color: #f5f6fa;
    }
    
    .dark-mode .sidebar nav li i {
     color: #dcdde1;
    }
    
    .dark-mode .toggle-sidebar,
    .dark-mode .toggle-dark-mode {
     color: #f5f6fa;
    }
    
    .dark-mode .toggle-switch {
        background-color: var(--primary-color);
    }
    
    .dark-mode .toggle-switch.active {
     background-color: var(--primary-color);
    }
    
    .dark-mode header {
        background-color: rgb(17, 18, 23);
    }
    
    .dark-mode .content-card {
        background-color: rgba(24, 27, 31, 1);
     color: #fff;
    }
    
    
    .dark-mode .loading-overlay{
        background-color: rgba(24, 27, 31, 1);
    }
    
    /* Mobile Sidebar Improvements */
    @media (max-width: 768px) {
        /* Sidebar base styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: 280px;
            transform: translateX(-100%);
            transition: transform 0.3s ease-in-out;
            z-index: 1000;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
            box-shadow: none;
        }
    
        .sidebar.active {
            transform: translateX(0);
            box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
        }
    
        /* Improved hamburger button */
        .mobile-toggle {
            display: block;
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 1001;
            background: none;
            border: none;
            cursor: pointer;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: white;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            padding: 8px;
        }
    
        .mobile-toggle span {
            display: block;
            width: 24px;
            height: 2px;
            background-color: var(--text-color);
            margin: 5px auto;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }
    
        .mobile-toggle.active span:nth-child(1) {
            transform: translateY(7px) rotate(45deg);
        }
    
        .mobile-toggle.active span:nth-child(2) {
            opacity: 0;
        }
    
        .mobile-toggle.active span:nth-child(3) {
            transform: translateY(-7px) rotate(-45deg);
        }
    
        /* Improved nav items */
        .sidebar nav ul {
            padding: 1rem 0;
        }
    
        .sidebar nav li {
            padding: 0.875rem 1.5rem;
            margin: 0.25rem 1rem;
            border-radius: 8px;
            transition: background-color 0.2s ease;
        }
    
        .sidebar nav li a {
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 1rem;
            color: var(--text-color);
        }
    
        .sidebar nav li i {
            font-size: 1.25rem;
            min-width: 24px;
            text-align: center;
        }
    
        .sidebar nav li:active {
            background-color: rgba(0, 0, 0, 0.05);
        }
    
        /* Improved overlay */
        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(2px);
            z-index: 999;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
    
        .sidebar-overlay.active {
            display: block;
            opacity: 1;
        }
    
        /* Dark mode adjustments */
        .dark-mode .mobile-toggle {
            background-color: rgba(255, 255, 255, 0.1);
        }
    
        .dark-mode .mobile-toggle span {
            background-color: #f5f6fa;
        }
    
        .dark-mode .sidebar nav li:active {
            background-color: rgba(255, 255, 255, 0.05);
        }
    }
    
    /* Ensure main content adjusts properly */
    @media (max-width: 768px) {
        .main-content {
            margin-left: 0;
            padding-top: 4.5rem;
            transition: margin-left 0.3s ease;
        }
    
        body.sidebar-open .main-content {
            filter: blur(2px);
            pointer-events: none;
        }
    }
    
    
      /* Main content styling */
    .main-content {
      flex: 1;
      margin-left: 280px;
      padding: 2rem;
      color: var(--text-color);
      transition: margin-left 0.3s ease;
    }
    
    
    .container {
        margin-left: 280px;
        padding: 0 var(--spacer);
        margin: 0 auto;
    }

    .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border);
        }

        .page-title {
            font-size: 24px;
            font-weight: 600;
            color: #000;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .page-title i {
            color: var(--primary);
        }

        .card {
            background: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 4px 8px var(--shadow);
            margin-bottom: 20px;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px var(--shadow);
        }

        .card-header {
            padding: 15px 20px;
            background: var(--primary);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
        }

        .card-body {
            padding: 20px;
        }

        .grid-2 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .grid-3 {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
        }

        .pricing-chart-container {
            height: 300px;
            position: relative;
        }

        .pricing-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .stat-card {
            background: var(--light);
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            box-shadow: 0 2px 4px var(--shadow);
        }

        .stat-value {
            font-size: 20px;
            font-weight: 700;
            margin: 8px 0;
            color: var(--primary);
        }

        .stat-label {
            font-size: 14px;
            color: var(--gray);
        }

        /* Form controls */
        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border);
            border-radius: 4px;
            font-size: 16px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(76, 111, 229, 0.2);
        }

        .form-select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border);
            border-radius: 4px;
            background-color: white;
            font-size: 16px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-select:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(76, 111, 229, 0.2);
        }

        .form-check {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .form-check-input {
            margin-right: 10px;
            width: 18px;
            height: 18px;
        }

        .time-period {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
            background: var(--light);
            padding: 10px;
            border-radius: 4px;
        }

        .time-input {
            width: 100px;
        }

        .add-time-btn {
            background: var(--secondary);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .delete-time-btn {
            background: var(--danger);
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Buttons */
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

        .btn-secondary {
            background-color: var(--secondary);
            color: white;
        }

        .btn-secondary:hover {
            background-color: var(--secondary-dark);
        }

        .btn-danger {
            background-color: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background-color: #c0392b;
        }

        .btn-success {
            background-color: var(--success);
            color: white;
        }

        .btn-success:hover {
            background-color: #27ae60;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 14px;
        }

        .btn-group {
            display: flex;
            gap: 10px;
        }

        /* Toggle switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color:#1c9b84;
        }

        input:checked + .toggle-slider:before {
            transform: translateX(26px);
        }

        .toggle-label {
            margin-left: 60px;
        }

        /* Alert messages */
        .alert {
            padding: 12px 20px;
            border-radius: 4px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-warning {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }

        .alert-info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        /* Badge for status */
        .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 50px;
            font-size: 12px;
            font-weight: 600;
        }

        .badge-success {
            background-color: var(--success);
            color: white;
        }

        .badge-danger {
            background-color: var(--danger);
            color: white;
        }

        .badge-warning {
            background-color: var(--warning);
            color: white;
        }

        /* Loading indicator */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Hide elements */
        .hidden {
            display: none !important;
        }

        /* Price indicators */
        .price-indicator {
            display: flex;
            align-items: center;
            gap: 5px;
            margin-top: 5px;
        }

        .price-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .price-low {
            background-color: var(--success);
        }

        .price-medium {
            background-color: var(--warning);
        }

        .price-high {
            background-color: var(--danger);
        }

        .price-now {
            background-color: var(--primary);
        }

        /* Best times list */
        .best-times-list {
            margin-top: 15px;
        }

        .best-time-item {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border-bottom: 1px solid var(--border);
        }

        .best-time-item:last-child {
            border-bottom: none;
        }

        .time-slot {
            font-weight: 600;
        }

        .price-value {
            color: var(--primary);
            font-weight: 600;
        }

        /* Responsive styles */
        @media (max-width: 920px) {
            .grid-2, .grid-3 {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 600px) {
            .pricing-stats {
                grid-template-columns: 1fr 1fr;
            }
            
            .card-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }

        /* Tooltip styles */
        .tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
        }

        .tooltip .tooltip-text {
            visibility: hidden;
            width: 200px;
            background-color: var(--dark);
            color: white;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 14px;
        }

        .tooltip:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
    /* Enhanced Responsive & Dark Mode Styles for Carbonoz SolarAutopilot */

/* Main Content Responsive Adjustments */
.main-content {
    transition: margin-left 0.3s ease, background-color 0.3s ease, color 0.3s ease;
    padding: 2rem;
    overflow-x: hidden;
}

@media (max-width: 1200px) {
    .main-content {
        padding: 1.5rem;
    }
    
    .grid-2, .grid-3 {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .card {
        margin-bottom: 1rem;
    }
}

@media (max-width: 768px) {
    .main-content {
        padding: 1rem;
        margin-left: 0;
        padding-top: 4.5rem;
    }
    
    .page-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }
    
    .container {
        padding: 0 10px;
    }
    
    .card-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
        padding: 15px;
    }
    
    .pricing-stats {
        grid-template-columns: 1fr 1fr;
        gap: 10px;
    }
    
    .btn-group {
        flex-direction: column;
        gap: 8px;
        width: 100%;
    }
    
    .btn {
        width: 100%;
    }
    
    .pricing-chart-container {
        height: 250px;
    }
    
    .form-group {
        margin-bottom: 12px;
    }
}

@media (max-width: 480px) {
    .main-content {
        padding: 0.75rem;
    }
    
    .pricing-stats {
        grid-template-columns: 1fr;
    }
    
    .page-title {
        font-size: 20px;
    }
    
    .card-title {
        font-size: 16px;
    }
    
    .stat-value {
        font-size: 18px;
    }
    
    .time-period {
        flex-direction: column;
        gap: 10px;
        padding: 15px;
    }
    
    .form-control, .form-select {
        font-size: 14px;
        padding: 8px;
    }
}

/* Fix for chart responsiveness */
.pricing-chart-container {
    position: relative;
    width: 100%;
}

/* Price indicators responsiveness */
@media (max-width: 768px) {
    .price-indicator {
        flex-direction: column;
        align-items: center;
        gap: 2px;
        font-size: 12px;
    }
}

/* Improved Card Transitions */
.card {
    transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
}

/* Toggle Switch Improvements */
.toggle-switch {
    min-width: 50px;
}

.form-check {
    flex-wrap: wrap;
}

/* Time Period Inputs Responsiveness */
.time-period {
    flex-wrap: wrap;
    gap: 10px;
}

.time-input {
    min-width: 80px;
}

/* Dark Mode Styles */
body.dark-mode .main-content {
    background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
}

body.dark-mode .card {
    background-color: rgba(30, 33, 43, 1);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.25);
    border: 1px solid rgba(45, 50, 60, 1);
}

body.dark-mode .card-header {
    background: var(--primary);
}

body.dark-mode .card-title {
    color: #f5f6fa;
}

body.dark-mode .page-title {
    color: #f5f6fa;
}

body.dark-mode .page-header {
    border-bottom: 1px solid rgba(55, 60, 75, 1);
}

body.dark-mode .form-control, 
body.dark-mode .form-select {
    background-color: rgba(38, 41, 51, 1);
    border-color: rgba(55, 60, 75, 1);
    color: #f5f6fa;
}

body.dark-mode .form-label,
body.dark-mode .form-check-label,
body.dark-mode .toggle-label {
    color: #f5f6fa;
}

body.dark-mode .stat-card {
    background-color: rgba(38, 41, 51, 1);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

body.dark-mode .stat-label {
    color: #bdc3c7;
}

body.dark-mode .stat-value {
    color: var(--primary);
}

body.dark-mode .btn-primary {
    background-color: var(--primary);
}

body.dark-mode .btn-primary:hover {
    background-color: var(--primary-dark);
}

body.dark-mode .alert-info {
    background-color: rgba(41, 58, 74, 1);
    color: #a8d7fd;
    border-color: rgba(70, 90, 120, 1);
}

body.dark-mode .alert-success {
    background-color: rgba(39, 70, 50, 1);
    color: #a2f0bc;
    border-color: rgba(60, 105, 75, 1);
}

body.dark-mode .alert-warning {
    background-color: rgba(77, 58, 25, 1);
    color: #ffd699;
    border-color: rgba(102, 81, 40, 1);
}

body.dark-mode .alert-danger {
    background-color: rgba(73, 40, 40, 1);
    color: #ffb8b8;
    border-color: rgba(105, 60, 60, 1);
}

body.dark-mode .time-period {
    background-color: rgba(38, 41, 51, 1);
}

body.dark-mode .best-time-item {
    border-bottom: 1px solid rgba(55, 60, 75, 1);
}

body.dark-mode .best-time-item:last-child {
    border-bottom: none;
}

body.dark-mode .tooltip .tooltip-text {
    background-color: rgba(60, 65, 80, 1);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

/* Chart colors for dark mode */
body.dark-mode .chart-container {
    background-color: rgba(30, 33, 43, 1);
}

/* Fix for toggle switches in dark mode */
body.dark-mode .toggle-slider {
    background-color: rgba(70, 75, 90, 1);
}

body.dark-mode input:checked + .toggle-slider {
    background-color: var(--secondary);
}

/* Notification styling in dark mode */
body.dark-mode #notification {
    background-color: rgba(35, 40, 50, 1);
    border: 1px solid rgba(55, 60, 75, 1);
}

/* Improved focus states for dark mode */
body.dark-mode .form-control:focus,
body.dark-mode .form-select:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.3);
    outline: none;
}

/* Media query for very small devices */
@media (max-width: 360px) {
    .main-content {
        padding: 0.5rem;
    }
    
    .card {
        border-radius: 6px;
    }
    
    .card-body {
        padding: 15px 10px;
    }
    
    .stat-card {
        padding: 10px;
    }
    
    .best-time-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }
    
    .pricing-chart-container {
        height: 200px;
    }
}
    </style>
</head>
<body>
      <!-- Add hamburger menu button -->
      <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>

    
          <%- include('partials/sidebar') %>

          <div class="main-content">
            <div class="container">
                <div class="page-header">
                    <h1 class="page-title"><i class="fas fa-bolt"></i> Dynamic Electricity Pricing</h1>
                    <div class="btn-group" id="headerButtons">
                        <button class="btn btn-primary" id="refreshDataBtn">
                            <i class="fas fa-sync-alt"></i> Refresh Prices
                        </button>
                    </div>
                </div>
        
                <div class="alert alert-info hidden" id="notification">
                    <i class="fas fa-info-circle"></i>
                    <span id="notificationMessage"></span>
                    <button class="btn btn-sm" style="margin-left: auto" onclick="hideNotification()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
        
                <div class="grid-2">
                    <!-- Current Status Card -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Current Status</h2>
                            <div class="form-check">
                                <label class="toggle-switch">
                                    <input type="checkbox" id="enableDynamicPricing">
                                    <span class="toggle-slider"></span>
                                </label>
                                <span class="toggle-label">Enable Dynamic Pricing</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="statusContent">
                                <p id="loadingStatus">Loading dynamic pricing status...</p>
                                <div id="statusDetails" class="hidden">
                                    <div class="pricing-stats">
                                        <div class="stat-card">
                                            <div class="stat-label">Current Price</div>
                                            <div class="stat-value" id="currentPrice">0.00</div>
                                            <small>€/kWh</small>
                                        </div>
                                        <div class="stat-card">
                                            <div class="stat-label">Average Price</div>
                                            <div class="stat-value" id="avgPrice">0.00</div>
                                            <small>€/kWh</small>
                                        </div>
                                        <div class="stat-card">
                                            <div class="stat-label">Battery SoC</div>
                                            <div class="stat-value" id="batterySoC">0</div>
                                            <small>%</small>
                                        </div>
                                        <div class="stat-card">
                                            <div class="stat-label">Charging</div>
                                            <div class="stat-value" id="chargingStatus">No</div>
                                            <small id="chargingReason">N/A</small>
                                        </div>
                                    </div>
        
                                    <div class="form-group" style="margin-top: 20px;">
                                        <label class="form-label">Current Recommendation:</label>
                                        <div class="alert" id="recommendationAlert">
                                            <i class="fas fa-lightbulb"></i>
                                            <span id="recommendationText">Calculating recommendation...</span>
                                        </div>
                                    </div>
        
                                    <div class="btn-group" style="margin-top: 20px;">
                                        <button class="btn btn-success" id="enableChargingBtn">
                                            <i class="fas fa-charging-station"></i> Enable Grid Charging
                                        </button>
                                        <button class="btn btn-danger" id="disableChargingBtn">
                                            <i class="fas fa-power-off"></i> Disable Grid Charging
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
        
                    <!-- Configuration Card -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Configuration</h2>
                            <button class="btn btn-sm btn-secondary" id="saveConfigBtn">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                        </div>
                        <div class="card-body">
                            <form id="configForm">
                                <div class="grid-2">
                                    <div class="form-group">
                                        <label class="form-label">Country</label>
                                        <select class="form-select" id="country">
                                            <option value="DE">Germany</option>
                                            <option value="AT">Austria</option>
                                            <option value="FR">France</option>
                                            <option value="ES">Spain</option>
                                            <option value="IT">Italy</option>
                                            <option value="UK">United Kingdom</option>
                                            <option value="NL">Netherlands</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Timezone</label>
                                        <select class="form-select" id="timezone">
                                            <option value="Europe/Berlin">Europe/Berlin</option>
                                            <option value="Europe/London">Europe/London</option>
                                            <option value="Europe/Paris">Europe/Paris</option>
                                            <option value="Europe/Madrid">Europe/Madrid</option>
                                            <option value="Europe/Rome">Europe/Rome</option>
                                            <option value="Europe/Vienna">Europe/Vienna</option>
                                            <option value="Europe/Amsterdam">Europe/Amsterdam</option>
                                        </select>
                                    </div>
                                </div>
        
                                <div class="form-group">
                                    <label class="form-label">API Key (for ENTSO-E API)</label>
                                    <div class="tooltip">
                                        <i class="fas fa-info-circle"></i>
                                        <span class="tooltip-text">Required for ENTSO-E markets (all countries except Germany and Austria).</span>
                                    </div>
                                    <input type="password" class="form-control" id="apiKey" placeholder="Enter API key for ENTSO-E">
                                </div>
        
                                <div class="grid-2">
                                    <div class="form-group">
                                        <label class="form-label">Price Threshold (€/kWh)</label>
                                        <div class="tooltip">
                                            <i class="fas fa-info-circle"></i>
                                            <span class="tooltip-text">Only charge when price is below this threshold. Set to 0 to use automatic calculation (25% lowest prices).</span>
                                        </div>
                                        <input type="number" class="form-control" id="priceThreshold" min="0" max="1" step="0.01" placeholder="e.g. 0.10">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Target SoC (%)</label>
                                        <div class="tooltip">
                                            <i class="fas fa-info-circle"></i>
                                            <span class="tooltip-text">Stop charging when battery reaches this level.</span>
                                        </div>
                                        <input type="number" class="form-control" id="targetSoC" min="0" max="100" step="1" placeholder="e.g. 80">
                                    </div>
                                </div>
        
                                <div class="grid-2">
                                    <div class="form-group">
                                        <label class="form-label">Minimum SoC (%)</label>
                                        <div class="tooltip">
                                            <i class="fas fa-info-circle"></i>
                                            <span class="tooltip-text">Only use dynamic pricing when battery is above this level.</span>
                                        </div>
                                        <input type="number" class="form-control" id="minimumSoC" min="0" max="100" step="1" placeholder="e.g. 20">
                                    </div>
                                </div>
        
                                <div class="form-group">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="scheduledCharging">
                                        <label class="form-check-label">Enable Scheduled Charging</label>
                                    </div>
                                </div>
        
                                <div id="schedulingOptions" class="hidden">
                                    <label class="form-label">Charging Time Periods</label>
                                    <div id="chargingPeriods">
                                        <!-- Time periods will be dynamically added here -->
                                    </div>
                                    <button type="button" class="add-time-btn" id="addPeriodBtn">
                                        <i class="fas fa-plus"></i> Add Time Period
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
        
                <!-- Pricing Chart Card -->
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">Electricity Prices (24 Hours)</h2>
                        <span id="lastUpdateTime">Last updated: Never</span>
                    </div>
                    <div class="card-body">
                        <div class="pricing-chart-container">
                            <canvas id="pricingChart"></canvas>
                        </div>
                        <div style="display: flex; justify-content: center; gap: 20px; margin-top: 15px;">
                            <div class="price-indicator">
                                <div class="price-dot price-low"></div>
                                <span>Low Price</span>
                            </div>
                            <div class="price-indicator">
                                <div class="price-dot price-medium"></div>
                                <span>Medium Price</span>
                            </div>
                            <div class="price-indicator">
                                <div class="price-dot price-high"></div>
                                <span>High Price</span>
                            </div>
                            <div class="price-indicator">
                                <div class="price-dot price-now"></div>
                                <span>Current Hour</span>
                            </div>
                        </div>
                    </div>
                </div>
        
                <div class="grid-2">
                    <!-- Best Charging Times Card -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Best Charging Times</h2>
                        </div>
                        <div class="card-body">
                            <p>Based on current price data, these are the most economical times to charge your battery:</p>
                            <div class="best-times-list" id="bestTimesList">
                                <p>Loading best charging times...</p>
                            </div>
                        </div>
                    </div>
        
                    <!-- Automated Actions Card -->
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Recent Actions</h2>
                        </div>
                        <div class="card-body">
                            <p>List of recent automated actions taken by the dynamic pricing system:</p>
                            <div id="actionsLog">
                                <p>No recent actions recorded.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
           
                   
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Initialize variables
                let pricingData = [];
                let lowPricePeriods = [];
                let config = null;
                let pricingChart = null;
                let isLoading = false;
    
                // Initialize elements
                const enableDynamicPricingToggle = document.getElementById('enableDynamicPricing');
                const saveConfigBtn = document.getElementById('saveConfigBtn');
                const refreshDataBtn = document.getElementById('refreshDataBtn');
                const enableChargingBtn = document.getElementById('enableChargingBtn');
                const disableChargingBtn = document.getElementById('disableChargingBtn');
                const addPeriodBtn = document.getElementById('addPeriodBtn');
                const scheduledChargingCheckbox = document.getElementById('scheduledCharging');
                const schedulingOptions = document.getElementById('schedulingOptions');
                const chargingPeriods = document.getElementById('chargingPeriods');
                const notification = document.getElementById('notification');
                const notificationMessage = document.getElementById('notificationMessage');
                const statusContent = document.getElementById('statusContent');
                const loadingStatus = document.getElementById('loadingStatus');
                const statusDetails = document.getElementById('statusDetails');
                const currentPrice = document.getElementById('currentPrice');
                const avgPrice = document.getElementById('avgPrice');
                const batterySoC = document.getElementById('batterySoC');
                const chargingStatus = document.getElementById('chargingStatus');
                const chargingReason = document.getElementById('chargingReason');
                const recommendationAlert = document.getElementById('recommendationAlert');
                const recommendationText = document.getElementById('recommendationText');
                const lastUpdateTime = document.getElementById('lastUpdateTime');
                const bestTimesList = document.getElementById('bestTimesList');
                const actionsLog = document.getElementById('actionsLog');
    
                // Form elements
                const countrySelect = document.getElementById('country');
                const timezoneSelect = document.getElementById('timezone');
                const apiKeyInput = document.getElementById('apiKey');
                const priceThresholdInput = document.getElementById('priceThreshold');
                const targetSoCInput = document.getElementById('targetSoC');
                const minimumSoCInput = document.getElementById('minimumSoC');
    
                // Initialize the page
                init();
    
                // Main initialization function
                async function init() {
                    // Load configuration
                    await loadConfig();
                    
                    // Load pricing data
                    await loadPricingData();
                    
                    // Initialize chart
                    initializeChart();
                    
                    // Update UI with system state
                    updateSystemState();
                    
                    // Set up event listeners
                    setupEventListeners();
                    
                    // Set up periodic refreshes
                    setInterval(updateSystemState, 60000); // Update system state every minute
                    setInterval(loadPricingData, 300000); // Refresh pricing data every 5 minutes
                }
    
                // Load configuration from API
                async function loadConfig() {
                    showNotification('Loading configuration...', 'info');
                    
                    try {
                        const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings');
                        
                        if (!response.ok) {
                            throw new Error('Failed to load configuration');
                        }
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            config = data.config;
                            updateConfigUI();
                            showNotification('Configuration loaded successfully', 'success');
                        } else {
                            throw new Error(data.error || 'Failed to load configuration');
                        }
                    } catch (error) {
                        console.error('Error loading configuration:', error);
                        showNotification('Error loading configuration: ' + error.message, 'danger');
                    }
                }
    
                // Update UI with configuration
                function updateConfigUI() {
                    if (!config) return;
                    
                    // Update toggle state
                    enableDynamicPricingToggle.checked = config.enabled;
                    
                    // Update form fields
                    countrySelect.value = config.country || 'DE';
                    timezoneSelect.value = config.timezone || 'Europe/Berlin';
                    apiKeyInput.value = config.apiKey || '';
                    priceThresholdInput.value = config.priceThreshold || 0.10;
                    targetSoCInput.value = config.targetSoC || 80;
                    minimumSoCInput.value = config.minimumSoC || 20;
                    scheduledChargingCheckbox.checked = config.scheduledCharging || false;
                    
                    // Show/hide scheduling options
                    schedulingOptions.classList.toggle('hidden', !config.scheduledCharging);
                    
                    // Render charging periods
                    renderChargingPeriods();
                }
    
                // Render charging time periods UI
                function renderChargingPeriods() {
                    chargingPeriods.innerHTML = '';
                    
                    if (!config || !config.chargingHours || !Array.isArray(config.chargingHours)) {
                        return;
                    }
                    
                    if (config.chargingHours.length === 0) {
                        // Add a default period if none exist
                        addTimePeriod('22:00', '06:00');
                    } else {
                        // Render existing periods
                        config.chargingHours.forEach(period => {
                            addTimePeriod(period.start, period.end);
                        });
                    }
                }
    
                // Add time period UI element
                function addTimePeriod(start = '22:00', end = '06:00') {
                    const periodElement = document.createElement('div');
                    periodElement.className = 'time-period';
                    periodElement.innerHTML = `
                        <label>From</label>
                        <input type="time" class="form-control time-input period-start" value="${start}">
                        <label>To</label>
                        <input type="time" class="form-control time-input period-end" value="${end}">
                        <button type="button" class="delete-time-btn"><i class="fas fa-trash"></i></button>
                    `;
                    
                    // Add delete button functionality
                    const deleteBtn = periodElement.querySelector('.delete-time-btn');
                    deleteBtn.addEventListener('click', function() {
                        periodElement.remove();
                    });
                    
                    chargingPeriods.appendChild(periodElement);
                }
    
                // Load pricing data from API
                async function loadPricingData() {
                    if (isLoading) return;
                    isLoading = true;
                    
                    try {
                        const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/pricing-data');
                        
                        if (!response.ok) {
                            throw new Error('Failed to load pricing data');
                        }
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            pricingData = data.pricingData || [];
                            lowPricePeriods = data.lowPricePeriods || [];
                            
                            if (data.lastUpdate) {
                                lastUpdateTime.textContent = 'Last updated: ' + new Date(data.lastUpdate).toLocaleString();
                            }
                            
                            updatePricingDisplay();
                            updateBestTimesList();
                        } else {
                            throw new Error(data.error || 'Failed to load pricing data');
                        }
                    } catch (error) {
                        console.error('Error loading pricing data:', error);
                        showNotification('Error loading pricing data: ' + error.message, 'danger');
                    } finally {
                        isLoading = false;
                    }
                }
    
                // Initialize Chart.js chart
                function initializeChart() {
                    const ctx = document.getElementById('pricingChart').getContext('2d');
                    
                    pricingChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: [],
                            datasets: [{
                                label: 'Electricity Price (€/kWh)',
                                data: [],
                                backgroundColor: [],
                                borderColor: [],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            return `${context.parsed.y.toFixed(4)} €/kWh`;
                                        }
                                    }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Price (€/kWh)'
                                    }
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Time'
                                    }
                                }
                            }
                        }
                    });
                }
    
                // Update pricing chart with current data
                function updatePricingDisplay() {
                    if (!pricingChart || !pricingData || pricingData.length === 0) return;
                    
                    // Get next 24 hours of prices
                    const now = new Date();
                    const next24Hours = pricingData.filter(p => {
                        const priceTime = new Date(p.timestamp);
                        return priceTime >= now || 
                               (priceTime.getDate() === now.getDate() && 
                                priceTime.getHours() === now.getHours());
                    }).slice(0, 24);
                    
                    if (next24Hours.length === 0) return;
                    
                    // Calculate price thresholds for coloring
                    const prices = next24Hours.map(p => p.price);
                    const minPrice = Math.min(...prices);
                    const maxPrice = Math.max(...prices);
                    const priceRange = maxPrice - minPrice;
                    const lowThreshold = minPrice + (priceRange * 0.33);
                    const highThreshold = minPrice + (priceRange * 0.66);
                    
                    // Update chart data
                    const labels = next24Hours.map(p => {
                        const date = new Date(p.timestamp);
                        return date.getHours() + ':00';
                    });
                    
                    const data = next24Hours.map(p => p.price);
                    
                    const backgroundColor = next24Hours.map(p => {
                        const price = p.price;
                        const date = new Date(p.timestamp);
                        const currentHour = now.getHours();
                        
                        // Highlight current hour
                        if (date.getHours() === currentHour && 
                            date.getDate() === now.getDate()) {
                            return 'rgba(76, 111, 229, 0.7)'; // Primary color
                        }
                        
                        // Color based on price thresholds
                        if (price <= lowThreshold) {
                            return 'rgba(46, 204, 113, 0.7)'; // Green for low prices
                        } else if (price <= highThreshold) {
                            return 'rgba(243, 156, 18, 0.7)'; // Orange for medium prices
                        } else {
                            return 'rgba(231, 76, 60, 0.7)'; // Red for high prices
                        }
                    });
                    
                    const borderColor = backgroundColor.map(color => color.replace('0.7', '1'));
                    
                    // Update chart
                    pricingChart.data.labels = labels;
                    pricingChart.data.datasets[0].data = data;
                    pricingChart.data.datasets[0].backgroundColor = backgroundColor;
                    pricingChart.data.datasets[0].borderColor = borderColor;
                    pricingChart.update();
                    
                    // Update current price display
                    const currentHourPrice = next24Hours.find(p => {
                        const date = new Date(p.timestamp);
                        return date.getHours() === now.getHours() && 
                               date.getDate() === now.getDate();
                    });
                    
                    if (currentHourPrice) {
                        currentPrice.textContent = currentHourPrice.price.toFixed(4);
                    }
                    
                    // Update average price
                    const average = prices.reduce((acc, price) => acc + price, 0) / prices.length;
                    avgPrice.textContent = average.toFixed(4);
                }
    
                // Update best charging times list
                function updateBestTimesList() {
                    if (!pricingData || pricingData.length === 0) {
                        bestTimesList.innerHTML = '<p>No pricing data available</p>';
                        return;
                    }
                    
                    // Sort prices from lowest to highest
                    const sortedPrices = [...pricingData].sort((a, b) => a.price - b.price);
                    
                    // Take top 5 best times
                    const bestTimes = sortedPrices.slice(0, 5);
                    
                    if (bestTimes.length === 0) {
                        bestTimesList.innerHTML = '<p>No pricing data available</p>';
                        return;
                    }
                    
                    // Build the list
                    let html = '';
                    bestTimes.forEach((timeSlot, index) => {
                        const date = new Date(timeSlot.timestamp);
                        const formattedTime = date.toLocaleTimeString([], {
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                        const formattedDate = date.toLocaleDateString([], {
                            month: 'short',
                            day: 'numeric'
                        });
                        
                        html += `
                            <div class="best-time-item">
                                <div>
                                    <span class="time-slot">${formattedTime}</span>
                                    <small> ${formattedDate}</small>
                                </div>
                                <div class="price-value">${timeSlot.price.toFixed(4)} €/kWh</div>
                            </div>
                        `;
                    });
                    
                    bestTimesList.innerHTML = html;
                }
    
                // Update system state display
                async function updateSystemState() {
                    try {
                        // Get battery state from API
                        const response = await fetch('<%= ingress_path %>/api/system-state');
                        
                        if (!response.ok) {
                            throw new Error('Failed to load system state');
                        }
                        
                        const data = await response.json();
                        const systemState = data.current_state;
                        
                        // Update battery SoC display
                        if (systemState && systemState.battery_soc !== undefined) {
                            batterySoC.textContent = Math.round(systemState.battery_soc);
                        }
                        
                        // Determine charging status and recommendation
                        updateChargingStatus();
                        updateRecommendation(systemState);
                        
                        // Show status details
                        loadingStatus.classList.add('hidden');
                        statusDetails.classList.remove('hidden');
                    } catch (error) {
                        console.error('Error updating system state:', error);
                    }
                }
    
                // Update charging status display
                function updateChargingStatus() {
                    // This would ideally get the actual grid charging status from the backend
                    // For now, this is just a placeholder that randomly determines status
                    const charging = Math.random() > 0.5;
                    
                    if (charging) {
                        chargingStatus.textContent = 'Yes';
                        chargingStatus.style.color = 'var(--success)';
                        chargingReason.textContent = 'Low electricity price';
                    } else {
                        chargingStatus.textContent = 'No';
                        chargingStatus.style.color = 'var(--danger)';
                        chargingReason.textContent = 'High electricity price';
                    }
                }
    
                // Update recommendation alert
                function updateRecommendation(systemState) {
                    if (!config || !systemState) return;
                    
                    const batterySoCValue = systemState.battery_soc || 0;
                    
                    // Calculate if now is a good time to charge
                    const now = new Date();
                    const currentHour = now.getHours();
                    
                    const currentHourPrice = pricingData.find(p => {
                        const date = new Date(p.timestamp);
                        return date.getHours() === currentHour && 
                               date.getDate() === now.getDate();
                    });
                    
                    if (!currentHourPrice) {
                        recommendationAlert.className = 'alert alert-warning';
                        recommendationText.innerHTML = 'Cannot determine recommendation - no price data for current hour';
                        return;
                    }
                    
                    const isLowPrice = lowPricePeriods.some(period => {
                        const periodStart = new Date(period.start);
                        const periodEnd = new Date(period.end);
                        return now >= periodStart && now < periodEnd;
                    });
                    
                    // Battery is full
                    if (batterySoCValue >= config.targetSoC) {
                        recommendationAlert.className = 'alert alert-success';
                        recommendationText.innerHTML = `
                            <strong>Keep Grid Charging OFF</strong><br>
                            Battery SoC (${Math.round(batterySoCValue)}%) has reached target (${config.targetSoC}%)
                        `;
                        return;
                    }
                    
                    // Battery is very low
                    if (batterySoCValue < config.minimumSoC) {
                        recommendationAlert.className = 'alert alert-danger';
                        recommendationText.innerHTML = `
                            <strong>Turn Grid Charging ON</strong><br>
                            Battery SoC (${Math.round(batterySoCValue)}%) is below minimum (${config.minimumSoC}%)
                        `;
                        return;
                    }
                    
                    // Check if price is low
                    if (isLowPrice) {
                        recommendationAlert.className = 'alert alert-success';
                        recommendationText.innerHTML = `
                            <strong>Turn Grid Charging ON</strong><br>
                            Current price (${currentHourPrice.price.toFixed(4)} €/kWh) is low and battery is not full
                        `;
                    } else {
                        recommendationAlert.className = 'alert alert-warning';
                        recommendationText.innerHTML = `
                            <strong>Keep Grid Charging OFF</strong><br>
                            Current price (${currentHourPrice.price.toFixed(4)} €/kWh) is not optimal
                        `;
                    }
                }
    
                // Show notification message
                function showNotification(message, type = 'info') {
                    notification.className = 'alert';
                    notification.classList.add(`alert-${type}`);
                    notificationMessage.textContent = message;
                    notification.classList.remove('hidden');
                    
                    // Auto-hide after 5 seconds
                    setTimeout(hideNotification, 5000);
                }
    
                // Hide notification message
                function hideNotification() {
                    notification.classList.add('hidden');
                }
    
                // Save configuration to API
                async function saveConfiguration() {
                    showNotification('Saving configuration...', 'info');
                    
                    // Read values from form
                    const formData = {
                        enabled: enableDynamicPricingToggle.checked,
                        country: countrySelect.value,
                        market: countrySelect.value, // Using same value for market
                        timezone: timezoneSelect.value,
                        apiKey: apiKeyInput.value,
                        priceThreshold: parseFloat(priceThresholdInput.value),
                        minimumSoC: parseInt(minimumSoCInput.value),
                        targetSoC: parseInt(targetSoCInput.value),
                        scheduledCharging: scheduledChargingCheckbox.checked,
                        chargingHours: getChargingPeriods()
                    };
                    
                    try {
                        const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(formData)
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to save configuration');
                        }
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            config = data.config;
                            showNotification('Configuration saved successfully', 'success');
                            
                            // Reload pricing data
                            await loadPricingData();
                        } else {
                            throw new Error(data.error || 'Failed to save configuration');
                        }
                    } catch (error) {
                        console.error('Error saving configuration:', error);
                        showNotification('Error saving configuration: ' + error.message, 'danger');
                    }
                }
    
                // Get charging periods from UI
                function getChargingPeriods() {
                    const periods = [];
                    const periodElements = chargingPeriods.querySelectorAll('.time-period');
                    
                    periodElements.forEach(element => {
                        const start = element.querySelector('.period-start').value;
                        const end = element.querySelector('.period-end').value;
                        
                        if (start && end) {
                            periods.push({ start, end });
                        }
                    });
                    
                    return periods;
                }
    
                // Manually refresh price data
                async function refreshPrices() {
                    refreshDataBtn.innerHTML = '<span class="loading"></span> Refreshing...';
                    refreshDataBtn.disabled = true;
                    
                    try {
                        const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/update-prices', {
                            method: 'POST'
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to refresh prices');
                        }
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            showNotification('Price update initiated. It may take a moment to complete.', 'info');
                            
                            // Wait a moment and then reload pricing data
                            setTimeout(async () => {
                                await loadPricingData();
                                refreshDataBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh Prices';
                                refreshDataBtn.disabled = false;
                            }, 5000);
                        } else {
                            throw new Error(data.error || 'Failed to refresh prices');
                        }
                    } catch (error) {
                        console.error('Error refreshing prices:', error);
                        showNotification('Error refreshing prices: ' + error.message, 'danger');
                        refreshDataBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh Prices';
                        refreshDataBtn.disabled = false;
                    }
                }
    
                // Send grid charging command
                async function sendGridChargeCommand(enable) {
                    const actionBtn = enable ? enableChargingBtn : disableChargingBtn;
                    const originalText = actionBtn.innerHTML;
                    
                    actionBtn.innerHTML = '<span class="loading"></span> Sending...';
                    actionBtn.disabled = true;
                    
                    try {
                        const response = await fetch('<%= ingress_path %>/api/dynamic-pricing/settings', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                gridChargingOverride: enable
                            })
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to send grid charge command');
                        }
                        
                        const data = await response.json();
                        
                        if (data.success) {
                            showNotification(`Grid charging ${enable ? 'enabled' : 'disabled'} successfully`, 'success');
                            
                            // Update UI
                            updateChargingStatus();
                        } else {
                            throw new Error(data.error || 'Failed to send grid charge command');
                        }
                    } catch (error) {
                        console.error('Error sending grid charge command:', error);
                        showNotification('Error sending command: ' + error.message, 'danger');
                    } finally {
                        actionBtn.innerHTML = originalText;
                        actionBtn.disabled = false;
                    }
                }
    
                // Set up event listeners
                function setupEventListeners() {
                    // Enable/disable dynamic pricing
                    enableDynamicPricingToggle.addEventListener('change', function() {
                        // Save configuration with new state
                        saveConfiguration();
                    });
                    
                    // Save configuration button
                    saveConfigBtn.addEventListener('click', function() {
                        saveConfiguration();
                    });
                    
                    // Refresh data button
                    refreshDataBtn.addEventListener('click', function() {
                        refreshPrices();
                    });
                    
                    // Enable charging button
                    enableChargingBtn.addEventListener('click', function() {
                        sendGridChargeCommand(true);
                    });
                    
                    // Disable charging button
                    disableChargingBtn.addEventListener('click', function() {
                        sendGridChargeCommand(false);
                    });
                    
                    // Toggle scheduled charging options
                    scheduledChargingCheckbox.addEventListener('change', function() {
                        schedulingOptions.classList.toggle('hidden', !this.checked);
                    });
                    
                    // Add time period button
                    addPeriodBtn.addEventListener('click', function() {
                        addTimePeriod();
                    });
                }
            });
        </script>

<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>

</body>
</html>
