<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   <link rel="stylesheet" href="<%= ingress_path %>/css/main.css">
   <link rel="stylesheet" href="<%= ingress_path %>/css/messages.css">
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   <!-- Font Awesome for icons -->
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
   <style>
    /* Dark Mode Variables */
:root {
    --dark-bg-primary: rgb(32, 36, 41);
    --dark-bg-secondary: rgb(32, 36, 41);
    --dark-bg-tertiary: #2d3139;
    --dark-text-primary: #f5f6fa;
    --dark-text-secondary: #a4b0be;
    --dark-border: #3d4147;
    --dark-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    --dark-primary-color: #DEAF0B;
}

/* Main Container Dark Mode */
.dark-mode .container {
    background-color: var(--dark-bg-primary);
    color: var(--dark-text-primary);
}

/* Header Dark Mode */
.dark-mode .header {
    background: var(--dark-bg-secondary);
    border: 1px solid var(--dark-border);
    box-shadow: var(--dark-shadow);
    color: var(--dark-text-primary);
}

/* Stats Grid Dark Mode */
.dark-mode .stats-grid .stat-card {
    background: var(--dark-bg-secondary);
    border: 1px solid var(--dark-border);
    box-shadow: var(--dark-shadow);
    color: var(--dark-text-primary);
}

.dark-mode .stat-card::before {
    background: linear-gradient(90deg, var(--dark-primary-color), var(--blue));
}

.dark-mode .stat-card:hover {
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.4);
    transform: translateY(-5px);
}

.dark-mode .stat-number {
    color: var(--dark-text-primary);
}

.dark-mode .stat-label {
    color: var(--dark-text-secondary);
}

/* Controls Dark Mode */
.dark-mode .controls {
    background: var(--dark-bg-secondary);
    border: 1px solid var(--dark-border);
    box-shadow: var(--dark-shadow);
}

.dark-mode .filter-group label {
    color: var(--dark-text-primary);
}

.dark-mode .filter-group label i {
    color: var(--dark-primary-color);
}

/* Form Controls Dark Mode */
.dark-mode select,
.dark-mode input[type="text"] {
    background: var(--dark-bg-tertiary);
    color: var(--dark-text-primary);
    border: 2px solid var(--dark-border);
}

.dark-mode select:focus,
.dark-mode input[type="text"]:focus {
    border-color: var(--dark-primary-color);
    box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.2);
    background: var(--dark-bg-secondary);
}

.dark-mode select option {
    background: var(--dark-bg-tertiary);
    color: var(--dark-text-primary);
}

/* Buttons Dark Mode */
.dark-mode .btn-primary {
    background: linear-gradient(135deg, var(--blue), #1e40af);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.dark-mode .btn-secondary {
    background: linear-gradient(135deg, #4b5563, #374151);
    box-shadow: 0 4px 12px rgba(75, 85, 99, 0.3);
}

.dark-mode .btn-success {
    background: linear-gradient(135deg, var(--green), #047857);
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
}

.dark-mode .btn-warning {
    background: linear-gradient(135deg, var(--amber), #b45309);
    box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
}

.dark-mode .btn:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
}

/* Export Section Dark Mode */
.dark-mode .export-section {
    border-top: 2px solid var(--dark-border);
}

/* Messages Container Dark Mode */
.dark-mode .messages-container {
    background: var(--dark-bg-secondary);
    border: 1px solid var(--dark-border);
    box-shadow: var(--dark-shadow);
}

.dark-mode .messages-header {
    border-bottom: 2px solid var(--dark-border);
}

.dark-mode .messages-title {
    color: var(--dark-text-primary);
}

.dark-mode .messages-title i {
    color: var(--dark-primary-color);
}

.dark-mode .status-indicator {
    color: var(--dark-text-primary);
}

/* Messages List Dark Mode */
.dark-mode .messages-list {
    background: transparent;
}

.dark-mode .messages-list::-webkit-scrollbar-track {
    background: var(--dark-bg-tertiary);
}

.dark-mode .messages-list::-webkit-scrollbar-thumb {
    background: var(--dark-border);
}

.dark-mode .messages-list::-webkit-scrollbar-thumb:hover {
    background: var(--dark-primary-color);
}

/* Message Items Dark Mode */
.dark-mode .message-item {
    background: var(--dark-bg-tertiary);
    border-left: 4px solid var(--blue);
    color: var(--dark-text-primary);
}

.dark-mode .message-item::before {
    background: var(--dark-bg-secondary);
    border: 1px solid var(--dark-border);
}

.dark-mode .message-item:hover {
    background: var(--dark-bg-secondary);
    box-shadow: var(--dark-shadow);
}

/* Message Type Specific Dark Mode */
.dark-mode .message-item.inverter-1 { border-left-color: #ef4444; }
.dark-mode .message-item.inverter-1::before { color: #ef4444; }

.dark-mode .message-item.inverter-2 { border-left-color: #f97316; }
.dark-mode .message-item.inverter-2::before { color: #f97316; }

.dark-mode .message-item.inverter-3 { border-left-color: #10b981; }
.dark-mode .message-item.inverter-3::before { color: #10b981; }

.dark-mode .message-item.inverter-4 { border-left-color: #8b5cf6; }
.dark-mode .message-item.inverter-4::before { color: #8b5cf6; }

.dark-mode .message-item.total { border-left-color: #6366f1; }
.dark-mode .message-item.total::before { color: #6366f1; }

.dark-mode .message-item.battery { border-left-color: #059669; }
.dark-mode .message-item.battery::before { color: #059669; }

/* Message Content Dark Mode */
.dark-mode .message-topic {
    color: var(--dark-text-primary);
}

.dark-mode .message-value {
    color: #10b981;
}

.dark-mode .message-timestamp {
    color: var(--dark-text-secondary);
}

/* No Messages/Loading Dark Mode */
.dark-mode .no-messages,
.dark-mode .loading {
    color: var(--dark-text-secondary);
}

.dark-mode .no-messages i,
.dark-mode .loading i {
    color: var(--dark-primary-color);
}


/* Mobile Toggle Dark Mode */
.dark-mode .mobile-toggle {
    background-color: var(--dark-bg-secondary);
    box-shadow: var(--dark-shadow);
}

.dark-mode .mobile-toggle span {
    background-color: var(--dark-text-primary);
}

/* Animations for Dark Mode */
@keyframes darkPulse {
    0% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.7; transform: scale(1.1); }
    100% { opacity: 1; transform: scale(1); }
}

.dark-mode .status-online {
    animation: darkPulse 2s infinite;
}

/* Enhanced Hover Effects for Dark Mode */
.dark-mode .stat-card:hover {
    background: linear-gradient(135deg, var(--dark-bg-tertiary), var(--dark-bg-secondary));
    border-color: var(--dark-primary-color);
}

.dark-mode .message-item:hover {
    background: linear-gradient(135deg, var(--dark-bg-secondary), var(--dark-bg-tertiary));
    transform: translateX(8px);
}

/* Responsive Dark Mode Adjustments */
@media (max-width: 768px) {
    .dark-mode .container {
        padding: 10px;
    }
    
    .dark-mode .mobile-toggle {
        background-color: rgba(42, 47, 56, 0.9);
        backdrop-filter: blur(10px);
    }
}

@media (max-width: 480px) {
    .dark-mode .stat-card {
        padding: 15px;
    }
    
    .dark-mode .messages-container {
        padding: 15px;
        min-height: 400px;
    }
}

/* Transition Effects for Mode Switching */
.container,
.header,
.stat-card,
.controls,
.messages-container,
.message-item,
.btn,
select,
input[type="text"] {
    transition: background-color 0.3s ease, 
                color 0.3s ease, 
                border-color 0.3s ease,
                box-shadow 0.3s ease;
}

/* Focus States for Dark Mode Accessibility */
.dark-mode .btn:focus {
    outline: 2px solid var(--dark-primary-color);
    outline-offset: 2px;
}

.dark-mode select:focus,
.dark-mode input[type="text"]:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(222, 175, 11, 0.3);
}

/* Enhanced Status Indicators for Dark Mode */
.dark-mode .status-online {
    background-color: #10b981;
    box-shadow: 0 0 10px rgba(16, 185, 129, 0.4);
}

.dark-mode .status-offline {
    background-color: #ef4444;
    box-shadow: 0 0 10px rgba(239, 68, 68, 0.4);
}
   </style>
</head>
<body>
      <!-- Add hamburger menu button -->
      <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>
<%- include('partials/sidebar') %>

        <div class="main-container">

            <div class="main-content">
              
                <div class="container">
            
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-icon">
                                <i class="fas fa-comments"></i>
                            </div>
                            <div class="stat-number" id="totalMessages">0</div>
                            <div class="stat-label">Total Messages</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon">
                                <i class="fas fa-filter"></i>
                            </div>
                            <div class="stat-number" id="filteredMessages">0</div>
                            <div class="stat-label">Filtered Messages</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon">
                                <i class="fas fa-microchip"></i>
                            </div>
                            <div class="stat-number" id="inverterCount">0</div>
                            <div class="stat-label">Configured Inverters</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="stat-number" id="lastUpdate">Never</div>
                            <div class="stat-label">Last Update</div>
                        </div>
                    </div>
            
                    <div class="controls">
                        <div class="controls-row">
                            <div class="filter-group">
                                <label for="categoryFilter">
                                    <i class="fas fa-layer-group"></i>
                                    Filter by Category:
                                </label>
                                <select id="categoryFilter">
                                    <option value="all">All Messages</option>
                                    <option value="total">Total/Summary</option>
                                    <option value="pvPower">PV Power</option>
                                    <option value="gridPower">Grid Power</option>
                                    <option value="loadPower">Load Power</option>
                                </select>
            
                                <label for="searchFilter">
                                    <i class="fas fa-search"></i>
                                    Search:
                                </label>
                                <input type="text" id="searchFilter" placeholder="Search messages...">
                            </div>
            
                            <div class="button-group">
                                <button class="btn btn-primary" onclick="refreshMessages()">
                                    <i class="fas fa-sync-alt"></i>
                                    Refresh
                                </button>
                                <button class="btn btn-secondary" onclick="clearMessages()">
                                    <i class="fas fa-trash"></i>
                                    Clear
                                </button>
                                <button class="btn btn-success" onclick="toggleAutoRefresh()" id="autoRefreshBtn">
                                    <i class="fas fa-pause"></i>
                                    Auto-refresh: OFF
                                </button>
                            </div>
                        </div>
            
                        <div class="export-section">
                            <button class="btn btn-warning" onclick="exportMessages('txt')">
                                <i class="fas fa-file-alt"></i>
                                Export TXT
                            </button>
                            <button class="btn btn-primary" onclick="exportMessages('json')">
                                <i class="fas fa-file-code"></i>
                                Export JSON
                            </button>
                            <button class="btn btn-success" onclick="exportMessages('csv')">
                                <i class="fas fa-file-csv"></i>
                                Export CSV
                            </button>
                        </div>
                    </div>
            
                    <div class="messages-container">
                        <div class="messages-header">
                            <div class="messages-title">
                                <i class="fas fa-broadcast-tower"></i>
                                Live Messages
                            </div>
                            <div class="status-indicator">
                                <div class="status-dot status-online" id="statusDot"></div>
                                <span id="statusText">Connected</span>
                            </div>
                        </div>
                        <div class="messages-list" id="messagesList">
                            <div class="loading">
                                <i class="fas fa-satellite-dish"></i>
                                Loading messages...
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>
    </div>
    <script>
        // Configuration from server (pass these from your EJS template)
        const INVERTER_COUNT = <%= inverterNumber %>;
        const BATTERY_COUNT = <%= batteryNumber %>;
        
        let allMessages = [];
        let filteredMessages = [];
        let autoRefreshInterval = null;
        let autoRefreshEnabled = false;

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            setupDynamicOptions();
            setupEventListeners();
            loadMessages();
        });

        function setupDynamicOptions() {
            const categoryFilter = document.getElementById('categoryFilter');
            
            // Clear existing inverter/battery options (keep the static ones)
            const staticOptions = categoryFilter.innerHTML;
            
            // Add dynamic inverter options
            for (let i = 1; i <= INVERTER_COUNT; i++) {
                const option = document.createElement('option');
                option.value = `inverter_${i}`;
                option.textContent = `Inverter ${i}`;
                
                // Insert before PV Power option
                const pvOption = categoryFilter.querySelector('option[value="pvPower"]');
                categoryFilter.insertBefore(option, pvOption);
            }
            
            // Add dynamic battery options
            for (let i = 1; i <= BATTERY_COUNT; i++) {
                const option = document.createElement('option');
                option.value = `battery${i}`;
                option.textContent = `Battery ${i}`;
                
                // Insert before PV Power option
                const pvOption = categoryFilter.querySelector('option[value="pvPower"]');
                categoryFilter.insertBefore(option, pvOption);
            }
            
            // Update the inverter count display
            document.getElementById('inverterCount').textContent = INVERTER_COUNT;
        }

        function setupEventListeners() {
            document.getElementById('categoryFilter').addEventListener('change', filterMessages);
            document.getElementById('searchFilter').addEventListener('input', filterMessages);
        }

        async function loadMessages() {
            try {
                updateStatus('online', 'Loading...');
                
                const category = document.getElementById('categoryFilter').value;
                const response = await fetch(`<%= ingress_path %>/api/messages?category=${encodeURIComponent(category)}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const messages = await response.json();
                allMessages = messages.map((msg, index) => ({
                    id: index,
                    content: msg,
                    timestamp: new Date(),
                    category: detectCategory(msg)
                }));
                
                updateStats();
                filterMessages();
                updateStatus('online', 'Connected');
                
            } catch (error) {
                console.error('Error loading messages:', error);
                updateStatus('offline', 'Connection Error');
                displayError('Failed to load messages. Please check your connection.');
            }
        }

        function detectCategory(message) {
            const topic = message.split(':')[0].toLowerCase();
            
            // Dynamic inverter detection
            for (let i = 1; i <= INVERTER_COUNT; i++) {
                if (topic.includes(`inverter_${i}`)) return `inverter-${i}`;
            }
            
            // Dynamic battery detection
            for (let i = 1; i <= BATTERY_COUNT; i++) {
                if (topic.includes(`battery_${i}`) || topic.includes(`battery${i}`)) return `battery-${i}`;
            }
            
            if (topic.includes('total')) return 'total';
            if (topic.includes('battery')) return 'battery';
            
            return 'other';
        }

        function filterMessages() {
            const categoryFilter = document.getElementById('categoryFilter').value;
            const searchFilter = document.getElementById('searchFilter').value.toLowerCase();
            
            filteredMessages = allMessages.filter(msg => {
                // Category filter
                const matchesCategory = categoryFilter === 'all' || 
                    msg.content.toLowerCase().includes(categoryFilter.toLowerCase()) ||
                    (categoryFilter === 'pvPower' && msg.content.toLowerCase().includes('pv_power')) ||
                    (categoryFilter === 'gridPower' && msg.content.toLowerCase().includes('grid_power')) ||
                    (categoryFilter === 'loadPower' && msg.content.toLowerCase().includes('load_power')) ||
                    (categoryFilter.startsWith('battery') && msg.content.toLowerCase().includes('battery'));
                
                // Search filter
                const matchesSearch = searchFilter === '' || msg.content.toLowerCase().includes(searchFilter);
                
                return matchesCategory && matchesSearch;
            });
            
            displayMessages();
            updateStats();
        }

        function displayMessages() {
            const messagesList = document.getElementById('messagesList');
            
            if (filteredMessages.length === 0) {
                messagesList.innerHTML = '<div class="no-messages">No messages found matching your filters.</div>';
                return;
            }
            
            const messagesHtml = filteredMessages.map(msg => {
                const parts = msg.content.split(':');
                const topic = parts[0];
                const value = parts.slice(1).join(':').trim();
                
                return `
                    <div class="message-item ${msg.category}">
                        <div class="message-topic">${topic}</div>
                        <div class="message-value">${value}</div>
                        <div class="message-timestamp">${msg.timestamp.toLocaleTimeString()}</div>
                    </div>
                `;
            }).join('');
            
            messagesList.innerHTML = messagesHtml;
        }

        function updateStats() {
            document.getElementById('totalMessages').textContent = allMessages.length;
            document.getElementById('filteredMessages').textContent = filteredMessages.length;
            document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
        }

        function updateStatus(status, text) {
            const statusDot = document.getElementById('statusDot');
            const statusText = document.getElementById('statusText');
            
            statusDot.className = `status-dot status-${status}`;
            statusText.textContent = text;
        }

        function displayError(message) {
            const messagesList = document.getElementById('messagesList');
            messagesList.innerHTML = `<div class="no-messages" style="color: #e74c3c;">${message}</div>`;
        }

        function refreshMessages() {
            loadMessages();
        }

        function clearMessages() {
            if (confirm('Are you sure you want to clear all messages?')) {
                allMessages = [];
                filteredMessages = [];
                displayMessages();
                updateStats();
            }
        }

        function toggleAutoRefresh() {
            const button = event.target;
            
            if (autoRefreshEnabled) {
                clearInterval(autoRefreshInterval);
                autoRefreshEnabled = false;
                button.textContent = '⏱️ Auto-refresh: OFF';
                button.className = 'btn btn-success';
            } else {
                autoRefreshInterval = setInterval(loadMessages, 5000); // Refresh every 5 seconds
                autoRefreshEnabled = true;
                button.textContent = '⏱️ Auto-refresh: ON';
                button.className = 'btn btn-primary';
            }
        }

        function exportMessages(format) {
            const data = filteredMessages.map(msg => ({
                timestamp: msg.timestamp.toISOString(),
                content: msg.content,
                category: msg.category
            }));
            
            let content, filename, mimeType;
            
            switch (format) {
                case 'json':
                    content = JSON.stringify(data, null, 2);
                    filename = `solar_messages_${new Date().toISOString().slice(0, 10)}.json`;
                    mimeType = 'application/json';
                    break;
                    
                case 'csv':
                    const headers = 'Timestamp,Topic,Value,Category\n';
                    const csvRows = data.map(msg => {
                        const parts = msg.content.split(':');
                        const topic = parts[0];
                        const value = parts.slice(1).join(':').trim();
                        return `"${msg.timestamp}","${topic}","${value}","${msg.category}"`;
                    }).join('\n');
                    content = headers + csvRows;
                    filename = `solar_messages_${new Date().toISOString().slice(0, 10)}.csv`;
                    mimeType = 'text/csv';
                    break;
                    
                case 'txt':
                default:
                    content = data.map(msg => 
                        `[${msg.timestamp}] ${msg.content} (${msg.category})`
                    ).join('\n');
                    filename = `solar_messages_${new Date().toISOString().slice(0, 10)}.txt`;
                    mimeType = 'text/plain';
                    break;
            }
            
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Auto-refresh every 30 seconds if enabled
        setInterval(() => {
            if (autoRefreshEnabled) {
                loadMessages();
            }
        }, 30000);
    </script>

    <script src="<%= ingress_path %>/js/loading.js"></script>
    <script src="<%= ingress_path %>/js/dark-mode.js"></script>
    <script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>