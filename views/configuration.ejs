<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
 

 
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   <link rel="stylesheet" href="<%= ingress_path %>/css/main.css">
   <link rel="stylesheet" href="<%= ingress_path %>/css/configuration.css">
</head>
<body>
   
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>
<%- include('partials/sidebar') %>

        <div class="main-container">

            <div class="main-content">
                <div class="content-card">
                    <div class="container-config">
                        <form id="gaugeForm">
                            <div class="timezone-container">
                                <h3>Timezone:</h3>
                                <select id="timezone" class="timezone-select">
                                    <option value="Europe/Berlin">Germany (Berlin)</option>
                                    <option value="Europe/Rome">Italy (Rome)</option>
                                    <option value="America/Cayman">Cayman Islands</option>
                                    <option value="Indian/Mauritius">Mauritius</option>
                                    <option value="Asia/Shanghai">China (Shanghai)</option>
                                    <option value="Europe/London">United Kingdom (London)</option>
                                    <option value="America/New_York">USA (New York)</option>
                                    <option value="Pacific/Auckland">New Zealand (Auckland)</option>
                                </select>
                            </div>
                            <div id="gaugeSettings"></div>
                            <button type="submit">Update Gauges</button>
                        </form>
                        <div id="responseMessage"></div>
                    </div>
                  
                </div>
            </div>

        </div>
    </div>
 
       
 

    <script src="<%= ingress_path %>/js/loading.js"></script>
    <script src="<%= ingress_path %>/js/sidebar.js"></script>
    <script src="<%= ingress_path %>/js/dark-mode.js"></script>

    <script>
      
        // Fetch initial gauge values from the server
        fetch('<%= ingress_path %>/gauges')
            .then(response => response.json())
            .then(data => {
                const gaugeSettingsDiv = document.getElementById('gaugeSettings');
                Object.keys(data).forEach(gauge => {
                    const gaugeSettingHTML = `
                        <div class="gauge-card">
                            <div class="gauge-title">${gauge}</div>
                            <div class="input-group">
                                <div>
                                    <label for="${gauge}-min">Min</label>
                                    <input type="number" id="${gauge}-min" name="${gauge}-min" value="${data[gauge].min}">
                                </div>
                                <div>
                                    <label for="${gauge}-max">Max</label>
                                    <input type="number" id="${gauge}-max" name="${gauge}-max" value="${data[gauge].max}">
                                </div>
                            </div>
                        </div>
                    `;
                    gaugeSettingsDiv.innerHTML += gaugeSettingHTML;
                });
            });

        // Handle form submission and send updated gauge values to the server
        document.getElementById('gaugeForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const formData = new FormData(this);
            const gauges = {};
            formData.forEach((value, key) => {
                const [gauge, type] = key.split('-');
                if (!gauges[gauge]) gauges[gauge] = {};
                gauges[gauge][type] = Number(value);
            });

            // Include the selected timezone
            const timezone = document.getElementById('timezone').value;
            gauges.timezone = timezone;

            fetch('<%= ingress_path %>/gauges/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(gauges),
            })
            .then(response => response.json())
            .then(data => {
                const responseMessage = document.getElementById('responseMessage');
                responseMessage.innerText = data.message;
                responseMessage.className = data.success ? 'success' : 'error';
                responseMessage.style.display = 'block';

                // Hide the message after 3 seconds
                setTimeout(() => {
                    responseMessage.style.display = 'none';
                }, 3000);
            });
        });
    </script>

<script>
    const ingressPath = '<%= ingress_path %>';
  
  // Fetch current timezone
  fetch(`${ingressPath}/api/timezone`)
    .then(response => response.json())
    .then(data => {
      document.getElementById('timezone').value = data.timezone;
    });

  // Update timezone when changed
  document.getElementById('timezone').addEventListener('change', (event) => {
    fetch(`${ingressPath}/api/timezone`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ timezone: event.target.value }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('Timezone updated successfully');
      } else {
        alert('Failed to update timezone');
      }
    });
  });
 
</script>
   
</body>
</html>
