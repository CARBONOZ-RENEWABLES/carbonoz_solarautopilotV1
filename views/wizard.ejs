<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
           
        
           :root {
            /* Color system */
            --primary-color: #DEAF0B;
            --bg-color: #f5f6fa;
            --text-color: #2f3640;
            --icon-color: #636e72;
            --green: #4CAF50;
            --red: #F44336;
            --blue: #2196F3;
            --amber: #FFC107;
            --gray: #757575;
            --primary: #DEAF0B;          /* Main accent color */
            --primary-dark: #DEAF0E;     /* Darker shade of primary */
            --secondary: #38b000;        /* Success/active color */
            --warning: #ffbe0b;          /* Warning color */
            --danger: #ef476f;           /* Danger/error color */
            --info: #4361ee;             /* Info color */
            --dark: #212529;             /* Dark text/backgrounds */
            --light: #f8f9fa;            /* Light backgrounds */
            --grey-100: #f8f9fa;
            --grey-200: #e9ecef;
            --grey-300: #dee2e6;
            --grey-400: #ced4da;
            --grey-500: #adb5bd;
            --grey-600: #6c757d;
            --grey-700: #495057;
            --grey-800: #343a40;
            --grey-900: #212529;
            
            /* Special colors for energy monitoring */
            --battery-color: #38b000;    /* Green for battery */
            --solar-color: #ffbe0b;      /* Yellow for solar/PV */
            --grid-color: #ff006e;       /* Magenta for grid */
            --load-color: #3a86ff;       /* Blue for load */
            
            /* Typography */
            --font-family: 'Inter', system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            --font-size-base: 1rem;
            --font-weight-normal: 400;
            --font-weight-bold: 600;
            --font-weight-header: 700;
            
            /* Spacing */
            --spacer: 1rem;
            
            /* Borders & shadows */
            --border-radius: 0.5rem;
            --border-radius-sm: 0.25rem;
            --border-radius-lg: 0.75rem;
            --border-radius-pill: 50rem;
            --box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.08);
            --box-shadow-sm: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.05);
            --box-shadow-lg: 0 1rem 3rem rgba(0, 0, 0, 0.12);
            --box-shadow-inset: inset 0 1px 2px rgba(0, 0, 0, 0.075);
            
            /* Transitions */
            --transition-base: all 0.2s ease-in-out;
            --transition-fast: all 0.1s ease-in-out;
            --transition-slow: all 0.3s ease-in-out;
            
            /* Wizard specific */
            --wizard-progress-height: 8px;
            --wizard-active-color: var(--primary);
            --wizard-inactive-color: var(--grey-300);
            --wizard-hover-color: var(--grey-200);
        }
        
           body, html {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100%;
            
           }
            /* Sidebar styles */
            .sidebar {
                width: 280px;
                height: 100vh;
                background-color: white;
                border-right: 1px solid #e5e7eb;
                display: flex;
                flex-direction: column;
                position: fixed;
                top: 0;
                left: 0;
                z-index: 1000;
                transition: width 0.3s ease;
            }
           
                   .logo-container {
                       padding: 1.5rem;
                       border-bottom: 1px solid #e5e7eb;
                       display: flex;
                       align-items: center;
                       gap: 0.75rem;
                   }
           
                   .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-weight: bold;
            font-size: 20px;
           }
           
           .logo-text {
            margin-left: 10px;
            font-weight: bold;
            color: var(--text-color);
            font-size: 18px;
           }
           
           .logo-text .highlight {
            color: var(--primary-color);
            margin-left: 10px;
           }
           
           
           nav {
            flex-grow: 1;
           }
           
           nav ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
           }
           nav li {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            color: var(--text-color);
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 18px;
           }
           
           nav li a{
            text-decoration: none;
            color: #2f3640;
            font-weight: bold;
           }
           nav li:hover {
            background-color: var(--bg-color);
           }
           
           nav li i {
            margin-right: 15px;
            color: var(--icon-color);
            font-size: 24px;
           }
           
           .bottom-options {
            padding: 20px;
            border-top: 1px solid #dcdde1;
           }
           
           .toggle-sidebar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            font-size: 16px;
           }
           
           .toggle-text {
            margin-right: 10px;
           }
           
           .toggle-switch {
            width: 50px;
            height: 25px;
            background-color: #dcdde1;
            border-radius: 12.5px;
            position: relative;
            transition: background-color 0.3s;
           }
           .toggle-switch::before {
            content: '';
            position: absolute;
            width: 21px;
            height: 21px;
            border-radius: 50%;
            background-color: white;
            top: 2px;
            left: 2px;
            transition: transform 0.3s;
           }
           
           .toggle-switch.active {
            background-color: var(--primary-color);
           }
           
           .toggle-switch.active::before {
            transform: translateX(25px);
           }
           
           .sidebar.collapsed .logo-text,
           .sidebar.collapsed .search,
           .sidebar.collapsed nav li span,
           .sidebar.collapsed .toggle-text {
            display: none;
           }
           
           .sidebar.collapsed .logo {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li i {
            margin-right: 0;
           }
                   /* Main content styles */
                   .main-content {
                       flex: 1;
                       margin-left: 280px;
                       padding: 2rem;
                   }
           
                   .content-header {
                       margin-bottom: 2rem;
                   }
           
                   .content-header h2 {
                       font-size: 1.875rem;
                       font-weight: 700;
                       color: #111827;
                   }
           
                   .metrics-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                       gap: 1.5rem;
                       margin-bottom: 2rem;
                   }
           
                   .metric-card {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .metric-title {
                       font-size: 0.875rem;
                       font-weight: 600;
                       color: #4b5563;
                       margin-bottom: 0.5rem;
                   }
           
                   .metric-value {
                       font-size: 1.5rem;
                       font-weight: 700;
                       margin-bottom: 0.25rem;
                   }
           
                   .metric-subtitle {
                       font-size: 0.875rem;
                       color: #6b7280;
                   }
           
                   .chart-container {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       margin-bottom: 2rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .chart-wrapper {
                       height: 400px;
                       margin-top: 1rem;
                   }
           
                   .period-buttons {
                       display: flex;
                       gap: 0.75rem;
                       margin-bottom: 1rem;
                   }
           
                   .period-btn {
                       padding: 0.5rem 1rem;
                       border: none;
                       background-color: #e5e7eb;
                       color: #4b5563;
                       border-radius: 6px;
                       cursor: pointer;
                       font-weight: 500;
                       transition: all 0.2s;
                   }
           
                   .period-btn:hover {
                       background-color: #d1d5db;
                   }
           
                   .period-btn.active {
                       background-color: #DEAF0B;
                       color: white;
                   }
           
                   /* Toggle styles */
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .slider {
                       position: absolute;
                       cursor: pointer;
                       top: 0;
                       left: 0;
                       right: 0;
                       bottom: 0;
                       background-color: #e5e7eb;
                       transition: .4s;
                       border-radius: 34px;
                   }
           
                   .slider:before {
                       position: absolute;
                       content: "";
                       height: 16px;
                       width: 16px;
                       left: 4px;
                       bottom: 4px;
                       background-color: white;
                       transition: .4s;
                       border-radius: 50%;
                   }
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   /* Updated and new styles */
                   .bottom-controls {
                       padding: 1.5rem;
                       border-top: 1px solid #e5e7eb;
                   }
           
                   .control-item {
                       display: flex;
                       justify-content: space-between;
                       align-items: center;
                       margin-bottom: 1rem;
                   }
           
                   .control-label {
                       font-size: 0.875rem;
                       color: #4b5563;
                   }
           
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .sidebar {
            width: 280px;
            background-color: white;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            transition: width 0.3s ease;
            z-index: 10;
           }
           
           .sidebar.collapsed {
            width: 80px;
           }
           
           .logo {
            display: flex;
            align-items: center;
            padding: 20px;
           }
           
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   .total-emissions {
                       font-size: 1.25rem;
                       font-weight: 600;
                       margin-bottom: 1rem;
                       color: #374151;
                   }
           
                   .summary-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                       gap: 1rem;
                       margin-bottom: 2rem;
                   }
           
                   .summary-item {
                       background-color: white;
                       border-radius: 8px;
                       padding: 1rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .summary-label {
                       font-size: 0.875rem;
                       color: #6b7280;
                       display: block;
                       margin-bottom: 0.5rem;
                   }
           
                   .summary-value {
                       font-size: 1.25rem;
                       font-weight: 600;
                   }
           
               
           
                   /* Responsive styles */
                   @media (max-width: 768px) {
                       .sidebar {
                           width: 100%;
                           height: auto;
                           position: static;
                           border-right: none;
                           border-bottom: 1px solid #e5e7eb;
                       }
           
                       .main-content {
                           margin-left: 0;
                       }
           
                       body.collapsed-sidebar .sidebar {
                           display: none;
                       }
           
                       body.collapsed-sidebar .main-content {
                           margin-left: 0;
                       }
           
                       .metrics-grid,
                       .summary-grid {
                           grid-template-columns: 1fr;
                       }
           
                       .period-buttons {
                           flex-wrap: wrap;
                       }
           
                       .period-btn {
                           flex: 1 0 calc(50% - 0.375rem);
                           margin-bottom: 0.75rem;
                       }
                   }
        
        /* loading css */
        
        .loading-overlay {
         position: fixed;
         top: 0;
         left: 0;
         width: 100%;
         height: 100%;
         background-color: #f8f9fa;
         display: flex;
         justify-content: center;
         align-items: center;
         z-index: 9999;
        }
        
        .loading-spinner {
         width: 60px;
         height: 60px;
         border: 5px solid #e0e0e0;
         border-top: 5px solid #3498db;
         border-radius: 50%;
         animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
         0% { transform: rotate(0deg); }
         100% { transform: rotate(360deg); }
        }
        
        .dashboard-column {
        flex-basis: calc(33.33333% - 2px);
        margin-right: 2px;
        margin-bottom: 2px;
        }
        
        @media only screen and (max-width: 128em) {
        .dashboard-column {
         flex-basis: calc(50% - 2px);
        }
        }
        
        @media only screen and (max-width: 62em) {
        .dashboard-column {
         flex-basis: calc(100% - 2px);
        }
        }
        
        .dashboard-column .card {
        border: 0;
        }
    
        /* Dark mode styles */
        body.dark-mode {
            background-color: rgba(24, 27, 31, 1);
         color: #f5f6fa;
        }
        
        .dark-mode .main-content{
            background-color: rgba(24, 27, 31, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .sidebar {
            background-color: rgba(24, 27, 31, 1);
        }
        
        .dark-mode .sidebar .logo-icon {
         color: #2f3640;
        }
        
        .dark-mode .sidebar .logo-text {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li:hover {
         background-color: #383838;
        }
        
        .dark-mode .sidebar nav li a {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li i {
         color: #dcdde1;
        }
        
        .dark-mode .toggle-sidebar,
        .dark-mode .toggle-dark-mode {
         color: #f5f6fa;
        }
        
        .dark-mode .toggle-switch {
            background-color: var(--primary-color);
        }
        
        .dark-mode .toggle-switch.active {
         background-color: var(--primary-color);
        }
        
        .dark-mode header {
            background-color: rgb(17, 18, 23);
        }
        
        .dark-mode .content-card {
            background-color: rgba(24, 27, 31, 1);
         color: #fff;
        }
        
        
        .dark-mode .loading-overlay{
            background-color: rgba(24, 27, 31, 1);
        }
        
        /* Mobile Sidebar Improvements */
        @media (max-width: 768px) {
            /* Sidebar base styles */
            .sidebar {
                position: fixed;
                top: 0;
                left: 0;
                height: 100vh;
                width: 280px;
                transform: translateX(-100%);
                transition: transform 0.3s ease-in-out;
                z-index: 1000;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
                box-shadow: none;
            }
        
            .sidebar.active {
                transform: translateX(0);
                box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
            }
        
            /* Improved hamburger button */
            .mobile-toggle {
                display: block;
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 1001;
                background: none;
                border: none;
                cursor: pointer;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background-color: white;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                padding: 8px;
            }
        
            .mobile-toggle span {
                display: block;
                width: 24px;
                height: 2px;
                background-color: var(--text-color);
                margin: 5px auto;
                transition: transform 0.3s ease, opacity 0.3s ease;
            }
        
            .mobile-toggle.active span:nth-child(1) {
                transform: translateY(7px) rotate(45deg);
            }
        
            .mobile-toggle.active span:nth-child(2) {
                opacity: 0;
            }
        
            .mobile-toggle.active span:nth-child(3) {
                transform: translateY(-7px) rotate(-45deg);
            }
        
            /* Improved nav items */
            .sidebar nav ul {
                padding: 1rem 0;
            }
        
            .sidebar nav li {
                padding: 0.875rem 1.5rem;
                margin: 0.25rem 1rem;
                border-radius: 8px;
                transition: background-color 0.2s ease;
            }
        
            .sidebar nav li a {
                display: flex;
                align-items: center;
                gap: 1rem;
                font-size: 1rem;
                color: var(--text-color);
            }
        
            .sidebar nav li i {
                font-size: 1.25rem;
                min-width: 24px;
                text-align: center;
            }
        
            .sidebar nav li:active {
                background-color: rgba(0, 0, 0, 0.05);
            }
        
            /* Improved overlay */
            .sidebar-overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(0, 0, 0, 0.4);
                backdrop-filter: blur(2px);
                z-index: 999;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
        
            .sidebar-overlay.active {
                display: block;
                opacity: 1;
            }
        
            /* Dark mode adjustments */
            .dark-mode .mobile-toggle {
                background-color: rgba(255, 255, 255, 0.1);
            }
        
            .dark-mode .mobile-toggle span {
                background-color: #f5f6fa;
            }
        
            .dark-mode .sidebar nav li:active {
                background-color: rgba(255, 255, 255, 0.05);
            }
        }
        
        /* Ensure main content adjusts properly */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding-top: 4.5rem;
                transition: margin-left 0.3s ease;
            }
        
            body.sidebar-open .main-content {
                filter: blur(2px);
                pointer-events: none;
            }
        }
        
        
          /* Main content styling */
        .main-content {
          flex: 1;
          margin-left: 280px;
          padding: 2rem;
          color: var(--text-color);
          transition: margin-left 0.3s ease;
        }
        
        
        .container {
            max-width: 1700px;
            padding: 0 var(--spacer);
            margin: 0 auto;
        }
        
        /* Header & Navigation */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: calc(var(--spacer) * 2);
            padding-bottom: var(--spacer);
            border-bottom: 1px solid var(--grey-300);
        }
        
        .breadcrumb {
            padding: var(--spacer) 0;
            margin-bottom: var(--spacer);
            list-style: none;
            background-color: transparent;
        }
        
        .breadcrumb-item {
            display: inline-block;
        }
        
        .breadcrumb-item + .breadcrumb-item::before {
            content: "/";
            display: inline-block;
            padding: 0 0.5rem;
            color: var(--grey-600);
        }
        
        .breadcrumb-item a {
            color: var(--grey-600);
            text-decoration: none;
        }
        
        .breadcrumb-item.active {
            color: var(--grey-900);
            font-weight: var(--font-weight-bold);
        }
        
        /* Cards */
        .card {
            background-color: #fff;
            border-radius: var(--border-radius);
            border: none;
            box-shadow: var(--box-shadow);
            margin-bottom: calc(var(--spacer) * 1.5);
            overflow: hidden;
            transition: var(--transition-slow);
        }
        
        .card:hover {
            transform: translateY(-3px);
            box-shadow: var(--box-shadow-lg);
        }
        
        .card-header {
            padding: calc(var(--spacer) * 0.75) var(--spacer);
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            font-weight: var(--font-weight-bold);
            border-bottom: none;
        }
        
        .card-body {
            padding: var(--spacer);
        }
        
        .card-footer {
            padding: calc(var(--spacer) * 0.75) var(--spacer);
            background-color: var(--grey-100);
            border-top: 1px solid var(--grey-200);
        }
        
        /* Dashboard Summary Cards */
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: var(--spacer);
            margin-bottom: calc(var(--spacer) * 1.5);
        }
        
        .summary-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: var(--spacer);
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            transition: var(--transition-slow);
        }
        
        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--box-shadow-lg);
        }
        
        .summary-card-icon {
            font-size: 2.5rem;
            margin-bottom: calc(var(--spacer) * 0.75);
            color: var(--primary);
        }
        
        .summary-card-title {
            font-size: 0.85rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: var(--grey-600);
            margin-bottom: calc(var(--spacer) * 0.5);
            font-weight: var(--font-weight-bold);
        }
        
        .summary-card-value {
            font-size: 2rem;
            font-weight: var(--font-weight-header);
            color: var(--dark);
        }
        
        /* Rule Cards */
        .rule-card {
            transition: var(--transition-slow);
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: var(--spacer);
            overflow: hidden;
        }
        
        .rule-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--box-shadow-lg);
        }
        
        .rule-card.inactive {
            opacity: 0.7;
        }
        
        .rule-name {
            font-weight: var(--font-weight-bold);
            color: var(--grey-900);
            font-size: 1.1rem;
        }
        
        .rule-description {
            color: var(--grey-600);
            margin-bottom: var(--spacer);
        }
        
        .rule-date {
            font-family: 'Courier New', monospace;
            font-size: 0.85rem;
            color: var(--grey-600);
        }
        
        /* Table Styles */
        .table {
            width: 100%;
            margin-bottom: var(--spacer);
            color: var(--grey-800);
            border-collapse: separate;
            border-spacing: 0;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow-sm);
        }
        
        .table th,
        .table td {
            padding: 0.75rem;
            vertical-align: middle;
            border-top: 1px solid var(--grey-200);
        }
        
        .table thead th {
            vertical-align: bottom;
            border-bottom: 2px solid var(--grey-300);
            background-color: var(--grey-100);
            color: var(--grey-700);
            font-weight: var(--font-weight-bold);
            text-transform: uppercase;
            letter-spacing: 0.03em;
            font-size: 0.85rem;
        }
        
        .table tbody tr {
            transition: var(--transition-base);
        }
        
        .table-hover tbody tr:hover {
            background-color: rgba(58, 134, 255, 0.05);
        }
        
        /* Buttons */
        .btn {
            display: inline-block;
            font-weight: var(--font-weight-bold);
            color: var(--grey-700);
            text-align: center;
            vertical-align: middle;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            background-color: transparent;
            border: 1px solid transparent;
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            line-height: 1.5;
            border-radius: var(--border-radius-sm);
            transition: var(--transition-base);
            box-shadow: var(--box-shadow-sm);
        }
        
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
        }
        
        .btn-primary {
            color: #fff;
            background-color: var(--primary);
            border-color: var(--primary);
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }
        
        .btn-success {
            color: #fff;
            background-color: var(--secondary);
            border-color: var(--secondary);
        }
        
        .btn-warning {
            color: #212529;
            background-color: var(--warning);
            border-color: var(--warning);
        }
        
        .btn-danger {
            color: #fff;
            background-color: var(--danger);
            border-color: var(--danger);
        }
        
        .btn-outline-primary {
            color: var(--primary);
            border-color: var(--primary);
        }
        
        .btn-outline-primary:hover {
            color: #fff;
            background-color: var(--primary);
            border-color: var(--primary);
        }
        
        .btn-outline-secondary {
            color: var(--grey-600);
            border-color: var(--grey-400);
        }
        
        .btn-outline-secondary:hover {
            color: var(--grey-800);
            background-color: var(--grey-200);
            border-color: var(--grey-400);
        }
        
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            line-height: 1.5;
            border-radius: var(--border-radius-sm);
        }
        
        /* Badges */
        .badge {
            display: inline-block;
            padding: 0.35em 0.65em;
            font-size: 0.75em;
            font-weight: var(--font-weight-bold);
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: var(--border-radius-pill);
        }
        
        .bg-primary {
            background-color: var(--primary) !important;
            color: #fff;
        }
        
        .bg-secondary {
            background-color: var(--secondary) !important;
            color: #fff;
        }
        
        .bg-success {
            background-color: var(--secondary) !important;
            color: #fff;
        }
        
        .bg-warning {
            background-color: var(--warning) !important;
            color: #212529;
        }
        
        .bg-danger {
            background-color: var(--danger) !important;
            color: #fff;
        }
        
        .bg-info {
            background-color: var(--info) !important;
            color: #fff;
        }
        
        /* System Status Indicators */
        .database-status {
            position: fixed;
            top: 15px;
            right: 15px;
            z-index: 1000;
            padding: 0.5rem 1rem;
            border-radius: var(--border-radius-pill);
            font-weight: var(--font-weight-bold);
            font-size: 0.85rem;
            box-shadow: var(--box-shadow);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .database-status.connected {
            background-color: var(--secondary);
            color: white;
        }
        
        .database-status.disconnected {
            background-color: var(--danger);
            color: white;
        }
        
        .system-state-badge {
            padding: 0.5rem 0.75rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            border-radius: var(--border-radius-pill);
            font-size: 0.85rem;
            font-weight: var(--font-weight-bold);
            display: inline-block;
        }
        
        /* Rule Type Icons */
        .rule-type-icon {
            font-size: 1.5rem;
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            margin-right: 1rem;
        }
        
        .rule-type-icon.battery {
            background-color: rgba(56, 176, 0, 0.15);
            color: var(--battery-color);
        }
        
        .rule-type-icon.energy {
            background-color: rgba(255, 190, 11, 0.15);
            color: var(--solar-color);
        }
        
        .rule-type-icon.grid {
            background-color: rgba(255, 0, 110, 0.15);
            color: var(--grid-color);
        }
        
        .rule-type-icon.time {
            background-color: rgba(58, 134, 255, 0.15);
            color: var(--primary);
        }
        
        .trigger-count {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            background-color: var(--primary);
            color: white;
            font-weight: var(--font-weight-bold);
            margin-right: 0.5rem;
        }
        
        /* Filtering Controls */
        .filtering-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: calc(var(--spacer) * 1.5);
            flex-wrap: wrap;
            gap: var(--spacer);
        }
        
        .input-group {
            position: relative;
            display: flex;
            flex-wrap: wrap;
            align-items: stretch;
            width: 100%;
        }
        
        .input-group-text {
            display: flex;
            align-items: center;
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            font-weight: 400;
            line-height: 1.5;
            color: var(--grey-700);
            text-align: center;
            white-space: nowrap;
            background-color: var(--grey-200);
            border: 1px solid var(--grey-300);
            border-radius: var(--border-radius-sm) 0 0 var(--border-radius-sm);
        }
        
        .form-control {
            display: block;
            width: 100%;
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            font-weight: 400;
            line-height: 1.5;
            color: var(--grey-700);
            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid var(--grey-300);
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            border-radius: var(--border-radius-sm);
            transition: var(--transition-base);
        }
        
        .form-control:focus {
            color: var(--grey-900);
            background-color: #fff;
            border-color: var(--primary);
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(58, 134, 255, 0.25);
        }
        
        /* Toggle Switch */
        .form-check-input {
            width: 2.5em;
            height: 1.25em;
            margin-top: 0.125em;
            margin-right: 0.5em;
            background-color: var(--grey-400);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
            background-position: left center;
            background-repeat: no-repeat;
            background-size: contain;
            border: none;
            transition: background-position 0.15s ease-in-out;
            appearance: none;
            border-radius: 2em;
        }
        
        .form-check-input:checked {
            background-color: var(--secondary);
            background-position: right center;
        }
        
        .form-check-input:focus {
            outline: none;
            box-shadow: 0 0 0 0.25rem rgba(58, 134, 255, 0.25);
        }
        
        .form-switch .form-check-input {
            margin-left: 0;
        }
        
        .form-check {
            display: flex;
            align-items: center;
            padding-left: 0;
            margin-bottom: 0;
        }
        
        .form-check-label {
            margin-bottom: 0;
        }
        
        /* Action Buttons Group */
        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }
        
        /* Empty State */
        .empty-state {
            text-align: center;
            padding: calc(var(--spacer) * 3) var(--spacer);
        }
        
        .empty-state-icon {
            font-size: 3rem;
            color: var(--grey-400);
            margin-bottom: var(--spacer);
        }
        
        .empty-state-text {
            color: var(--grey-600);
            font-size: 1.2rem;
            margin-bottom: var(--spacer);
        }
        
        /* Wizard Styles */
        .wizard-nav {
            margin-bottom: calc(var(--spacer) * 2);
        }
        
        /* New Step Indicators with Numbers */
        .wizard-steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1.5rem;
            position: relative;
            z-index: 1;
        }
        
        .wizard-steps::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 2px;
            background-color: var(--grey-300);
            transform: translateY(-50%);
            z-index: -1;
        }
        
        .wizard-step-indicator {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
        }
        
        .wizard-step-number {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: var(--grey-200);
            color: var(--grey-600);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-bottom: 0.5rem;
            border: 2px solid var(--grey-300);
            position: relative;
            z-index: 1;
            transition: all 0.3s ease;
        }
        
        .wizard-step-indicator.active .wizard-step-number {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(58, 134, 255, 0.25);
        }
        
        .wizard-step-indicator.completed .wizard-step-number {
            background-color: var(--secondary);
            color: white;
            border-color: var(--secondary);
        }
        
        .wizard-step-text {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--grey-600);
            text-align: center;
            max-width: 100px;
        }
        
        .wizard-step-indicator.active .wizard-step-text {
            color: var(--primary);
        }
        
        .wizard-step-indicator.completed .wizard-step-text {
            color: var(--secondary);
        }
        
        /* Old Progress Bar (can be removed if using the step indicators above) */
        .progress {
            height: var(--wizard-progress-height);
            background-color: var(--wizard-inactive-color);
            border-radius: var(--border-radius-pill);
            overflow: hidden;
            box-shadow: var(--box-shadow-inset);
            margin-top: 1rem;
        }
        
        .progress-bar {
            background: linear-gradient(90deg, var(--primary), var(--primary-dark));
            transition: width 0.5s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0 var(--spacer);
            font-size: 1rem;
            font-weight: var(--font-weight-bold);
            color: white;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
            height: 100%;
        }
        
        .wizard-step {
            display: none;
            animation: fadeIn 0.3s ease-in-out;
        }
        
        .wizard-step.active {
            display: block;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .condition-card, 
        .action-card {
            background-color: white;
            border-radius: var(--border-radius);
            margin-bottom: calc(var(--spacer) * 1.2);
            transition: var(--transition-base);
            border: 1px solid var(--grey-300);
            box-shadow: var(--box-shadow-sm);
            overflow: hidden;
        }
        
        .condition-card:hover,
        .action-card:hover {
            box-shadow: var(--box-shadow);
            transform: translateY(-2px);
            border-color: var(--primary);
            border-left: 3px solid var(--primary);
        }
        
        .condition-card .card-body,
        .action-card .card-body {
            padding: calc(var(--spacer) * 1.2);
        }
        
        .preview-container {
            background-color: var(--grey-100);
            border: 1px solid var(--grey-300);
            border-radius: var(--border-radius);
            padding: var(--spacer);
            margin-bottom: calc(var(--spacer) * 1.2);
        }
        
        .preview-line {
            margin-bottom: 0.5rem;
            line-height: 1.6;
        }
        
        .preview-line strong {
            color: var(--grey-800);
        }
        
        .preview-line.ms-3 {
            padding-left: 1rem;
            border-left: 2px solid var(--grey-300);
        }
        
        .date-tag {
            display: inline-flex;
            align-items: center;
            background-color: var(--primary);
            color: white;
            padding: 0.25rem 0.75rem;
            margin: 0.25rem;
            border-radius: var(--border-radius-pill);
            font-size: 0.85rem;
            font-weight: var(--font-weight-bold);
            transition: var(--transition-base);
        }
        
        .date-tag:hover {
            background-color: var(--primary-dark);
        }
        
        .date-tag .close {
            margin-left: 0.5rem;
            cursor: pointer;
            font-size: 1.2rem;
            line-height: 1;
            opacity: 0.8;
            transition: var(--transition-fast);
        }
        
        .date-tag .close:hover {
            opacity: 1;
        }
        
        .calendar-dates {
            display: none;
            animation: fadeIn 0.3s ease-in-out;
        }
        
        .calendar-dates.show {
            display: block;
        }
        
        .success-message {
            display: none;
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
            animation: slideIn 0.3s ease-out;
        }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        /* Flatpickr customization */
        .flatpickr-calendar {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow-lg);
            border: none;
        }
        
        .flatpickr-day.selected, 
        .flatpickr-day.startRange, 
        .flatpickr-day.endRange, 
        .flatpickr-day.selected.inRange, 
        .flatpickr-day.startRange.inRange, 
        .flatpickr-day.endRange.inRange, 
        .flatpickr-day.selected:focus, 
        .flatpickr-day.startRange:focus, 
        .flatpickr-day.endRange:focus, 
        .flatpickr-day.selected:hover, 
        .flatpickr-day.startRange:hover, 
        .flatpickr-day.endRange:hover, 
        .flatpickr-day.selected.prevMonthDay, 
        .flatpickr-day.startRange.prevMonthDay, 
        .flatpickr-day.endRange.prevMonthDay, 
        .flatpickr-day.selected.nextMonthDay, 
        .flatpickr-day.startRange.nextMonthDay, 
        .flatpickr-day.endRange.nextMonthDay {
            background: var(--primary);
            border-color: var(--primary);
        }
        
        .flatpickr-day.selected.startRange + .endRange:not(:nth-child(7n+1)), 
        .flatpickr-day.startRange.startRange + .endRange:not(:nth-child(7n+1)), 
        .flatpickr-day.endRange.startRange + .endRange:not(:nth-child(7n+1)) {
            box-shadow: -10px 0 0 var(--primary);
        }
        
        .flatpickr-time input:hover, 
        .flatpickr-time .flatpickr-am-pm:hover, 
        .flatpickr-time input:focus, 
        .flatpickr-time .flatpickr-am-pm:focus {
            background: var(--grey-100);
        }
        
        /* Day of Week Selectors */
        .days-of-week-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 1.5rem;
        }
        
        .day-selector {
            position: relative;
        }
        
        .day-selector input[type="checkbox"] {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .day-selector label {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--grey-200);
            color: var(--grey-700);
            font-weight: var(--font-weight-bold);
            cursor: pointer;
            transition: all 0.2s ease;
            user-select: none;
            margin: 0;
        }
        
        .day-selector input[type="checkbox"]:checked + label {
            background-color: var(--primary);
            color: white;
            box-shadow: 0 0 0 2px rgba(58, 134, 255, 0.25);
        }
        
        .day-selector:hover label {
            background-color: var(--grey-300);
        }
        
        .day-selector input[type="checkbox"]:checked:hover + label {
            background-color: var(--primary-dark);
        }
        
        .day-selector input[type="checkbox"]:focus + label {
            box-shadow: 0 0 0 3px rgba(58, 134, 255, 0.25);
        }
        
        /* Form improvements for the wizard */
        .form-label {
            font-weight: var(--font-weight-bold);
            color: var(--grey-700);
            margin-bottom: 0.5rem;
        }
        
        .form-control, 
        .form-select {
            border-radius: var(--border-radius-sm);
            padding: 0.5rem 0.75rem;
            border: 1px solid var(--grey-300);
            transition: var(--transition-base);
        }
        
        .form-control:focus, 
        .form-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 0.25rem rgba(58, 134, 255, 0.25);
        }
        
        .form-text {
            color: var(--grey-600);
            font-size: 0.85rem;
            margin-top: 0.25rem;
        }
        
        .form-switch .form-check-input {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
        }
        
        .form-check-label {
            color: var(--grey-700);
        }
        
        /* Modal Styles */
        .modal-content {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: var(--box-shadow-lg);
        }
        
        .modal-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border-bottom: none;
            padding: 1rem 1.5rem;
        }
        
        .modal-title {
            font-weight: var(--font-weight-bold);
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .modal-footer {
            border-top: 1px solid var(--grey-200);
            padding: 1rem 1.5rem;
        }
        
        /* Condition & Action Lists */
        .condition-text, 
        .action-text {
            padding: 0.5rem 0.75rem;
            margin-bottom: 0.5rem;
            background-color: var(--grey-100);
            border-radius: var(--border-radius-sm);
            font-size: 0.9rem;
        }
        
        /* Responsive fixes for main-content */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 1rem;
                transition: margin-left 0.3s ease;
            }
            
            /* Better form layout on mobile */
            .wizard-step .row > [class*="col-"] {
                margin-bottom: 1rem;
            }
            
            /* Make wizard steps more mobile-friendly */
            .wizard-steps {
                flex-wrap: wrap;
                justify-content: center;
                gap: 1rem;
            }
            
            .wizard-step-indicator {
                flex: 0 0 auto;
                width: 45%;
                margin-bottom: 1rem;
            }
            
            /* Improve buttons layout on mobile */
            .wizard-step .d-flex.justify-content-between {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .wizard-step .d-flex.justify-content-between button {
                width: 100%;
            }
            
            /* Better card layout on mobile */
            .condition-card .row,
            .action-card .row {
                flex-direction: column;
            }
            
            .condition-card .col-md-1,
            .action-card .col-md-1 {
                align-self: flex-end;
                margin-top: 0.5rem;
            }
            
            /* Adjust date picker layout */
            #specificDatesContainer .row {
                flex-direction: column;
            }
            
            #specificDatesContainer .col-md-6 {
                margin-bottom: 1rem;
            }
        }
        
        /* Dark mode improvements for main-content */
        .dark-mode .main-content {
            background-color: rgba(24, 27, 31, 1);
            color: #f5f6fa;
        }
        
        /* Fix for the main container */
        .dark-mode .main-content > .container {
            background-color: rgba(24, 27, 31, 1);
        }
        .dark-mode .container .mt-4 {
            background-color: rgba(24, 27, 31, 1);
            color: #f5f6fa;
        }
        /* Form elements in dark mode */
        .dark-mode .form-control,
        .dark-mode .form-select {
            background-color: rgba(17, 18, 23, 1);
            border-color: #495057;
            color: #f5f6fa;
        }
        
        .dark-mode .form-control:focus,
        .dark-mode .form-select:focus {
            background-color: rgba(33, 37, 41, 1);
            border-color: var(--primary);
            color: #f5f6fa;
        }
        
        .dark-mode .form-label,
        .dark-mode .form-check-label {
            color: #f5f6fa;
        }
        /* Enhanced Dark Mode for Main Content Elements */
        .dark-mode .card {
            background-color: rgba(24, 27, 31, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .card-header {
            background: linear-gradient(135deg, #DEAF0B, #ffeaa7);
            color: white;
        }
        
        .dark-mode .card-body {
            color: #f5f6fa;
        }
        
        .dark-mode .form-control,
        .dark-mode .form-select,
        .dark-mode .time-picker,
        .dark-mode .date-picker {
            background-color: rgba(33, 37, 41, 1);
            border-color: #495057;
            color: #f5f6fa;
        }
        
        .dark-mode .form-control:focus,
        .dark-mode .form-select:focus {
            background-color: rgba(33, 37, 41, 1);
            border-color: var(--primary);
            color: #f5f6fa;
        }
        
        .dark-mode .form-check-label {
            color: #f5f6fa;
        }
        
        .dark-mode .text-muted {
            color: #adb5bd !important;
        }
        
        .dark-mode .preview-container {
            background-color: rgba(33, 37, 41, 1);
            border-color: #495057;
        }
        
        .dark-mode .wizard-step-text {
            color: #f5f6fa;
        }
        
        .dark-mode .wizard-step-indicator.active .wizard-step-text {
            color: var(--primary);
        }
        
        .dark-mode .day-selector label {
            background-color: rgba(33, 37, 41, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .day-selector:hover label {
            background-color: #495057;
        }
        
        .dark-mode .wizard-steps::before {
            background-color: #495057;
        }
        
        .dark-mode .wizard-step-number {
            background-color: rgba(33, 37, 41, 1);
            border-color: #495057;
            color: #f5f6fa;
        }
        
        .dark-mode .condition-card,
        .dark-mode .action-card {
            background-color: rgba(17, 18, 23, 1);
            border-color: #495057;
        }
        
        .dark-mode .condition-card:hover,
        .dark-mode .action-card:hover {
            border-color: var(--primary);
        }
        
        /* Fix for flatpickr in dark mode */
        .dark-mode .flatpickr-calendar {
            background-color: rgba(33, 37, 41, 1);
            color: #f5f6fa;
            box-shadow: 0 3px 13px rgba(0, 0, 0, 0.5);
        }
        
        .dark-mode .flatpickr-day {
            color: #f5f6fa;
        }
        .dark-mode .loading-overlay{
            background-color: rgba(24, 27, 31, 1);
        }
        .dark-mode .flatpickr-months .flatpickr-month,
        .dark-mode .flatpickr-current-month .flatpickr-monthDropdown-months,
        .dark-mode .flatpickr-weekday {
            color: #f5f6fa;
            fill: #f5f6fa;
        }
        
        .dark-mode .flatpickr-time input,
        .dark-mode .flatpickr-time .flatpickr-am-pm {
            background-color: rgba(33, 37, 41, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .flatpickr-day.today {
            border-color: var(--primary);
        }
        
        .dark-mode .flatpickr-day.selected {
            background: var(--primary);
            color: white;
        }
        
        /* Enhanced Responsive Design for Wizard */
        @media (max-width: 768px) {
            .wizard-steps {
                flex-wrap: wrap;
                gap: 0.5rem;
            }
            
            .wizard-step-indicator {
                flex-basis: 40%;
                margin-bottom: 0.75rem;
            }
            
            .wizard-step-text {
                font-size: 0.75rem;
            }
            
            .wizard-step-number {
                width: 40px;
                height: 40px;
            }
            
            .form-label {
                margin-top: 0.75rem;
            }
            
            /* Better organization for condition and action cards on mobile */
            .condition-card .row,
            .action-card .row {
                display: flex;
                flex-direction: column;
            }
            
            .condition-card .col-md-1,
            .action-card .col-md-1 {
                margin-top: 1rem;
                align-self: flex-end;
            }
            
            .condition-card .col-md-3,
            .condition-card .col-md-4,
            .action-card .col-md-3,
            .action-card .col-md-4 {
                width: 100%;
                margin-bottom: 0.5rem;
            }
            
            /* Improve button layout on mobile */
            .d-flex.justify-content-between {
                flex-wrap: wrap;
                gap: 0.5rem;
            }
            
            /* Calendar date selector improvements */
            .day-selector {
                margin-bottom: 0.5rem;
            }
            
            .days-of-week-container {
                justify-content: center;
            }
            
            /* Better time picker layout */
            #timeRestrictionsContainer .row {
                flex-direction: column;
            }
            
            /* Specific dates container */
            #specificDatesContainer .row {
                flex-direction: column;
            }
            
            #specificDatesContainer .col-md-6 {
                width: 100%;
                margin-bottom: 1rem;
            }
            
            /* Make preview more readable on mobile */
            .preview-line {
                word-break: break-word;
            }
            
            /* Better card spacing on mobile */
            .card {
                margin-bottom: 1rem;
            }
            
            .card-body {
                padding: 0.75rem;
            }
        }
        
        /* Improved date tag display for mobile */
        .date-tag {
            margin-bottom: 0.5rem;
        }
        
        /* Fix for time pickers */
        .flatpickr-calendar {
            width: 100%;
            max-width: 240px;
        }
        
        @media (max-width: 400px) {
            .wizard-step-indicator {
                flex-basis: 100%;
            }
        }
        
        /* Utility Classes */
        .mt-1 { margin-top: 0.25rem !important; }
        .mt-2 { margin-top: 0.5rem !important; }
        .mt-3 { margin-top: 1rem !important; }
        .mt-4 { margin-top: 1.5rem !important; }
        .mt-5 { margin-top: 3rem !important; }
        
        .mb-1 { margin-bottom: 0.25rem !important; }
        .mb-2 { margin-bottom: 0.5rem !important; }
        .mb-3 { margin-bottom: 1rem !important; }
        .mb-4 { margin-bottom: 1.5rem !important; }
        .mb-5 { margin-bottom: 3rem !important; }
        
        .ml-1 { margin-left: 0.25rem !important; }
        .ml-2 { margin-left: 0.5rem !important; }
        .ml-3 { margin-left: 1rem !important; }
        .ml-4 { margin-left: 1.5rem !important; }
        .ml-5 { margin-left: 3rem !important; }
        
        .mr-1 { margin-right: 0.25rem !important; }
        .mr-2 { margin-right: 0.5rem !important; }
        .mr-3 { margin-right: 1rem !important; }
        .mr-4 { margin-right: 1.5rem !important; }
        .mr-5 { margin-right: 3rem !important; }
        
        .p-1 { padding: 0.25rem !important; }
        .p-2 { padding: 0.5rem !important; }
        .p-3 { padding: 1rem !important; }
        .p-4 { padding: 1.5rem !important; }
        .p-5 { padding: 3rem !important; }
        
        .text-center { text-align: center !important; }
        .text-start { text-align: left !important; }
        .text-end { text-align: right !important; }
        
        .text-muted { color: var(--grey-600) !important; }
        .text-primary { color: var(--primary) !important; }
        .text-success { color: var(--secondary) !important; }
        .text-warning { color: var(--warning) !important; }
        .text-danger { color: var(--danger) !important; }
        
        .btn-secondaryy{
            background: #DC3545;
            color: #fff;
        }
        
        .btn-secondaryy:hover{
            background: #c83442;
            color: #fff;
        }
        
        .btn-primaryy{
          background: #DEAF0B;
          color: #fff;
        }
        .btn-primaryy:hover{
          background: #c29b0f;
          color: #fff;
        }
        
        
        .title-container {
                    width: 100%;
                    max-width: 1700px;
                    margin-bottom: 20px;
                }
                
                .wizard-header {
                    background: linear-gradient(135deg, #DEAF0B, #c29b0f);
                    border-radius: 12px;
                    padding: 24px 30px;
                    margin-bottom: 25px;
                    box-shadow: 0 10px 25px rgba(222, 175, 11, 0.15);
                    position: relative;
                    overflow: hidden;
                }
                
                .wizard-title {
                    color: white;
                    font-size: 28px;
                    font-weight: 700;
                    margin: 0;
                    letter-spacing: 0.5px;
                    position: relative;
                    z-index: 2;
                    display: flex;
                    align-items: center;
                }
                
                .wizard-title-icon {
                    margin-right: 15px;
                    background: rgba(255, 255, 255, 0.2);
                    width: 42px;
                    height: 42px;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .wizard-title-text {
                    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                }
                
                .wizard-subtitle {
                    color: rgba(255, 255, 255, 0.9);
                    margin: 8px 0 0 57px;
                    font-size: 15px;
                    font-weight: 400;
                    position: relative;
                    z-index: 2;
                }
                
                .pattern-overlay {
                    position: absolute;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    width: 40%;
                    background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23ffffff' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
                    opacity: 0.6;
                    z-index: 1;
                }
                
                
                body.dark-mode .wizard-header {
                    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.25);
                }
                
                /* Animated Elements */
                .lightning-bolt {
                    position: absolute;
                    top: 15px;
                    right: 45px;
                    width: 24px;
                    height: 24px;
                    z-index: 2;
                    animation: pulse 2s infinite;
                    filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.7));
                }
                
                .gear {
                    position: absolute;
                    width: 18px;
                    height: 18px;
                    z-index: 2;
                    animation: rotate 10s linear infinite;
                }
                
                .gear-1 {
                    top: 25px;
                    right: 80px;
                }
                
                .gear-2 {
                    bottom: 20px;
                    right: 100px;
                    width: 14px;
                    height: 14px;
                    animation-direction: reverse;
                    animation-duration: 7s;
                }
                
                @keyframes pulse {
                    0% { transform: scale(1); opacity: 1; }
                    50% { transform: scale(1.1); opacity: 0.9; }
                    100% { transform: scale(1); opacity: 1; }
                }
                
                @keyframes rotate {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
        </style>
    <style>
        .inverter-type-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            margin: 0.25rem;
            border-radius: 0.375rem;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .badge-legacy { background-color: #ffc107; color: #000; }
        .badge-new { background-color: #198754; color: #fff; }
        .badge-hybrid { background-color: #DEAF0B; color: #fff; }
        .badge-unknown { background-color: #6c757d; color: #fff; }
        
        .inverter-detection-panel {
            background: linear-gradient(135deg, #667eea 0%, #DEAF0B 100%);
            color: white;
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }
        
        .inverter-detection-panel::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: repeating-conic-gradient(
                from 0deg,
                transparent 0deg 30deg,
                rgba(255,255,255,0.1) 30deg 60deg
            );
            animation: rotate 20s linear infinite;
            z-index: 1;
        }
        
        .inverter-detection-content {
            position: relative;
            z-index: 2;
        }
        
        @keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .dynamic-setting-card {
            border-left: 4px solid #0d6efd;
            transition: all 0.3s ease;
        }
        
        .dynamic-setting-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .setting-type-indicator {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            font-size: 0.7rem;
            padding: 0.2rem 0.4rem;
            border-radius: 0.25rem;
        }
        
        .legacy-setting { border-left-color: #ffc107; }
        .new-setting { border-left-color: #198754; }
        .universal-setting { border-left-color: #0d6efd; }
        
        .compatibility-note {
            background: #e7f3ff;
            border: 1px solid #b8daff;
            border-radius: 0.375rem;
            padding: 0.75rem;
            margin: 1rem 0;
            font-size: 0.9rem;
        }
        
        .mapping-info {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 0.375rem;
            padding: 0.5rem 0.75rem;
            margin: 0.5rem 0;
            font-size: 0.8rem;
            display: none;
        }
        
        .wizard-step-indicator {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            padding: 0.75rem;
            border-radius: 0.5rem;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
        }
        
        .wizard-step-indicator.active {
            background: #e7f3ff;
            border-color: #0d6efd;
        }
        
        .wizard-step-number {
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #6c757d;
            color: white;
            margin-right: 0.75rem;
            font-weight: 600;
        }

        
        .wizard-step-indicator.active .wizard-step-number {
            background: #0d6efd;
        }
        
        .detection-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.5rem 0;
        }
        
        .detection-spinner {
            width: 1rem;
            height: 1rem;
            border: 2px solid rgba(255,255,255,0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .action-preview {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 0.375rem;
            padding: 0.75rem;
            margin: 0.5rem 0;
            font-family: 'Courier New', monospace;
            font-size: 0.85rem;
        }
        
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        
        .loading-spinner {
            width: 3rem;
            height: 3rem;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #ffffff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        /* Red button styles for cancel and previous */
.btn-cancel, 
.btn-previous {
    background-color: #DC3545;
    border-color: #DC3545;
    color: #fff;
}

.btn-cancel:hover, 
.btn-previous:hover {
    background-color: #c82333;
    border-color: #bd2130;
    color: #fff;
}

/* Dark mode wizard step indicator fixes */
.dark-mode .wizard-step-indicator {
    background-color: rgba(33, 37, 41, 1);
    border-color: #495057;
    color: #f5f6fa;
}

.dark-mode .wizard-step-indicator.active {
    background-color: rgba(13, 110, 253, 0.1);
    border-color: #0d6efd;
}

.dark-mode .wizard-step-indicator h5,
.dark-mode .wizard-step-indicator small {
    color: #f5f6fa;
}

.dark-mode .wizard-step-indicator.active h5 {
    color: #0d6efd;
}
    </style>
</head>
<body>
    <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"></div>

        <%- include('partials/sidebar') %>

        <div class="main-content">
    <div class="container mt-4">
        <!-- Success Message -->
        <div class="success-message alert alert-success alert-dismissible fade show" role="alert" style="display: none;">
            <strong>Success!</strong> Your rule has been created successfully.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>

        <!-- Dynamic Inverter Detection Panel -->
        <div class="inverter-detection-panel">
            <div class="inverter-detection-content">
                <div class="row align-items-center">
                    <div class="col-lg-8">
                        <h3><i class="bi bi-cpu"></i> Inverter Type Detection</h3>
                        <p class="mb-2">Dynamically adapting wizard based on your inverter configuration</p>
                        <div id="detectionStatus" class="detection-status">
                            <div class="detection-spinner"></div>
                            <span>Detecting inverter types...</span>
                        </div>
                        <div id="inverterTypesDisplay">
                            <!-- Dynamic inverter types will be displayed here -->
                        </div>
                    </div>
                    <div class="col-lg-4 text-end">
                        <div class="d-flex flex-column align-items-end">
                            <div class="mb-2">
                                <strong>Total Inverters:</strong>
                                <span class="badge bg-light text-dark" id="totalInvertersCount">0</span>
                            </div>
                            <div class="mb-2">
                                <strong>Detection Status:</strong>
                                <span class="badge bg-warning" id="detectionStatusBadge">Pending</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Wizard Title -->
        <div class="text-center mb-4">
            <h1>
                <i class="bi bi-magic"></i>
               Energy Management Rule Wizard
            </h1>
            <p class="text-muted">Create intelligent automation rules tailored to your specific inverter types</p>
        </div>

        <!-- Dynamic Rule Creation Form -->
        <form id="dynamicRuleWizardForm" data-ingress-path="">
            <!-- Step 1: Basic Information & Inverter Selection -->
            <div class="wizard-step active" id="step1">
                <div class="wizard-step-indicator active">
                    <div class="wizard-step-number">1</div>
                    <div>
                        <h5 class="mb-0">Basic Information & Target Selection</h5>
                        <small class="text-muted">Set rule name and select target inverters</small>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="bi bi-info-circle"></i> Rule Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label for="ruleName" class="form-label">Rule Name *</label>
                                    <input type="text" class="form-control" id="ruleName" name="name" required>
                                </div>
                                <div class="mb-3">
                                    <label for="ruleDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="ruleDescription" name="description" rows="2" placeholder="Describe what this rule does..."></textarea>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input" type="checkbox" id="ruleActive" name="active" checked>
                                    <label class="form-check-label" for="ruleActive">Rule Active</label>
                                </div>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input" type="checkbox" id="showAdvanced" name="showAdvanced">
                                    <label class="form-check-label" for="showAdvanced">Show Advanced Options</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Dynamic Inverter Selection -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="bi bi-targets"></i> Target Inverter Selection</h5>
                    </div>
                    <div class="card-body">
                        <div id="inverterSelectionContainer">
                            <!-- Dynamic inverter selection options will be populated here -->
                            <div class="text-muted text-center p-3">
                                <div class="spinner-border spinner-border-sm me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Loading inverter information...
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-cancel" onclick="window.location.href='<%= ingress_path %>/rules'">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="nextStep(1)">Next: Configure Conditions</button>
                </div>
            </div>

            <!-- Step 2: Dynamic Conditions -->
            <div class="wizard-step" id="step2">
                <div class="wizard-step-indicator">
                    <div class="wizard-step-number">2</div>
                    <div>
                        <h5 class="mb-0">Smart Conditions</h5>
                        <small class="text-muted">Define when this rule should activate</small>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="bi bi-funnel"></i> Activation Conditions</h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted mb-3">Add conditions that determine when this rule should run. All conditions must be met for the rule to activate.</p>
                        
                        <div id="conditionsContainer">
                            <!-- Dynamic conditions will be added here -->
                        </div>
                        
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-outline-primary" onclick="addCondition()">
                                <i class="bi bi-plus-circle"></i> Add Condition
                            </button>
                            <div id="conditionButtons" style="display: none;">
                                <button type="button" class="btn btn-danger" onclick="removeLastCondition()">
                                    <i class="bi bi-trash"></i> Remove Last
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-previous" onclick="prevStep(2)">Previous</button>
                    <button type="button" class="btn btn-primary" onclick="nextStep(2)">Next: Time Settings</button>
                </div>
            </div>

            <!-- Step 3: Time Restrictions -->
            <div class="wizard-step" id="step3">
                <div class="wizard-step-indicator">
                    <div class="wizard-step-number">3</div>
                    <div>
                        <h5 class="mb-0">Time & Schedule</h5>
                        <small class="text-muted">Set when this rule should be active</small>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="bi bi-clock"></i> Time Restrictions</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="enableTimeRestrictions" name="timeRestrictionsEnabled">
                            <label class="form-check-label" for="enableTimeRestrictions">Enable Time Restrictions</label>
                        </div>
                        
                        <div id="timeRestrictionsContainer" style="display: none;">
                            <!-- Time restrictions content -->
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Days of Week</label>
                                    <div class="days-of-week-container">
                                        <div class="day-selector">
                                            <input type="checkbox" id="dayMonday" name="days" value="monday">
                                            <label for="dayMonday">Mon</label>
                                        </div>
                                        <div class="day-selector">
                                            <input type="checkbox" id="dayTuesday" name="days" value="tuesday">
                                            <label for="dayTuesday">Tue</label>
                                        </div>
                                        <div class="day-selector">
                                            <input type="checkbox" id="dayWednesday" name="days" value="wednesday">
                                            <label for="dayWednesday">Wed</label>
                                        </div>
                                        <div class="day-selector">
                                            <input type="checkbox" id="dayThursday" name="days" value="thursday">
                                            <label for="dayThursday">Thu</label>
                                        </div>
                                        <div class="day-selector">
                                            <input type="checkbox" id="dayFriday" name="days" value="friday">
                                            <label for="dayFriday">Fri</label>
                                        </div>
                                        <div class="day-selector">
                                            <input type="checkbox" id="daySaturday" name="days" value="saturday">
                                            <label for="daySaturday">Sat</label>
                                        </div>
                                        <div class="day-selector">
                                            <input type="checkbox" id="daySunday" name="days" value="sunday">
                                            <label for="daySunday">Sun</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="row">
                                        <div class="col-6">
                                            <label for="startTime" class="form-label">Start Time</label>
                                            <input type="text" class="form-control time-picker" id="startTime" name="startTime" placeholder="HH:MM">
                                        </div>
                                        <div class="col-6">
                                            <label for="endTime" class="form-label">End Time</label>
                                            <input type="text" class="form-control time-picker" id="endTime" name="endTime" placeholder="HH:MM">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-previous" onclick="prevStep(3)">Previous</button>
                    <button type="button" class="btn btn-primary" onclick="nextStep(3)">Next: Configure Actions</button>
                </div>
            </div>

            <!-- Step 4: Dynamic Actions -->
            <div class="wizard-step" id="step4">
                <div class="wizard-step-indicator">
                    <div class="wizard-step-number">4</div>
                    <div>
                        <h5 class="mb-0">Intelligent Actions</h5>
                        <small class="text-muted">Define what happens when conditions are met</small>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="bi bi-lightning"></i> Automated Actions</h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted mb-3">Configure actions that will be executed automatically. Actions are optimized based on your inverter types.</p>
                        
                        <div id="actionsContainer">
                            <!-- Dynamic actions will be added here -->
                        </div>
                        
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-outline-primary" onclick="addAction()">
                                <i class="bi bi-plus-circle"></i> Add Action
                            </button>
                            <button type="button" class="btn btn-outline-success" onclick="addSmartAction()">
                                <i class="bi bi-magic"></i> Smart Action
                            </button>
                        </div>

                        <div class="compatibility-note mt-3" id="compatibilityNote" style="display: none;">
                            <h6><i class="bi bi-info-circle"></i> Compatibility Information</h6>
                            <div id="compatibilityDetails">
                                <!-- Dynamic compatibility information will be shown here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Rule Preview -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="bi bi-eye"></i> Rule Preview</h5>
                    </div>
                    <div class="card-body">
                        <div id="rulePreview" class="preview-container">
                            <!-- Rule preview will be shown here -->
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-previous" onclick="prevStep(4)">Previous</button>
                    <button type="button" class="btn btn-success btn-lg" onclick="saveRule()">
                        <i class="bi bi-check-circle"></i> Create Smart Rule
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>
</div>
    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    
    <style>
        .days-of-week-container {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }
        
        .day-selector {
            position: relative;
        }
        
        .day-selector input[type="checkbox"] {
            position: absolute;
            opacity: 0;
            cursor: pointer;
        }
        
        .day-selector label {
            display: block;
            padding: 0.5rem 0.75rem;
            border: 2px solid #e9ecef;
            border-radius: 0.375rem;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 500;
            text-align: center;
            min-width: 3rem;
        }
        
        .day-selector input:checked + label {
            background-color: #0d6efd;
            border-color: #0d6efd;
            color: white;
        }
        
        .day-selector:hover label {
            border-color: #0d6efd;
        }
    </style>

    <script>
        // Global variables
        let currentStep = 1;
        let conditions = [];
        let actions = [];
        let inverterTypes = {};
        let inverterCount = 0;
        let isEditMode = false;
        let editRuleId = null;
        
        // Setting definitions based on inverter types
        const settingDefinitions = {
            // Legacy settings
            legacy: {
                'grid_charge': {
                    name: 'Grid Charge',
                    description: 'Enable/disable grid charging',
                    values: [
                        { value: 'Enabled', label: 'Enabled' },
                        { value: 'Disabled', label: 'Disabled' }
                    ]
                },
                'energy_pattern': {
                    name: 'Energy Pattern',
                    description: 'Set energy usage priority',
                    values: [
                        { value: 'Battery first', label: 'Battery First' },
                        { value: 'Load first', label: 'Load First' },
                        { value: 'Grid first', label: 'Grid First' },
                        { value: 'Solar first', label: 'Solar First' }
                    ]
                }
            },
            // New inverter settings
            new: {
                'charger_source_priority': {
                    name: 'Charger Source Priority',
                    description: 'Set battery charging priority',
                    values: [
                        { value: 'Solar first', label: 'Solar First' },
                        { value: 'Solar and utility simultaneously', label: 'Solar + Utility' },
                        { value: 'Solar only', label: 'Solar Only' },
                        { value: 'Utility first', label: 'Utility First' }
                    ]
                },
                'output_source_priority': {
                    name: 'Output Source Priority',
                    description: 'Set power output priority',
                    values: [
                        { value: 'Solar/Battery/Utility', label: 'Solar/Battery/Utility' },
                        { value: 'Solar first', label: 'Solar First' },
                        { value: 'Utility first', label: 'Utility First' },
                        { value: 'Solar/Utility/Battery', label: 'Solar/Utility/Battery' }
                    ]
                }
            },
            // Universal settings (work on both)
            universal: {
                'max_discharge_current': {
                    name: 'Max Discharge Current',
                    description: 'Maximum battery discharge current',
                    type: 'number',
                    unit: 'A',
                    min: 0,
                    max: 100,
                    step: 0.1
                },
                'max_charge_current': {
                    name: 'Max Charge Current',
                    description: 'Maximum battery charge current',
                    type: 'number',
                    unit: 'A',
                    min: 0,
                    max: 100,
                    step: 0.1
                },
                'max_grid_charge_current': {
                    name: 'Max Grid Charge Current',
                    description: 'Maximum grid charging current',
                    type: 'number',
                    unit: 'A',
                    min: 0,
                    max: 100,
                    step: 0.1
                },
                'remote_switch': {
                    name: 'Remote Switch',
                    description: 'Control remote switch',
                    values: [
                        { value: 'On', label: 'On' },
                        { value: 'Off', label: 'Off' }
                    ]
                },
                'solar_export_when_battery_full': {
                    name: 'Solar Export When Battery Full',
                    description: 'Allow solar export when battery is full',
                    values: [
                        { value: 'Enabled', label: 'Enabled' },
                        { value: 'Disabled', label: 'Disabled' }
                    ]
                },
                'max_sell_power': {
                    name: 'Max Sell Power',
                    description: 'Maximum power for selling to grid',
                    type: 'number',
                    unit: 'W',
                    min: 0,
                    max: 15000,
                    step: 100
                }
            }
        };

        // Condition presets
        const conditionPresets = {
            'low_battery': {
                name: 'Low Battery',
                condition: { parameter: 'battery_soc', operator: 'lt', value: 30 }
            },
            'high_battery': {
                name: 'High Battery',
                condition: { parameter: 'battery_soc', operator: 'gt', value: 80 }
            },
            'high_pv': {
                name: 'High Solar Production',
                condition: { parameter: 'pv_power', operator: 'gt', value: 5000 }
            },
            'low_load': {
                name: 'Low Load',
                condition: { parameter: 'load', operator: 'lt', value: 3000 }
            },
            'high_load': {
                name: 'High Load',
                condition: { parameter: 'load', operator: 'gt', value: 8000 }
            }
        };

        // Smart action templates
        const smartActionTemplates = {
            'nighttime_charging': {
                name: 'Nighttime Grid Charging',
                description: 'Enable grid charging during off-peak hours',
                actions: [
                    { setting: 'grid_charge', value: 'Enabled', inverter: 'all' }
                ]
            },
            'solar_priority': {
                name: 'Solar Priority Mode',
                description: 'Maximize solar energy usage',
                actions: [
                    { setting: 'energy_pattern', value: 'Solar first', inverter: 'all' }
                ]
            },
            'battery_protection': {
                name: 'Battery Protection',
                description: 'Protect battery from deep discharge',
                actions: [
                    { setting: 'max_discharge_current', value: '50', inverter: 'all' }
                ]
            }
        };

        function removeLastCondition() {
    const conditionCards = document.querySelectorAll('#conditionsContainer .card');
    if (conditionCards.length > 0) {
        const lastCard = conditionCards[conditionCards.length - 1];
        removeCondition(lastCard.id);
    }
    updateConditionButtons();
}

function updateConditionButtons() {
    const conditionCards = document.querySelectorAll('#conditionsContainer .card');
    const conditionButtons = document.getElementById('conditionButtons');
    
    if (conditionCards.length > 0) {
        conditionButtons.style.display = 'block';
    } else {
        conditionButtons.style.display = 'none';
    }
}

        // Initialize the wizard
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Initializing dynamic inverter wizard...');
            
            // Initialize time pickers
            document.querySelectorAll('.time-picker').forEach(el => {
                flatpickr(el, {
                    enableTime: true,
                    noCalendar: true,
                    dateFormat: "H:i",
                    time_24hr: true
                });
            });
            
            // Setup event listeners
            setupEventListeners();
            
            // Fetch inverter information
            fetchInverterTypes();
            
            // Check for edit mode
            checkEditMode();
            
            // Initialize with default condition and action
            setTimeout(() => {
                if (!isEditMode) {
                    addCondition();
                    addAction();
                }
            }, 1000);
        });

        function setupEventListeners() {
            // Time restrictions toggle
            document.getElementById('enableTimeRestrictions').addEventListener('change', function() {
                document.getElementById('timeRestrictionsContainer').style.display = this.checked ? 'block' : 'none';
            });
            
            // Advanced options toggle
            document.getElementById('showAdvanced').addEventListener('change', function() {
                toggleAdvancedOptions(this.checked);
            });
        }

        function checkEditMode() {
            const urlParams = new URLSearchParams(window.location.search);
            const editParam = urlParams.get('edit');
            
            if (editParam) {
                isEditMode = true;
                editRuleId = editParam;
                console.log(`Edit mode detected for rule ID: ${editRuleId}`);
                fetchRuleData(editRuleId);
            }
        }

        async function fetchInverterTypes() {
            try {
                const ingressPath = document.getElementById('dynamicRuleWizardForm').getAttribute('data-ingress-path') || '';
                
                // Fetch inverter types
                const response = await fetch(`${ingressPath}/api/inverter-types`);
                const data = await response.json();
                
                if (data.success) {
                    inverterTypes = data.inverterTypes;
                    inverterCount = data.totalInverters;
                    
                    updateInverterDetectionDisplay();
                    populateInverterSelection();
                } else {
                    console.error('Failed to fetch inverter types:', data.error);
                    showDetectionError();
                }
            } catch (error) {
                console.error('Error fetching inverter types:', error);
                showDetectionError();
            }
        }

        function updateInverterDetectionDisplay() {
            const detectionStatus = document.getElementById('detectionStatus');
            const inverterTypesDisplay = document.getElementById('inverterTypesDisplay');
            const totalInvertersCount = document.getElementById('totalInvertersCount');
            const detectionStatusBadge = document.getElementById('detectionStatusBadge');
            
            totalInvertersCount.textContent = inverterCount;
            
            if (Object.keys(inverterTypes).length === 0) {
                detectionStatus.innerHTML = `
                    <div class="detection-spinner"></div>
                    <span>No inverter types detected yet. Waiting for MQTT data...</span>
                `;
                detectionStatusBadge.className = 'badge bg-warning';
                detectionStatusBadge.textContent = 'Pending';
            } else {
                detectionStatus.innerHTML = `
                    <i class="bi bi-check-circle-fill text-success"></i>
                    <span>Inverter types successfully detected!</span>
                `;
                detectionStatusBadge.className = 'badge bg-success';
                detectionStatusBadge.textContent = 'Complete';
                
                // Display detected types
                let typesHTML = '<div class="mt-2">';
                Object.entries(inverterTypes).forEach(([inverterId, info]) => {
                    const badgeClass = getBadgeClass(info.type);
                    typesHTML += `<span class="inverter-type-badge ${badgeClass}">${inverterId}: ${info.type}</span>`;
                });
                typesHTML += '</div>';
                
                inverterTypesDisplay.innerHTML = typesHTML;
            }
        }

        function getBadgeClass(type) {
            switch (type) {
                case 'legacy': return 'badge-legacy';
                case 'new': return 'badge-new';
                case 'hybrid': return 'badge-hybrid';
                default: return 'badge-unknown';
            }
        }

        function showDetectionError() {
            const detectionStatus = document.getElementById('detectionStatus');
            const detectionStatusBadge = document.getElementById('detectionStatusBadge');
            
            detectionStatus.innerHTML = `
                <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                <span>Detection unavailable. Using default configuration.</span>
            `;
            detectionStatusBadge.className = 'badge bg-warning';
            detectionStatusBadge.textContent = 'Fallback';
            
            // Use default inverter configuration
            inverterCount = 3; // Default assumption
            populateInverterSelection();
        }

        function populateInverterSelection() {
            const container = document.getElementById('inverterSelectionContainer');
            
            let html = `
                <div class="mb-3">
                    <label class="form-label">Select Target Inverters</label>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="allInverters" value="all" checked onchange="toggleAllInverters(this)">
                        <label class="form-check-label" for="allInverters">
                            <strong>All Inverters</strong>
                            <small class="text-muted d-block">Apply this rule to all detected inverters</small>
                        </label>
                    </div>
                    <hr>
                    <div class="row">
            `;
            
            // Generate individual inverter options
            for (let i = 1; i <= inverterCount; i++) {
                const inverterId = `inverter_${i}`;
                const inverterInfo = inverterTypes[inverterId];
                const type = inverterInfo ? inverterInfo.type : 'unknown';
                const badgeClass = getBadgeClass(type);
                
                html += `
                    <div class="col-md-4 col-sm-6 mb-3">
                        <div class="form-check">
                            <input class="form-check-input inverter-checkbox" type="checkbox" id="${inverterId}" value="${inverterId}">
                            <label class="form-check-label" for="${inverterId}">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>Inverter ${i}</span>
                                    <span class="inverter-type-badge ${badgeClass}">${type}</span>
                                </div>
                                ${inverterInfo ? `<small class="text-muted">Confidence: ${inverterInfo.detectionConfidence || 0}</small>` : ''}
                            </label>
                        </div>
                    </div>
                `;
            }
            
            html += `
                    </div>
                </div>
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i>
                    <strong>Smart Compatibility:</strong> Actions will be automatically optimized for each inverter type.
                    Legacy settings will be mapped to new inverter commands and vice versa.
                </div>
            `;
            
            container.innerHTML = html;
        }

        function toggleAllInverters(checkbox) {
            const inverterCheckboxes = document.querySelectorAll('.inverter-checkbox');
            inverterCheckboxes.forEach(cb => {
                cb.checked = checkbox.checked;
            });
        }

        function addCondition(existingCondition = null) {
            const conditionId = `condition-${Date.now()}`;
            const conditionsContainer = document.getElementById('conditionsContainer');
            
            const conditionHTML = `
                <div class="dynamic-setting-card card mb-3" id="${conditionId}">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-funnel"></i> Condition
                            </h6>
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeCondition('${conditionId}')">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <label class="form-label">Parameter</label>
                                <select class="form-select condition-parameter" onchange="updateConditionHelp(this)">
                                    <option value="battery_soc">Battery SOC (%)</option>
                                    <option value="pv_power">PV Power (W)</option>
                                    <option value="load">Load Power (W)</option>
                                    <option value="grid_voltage">Grid Voltage (V)</option>
                                    <option value="grid_power">Grid Power (W)</option>
                                    <option value="battery_voltage">Battery Voltage (V)</option>
                                    <option value="battery_current">Battery Current (A)</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Operator</label>
                                <select class="form-select condition-operator">
                                    <option value="gt">Greater than (>)</option>
                                    <option value="lt">Less than (<)</option>
                                    <option value="eq">Equal to (=)</option>
                                    <option value="gte">Greater than or equal to (≥)</option>
                                    <option value="lte">Less than or equal to (≤)</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Value</label>
                                <input type="number" class="form-control condition-value" step="0.1" onchange="updateRulePreview()">
                            </div>
                        </div>
                        <div class="condition-help mt-2 text-muted small" style="display: none;">
                            <!-- Dynamic help text will appear here -->
                        </div>
                    </div>
                </div>
            `;
            
            conditionsContainer.insertAdjacentHTML('beforeend', conditionHTML);
            
            // Set existing values if provided
            if (existingCondition) {
                const conditionElement = document.getElementById(conditionId);
                conditionElement.querySelector('.condition-parameter').value = existingCondition.parameter;
                conditionElement.querySelector('.condition-operator').value = existingCondition.operator;
                conditionElement.querySelector('.condition-value').value = existingCondition.value;
                updateConditionHelp(conditionElement.querySelector('.condition-parameter'));
            }
            updateConditionButtons();
        }

        function addPresetCondition() {
            // Show preset selection modal or dropdown
            const presetOptions = Object.entries(conditionPresets).map(([key, preset]) => {
                return `<option value="${key}">${preset.name}</option>`;
            }).join('');
            
            const select = document.createElement('select');
            select.className = 'form-select';
            select.innerHTML = `<option value="">Select a preset...</option>${presetOptions}`;
            
            select.addEventListener('change', function() {
                if (this.value) {
                    const preset = conditionPresets[this.value];
                    addCondition(preset.condition);
                    updateRulePreview();
                }
            });
            
            // Create a temporary modal or use a simple prompt
            const presetKey = prompt('Available presets:\n' + 
                Object.entries(conditionPresets).map(([key, preset], index) => 
                    `${index + 1}. ${preset.name} (${key})`
                ).join('\n') + 
                '\nEnter preset key:');
                
            if (presetKey && conditionPresets[presetKey]) {
                addCondition(conditionPresets[presetKey].condition);
                updateRulePreview();
            }
        }

        function updateConditionHelp(parameterSelect) {
            const helpDiv = parameterSelect.closest('.card-body').querySelector('.condition-help');
            const parameter = parameterSelect.value;
            
            const helpTexts = {
                'battery_soc': 'Battery State of Charge as a percentage (0-100%)',
                'pv_power': 'Current solar panel power output in Watts',
                'load': 'Current power consumption in Watts',
                'grid_voltage': 'Current grid voltage in Volts',
                'grid_power': 'Power being drawn from or fed to the grid (positive = import, negative = export)',
                'battery_voltage': 'Current battery voltage in Volts',
                'battery_current': 'Current battery charge/discharge current in Amperes'
            };
            
            if (helpTexts[parameter]) {
                helpDiv.textContent = helpTexts[parameter];
                helpDiv.style.display = 'block';
            } else {
                helpDiv.style.display = 'none';
            }
            
            updateRulePreview();
        }

        function removeCondition(conditionId) {
    const element = document.getElementById(conditionId);
    element.style.transition = 'all 0.3s ease';
    element.style.opacity = '0.5';
    element.style.transform = 'translateX(10px)';
    
    setTimeout(() => {
        element.remove();
        updateRulePreview();
        updateConditionButtons(); // Add this line
    }, 300);
}

        function addAction(existingAction = null) {
            const actionId = `action-${Date.now()}`;
            const actionsContainer = document.getElementById('actionsContainer');
            
            const actionHTML = `
                <div class="dynamic-setting-card card mb-3" id="${actionId}">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-lightning"></i> Action
                            </h6>
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeAction('${actionId}')">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <label class="form-label">Setting</label>
                                <select class="form-select action-setting" onchange="updateActionOptions(this)">
                                    ${generateSettingOptions()}
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Value</label>
                                <div class="action-value-container">
                                    <!-- Dynamic value input will be inserted here -->
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Target</label>
                                <select class="form-select action-inverter">
                                    ${generateInverterOptions()}
                                </select>
                            </div>
                        </div>
                        <div class="mapping-info mt-2" id="mapping-${actionId}">
                            <!-- Mapping information will appear here -->
                        </div>
                        <div class="action-preview mt-2" style="display: none;">
                            <!-- Action preview will appear here -->
                        </div>
                    </div>
                </div>
            `;
            
            actionsContainer.insertAdjacentHTML('beforeend', actionHTML);
            
            // Initialize the action
            const actionElement = document.getElementById(actionId);
            const settingSelect = actionElement.querySelector('.action-setting');
            updateActionOptions(settingSelect);
            
            // Set existing values if provided
            if (existingAction) {
                setTimeout(() => {
                    settingSelect.value = existingAction.setting;
                    updateActionOptions(settingSelect);
                    
                    setTimeout(() => {
                        const valueElement = actionElement.querySelector('.action-value');
                        if (valueElement) {
                            valueElement.value = existingAction.value;
                        }
                        
                        const inverterSelect = actionElement.querySelector('.action-inverter');
                        if (inverterSelect && existingAction.inverter) {
                            inverterSelect.value = existingAction.inverter;
                        }
                        
                        updateActionPreview(actionElement);
                    }, 100);
                }, 50);
            }
        }

        function generateSettingOptions() {
            let options = '';
            
            // Add settings based on detected inverter types
            const hasLegacy = Object.values(inverterTypes).some(inv => inv.type === 'legacy' || inv.type === 'hybrid');
            const hasNew = Object.values(inverterTypes).some(inv => inv.type === 'new' || inv.type === 'hybrid');
            
            if (hasLegacy || Object.keys(inverterTypes).length === 0) {
                options += '<optgroup label="Legacy Inverter Settings">';
                Object.entries(settingDefinitions.legacy).forEach(([key, def]) => {
                    options += `<option value="${key}" data-type="legacy">${def.name}</option>`;
                });
                options += '</optgroup>';
            }
            
            if (hasNew || Object.keys(inverterTypes).length === 0) {
                options += '<optgroup label="New Inverter Settings">';
                Object.entries(settingDefinitions.new).forEach(([key, def]) => {
                    options += `<option value="${key}" data-type="new">${def.name}</option>`;
                });
                options += '</optgroup>';
            }
            
            options += '<optgroup label="Universal Settings">';
            Object.entries(settingDefinitions.universal).forEach(([key, def]) => {
                options += `<option value="${key}" data-type="universal">${def.name}</option>`;
            });
            options += '</optgroup>';
            
            return options;
        }

        function generateInverterOptions() {
            let options = '<option value="all">All Inverters</option>';
            
            for (let i = 1; i <= inverterCount; i++) {
                const inverterId = `inverter_${i}`;
                const inverterInfo = inverterTypes[inverterId];
                const type = inverterInfo ? ` (${inverterInfo.type})` : '';
                options += `<option value="${inverterId}">Inverter ${i}${type}</option>`;
            }
            
            return options;
        }

        function updateActionOptions(settingSelect) {
            const actionElement = settingSelect.closest('.card');
            const valueContainer = actionElement.querySelector('.action-value-container');
            const mappingInfo = actionElement.querySelector('.mapping-info');
            const setting = settingSelect.value;
            
            // Get setting definition
            let settingDef = null;
            let settingType = null;
            
            // Find the setting definition
            for (const [type, definitions] of Object.entries(settingDefinitions)) {
                if (definitions[setting]) {
                    settingDef = definitions[setting];
                    settingType = type;
                    break;
                }
            }
            
            if (!settingDef) return;
            
            // Create value input based on setting type
            let valueHTML = '';
            
            if (settingDef.values) {
                // Dropdown values
                valueHTML = '<select class="form-select action-value" onchange="updateActionPreview(this.closest(\'.card\'))">';
                settingDef.values.forEach(option => {
                    valueHTML += `<option value="${option.value}">${option.label}</option>`;
                });
                valueHTML += '</select>';
            } else if (settingDef.type === 'number') {
                // Numeric input
                valueHTML = `<input type="number" class="form-control action-value" 
                    min="${settingDef.min || 0}" 
                    max="${settingDef.max || 100}" 
                    step="${settingDef.step || 1}"
                    placeholder="${settingDef.unit ? 'Value in ' + settingDef.unit : 'Value'}"
                    onchange="updateActionPreview(this.closest('.card'))">`;
            } else {
                // Text input
                valueHTML = '<input type="text" class="form-control action-value" placeholder="Value" onchange="updateActionPreview(this.closest(\'.card\'))">';
            }
            
            valueContainer.innerHTML = valueHTML;
            
            // Show mapping information if needed
            updateMappingInfo(actionElement, setting, settingType);
            updateActionPreview(actionElement);
        }

        function updateMappingInfo(actionElement, setting, settingType) {
            const mappingInfo = actionElement.querySelector('.mapping-info');
            const inverterSelect = actionElement.querySelector('.action-inverter');
            const selectedInverters = inverterSelect.value === 'all' ? 
                Object.keys(inverterTypes) : [inverterSelect.value];
            
            let mappingHTML = '';
            let showMapping = false;
            
            // Check if mapping is needed
            selectedInverters.forEach(inverterId => {
                const inverterInfo = inverterTypes[inverterId];
                if (!inverterInfo) return;
                
                const inverterType = inverterInfo.type;
                
                // Check for mapping scenarios
                if (settingType === 'legacy' && (inverterType === 'new' || inverterType === 'hybrid')) {
                    showMapping = true;
                    mappingHTML += `<div class="small">
                        <i class="bi bi-arrow-right"></i> 
                        <strong>${inverterId}:</strong> Will map legacy "${setting}" to appropriate new inverter command
                    </div>`;
                } else if (settingType === 'new' && (inverterType === 'legacy')) {
                    showMapping = true;
                    mappingHTML += `<div class="small">
                        <i class="bi bi-arrow-left"></i> 
                        <strong>${inverterId}:</strong> Will map new "${setting}" to legacy inverter command
                    </div>`;
                }
            });
            
            if (showMapping) {
                mappingInfo.innerHTML = `
                    <div class="alert alert-info py-2 mb-0">
                        <strong><i class="bi bi-magic"></i> Smart Mapping Active:</strong>
                        ${mappingHTML}
                    </div>
                `;
                mappingInfo.style.display = 'block';
            } else {
                mappingInfo.style.display = 'none';
            }
        }

        function updateActionPreview(actionElement) {
            const previewDiv = actionElement.querySelector('.action-preview');
            const setting = actionElement.querySelector('.action-setting').value;
            const valueElement = actionElement.querySelector('.action-value');
            const inverter = actionElement.querySelector('.action-inverter').value;
            
            if (!valueElement || !valueElement.value) {
                previewDiv.style.display = 'none';
                return;
            }
            
            const value = valueElement.value;
            
            // Generate preview
            let previewText = `Command: Set ${setting} = ${value} on ${inverter === 'all' ? 'all inverters' : inverter}`;
            
            previewDiv.innerHTML = previewText;
            previewDiv.style.display = 'block';
            
            updateRulePreview();
        }

        function addSmartAction() {
            const templateKeys = Object.keys(smartActionTemplates);
            const templateKey = prompt('Available smart actions:\n' + 
                templateKeys.map((key, index) => 
                    `${index + 1}. ${smartActionTemplates[key].name} (${key})`
                ).join('\n') + 
                '\nEnter template key:');
                
            if (templateKey && smartActionTemplates[templateKey]) {
                const template = smartActionTemplates[templateKey];
                template.actions.forEach(action => {
                    addAction(action);
                });
                updateRulePreview();
            }
        }

        function removeAction(actionId) {
            const element = document.getElementById(actionId);
            element.style.transition = 'all 0.3s ease';
            element.style.opacity = '0.5';
            element.style.transform = 'translateX(10px)';
            
            setTimeout(() => {
                element.remove();
                updateRulePreview();
                updateCompatibilityNote();
            }, 300);
        }

        function updateCompatibilityNote() {
            const compatibilityNote = document.getElementById('compatibilityNote');
            const compatibilityDetails = document.getElementById('compatibilityDetails');
            
            // Analyze actions for compatibility
            const actionElements = document.querySelectorAll('#actionsContainer .card');
            let compatibilityInfo = [];
            
            actionElements.forEach(actionElement => {
                const setting = actionElement.querySelector('.action-setting').value;
                const inverter = actionElement.querySelector('.action-inverter').value;
                
                if (setting && inverter) {
                    const selectedInverters = inverter === 'all' ? 
                        Object.keys(inverterTypes) : [inverter];
                    
                    selectedInverters.forEach(inverterId => {
                        const inverterInfo = inverterTypes[inverterId];
                        if (inverterInfo) {
                            // Add compatibility information
                            const settingType = getSettingType(setting);
                            if (needsMapping(settingType, inverterInfo.type)) {
                                compatibilityInfo.push({
                                    inverter: inverterId,
                                    setting: setting,
                                    mapping: getMappingDescription(setting, inverterInfo.type)
                                });
                            }
                        }
                    });
                }
            });
            
            if (compatibilityInfo.length > 0) {
                let detailsHTML = '<ul class="mb-0">';
                compatibilityInfo.forEach(info => {
                    detailsHTML += `<li><strong>${info.inverter}:</strong> ${info.mapping}</li>`;
                });
                detailsHTML += '</ul>';
                
                compatibilityDetails.innerHTML = detailsHTML;
                compatibilityNote.style.display = 'block';
            } else {
                compatibilityNote.style.display = 'none';
            }
        }

        function getSettingType(setting) {
            for (const [type, definitions] of Object.entries(settingDefinitions)) {
                if (definitions[setting]) {
                    return type;
                }
            }
            return 'unknown';
        }

        function needsMapping(settingType, inverterType) {
            return (settingType === 'legacy' && (inverterType === 'new' || inverterType === 'hybrid')) ||
                   (settingType === 'new' && inverterType === 'legacy');
        }

        function getMappingDescription(setting, inverterType) {
            const mappings = {
                'grid_charge': {
                    'new': 'Will be mapped to charger_source_priority',
                    'hybrid': 'Will use appropriate setting based on detection'
                },
                'energy_pattern': {
                    'new': 'Will be mapped to output_source_priority',
                    'hybrid': 'Will use appropriate setting based on detection'
                },
                'charger_source_priority': {
                    'legacy': 'Will be mapped to grid_charge',
                },
                'output_source_priority': {
                    'legacy': 'Will be mapped to energy_pattern',
                }
            };
            
            return mappings[setting] && mappings[setting][inverterType] || 
                   'Will be intelligently mapped to compatible setting';
        }

        function updateRulePreview() {
            const previewContainer = document.getElementById('rulePreview');
            
            // Collect rule data
            const name = document.getElementById('ruleName').value || 'Unnamed Rule';
            const description = document.getElementById('ruleDescription').value || 'No description';
            const active = document.getElementById('ruleActive').checked;
            
            // Collect conditions
            conditions = [];
            document.querySelectorAll('#conditionsContainer .card').forEach(conditionElement => {
                const parameter = conditionElement.querySelector('.condition-parameter').value;
                const operator = conditionElement.querySelector('.condition-operator').value;
                const value = conditionElement.querySelector('.condition-value').value;
                
                if (parameter && operator && value) {
                    conditions.push({ parameter, operator, value: parseFloat(value) });
                }
            });
            
            // Collect actions
            actions = [];
            document.querySelectorAll('#actionsContainer .card').forEach(actionElement => {
                const setting = actionElement.querySelector('.action-setting').value;
                const valueElement = actionElement.querySelector('.action-value');
                const inverter = actionElement.querySelector('.action-inverter').value;
                
                if (setting && valueElement && valueElement.value && inverter) {
                    actions.push({ setting, value: valueElement.value, inverter });
                }
            });
            
            // Generate preview HTML
            let previewHTML = `
                <div class="mb-3">
                    <h6><i class="bi bi-info-circle"></i> Rule Summary</h6>
                    <div><strong>Name:</strong> ${name}</div>
                    <div><strong>Description:</strong> ${description}</div>
                    <div><strong>Status:</strong> ${active ? '✅ Active' : '❌ Inactive'}</div>
                </div>
            `;
            
            // Add conditions
            previewHTML += '<div class="mb-3"><h6><i class="bi bi-funnel"></i> Conditions</h6>';
            if (conditions.length === 0) {
                previewHTML += '<div class="text-muted">No conditions (rule will always execute)</div>';
            } else {
                previewHTML += '<ul>';
                conditions.forEach((condition, index) => {
                    const logicalOp = index === 0 ? 'IF' : 'AND';
                    const paramName = getParameterDisplayName(condition.parameter);
                    const opSymbol = getOperatorSymbol(condition.operator);
                    const unit = getParameterUnit(condition.parameter);
                    
                    previewHTML += `<li>${logicalOp} ${paramName} ${opSymbol} ${condition.value}${unit}</li>`;
                });
                previewHTML += '</ul>';
            }
            previewHTML += '</div>';
            
            // Add actions
            previewHTML += '<div class="mb-3"><h6><i class="bi bi-lightning"></i> Actions</h6>';
            if (actions.length === 0) {
                previewHTML += '<div class="text-muted">No actions defined</div>';
            } else {
                previewHTML += '<ul>';
                actions.forEach(action => {
                    const settingName = getSettingDisplayName(action.setting);
                    const target = action.inverter === 'all' ? 'All Inverters' : action.inverter;
                    previewHTML += `<li>Set ${settingName} to ${action.value} on ${target}</li>`;
                });
                previewHTML += '</ul>';
            }
            previewHTML += '</div>';
            
            // Add time restrictions
            const timeEnabled = document.getElementById('enableTimeRestrictions').checked;
            if (timeEnabled) {
                previewHTML += '<div class="mb-3"><h6><i class="bi bi-clock"></i> Time Restrictions</h6>';
                
                const selectedDays = Array.from(document.querySelectorAll('input[name="days"]:checked'))
                    .map(cb => cb.value);
                const startTime = document.getElementById('startTime').value;
                const endTime = document.getElementById('endTime').value;
                
                if (selectedDays.length > 0) {
                    previewHTML += `<div>Days: ${selectedDays.join(', ')}</div>`;
                }
                if (startTime && endTime) {
                    previewHTML += `<div>Time: ${startTime} to ${endTime}</div>`;
                }
                
                previewHTML += '</div>';
            }
            
            previewContainer.innerHTML = previewHTML;
        }

        function getParameterDisplayName(parameter) {
            const names = {
                'battery_soc': 'Battery SOC',
                'pv_power': 'PV Power',
                'load': 'Load Power',
                'grid_voltage': 'Grid Voltage',
                'grid_power': 'Grid Power',
                'battery_voltage': 'Battery Voltage',
                'battery_current': 'Battery Current'
            };
            return names[parameter] || parameter;
        }

        function getOperatorSymbol(operator) {
            const symbols = {
                'gt': '>',
                'lt': '<',
                'eq': '=',
                'gte': '≥',
                'lte': '≤'
            };
            return symbols[operator] || operator;
        }

        function getParameterUnit(parameter) {
            const units = {
                'battery_soc': '%',
                'pv_power': 'W',
                'load': 'W',
                'grid_voltage': 'V',
                'grid_power': 'W',
                'battery_voltage': 'V',
                'battery_current': 'A'
            };
            return units[parameter] || '';
        }

        function getSettingDisplayName(setting) {
            for (const definitions of Object.values(settingDefinitions)) {
                if (definitions[setting]) {
                    return definitions[setting].name;
                }
            }
            return setting;
        }

        function toggleAdvancedOptions(show) {
            // Toggle visibility of advanced features
            const advancedElements = document.querySelectorAll('.advanced-option');
            advancedElements.forEach(element => {
                element.style.display = show ? 'block' : 'none';
            });
        }

        // Navigation functions
        function nextStep(step) {
            if (!validateStep(step)) return;
            
            document.getElementById(`step${step}`).classList.remove('active');
            document.getElementById(`step${step + 1}`).classList.add('active');
            
            currentStep = step + 1;
            updateStepIndicators();
            
            if (currentStep === 4) {
                updateRulePreview();
                updateCompatibilityNote();
            }
        }

        function prevStep(step) {
            document.getElementById(`step${step}`).classList.remove('active');
            document.getElementById(`step${step - 1}`).classList.add('active');
            
            currentStep = step - 1;
            updateStepIndicators();
        }

        function updateStepIndicators() {
            document.querySelectorAll('.wizard-step-indicator').forEach((indicator, index) => {
                if (index + 1 === currentStep) {
                    indicator.classList.add('active');
                } else {
                    indicator.classList.remove('active');
                }
            });
        }

        function validateStep(step) {
            switch (step) {
                case 1:
                    if (!document.getElementById('ruleName').value.trim()) {
                        alert('Please enter a rule name');
                        return false;
                    }
                    break;
                case 2:
                    // Validate conditions if any exist
                    const conditionCards = document.querySelectorAll('#conditionsContainer .card');
                    for (let card of conditionCards) {
                        const value = card.querySelector('.condition-value').value;
                        if (!value) {
                            alert('Please complete all condition values or remove incomplete conditions');
                            return false;
                        }
                    }
                    break;
                case 3:
                    const timeEnabled = document.getElementById('enableTimeRestrictions').checked;
                    if (timeEnabled) {
                        const startTime = document.getElementById('startTime').value;
                        const endTime = document.getElementById('endTime').value;
                        const daysSelected = document.querySelectorAll('input[name="days"]:checked').length > 0;
                        
                        if (!startTime || !endTime) {
                            alert('Please set both start and end times');
                            return false;
                        }
                        if (!daysSelected) {
                            alert('Please select at least one day of the week');
                            return false;
                        }
                    }
                    break;
            }
            return true;
        }

        async function saveRule() {
            if (!validateStep(4)) return;
            
            updateRulePreview(); // Ensure latest data is captured
            
            if (actions.length === 0) {
                alert('Please add at least one action');
                return;
            }
            
            // Show loading
            document.getElementById('loadingOverlay').style.display = 'flex';
            
            // Build time restrictions
            const timeEnabled = document.getElementById('enableTimeRestrictions').checked;
            let timeRestrictions = { enabled: timeEnabled };
            
            if (timeEnabled) {
                const selectedDays = Array.from(document.querySelectorAll('input[name="days"]:checked'))
                    .map(cb => cb.value);
                
                timeRestrictions = {
                    enabled: true,
                    days: selectedDays,
                    startTime: document.getElementById('startTime').value,
                    endTime: document.getElementById('endTime').value
                };
            }
            
            // Build rule object
            const rule = {
                name: document.getElementById('ruleName').value,
                description: document.getElementById('ruleDescription').value,
                active: document.getElementById('ruleActive').checked,
                conditions: conditions,
                timeRestrictions: timeRestrictions,
                actions: actions
            };
            
            try {
                const ingressPath = document.getElementById('dynamicRuleWizardForm')
                    .getAttribute('data-ingress-path') || '';
                
                let apiUrl = `${ingressPath}/api/rules`;
                let method = 'POST';
                
                if (isEditMode && editRuleId) {
                    apiUrl = `${ingressPath}/api/rules/${editRuleId}`;
                    method = 'PUT';
                }
                
                const response = await fetch(apiUrl, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(rule)
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Network response was not ok');
                }
                
                // Hide loading
                document.getElementById('loadingOverlay').style.display = 'none';
                
                // Show success
                const successMessage = document.querySelector('.success-message');
                successMessage.style.display = 'block';
                successMessage.innerHTML = `
                    <strong>Success!</strong> Your intelligent rule has been ${isEditMode ? 'updated' : 'created'} successfully with automatic inverter type optimization.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                
                // Redirect after delay
                setTimeout(() => {
                    window.location.href = `${ingressPath}/rules`;
                }, 2000);
                
            } catch (error) {
                console.error('Error saving rule:', error);
                document.getElementById('loadingOverlay').style.display = 'none';
                alert(`Error ${isEditMode ? 'updating' : 'creating'} rule: ${error.message}`);
            }
        }

        async function fetchRuleData(ruleId) {
            try {
                document.getElementById('loadingOverlay').style.display = 'flex';
                
                const ingressPath = document.getElementById('dynamicRuleWizardForm')
                    .getAttribute('data-ingress-path') || '';
                
                const response = await fetch(`${ingressPath}/api/rules/${ruleId}`);
                const ruleData = await response.json();
                
                if (!response.ok) {
                    throw new Error(ruleData.error || 'Failed to fetch rule');
                }
                
                populateFormWithRuleData(ruleData);
                document.getElementById('loadingOverlay').style.display = 'none';
                
            } catch (error) {
                console.error('Error fetching rule data:', error);
                alert(`Failed to load rule for editing: ${error.message}`);
                document.getElementById('loadingOverlay').style.display = 'none';
            }
        }

        function populateFormWithRuleData(ruleData) {
            // Basic information
            document.getElementById('ruleName').value = ruleData.name || '';
            document.getElementById('ruleDescription').value = ruleData.description || '';
            document.getElementById('ruleActive').checked = ruleData.active !== false;
            
            // Clear and populate conditions
            document.getElementById('conditionsContainer').innerHTML = '';
            if (Array.isArray(ruleData.conditions)) {
                ruleData.conditions.forEach(condition => addCondition(condition));
            }
            
            // Clear and populate actions
            document.getElementById('actionsContainer').innerHTML = '';
            if (Array.isArray(ruleData.actions)) {
                ruleData.actions.forEach(action => addAction(action));
            }
            
            // Time restrictions
            if (ruleData.timeRestrictions && ruleData.timeRestrictions.enabled) {
                document.getElementById('enableTimeRestrictions').checked = true;
                document.getElementById('timeRestrictionsContainer').style.display = 'block';
                
                if (ruleData.timeRestrictions.startTime) {
                    document.getElementById('startTime').value = ruleData.timeRestrictions.startTime;
                }
                if (ruleData.timeRestrictions.endTime) {
                    document.getElementById('endTime').value = ruleData.timeRestrictions.endTime;
                }
                
                if (Array.isArray(ruleData.timeRestrictions.days)) {
                    ruleData.timeRestrictions.days.forEach(day => {
                        const checkbox = document.querySelector(`input[name="days"][value="${day}"]`);
                        if (checkbox) checkbox.checked = true;
                    });
                }
            }
            
            updateRulePreview();
        }
    </script>
    <script src="<%= ingress_path %>/js/loading.js"></script>
    <script src="<%= ingress_path %>/js/dark-mode.js"></script>
    <script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>