<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
  
      body {
        font-family: 'Inter', sans-serif;
        background: var(--bg-color);
      }
      :root {
          --primary-color: #DEAF0B;
          --bg-color: #f5f6fa;
          --text-color: #2f3640;
          --icon-color: #636e72;
          --green: #4CAF50;
          --red: #F44336;
          --blue: #2196F3;
          --amber: #FFC107;
          --gray: #757575;
         }
         body.dark-mode { background-color: rgba(24, 27, 31, 1); color: #f5f6fa; }
         body, html {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 0;
          height: 100%;
          
         }
          /* Sidebar styles */
          .sidebar {
              width: 280px;
              height: 100vh;
              background-color: white;
              border-right: 1px solid #e5e7eb;
              display: flex;
              flex-direction: column;
              position: fixed;
              top: 0;
              left: 0;
              z-index: 1000;
              transition: width 0.3s ease;
          }
         
                 .logo-container {
                     padding: 1.5rem;
                     border-bottom: 1px solid #e5e7eb;
                     display: flex;
                     align-items: center;
                     gap: 0.75rem;
                 }
         
                 .logo-icon {
          width: 50px;
          height: 50px;
          border-radius: 8px;
          display: flex;
          justify-content: center;
          align-items: center;
          color: white;
          font-weight: bold;
          font-size: 20px;
         }
         
         .logo-text {
          margin-left: 10px;
          font-weight: bold;
          color: var(--text-color);
          font-size: 18px;
         }
         
         .logo-text .highlight {
          color: var(--primary-color);
          margin-left: 10px;
         }
         
         
         nav {
          flex-grow: 1;
         }
         
         nav ul {
          list-style-type: none;
          padding: 0;
          margin: 0;
         }
         nav li {
          padding: 15px 20px;
          display: flex;
          align-items: center;
          color: var(--text-color);
          cursor: pointer;
          transition: background-color 0.3s;
          font-size: 18px;
         }
         
         nav li a{
          text-decoration: none;
          color: #2f3640;
          font-weight: bold;
         }
         nav li:hover {
          background-color: var(--bg-color);
         }
         
         nav li i {
          margin-right: 15px;
          color: var(--icon-color);
          font-size: 24px;
         }
         
         .bottom-options {
          padding: 20px;
          border-top: 1px solid #dcdde1;
         }
         
         .toggle-sidebar {
          display: flex;
          align-items: center;
          justify-content: space-between;
          cursor: pointer;
          font-size: 16px;
         }
         
         .toggle-text {
          margin-right: 10px;
         }
         
         .toggle-switch {
          width: 50px;
          height: 25px;
          background-color: #dcdde1;
          border-radius: 12.5px;
          position: relative;
          transition: background-color 0.3s;
         }
         .toggle-switch::before {
          content: '';
          position: absolute;
          width: 21px;
          height: 21px;
          border-radius: 50%;
          background-color: white;
          top: 2px;
          left: 2px;
          transition: transform 0.3s;
         }
         
         .toggle-switch.active {
          background-color: var(--primary-color);
         }
         
         .toggle-switch.active::before {
          transform: translateX(25px);
         }
         
         .sidebar.collapsed .logo-text,
         .sidebar.collapsed .search,
         .sidebar.collapsed nav li span,
         .sidebar.collapsed .toggle-text {
          display: none;
         }
         
         .sidebar.collapsed .logo {
          justify-content: center;
         }
         
         .sidebar.collapsed nav li {
          justify-content: center;
         }
         
         .sidebar.collapsed nav li i {
          margin-right: 0;
         }
                 /* Main content styles */
                 .main-content {
                     flex: 1;
                     margin-left: 280px;
                     padding: 2rem;
                 }
         
                 .content-header {
                     margin-bottom: 2rem;
                 }
         
                 .content-header h2 {
                     font-size: 1.875rem;
                     font-weight: 700;
                     color: #111827;
                 }
         
                 .metrics-grid {
                     display: grid;
                     grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                     gap: 1.5rem;
                     margin-bottom: 2rem;
                 }
         
                 .metric-card {
                     background: white;
                     border-radius: 12px;
                     padding: 1.5rem;
                     box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                 }
         
                 .metric-title {
                     font-size: 0.875rem;
                     font-weight: 600;
                     color: #4b5563;
                     margin-bottom: 0.5rem;
                 }
         
                 .metric-value {
                     font-size: 1.5rem;
                     font-weight: 700;
                     margin-bottom: 0.25rem;
                 }
         
                 .metric-subtitle {
                     font-size: 0.875rem;
                     color: #6b7280;
                 }
         
                 .chart-container {
                     background: white;
                     border-radius: 12px;
                     padding: 1.5rem;
                     margin-bottom: 2rem;
                     box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                 }
         
                 .chart-wrapper {
                     height: 400px;
                     margin-top: 1rem;
                 }
         
                 .period-buttons {
                     display: flex;
                     gap: 0.75rem;
                     margin-bottom: 1rem;
                 }
         
                 .period-btn {
                     padding: 0.5rem 1rem;
                     border: none;
                     background-color: #e5e7eb;
                     color: #4b5563;
                     border-radius: 6px;
                     cursor: pointer;
                     font-weight: 500;
                     transition: all 0.2s;
                 }
         
                 .period-btn:hover {
                     background-color: #d1d5db;
                 }
         
                 .period-btn.active {
                     background-color: #DEAF0B;
                     color: white;
                 }
         
                 /* Toggle styles */
                 .toggle {
                     position: relative;
                     display: inline-block;
                     width: 44px;
                     height: 24px;
                 }
         
                 .toggle input {
                     opacity: 0;
                     width: 0;
                     height: 0;
                 }
         
                 .slider {
                     position: absolute;
                     cursor: pointer;
                     top: 0;
                     left: 0;
                     right: 0;
                     bottom: 0;
                     background-color: #e5e7eb;
                     transition: .4s;
                     border-radius: 34px;
                 }
         
                 .slider:before {
                     position: absolute;
                     content: "";
                     height: 16px;
                     width: 16px;
                     left: 4px;
                     bottom: 4px;
                     background-color: white;
                     transition: .4s;
                     border-radius: 50%;
                 }
         
                 input:checked + .slider {
                     background-color: #DEAF0B;
                 }
         
                 input:checked + .slider:before {
                     transform: translateX(20px);
                 }
         
                 /* Updated and new styles */
                 .bottom-controls {
                     padding: 1.5rem;
                     border-top: 1px solid #e5e7eb;
                 }
         
                 .control-item {
                     display: flex;
                     justify-content: space-between;
                     align-items: center;
                     margin-bottom: 1rem;
                 }
         
                 .control-label {
                     font-size: 0.875rem;
                     color: #4b5563;
                 }
         
                 .toggle {
                     position: relative;
                     display: inline-block;
                     width: 44px;
                     height: 24px;
                 }
         
                 .toggle input {
                     opacity: 0;
                     width: 0;
                     height: 0;
                 }
         
                 .sidebar {
          width: 280px;
          background-color: white;
          box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
          display: flex;
          flex-direction: column;
          transition: width 0.3s ease;
          z-index: 10;
         }
         
         .sidebar.collapsed {
          width: 80px;
         }
         
         .logo {
          display: flex;
          align-items: center;
          padding: 20px;
         }
         
         
         input:checked + .slider {
  background-color: #22c55e;}
         
                 input:checked + .slider:before {
                     transform: translateX(20px);
                 }
         
                 .total-emissions {
                     font-size: 1.25rem;
                     font-weight: 600;
                     margin-bottom: 1rem;
                     color: #374151;
                 }
         
                 .summary-grid {
                     display: grid;
                     grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                     gap: 1rem;
                     margin-bottom: 2rem;
                 }
         
                 .summary-item {
                     background-color: white;
                     border-radius: 8px;
                     padding: 1rem;
                     box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                 }
         
                 .summary-label {
                     font-size: 0.875rem;
                     color: #6b7280;
                     display: block;
                     margin-bottom: 0.5rem;
                 }
         
                 .summary-value {
                     font-size: 1.25rem;
                     font-weight: 600;
                 }
         
             
         
                 /* Responsive styles */
                 @media (max-width: 768px) {
                     .sidebar {
                         width: 100%;
                         height: auto;
                         position: static;
                         border-right: none;
                         border-bottom: 1px solid #e5e7eb;
                     }
         
                     .main-content {
                         margin-left: 0;
                     }
         
                     body.collapsed-sidebar .sidebar {
                         display: none;
                     }
         
                     body.collapsed-sidebar .main-content {
                         margin-left: 0;
                     }
         
                     .metrics-grid,
                     .summary-grid {
                         grid-template-columns: 1fr;
                     }
         
                     .period-buttons {
                         flex-wrap: wrap;
                     }
         
                     .period-btn {
                         flex: 1 0 calc(50% - 0.375rem);
                         margin-bottom: 0.75rem;
                     }
                 }
      
      /* loading css */
      
      .loading-overlay {
       position: fixed;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       background-color: #f8f9fa;
       display: flex;
       justify-content: center;
       align-items: center;
       z-index: 9999;
      }
      
      .loading-spinner {
       width: 50px;
       height: 50px;
       border: 5px solid #e0e0e0;
       border-top: 5px solid #3498db;
       border-radius: 50%;
       animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
       0% { transform: rotate(0deg); }
       100% { transform: rotate(360deg); }
      }


      
      .dark-mode .main-content{
          background-color: rgba(24, 27, 31, 1);
          color: #f5f6fa;
      }
      
      .dark-mode .sidebar {
          background-color: rgba(24, 27, 31, 1);
      }
      
      .dark-mode .sidebar .logo-icon {
       color: #2f3640;
      }
      
      .dark-mode .sidebar .logo-text {
       color: #f5f6fa;
      }
      
      .dark-mode .sidebar nav li {
       color: #f5f6fa;
      }
      
      .dark-mode .sidebar nav li:hover {
       background-color: #383838;
      }
      
      .dark-mode .sidebar nav li a {
       color: #f5f6fa;
      }
      
      .dark-mode .sidebar nav li i {
       color: #dcdde1;
      }
      
      .dark-mode .toggle-sidebar,
      .dark-mode .toggle-dark-mode {
       color: #f5f6fa;
      }
      
      .dark-mode .toggle-switch {
          background-color: var(--primary-color);
      }
      
      .dark-mode .toggle-switch.active {
       background-color: var(--primary-color);
      }
      
      .dark-mode header {
          background-color: rgb(17, 18, 23);
      }
      
      .dark-mode .content-card {
          background-color: rgba(24, 27, 31, 1);
       color: #fff;
      }

      .dark-mode .loading-overlay{
          background-color: rgba(24, 27, 31, 1);
      }
      
  
      
      /* Mobile Sidebar Improvements */
      @media (max-width: 768px) {
          /* Sidebar base styles */
          .sidebar {
              position: fixed;
              top: 0;
              left: 0;
              height: 100vh;
              width: 280px;
              transform: translateX(-100%);
              transition: transform 0.3s ease-in-out;
              z-index: 1000;
              overflow-y: auto;
              -webkit-overflow-scrolling: touch;
              box-shadow: none;
          }
      
          .sidebar.active {
              transform: translateX(0);
              box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
          }
      
          /* Improved hamburger button */
          .mobile-toggle {
              display: block;
              position: fixed;
              top: 1rem;
              left: 1rem;
              z-index: 1001;
              background: none;
              border: none;
              cursor: pointer;
              width: 40px;
              height: 40px;
              border-radius: 50%;
              background-color: white;
              box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
              padding: 8px;
          }
      
          .mobile-toggle span {
              display: block;
              width: 24px;
              height: 2px;
              background-color: var(--text-color);
              margin: 5px auto;
              transition: transform 0.3s ease, opacity 0.3s ease;
          }
      
          .mobile-toggle.active span:nth-child(1) {
              transform: translateY(7px) rotate(45deg);
          }
      
          .mobile-toggle.active span:nth-child(2) {
              opacity: 0;
          }
      
          .mobile-toggle.active span:nth-child(3) {
              transform: translateY(-7px) rotate(-45deg);
          }
      
          /* Improved nav items */
          .sidebar nav ul {
              padding: 1rem 0;
          }
      
          .sidebar nav li {
              padding: 0.875rem 1.5rem;
              margin: 0.25rem 1rem;
              border-radius: 8px;
              transition: background-color 0.2s ease;
          }
      
          .sidebar nav li a {
              display: flex;
              align-items: center;
              gap: 1rem;
              font-size: 1rem;
              color: var(--text-color);
          }
      
          .sidebar nav li i {
              font-size: 1.25rem;
              min-width: 24px;
              text-align: center;
          }
      
          .sidebar nav li:active {
              background-color: rgba(0, 0, 0, 0.05);
          }
      
          /* Improved overlay */
          .sidebar-overlay {
              display: none;
              position: fixed;
              top: 0;
              left: 0;
              right: 0;
              bottom: 0;
              background-color: rgba(0, 0, 0, 0.4);
              backdrop-filter: blur(2px);
              z-index: 999;
              opacity: 0;
              transition: opacity 0.3s ease;
          }
      
          .sidebar-overlay.active {
              display: block;
              opacity: 1;
          }
      
          /* Dark mode adjustments */
          .dark-mode .mobile-toggle {
              background-color: rgba(255, 255, 255, 0.1);
          }
      
          .dark-mode .mobile-toggle span {
              background-color: #f5f6fa;
          }
      
          .dark-mode .sidebar nav li:active {
              background-color: rgba(255, 255, 255, 0.05);
          }
      }
      
      /* Ensure main content adjusts properly */
      @media (max-width: 768px) {
          .main-content {
              margin-left: 0;
              padding-top: 4.5rem;
              transition: margin-left 0.3s ease;
          }
      
          body.sidebar-open .main-content {
              filter: blur(2px);
              pointer-events: none;
          }
      }
      
/* Main Content Area Improvements */
.main-content {
  transition: margin-left 0.3s ease, background-color 0.3s ease, color 0.3s ease;
  padding: 2rem;
}

.main-content .container {
  max-width: 1400px;
  margin: 0 auto;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  display: flex;
  flex-wrap: nowrap !important;
  overflow-x: auto;
  white-space: nowrap;
  gap: 0.75rem;
  padding: 0.75rem;
  margin-bottom: 1.5rem;
  scrollbar-width: thin;
  -webkit-overflow-scrolling: touch;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
  height: 6px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

.main-content .nav-link {
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  padding: 0.5rem 1rem;
  color: #4b5563;
  font-weight: 500;
  border-radius: 6px;
  text-decoration: none;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.main-content .nav-link:hover {
  background-color: #e9ecef;
  color: #000;
}

.main-content .nav-link.active {
  color: #fff;
}

.main-content .nav-link i,
.main-content .nav-link svg {
  margin-right: 0.5rem;
  font-size: 1rem;
}


.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  background-color: #202429;
}

.dark-mode .main-content .nav-link {
  color: #e5e7eb;
}

.dark-mode .main-content .nav-link:hover {
  background-color: #32383e;
  color: #fff;
}

.dark-mode .main-content .nav-link.active {
  color: #fff;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #2a2e35;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #4a4d53;
}

.main-header {
  margin-bottom: 1.5rem;
}

.title-section {
  display: flex;
  align-items: center;
  margin-bottom: 1rem;
}

.title-section h1 {
  font-size: 1.75rem;
  font-weight: 700;
  margin: 0;
  color: var(--text-color);
}

.title-section h1 i {
  margin-right: 0.5rem;
  color: var(--primary-color);
}

/* Dashboard Cards */
.dashboard-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stats-card {
  display: flex;
  padding: 1.5rem;
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease, box-shadow 0.2s ease, background-color 0.3s ease;
}

.stats-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.card-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 50px;
  height: 50px;
  border-radius: 10px;
  background-color: rgba(222, 175, 11, 0.1);
  margin-right: 1rem;
}

.card-icon i {
  font-size: 1.5rem;
  color: var(--primary-color);
}

.card-content {
  flex: 1;
}

.card-content h3 {
  font-size: 0.875rem;
  font-weight: 600;
  color: #6b7280;
  margin: 0 0 0.5rem 0;
}

.stats-number {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--text-color);
  margin: 0;
}

/* Rules Container */
.card {
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
  transition: background-color 0.3s ease;
}

.card-header {
  padding: 1.25rem 1.5rem;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
}

.card-header h2 {
  font-size: 1.25rem;
  font-weight: 700;
  margin: 0;
  color: var(--text-color);
}

.search-container {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

.search-input, .select-input {
  padding: 0.5rem 0.75rem;
  border: 1px solid #e5e7eb;
  border-radius: 6px;
  font-size: 0.875rem;
  background-color: white;
  transition: border-color 0.3s ease, background-color 0.3s ease;
}

.search-input:focus, .select-input:focus {
  outline: none;
  border-color: var(--primary-color);
}

.search-input {
  width: 200px;
}

/* Rules List */
.rules-list {
  padding: 1.5rem;
}

.rules-list .loading-spinner {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  color: #6b7280;
}

.rules-list .loading-spinner i {
  font-size: 2rem;
  margin-bottom: 1rem;
  color: var(--primary-color);
}

/* Rule Card */
.rule-card {
  background-color: white;
  border-radius: 8px;
  margin-bottom: 1.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  overflow: hidden;
  transition: box-shadow 0.3s ease, transform 0.3s ease, background-color 0.3s ease;
  border-left: 4px solid #ef4444 !important; /* Red for inactive */
}

.rule-card:hover {
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Active state - Green left border */
.rule-card[data-rule-active="true"] {
  border-left: 4px solid #22c55e !important; /* Green for active */
}

body.dark-mode .rule-card {
  border-left: 4px solid #ef4444 !important; /* Red for inactive in dark mode */
}

body.dark-mode .rule-card[data-rule-active="true"] {
  border-left: 4px solid #22c55e !important; /* Green for active in dark mode */
}

/* 6. Remove any previous color uses */
.rule-card {
  border-left-color: #ef4444 !important; /* Override the --primary-color */
}

.rule-card[data-rule-active="true"] {
  border-left-color: #22c55e !important; /* Override the --primary-color */
}

.inactive-rule {
  border-left-color: #ef4444 !important;
  opacity: 0.8;
}

.rule-header {
  padding: 1rem 1.5rem;
  display: flex;
  align-items: center;
  border-bottom: 1px solid #e5e7eb;
}

.rule-status {
  margin-right: 1rem;
}

.rule-name {
  flex: 1;
  margin: 0;
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--text-color);
}

.rule-menu {
  position: relative;
}

.btn-icon {
  background: none;
  border: none;
  color: #6b7280;
  cursor: pointer;
  height: 36px;
  width: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.3s;
}

.btn-icon:hover {
  background-color: #f3f4f6;
}

.dropdown-menu {
  position: absolute;
  right: 0;
  top: 100%;
  background-color: white;
  border-radius: 6px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  min-width: 180px;
  z-index: 10;
  display: none;
  overflow: hidden;
  transition: background-color 0.3s ease;
  border: 1px solid #e5e7eb;
}

.dropdown-menu.show {
  display: block;
}

.dropdown-menu a {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  color: var(--text-color);
  text-decoration: none;
  font-size: 0.875rem;
  transition: background-color 0.3s, color 0.3s;
}

.dropdown-menu a i {
  margin-right: 0.5rem;
  width: 16px;
  text-align: center;
}

.dropdown-menu a:hover {
  background-color: #f3f4f6;
}

.dropdown-menu a.edit-rule i {
  color: #3b82f6; /* Blue */
}

.dropdown-menu a.edit-rule:hover {
  background-color: rgba(59, 130, 246, 0.1);
}

.dropdown-menu a.duplicate-rule i {
  color: #8b5cf6; /* Purple */
}

.dropdown-menu a.duplicate-rule:hover {
  background-color: rgba(139, 92, 246, 0.1);
}

.dropdown-menu a.execute-rule i {
  color: #10b981; /* Green */
}

.dropdown-menu a.execute-rule:hover {
  background-color: rgba(16, 185, 129, 0.1);
}

.dropdown-menu a.delete-rule i {
  color: #ef4444; /* Red */
}

.dropdown-menu a.delete-rule:hover {
  background-color: rgba(239, 68, 68, 0.1);
}

body.dark-mode .dropdown-menu {
  background-color: rgba(24, 27, 31, 1);
  border-color: rgba(40, 45, 50, 1);
}

body.dark-mode .dropdown-menu a {
  color: #fff;
}

/* Dark mode edit button */
body.dark-mode .dropdown-menu a.edit-rule i {
  color: #60a5fa; /* Lighter blue for dark mode */
}

body.dark-mode .dropdown-menu a.edit-rule:hover {
  background-color: rgba(59, 130, 246, 0.2);
}

/* Dark mode duplicate button */
body.dark-mode .dropdown-menu a.duplicate-rule i {
  color: #a78bfa; /* Lighter purple for dark mode */
}

body.dark-mode .dropdown-menu a.duplicate-rule:hover {
  background-color: rgba(139, 92, 246, 0.2);
}

/* Dark mode execute now button */
body.dark-mode .dropdown-menu a.execute-rule i {
  color: #34d399; /* Lighter green for dark mode */
}

body.dark-mode .dropdown-menu a.execute-rule:hover {
  background-color: rgba(16, 185, 129, 0.2);
}

/* Dark mode delete button */
body.dark-mode .dropdown-menu a.delete-rule i {
  color: #f87171; /* Lighter red for dark mode */
}

body.dark-mode .dropdown-menu a.delete-rule:hover {
  background-color: rgba(239, 68, 68, 0.2);
}

.rule-description {
  padding: 1rem 1.5rem;
  margin: 0;
  color: #6b7280;
  border-bottom: 1px solid #e5e7eb;
  font-size: 0.875rem;
}

.rule-details {
  padding: 1rem 1.5rem;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
}

.rule-section h4 {
  font-size: 0.875rem;
  font-weight: 600;
  color: #4b5563;
  margin: 0 0 0.75rem 0;
  display: flex;
  align-items: center;
}

.rule-section h4 i {
  margin-right: 0.5rem;
  color: var(--primary-color);
}

.condition-item, .time-item, .action-item {
  background-color: #f9fafb;
  padding: 0.75rem;
  border-radius: 6px;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
  color: #4b5563;
  transition: background-color 0.3s ease;
}

.rule-footer {
  padding: 0.75rem 1.5rem;
  background-color: #f9fafb;
  font-size: 0.75rem;
  color: #6b7280;
  border-top: 1px solid #e5e7eb;
  transition: background-color 0.3s ease;
}

.rule-stats {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}

.rule-stats span {
  display: inline-flex;
  align-items: center;
}

.rule-stats span i {
  margin-right: 0.25rem;
}

.empty-message {
  font-style: italic;
  color: #9ca3af;
  margin: 0.5rem 0;
  font-size: 0.875rem;
}

/* Toggle Switch */
.switch {
  position: relative;
  display: inline-block;
  width: 44px;
  height: 24px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #e5e7eb;
  transition: .4s;
  border-radius: 34px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 16px;
  width: 16px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: .4s;
  border-radius: 50%;
}


.switch .slider {
  background-color: #ef4444; /* Red for inactive state */
  transition: .4s;
}

input:checked + .slider {
  background-color: #22c55e; /* Green for active state */
}

input:checked + .slider:before {
  transform: translateX(20px);
}

/* Recent Triggers Table */
.data-table {
  width: 100%;
  border-collapse: collapse;
}

.data-table th, .data-table td {
  padding: 0.75rem 1rem;
  text-align: left;
  border-bottom: 1px solid #e5e7eb;
}

.data-table th {
  font-weight: 600;
  color: #4b5563;
  font-size: 0.875rem;
}

.data-table tbody tr:hover {
  background-color: #f9fafb;
}

.recent-triggers {
  padding: 1rem 1.5rem;
}

/* Empty and Error States */
.empty-state, .error-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 3rem 1rem;
  text-align: center;
  color: #6b7280;
}

.empty-state i, .error-state i {
  font-size: 3rem;
  margin-bottom: 1rem;
  color: #d1d5db;
}

.empty-state h3, .error-state h3 {
  font-size: 1.25rem;
  font-weight: 600;
  margin: 0 0 0.5rem 0;
  color: #4b5563;
}

.empty-state p, .error-state p {
  margin: 0 0 1.5rem 0;
}

.error-state i {
  color: #ef4444;
}

/* Buttons */
.btn {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 6px;
  font-weight: 500;
  font-size: 0.875rem;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.btn i {
  margin-right: 0.5rem;
}

.btn-primary {
  background-color: var(--primary-color);
  color: white;
}

.btn-primary:hover {
  background-color: #c59e0a;
}

.btn-secondary {
  background-color: #e5e7eb;
  color: #4b5563;
}

.btn-secondary:hover {
  background-color: #d1d5db;
}

.btn-danger {
  background-color: #ef4444;
  color: white;
}

.btn-danger:hover {
  background-color: #dc2626;
}

/* Enhanced Notifications System */
.notification {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 0.75rem 1rem;
  border-radius: 10px;
  display: flex;
  align-items: center;
  max-width: 350px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  z-index: 1000;
  animation: slideIn 0.3s ease-out forwards;
  font-weight: 500;
  margin-bottom: 10px;
}

@keyframes slideIn {
  from {
    transform: translateX(100px);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes slideOut {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(100px);
    opacity: 0;
  }
}

.notification.removing {
  animation: slideOut 0.3s ease-in forwards;
}

.notification.success {
  background-color: #22c55e;
  color: white;
  border-left: 4px solid #16a34a;
}

.notification.error {
  background-color: #ef4444;
  color: white;
  border-left: 4px solid #dc2626;
}

.notification.warning {
  background-color: #f59e0b;
  color: white;
  border-left: 4px solid #d97706;
}

.notification.info {
  background-color: #3b82f6;
  color: white;
  border-left: 4px solid #2563eb;
}

.notification.pending {
  background-color: #4b5563;
  color: white;
  border-left: 4px solid #374151;
}

.notification i {
  margin-right: 0.75rem;
  font-size: 1.25rem;
  flex-shrink: 0;
}

.notification.success i {
  color: #ecfdf5;
}

.notification.error i {
  color: #fef2f2;
}

.notification.warning i {
  color: #fffbeb;
}

.notification.info i {
  color: #eff6ff;
}

.notification.pending i {
  color: #f9fafb;
}

.notification span {
  flex: 1;
  padding-right: 0.5rem;
}

.close-notification {
  background: none;
  border: none;
  color: rgba(255, 255, 255, 0.8);
  cursor: pointer;
  font-size: 1.25rem;
  padding: 0;
  line-height: 1;
  transition: color 0.2s;
  flex-shrink: 0;
}

.close-notification:hover {
  color: white;
}

/* Multiple notifications stacking */
.notification + .notification {
  margin-bottom: 10px;
}

/* Dark mode notification adjustments */
body.dark-mode .notification.success {
  background-color: rgba(22, 163, 74, 0.9);
}

body.dark-mode .notification.error {
  background-color: rgba(220, 38, 38, 0.9);
}

body.dark-mode .notification.warning {
  background-color: rgba(217, 119, 6, 0.9);
}

body.dark-mode .notification.info {
  background-color: rgba(37, 99, 235, 0.9);
}

body.dark-mode .notification.pending {
  background-color: rgba(75, 85, 99, 0.9);
}

/* Toast notification system (alternative style) */
.toast {
  position: fixed;
  top: 20px;
  right: 20px;
  max-width: 350px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  display: flex;
  animation: slideInTop 0.3s ease-out forwards;
  background-color: white;
  z-index: 1010;
  margin-bottom: 10px;
}

@keyframes slideInTop {
  from {
    transform: translateY(-30px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.toast.success .toast-icon {
  background-color: #22c55e;
}

.toast.error .toast-icon {
  background-color: #ef4444;
}

.toast.warning .toast-icon {
  background-color: #f59e0b;
}

.toast.info .toast-icon {
  background-color: #3b82f6;
}

.toast-icon {
  width: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.5rem;
}

.toast-content {
  padding: 1rem;
  flex: 1;
}

.toast-title {
  font-weight: 600;
  margin-bottom: 0.25rem;
  color: #1f2937;
}

.toast-message {
  color: #6b7280;
  font-size: 0.875rem;
}

.toast-close {
  position: absolute;
  top: 8px;
  right: 8px;
  background: none;
  border: none;
  color: #9ca3af;
  cursor: pointer;
  font-size: 1rem;
  padding: 0;
  transition: color 0.2s;
}

.toast-close:hover {
  color: #4b5563;
}

.toast-progress {
  position: absolute;
  bottom: 0;
  left: 0;
  height: 3px;
  width: 100%;
  background-color: #e5e7eb;
}

.toast-progress-bar {
  height: 100%;
  width: 100%;
  transition: width 0.3s linear;
}

.toast.success .toast-progress-bar {
  background-color: #22c55e;
}

.toast.error .toast-progress-bar {
  background-color: #ef4444;
}

.toast.warning .toast-progress-bar {
  background-color: #f59e0b;
}

.toast.info .toast-progress-bar {
  background-color: #3b82f6;
}

/* Dark mode toasts */
body.dark-mode .toast {
  background-color: rgba(24, 27, 31, 1);
}

body.dark-mode .toast-title {
  color: #fff;
}

body.dark-mode .toast-message {
  color: #d1d5db;
}

body.dark-mode .toast-close {
  color: #9ca3af;
}

body.dark-mode .toast-close:hover {
  color: #f3f4f6;
}

body.dark-mode .toast-progress {
  background-color: #374151;
}

.dark-mode .dashboard-cards .card-content h3 {
  color: #fff;
}
.dark-mode .rule-name{
  color: #fff;
}

.dark-mode .action-item strong,
.dark-mode .time-item strong {
  color: #DEAF0B;
}

.dark-mode .time-item,
.dark-mode .action-item {
  color: #fff;
}

/* Mobile notification adjustments */
@media (max-width: 480px) {
  .notification,
  .toast {
    bottom: 10px;
    right: 10px;
    left: 10px;
    max-width: calc(100% - 20px);
  }
  
  .toast {
    top: 10px;
  }
}

/* Modals */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  justify-content: center;
  align-items: center;
  padding: 1rem;
}

.modal-content {
  background-color: white;
  border-radius: 12px;
  max-width: 500px;
  width: 100%;
  overflow: hidden;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: background-color 0.3s ease;
}

.modal-header {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.modal-header h2 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--text-color);
}

.close-modal {
  font-size: 1.5rem;
  background: none;
  border: none;
  color: #6b7280;
  cursor: pointer;
  padding: 0;
}

.modal-body {
  padding: 1.5rem;
}

.modal-footer {
  padding: 1rem 1.5rem;
  border-top: 1px solid #e5e7eb;
  display: flex;
  justify-content: flex-end;
  gap: 0.75rem;
}

/* Execute Modal Specifics */
.execute-status {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 1.5rem;
  padding: 1rem;
  border-radius: 8px;
}

.execute-status.pending {
  background-color: rgba(59, 130, 246, 0.1);
}

.execute-status.success {
  background-color: rgba(16, 185, 129, 0.1);
}

.execute-status.error {
  background-color: rgba(239, 68, 68, 0.1);
}


.execute-status.success .spinner-container i {
  color: #10b981;
}

.execute-status.error .spinner-container i {
  color: #ef4444;
}

.execute-details {
  margin-top: 1.5rem;
}

.execute-details h3 {
  font-size: 1rem;
  font-weight: 600;
  margin: 0 0 0.75rem 0;
  color: var(--text-color);
}

.execute-details ul {
  margin: 0;
  padding: 0 0 0 1.5rem;
}

.execute-details li {
  margin-bottom: 0.5rem;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .main-content {
    padding: 1.5rem 1rem;
  }
  
  .card-header {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .search-container {
    width: 100%;
  }
  
  .search-input {
    flex: 1;
    width: auto;
  }
  
  .rule-details {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .rule-stats {
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .dashboard-cards {
    grid-template-columns: 1fr;
  }
  
  .modal-content {
    max-width: 100%;
    margin: 0 1rem;
  }
}

/* Dark Mode Styles */
body.dark-mode .stats-card,
body.dark-mode .card,
body.dark-mode .rule-card,
body.dark-mode .modal-content {
  background-color: rgba(24, 27, 31, 1);
  color: #fff;
}

body.dark-mode .card-header,
body.dark-mode .rule-header,
body.dark-mode .rule-description,
body.dark-mode .rule-footer,
body.dark-mode .modal-header,
body.dark-mode .modal-footer {
  border-color: rgba(40, 45, 50, 1);
}

body.dark-mode .rule-footer,
body.dark-mode .condition-item,
body.dark-mode .time-item,
body.dark-mode .action-item {
  background-color: rgba(17, 18, 23, 1);
  color: #fff;
}

body.dark-mode .data-table th,
body.dark-mode .data-table td {
  border-color: rgba(40, 45, 50, 1);
  color: #fff;
}

body.dark-mode .data-table tbody tr:hover {
  background-color: rgba(17, 18, 23, 1);
}

body.dark-mode .btn-secondary {
  background-color: rgba(40, 45, 50, 1);
  color: #fff;
}

body.dark-mode .btn-secondary:hover {
  background-color: rgba(55, 60, 65, 1);
}

body.dark-mode .search-input,
body.dark-mode .select-input {
  background-color: rgba(17, 18, 23, 1);
  border-color: rgba(40, 45, 50, 1);
  color: #fff;
}

body.dark-mode .btn-icon:hover {
  background-color: rgba(40, 45, 50, 1);
}

body.dark-mode .dropdown-menu a:hover {
  background-color: rgba(40, 45, 50, 1);
}

/* Dark mode adjustments for spinner in main content */
.dark-mode .rules-list .loading-spinner {
  color: #e5e7eb; /* Lighter text color for dark mode */
}

.dark-mode .rules-list .loading-spinner i {
  color: var(--primary-color);
  opacity: 0; 
}

body.dark-mode .title-section h1,
body.dark-mode .card-header h2,
body.dark-mode .rule-name,
body.dark-mode .modal-header h2,
body.dark-mode .execute-details h3 {
  color: #fff;
}

body.dark-mode .rule-section h4 {
  color: #fff;
}

body.dark-mode .card-content h3 {
  color: #fff;
}

body.dark-mode .stats-number {
  color: #fff;
}

body.dark-mode .rule-section h4 i,
body.dark-mode .card-icon i,
body.dark-mode .title-section h1 i {
  color: var(--primary-color);
}

body.dark-mode .empty-message {
  color: rgba(180, 180, 180, 1);
}

body.dark-mode .empty-state i,
body.dark-mode .error-state i {
  color: var(--primary-color);
}

body.dark-mode .empty-state h3,
body.dark-mode .error-state h3 {
  color: #fff;
}

body.dark-mode .switch .slider {
  background-color: #ef4444; 
}


body.dark-mode input:checked + .slider {
  background-color: #22c55e; /* Keep green for active in dark mode */
}



/* Override any other switch styling to maintain consistency */
.rule-active-toggle + .slider {
  background-color: #ef4444 !important; /* Ensure inactive is always red */
}

.rule-active-toggle:checked + .slider {
  background-color: #22c55e !important; /* Ensure active is always green */
}

/* Adjust the thumb (circle) color for better contrast */
.slider:before {
  background-color: white; /* White thumb for better visibility */
}

/* Add a subtle border to make the slider stand out more */
.switch .slider {
  border: 1px solid rgba(0, 0, 0, 0.1);
}

body.dark-mode .switch .slider {
  border: 1px solid rgba(255, 255, 255, 0.1);
}

/* Improved Mobile Navigation for Dark Mode */
@media (max-width: 768px) {
  body.dark-mode .mobile-toggle {
    background-color: rgba(24, 27, 31, 1);
  }
  
  body.dark-mode .mobile-toggle span {
    background-color: #fff;
  }
  
  body.dark-mode .sidebar-overlay {
    background-color: rgba(0, 0, 0, 0.7);
  }
}

/* Additional Responsive Improvements for Main Content */
@media (max-width: 480px) {
  .main-content {
    padding: 1rem 0.75rem;
  }
  
  .dashboard-cards {
    gap: 1rem;
  }
  
  .stats-card {
    padding: 1rem;
  }
  
  .card-icon {
    width: 40px;
    height: 40px;
  }
  
  .stats-number {
    font-size: 1.25rem;
  }
  
  .rules-list {
    padding: 1rem;
  }
  
  .rule-header, 
  .rule-description,
  .rule-details,
  .rule-footer {
    padding: 0.75rem 1rem;
  }
}

/* New Custom Utility Classes */
.text-success {
  color: #10b981 !important;
}

.text-danger {
  color: #ef4444 !important;
}

.text-warning {
  color: #f59e0b !important;
}

.text-info {
  color: #3b82f6 !important;
}

.bg-success-light {
  background-color: rgba(16, 185, 129, 0.1);
}

.bg-danger-light {
  background-color: rgba(239, 68, 68, 0.1);
}

.bg-warning-light {
  background-color: rgba(245, 158, 11, 0.1);
}

.bg-info-light {
  background-color: rgba(59, 130, 246, 0.1);
}

/* Additional Animation */
.rule-card {
  transition: all 0.3s ease;
  transform-origin: center;
}

.rule-card:hover {
  transform: translateY(-3px);
}

.inactive-rule:hover {
  transform: translateY(-3px);
  opacity: 1;
}

/* Make sure background containers are properly styled in dark mode */
.dark-mode .card, 
.dark-mode .rules-container,
.dark-mode .rules-list {
  background-color: rgba(24, 27, 31, 1);
  color: #f5f6fa;
}

/* Animation to make spinner more visible */
@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 0.8;
  }
  50% {
    transform: scale(1.1);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 0.8;
  }
}

.dark-mode .rules-list .loading-spinner i {
  animation: pulse 1.5s infinite ease-in-out;
}
</style>
</head>
<body>
      <!-- Add hamburger menu button -->
      <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>
          <%- include('partials/sidebar') %>
     

          <div class="main-content">

            <div class="container">
              <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                <a class="nav-link  text-nowrap" href="<%= ingress_path %>/learner">
                    <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/inverter-settings">
                    <i class="fas fa-cogs me-1" style="color: #fd7e14;"></i>Inverter Settings
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rules">
                    <i class="fas fa-tasks me-1" style="color: #6610F2;"></i>Rules
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/wizard">
                    <i class="fas fa-magic me-1" style="color: #20c997;"></i>Rule Wizard
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rule-history">
                    <i class="fas fa-history me-1" style="color: #6f42c1;"></i>Rule History
                </a>
            </div>
                
                <br>
    
                <header class="main-header">
                  <div class="title-section">
                    <h1><i class="fas fa-robot"></i> Automation Rules</h1>
                  </div>
                </header>
                <br>

            
                 <!-- Dashboard Cards -->
<!-- Find the dashboard cards section and modify the battery SOC and PV Power values -->
<div class="dashboard-cards">
  <div class="card stats-card">
    <div class="card-icon"><i class="fas fa-list-alt"></i></div>
    <div class="card-content">
      <h3>Total Rules</h3>
      <p class="stats-number"><%= rules_count %></p>
    </div>
  </div>
  <div class="card stats-card">
    <div class="card-icon"><i class="fas fa-toggle-on"></i></div>
    <div class="card-content">
      <h3>Active Rules</h3>
      <p class="stats-number"><%= active_rules_count %></p>
    </div>
  </div>
  <div class="card stats-card">
    <div class="card-icon"><i class="fas fa-battery-three-quarters"></i></div>
    <div class="card-content">
      <h3>Battery SOC</h3>
      <p class="stats-number"><%= system_state.battery_soc ? Math.round(system_state.battery_soc) + '%' : '0%' %></p>
    </div>
  </div>
  <div class="card stats-card">
    <div class="card-icon"><i class="fas fa-solar-panel"></i></div>
    <div class="card-content">
      <h3>PV Power</h3>
      <p class="stats-number"><%= system_state.pv_power ? Math.round(system_state.pv_power) + 'W' : '0W' %></p>
    </div>
  </div>
</div>
            
                  <!-- Rules List Section -->
                  <section class="card rules-container">
                    <div class="card-header">
                      <h2>Your Automation Rules</h2>
                      <div class="search-container">
                        <input type="text" id="searchRules" placeholder="Search rules..." class="search-input">
                        <select id="filterRules" class="select-input">
                          <option value="all">All Rules</option>
                          <option value="active">Active Only</option>
                          <option value="inactive">Inactive Only</option>
                        </select>
                      </div>
                    </div>
                    
                    <div class="rules-list" id="rulesList">
                      <!-- Rules will be loaded here dynamically -->
                      <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Loading rules...</p>
                      </div>
                    </div>
                  </section>
            
                  <!-- Recent Triggers Section -->
                  <section class="card">
                    <div class="card-header">
                      <h2>Recently Triggered Rules</h2>
                    </div>
                    <div class="recent-triggers">
                      <% if (recently_triggered && recently_triggered.length > 0) { %>
                        <table class="data-table">
                          <thead>
                            <tr>
                              <th>Rule Name</th>
                              <th>Last Triggered</th>
                            </tr>
                          </thead>
                          <tbody>
                            <% recently_triggered.forEach(rule => { %>
                              <tr>
                                <td><%= rule.name %></td>
                                <td>
                                  <% if (rule.lastTriggered) { %>
                                    <script>
                                      document.write(new Date('<%= rule.lastTriggered %>').toLocaleString())
                                    </script>
                                  <% } else { %>
                                    Never
                                  <% } %>
                                </td>
                              </tr>
                            <% }); %>
                          </tbody>
                        </table>
                      <% } else { %>
                        <div class="empty-state">
                          <i class="fas fa-clock"></i>
                          <p>No rules have been triggered yet</p>
                        </div>
                      <% } %>
                    </div>
                  </section>


    <!-- Rule Template (for JavaScript) -->
  <template id="ruleTemplate">
    <div class="rule-card">
      <div class="rule-header">
        <div class="rule-status">
          <label class="switch">
            <input type="checkbox" class="rule-active-toggle">
            <span class="slider round"></span>
          </label>
        </div>
        <h3 class="rule-name"></h3>
        <div class="rule-menu">
          <button class="btn-icon dropdown-toggle">
            <i class="fas fa-ellipsis-v"></i>
          </button>
          <div class="dropdown-menu">
            <a href="#" class="edit-rule"><i class="fas fa-edit"></i> Edit</a>
            <a href="#" class="duplicate-rule"><i class="fas fa-copy"></i> Duplicate</a>
            <a href="#" class="execute-rule"><i class="fas fa-play"></i> Execute Now</a>
            <a href="#" class="delete-rule"><i class="fas fa-trash-alt"></i> Delete</a>
          </div>
        </div>
      </div>
      <p class="rule-description"></p>
      <div class="rule-details">
        <div class="rule-section">
          <h4><i class="fas fa-filter"></i> Conditions</h4>
          <div class="conditions-list"></div>
        </div>
        <div class="rule-section">
          <h4><i class="fas fa-calendar-alt"></i> Time Restrictions</h4>
          <div class="time-restrictions"></div>
        </div>
        <div class="rule-section">
          <h4><i class="fas fa-bolt"></i> Actions</h4>
          <div class="actions-list"></div>
        </div>
      </div>
      <div class="rule-footer">
        <div class="rule-stats">
          <span class="rule-created"><i class="fas fa-calendar"></i> Created: <span class="created-date"></span></span>
          <span class="rule-triggered"><i class="fas fa-bolt"></i> Last triggered: <span class="triggered-date"></span></span>
          <span class="rule-count"><i class="fas fa-repeat"></i> Triggered <span class="trigger-count"></span> times</span>
        </div>
      </div>
    </div>
  </template>

  <!-- Modals -->
  <div id="confirmationModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Confirm Action</h2>
        <span class="close-modal">&times;</span>
      </div>
      <div class="modal-body">
        <p id="confirmationMessage">Are you sure you want to proceed?</p>
      </div>
      <div class="modal-footer">
        <button id="cancelAction" class="btn btn-secondary">Cancel</button>
        <button id="confirmAction" class="btn btn-danger">Confirm</button>
      </div>
    </div>
  </div>

  <div id="executeModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Rule Execution</h2>
        <span class="close-modal">&times;</span>
      </div>
      <div class="modal-body">
        <div id="executeStatus" class="execute-status">
          <div class="spinner-container">
            <i class="fas fa-spinner fa-spin"></i>
          </div>
          <p id="executeMessage">Executing rule...</p>
        </div>
        <div id="executeDetails" class="execute-details">
          <h3>Actions being executed:</h3>
          <ul id="executeActions"></ul>
        </div>
      </div>
      <div class="modal-footer">
        <button id="closeExecute" class="btn btn-primary">Close</button>
      </div>
    </div>
  </div>
 </div>

  
  <!-- JavaScript Files -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
<script>
  // Global variables
let allRules = [];
let isLoading = false;
let loadRulesTimeout = null;
const ingressPath = window.location.pathname.includes('/rules') ? 
  window.location.pathname.substring(0, window.location.pathname.indexOf('/rules')) : '';

// Debounced load rules function
function debouncedLoadRules(delay = 500) {
  if (loadRulesTimeout) {
    clearTimeout(loadRulesTimeout);
  }
  
  loadRulesTimeout = setTimeout(() => {
    if (!isLoading) {
      loadRules();
    }
  }, delay);
}

// DOM Elements
const rulesList = document.getElementById('rulesList');
const searchInput = document.getElementById('searchRules');
const filterSelect = document.getElementById('filterRules');
const confirmationModal = document.getElementById('confirmationModal');
const executeModal = document.getElementById('executeModal');

// Event Listeners
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOM loaded, initializing rules page...');
  debouncedLoadRules(100); // Quick initial load
  
  // Search and filter
  searchInput.addEventListener('input', filterRules);
  filterSelect.addEventListener('change', filterRules);
  
  // Create rule button
  const btnCreateRule = document.getElementById('btnCreateRule');
  if (btnCreateRule) {
    btnCreateRule.addEventListener('click', () => {
      window.location.href = `${ingressPath}/wizard`;
    });
  }
  
  // Close modals when clicking on X or outside
  document.querySelectorAll('.close-modal').forEach(btn => {
    btn.addEventListener('click', closeAllModals);
  });
  
  document.getElementById('closeExecute').addEventListener('click', closeAllModals);
  
  window.addEventListener('click', (e) => {
    if (e.target === confirmationModal || e.target === executeModal) {
      closeAllModals();
    }
  });
});

/**
 * Checks the database connection status
 * @returns {Promise<Object>} Database connection status
 */
async function checkDatabaseConnection() {
  try {
    const response = await fetch(`${ingressPath}/api/database/status`, {
      headers: {
        'Accept': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });
    
    if (!response.ok) {
      return { connected: false, error: `HTTP error ${response.status}` };
    }
    
    const status = await response.json();
    return status;
  } catch (error) {
    console.error('Failed to check database status:', error);
    return { connected: false, error: error.message };
  }
}

/**
 * Loads rules from the server API with retry logic
 */
async function loadRules(retryCount = 0) {
  if (isLoading) {
    console.log('Rules already loading, skipping...');
    return;
  }
  
  isLoading = true;
  const maxRetries = 3;
  const retryDelay = 1000; // 1 second
  
  try {
    // Check database connection first
    const dbStatus = await checkDatabaseConnection();
    if (!dbStatus.connected) {
      showDatabaseError();
      return;
    }
    
    // Show loading indicator
    rulesList.innerHTML = `
      <div class="loading-spinner">
        <i class="fas fa-spinner fa-spin"></i>
        <p>Loading rules...</p>
      </div>
    `;
    
    const response = await fetch(`${ingressPath}/api/rules`, {
      headers: {
        'Accept': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });
    
    // Handle rate limiting with retry
    if (response.status === 429) {
      if (retryCount < maxRetries) {
        console.log(`Rate limited, retrying in ${retryDelay}ms (attempt ${retryCount + 1}/${maxRetries})`);
        setTimeout(() => loadRules(retryCount + 1), retryDelay * (retryCount + 1));
        return;
      } else {
        throw new Error('Too many requests, please try again later.');
      }
    }
    
    // Log the raw response for debugging
    if (!response.ok) {
      const errorText = await response.text();
      console.error("Raw API error response:", errorText);
      
      try {
        const errorData = JSON.parse(errorText);
        throw new Error(errorData.error || `Failed to fetch rules (${response.status})`);
      } catch (parseError) {
        throw new Error(`Failed to parse error response: ${errorText}`);
      }
    }
    
    // Get the response text for debugging
    const responseText = await response.text();
    console.log('Rules response length:', responseText.length);
    
    // Parse the response as JSON
    try {
      allRules = JSON.parse(responseText);
      
      // Validate the response
      if (!Array.isArray(allRules)) {
        throw new Error(`Invalid rules data: Expected array but got ${typeof allRules}`);
      }
      
      console.log('Rules loaded:', allRules.length);
      renderRules(allRules);
      
      // Update dashboard stats
      updateDashboardStats();
      
      isLoading = false;
    } catch (parseError) {
      console.error('Error parsing rules JSON:', parseError);
      console.error('First 100 chars of response:', responseText.substring(0, 100));
      throw new Error(`Failed to parse rules data: ${parseError.message}`);
    }
  } catch (error) {
    console.error('Error loading rules:', error);
    isLoading = false;
    
    // Handle rate limiting errors specifically
    if (error.message.includes('Too many requests')) {
      showError('Loading rules... Please wait a moment and the page will refresh automatically.');
      // Auto-retry after a longer delay for rate limiting
      setTimeout(() => {
        window.location.reload();
      }, 5000);
    } else {
      showError(`Failed to load rules: ${error.message}`);
    }
  }
}

/**
 * Updates dashboard statistics based on loaded rules
 */
function updateDashboardStats() {
  // Update total rules count
  const totalRulesEl = document.querySelector('.stats-card:nth-child(1) .stats-number');
  if (totalRulesEl) {
    totalRulesEl.textContent = allRules.length;
  }
  
  // Update active rules count
  const activeRulesCount = allRules.filter(rule => rule.active).length;
  const activeRulesEl = document.querySelector('.stats-card:nth-child(2) .stats-number');
  if (activeRulesEl) {
    activeRulesEl.textContent = activeRulesCount;
  }
}

/**
 * Renders rules in the UI
 * @param {Array} rules - Array of rule objects
 */
function renderRules(rules) {
  rulesList.innerHTML = '';
  
  if (!rules || rules.length === 0) {
    showEmptyState();
    return;
  }
  
  // Sort rules by name
  rules.sort((a, b) => a.name.localeCompare(b.name));
  
  rules.forEach(rule => {
    const ruleCard = createRuleCard(rule);
    rulesList.appendChild(ruleCard);
  });
  
  // Add event listeners to rule cards
  addRuleCardEventListeners();
}

/**
 * Creates a rule card from template
 * @param {Object} rule - Rule object
 * @returns {HTMLElement} Rule card element
 */
function createRuleCard(rule) {
  console.log('Creating rule card for rule:', rule.name, 'active:', rule.active);
  
  // Validate required rule fields
  if (!rule || !rule.id) {
    console.error('Invalid rule data:', rule);
    return document.createElement('div'); // Return empty div to avoid errors
  }
  
  const template = document.getElementById('ruleTemplate');
  if (!template) {
    console.error('Rule template not found in DOM');
    return document.createElement('div');
  }
  
  const ruleCard = document.importNode(template.content, true).children[0];
  
  // Set rule data attributes
  ruleCard.setAttribute('data-rule-id', rule.id);
  ruleCard.setAttribute('data-rule-active', Boolean(rule.active).toString());
  
  // Visual indication of active/inactive
  if (!rule.active) {
    ruleCard.classList.add('inactive-rule');
  }
  
  // Set rule status
  const statusToggle = ruleCard.querySelector('.rule-active-toggle');
  if (statusToggle) {
    statusToggle.checked = Boolean(rule.active);
  }
  
  // Set rule name and description
  const nameElement = ruleCard.querySelector('.rule-name');
  if (nameElement) {
    nameElement.textContent = rule.name || 'Unnamed Rule';
  }
  
  const descElement = ruleCard.querySelector('.rule-description');
  if (descElement) {
    descElement.textContent = rule.description || 'No description provided';
  }
  
  // Render conditions
  const conditionsList = ruleCard.querySelector('.conditions-list');
  if (conditionsList) {
    if (rule.conditions && Array.isArray(rule.conditions) && rule.conditions.length > 0) {
      rule.conditions.forEach(condition => {
        const conditionEl = document.createElement('div');
        conditionEl.className = 'condition-item';
        conditionEl.innerHTML = formatCondition(condition);
        conditionsList.appendChild(conditionEl);
      });
    } else {
      conditionsList.innerHTML = '<p class="empty-message">No conditions (runs unconditionally)</p>';
    }
  }
  
  // Render time restrictions
  const timeRestrictions = ruleCard.querySelector('.time-restrictions');
  if (timeRestrictions) {
    if (rule.timeRestrictions && typeof rule.timeRestrictions === 'object' && rule.timeRestrictions.enabled) {
      const timeEl = document.createElement('div');
      timeEl.className = 'time-item';
      timeEl.innerHTML = formatTimeRestrictions(rule.timeRestrictions);
      timeRestrictions.appendChild(timeEl);
    } else {
      timeRestrictions.innerHTML = '<p class="empty-message">No time restrictions (runs anytime)</p>';
    }
  }
  
  // Render actions
  const actionsList = ruleCard.querySelector('.actions-list');
  if (actionsList) {
    if (rule.actions && Array.isArray(rule.actions) && rule.actions.length > 0) {
      rule.actions.forEach(action => {
        const actionEl = document.createElement('div');
        actionEl.className = 'action-item';
        actionEl.innerHTML = formatAction(action);
        actionsList.appendChild(actionEl);
      });
    } else {
      actionsList.innerHTML = '<p class="empty-message">No actions defined</p>';
    }
  }
  
  // Set dates and counts
  const createdDate = ruleCard.querySelector('.created-date');
  if (createdDate) {
    createdDate.textContent = rule.createdAt ? new Date(rule.createdAt).toLocaleDateString() : 'Unknown';
  }
  
  const triggeredDate = ruleCard.querySelector('.triggered-date');
  if (triggeredDate) {
    triggeredDate.textContent = rule.lastTriggered ? new Date(rule.lastTriggered).toLocaleString() : 'Never';
  }
  
  const triggerCount = ruleCard.querySelector('.trigger-count');
  if (triggerCount) {
    triggerCount.textContent = rule.triggerCount || 0;
  }
  
  return ruleCard;
}

/**
 * Adds event listeners to rule cards
 */
function addRuleCardEventListeners() {
  // Toggle rule active status
  document.querySelectorAll('.rule-active-toggle').forEach(toggle => {
    toggle.addEventListener('change', async (e) => {
      const ruleCard = e.target.closest('.rule-card');
      const ruleId = ruleCard.getAttribute('data-rule-id');
      const rule = allRules.find(r => r.id == ruleId);
      
      if (rule) {
        try {
          // Show pending notification
          const notification = showNotification(`${e.target.checked ? 'Activating' : 'Deactivating'} rule "${rule.name}"...`, 'pending');
          
          // Update the rule in our local array and set the new active state
          const newActiveState = e.target.checked;
          rule.active = newActiveState;
          
          console.log(`Toggling rule ${rule.id} (${rule.name}) active state to:`, newActiveState);
          
          // Send update to server
          const response = await fetch(`${ingressPath}/api/rules/${rule.id}`, {
            method: 'PUT',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({
              ...rule,
              active: newActiveState
            })
          });
          
          // Check for HTTP errors
          if (!response.ok) {
            let errorMessage = `Server returned ${response.status}`;
            try {
              const errorData = await response.json();
              errorMessage = errorData.error || errorMessage;
            } catch (e) {
              // If we can't parse the error, just use the status code message
            }
            throw new Error(errorMessage);
          }
          
          // Parse the response
          const result = await response.json();
          
          // Remove pending notification
          notification.remove();
          
          // Show success notification
          showNotification(`Rule "${rule.name}" ${newActiveState ? 'activated' : 'deactivated'}`);
          
          // Update UI to reflect the change
          ruleCard.setAttribute('data-rule-active', newActiveState.toString());
          if (newActiveState) {
            ruleCard.classList.remove('inactive-rule');
          } else {
            ruleCard.classList.add('inactive-rule');
          }
          
          // Update dashboard stats to reflect the change
          updateDashboardStats();
        } catch (error) {
          console.error('Error updating rule status:', error);
          
          // Remove pending notification if exists
          document.querySelectorAll('.notification.pending').forEach(n => n.remove());
          
          // Show error and revert toggle state
          showError(`Failed to update rule status: ${error.message}`);
          
          // Revert toggle visually
          e.target.checked = !e.target.checked;
          
          // Revert the rule in our array
          if (rule) rule.active = !e.target.checked;
        }
      }
    });
  });
  
  // Dropdown menus
  document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
    toggle.addEventListener('click', (e) => {
      e.stopPropagation();
      
      // Find the dropdown menu - handle both when clicking on the button or the icon
      const ruleMenu = e.target.closest('.rule-menu');
      if (!ruleMenu) return;
      
      const menu = ruleMenu.querySelector('.dropdown-menu');
      if (!menu) return;
      
      // Close all other open menus
      document.querySelectorAll('.dropdown-menu.show').forEach(m => {
        if (m !== menu) m.classList.remove('show');
      });
      
      // Toggle this menu
      menu.classList.toggle('show');
    });
  });
  
  // Close dropdown when clicking outside
  document.addEventListener('click', () => {
    document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
      menu.classList.remove('show');
    });
  });
  
  // Edit rule
  document.querySelectorAll('.edit-rule').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const ruleId = e.target.closest('.rule-card').getAttribute('data-rule-id');
      window.location.href = `${ingressPath}/wizard?edit=${ruleId}`;
    });
  });
  
  // Duplicate rule
  document.querySelectorAll('.duplicate-rule').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      const ruleCard = e.target.closest('.rule-card');
      const ruleId = ruleCard.getAttribute('data-rule-id');
      const rule = allRules.find(r => r.id == ruleId);
      
      if (!rule) {
        showError('Could not find rule to duplicate');
        return;
      }
      
      try {
        // Show pending notification
        const notification = showNotification(`Duplicating rule "${rule.name}"...`, 'pending');
        
        console.log(`Attempting to duplicate rule ${ruleId} (${rule.name})`);
        
        const response = await fetch(`${ingressPath}/api/rules/${ruleId}/duplicate`, {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        });
        
        // Check for HTTP errors
        if (!response.ok) {
          let errorMessage = `Server returned ${response.status}`;
          try {
            const errorData = await response.json();
            errorMessage = errorData.error || errorMessage;
          } catch (e) {
            // If we can't parse the error, just use the status code message
          }
          throw new Error(errorMessage);
        }
        
        // Parse the response
        const responseText = await response.text();
        let result;
        
        try {
          result = JSON.parse(responseText);
        } catch (parseError) {
          console.error('Error parsing duplicate response:', parseError, responseText);
          throw new Error('Invalid server response when duplicating rule');
        }
        
        // Remove pending notification
        notification.remove();
        
        // Show success
        showNotification(`Rule "${rule.name}" duplicated successfully`);
        
        // Reload rules to show the duplicated rule
        debouncedLoadRules(1000);
      } catch (error) {
        console.error('Error duplicating rule:', error);
        
        // Remove pending notification if exists
        document.querySelectorAll('.notification.pending').forEach(n => n.remove());
        
        // Show error
        showError(`Failed to duplicate rule: ${error.message}`);
      }
    });
  });
  
  // Execute rule
  document.querySelectorAll('.execute-rule').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      const ruleCard = e.target.closest('.rule-card');
      const ruleId = ruleCard.getAttribute('data-rule-id');
      const rule = allRules.find(r => r.id == ruleId);
      
      if (rule) {
        openExecuteModal(rule);
      }
    });
  });
  
  // Delete rule
  document.querySelectorAll('.delete-rule').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      const ruleCard = e.target.closest('.rule-card');
      const ruleId = ruleCard.getAttribute('data-rule-id');
      const rule = allRules.find(r => r.id == ruleId);
      
      if (!rule) {
        showError('Could not find rule to delete');
        return;
      }
      
      openConfirmationModal(
        `Are you sure you want to delete the rule "${rule.name}"?`,
        async () => {
          try {
            // Show loading indicator
            const notification = showNotification(`Deleting rule "${rule.name}"...`, 'pending');
            
            console.log(`Attempting to delete rule ${ruleId} (${rule.name})`);
            
            const response = await fetch(`${ingressPath}/api/rules/${ruleId}`, {
              method: 'DELETE',
              headers: { 
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              }
            });
            
            // Log the raw response for debugging
            console.log('Delete response status:', response.status);
            
            // Get the response text for debugging
            const responseText = await response.text();
            console.log('Delete response text:', responseText);
            
            // Parse the response as JSON (if it is JSON)
            let result;
            try {
              result = JSON.parse(responseText);
            } catch (e) {
              console.error('Error parsing response as JSON:', e);
              result = { success: false, error: 'Invalid server response' };
            }
            
            // Check for HTTP errors
            if (!response.ok) {
              throw new Error(result.error || `Failed to delete rule (${response.status})`);
            }
            
            // Remove previous notification
            notification.remove();
            
            // Show success notification
            showNotification(`Rule "${rule.name}" deleted successfully`);
            
            // Remove rule from list and DOM
            allRules = allRules.filter(r => r.id != ruleId);
            ruleCard.remove();
            
            // Update dashboard stats to reflect the deletion
            updateDashboardStats();
            
            // Show empty state if no rules left
            if (allRules.length === 0) {
              showEmptyState();
            }
          } catch (error) {
            console.error('Error deleting rule:', error);
            
            // Remove pending notification if exists
            document.querySelectorAll('.notification.pending').forEach(n => n.remove());
            
            // Show error
            showError(`Failed to delete rule: ${error.message}`);
          }
        }
      );
    });
  });
}

/**
 * Executes a rule
 * @param {Object} rule - Rule object
 * @returns {Promise<boolean>} Success status
 */
async function executeRule(rule) {
  try {
    document.getElementById('executeStatus').classList.remove('success', 'error');
    document.getElementById('executeStatus').classList.add('pending');
    document.getElementById('executeMessage').textContent = `Executing rule "${rule.name}"...`;
    
    // Display actions being executed
    const actionsList = document.getElementById('executeActions');
    actionsList.innerHTML = '';
    
    rule.actions.forEach(action => {
      const li = document.createElement('li');
      li.innerHTML = formatAction(action);
      actionsList.appendChild(li);
    });
    
    // Execute the rule
    const response = await fetch(`${ingressPath}/api/rules/${rule.id}/execute`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });
    
    // Get the response text for debugging
    const responseText = await response.text();
    console.log('Execute response text:', responseText);
    
    // Parse the response as JSON (if it is JSON)
    let result;
    try {
      result = JSON.parse(responseText);
    } catch (e) {
      console.error('Error parsing response as JSON:', e);
      result = { success: false, error: 'Invalid server response' };
    }
    
    if (!response.ok) {
      throw new Error(result.error || 'Rule execution failed');
    }
    
    // Show success
    document.getElementById('executeStatus').classList.remove('pending');
    document.getElementById('executeStatus').classList.add('success');
    document.getElementById('executeMessage').textContent = result.message || 'Rule executed successfully';
    
    // Update rule in our array
    const index = allRules.findIndex(r => r.id == rule.id);
    if (index !== -1) {
      allRules[index].lastTriggered = new Date().toISOString();
      allRules[index].triggerCount = (allRules[index].triggerCount || 0) + 1;
    }
    
    // Reload rules to reflect the updated trigger count
    setTimeout(() => debouncedLoadRules(), 2000);
    
    return true;
  } catch (error) {
    console.error('Error executing rule:', error);
    
    // Show error
    document.getElementById('executeStatus').classList.remove('pending');
    document.getElementById('executeStatus').classList.add('error');
    document.getElementById('executeMessage').textContent = error.message;
    
    return false;
  }
}

/**
 * Filters rules based on search and filter criteria
 */
function filterRules() {
  const searchText = searchInput.value.toLowerCase();
  const filterValue = filterSelect.value;
  
  let filteredRules = allRules;
  
  // Filter by status
  if (filterValue === 'active') {
    filteredRules = filteredRules.filter(rule => rule.active);
  } else if (filterValue === 'inactive') {
    filteredRules = filteredRules.filter(rule => !rule.active);
  }
  
  // Filter by search text
  if (searchText) {
    filteredRules = filteredRules.filter(rule => 
      rule.name.toLowerCase().includes(searchText) || 
      (rule.description && rule.description.toLowerCase().includes(searchText))
    );
  }
  
  renderRules(filteredRules);
}

/**
 * Formats a condition for display
 * @param {Object} condition - Condition object
 * @returns {string} Formatted HTML string
 */
function formatCondition(condition) {
  // Validate condition object
  if (!condition || typeof condition !== 'object') {
    return 'Invalid condition';
  }
  
  const parameterLabels = {
    'battery_soc': 'Battery SOC',
    'pv_power': 'PV Power',
    'load': 'Load',
    'grid_voltage': 'Grid Voltage',
    'grid_power': 'Grid Power'
  };
  
  const operatorLabels = {
    'gt': 'greater than',
    'lt': 'less than',
    'eq': 'equal to',
    'gte': 'greater than or equal to',
    'lte': 'less than or equal to'
  };
  
  const units = {
    'battery_soc': '%',
    'pv_power': 'W',
    'load': 'W',
    'grid_voltage': 'V',
    'grid_power': 'W'
  };
  
  const paramLabel = parameterLabels[condition.parameter] || condition.parameter || 'Unknown';
  const opLabel = operatorLabels[condition.operator] || condition.operator || 'Unknown';
  const value = condition.value !== undefined ? condition.value : 'Unknown';
  const unit = units[condition.parameter] || '';
  
  return `<strong>${paramLabel}</strong> is <strong>${opLabel}</strong> <strong>${value}${unit}</strong>`;
}

/**
 * Formats time restrictions for display
 * @param {Object} restrictions - Time restrictions object
 * @returns {string} Formatted HTML string
 */
function formatTimeRestrictions(restrictions) {
  // Validate restrictions object
  if (!restrictions || typeof restrictions !== 'object') {
    return 'No time restrictions';
  }
  
  let result = '';
  
  if (restrictions.startTime && restrictions.endTime) {
    result += `<div><i class="fas fa-clock"></i> From <strong>${restrictions.startTime}</strong> to <strong>${restrictions.endTime}</strong></div>`;
  }
  
  if (restrictions.days && Array.isArray(restrictions.days) && restrictions.days.length > 0) {
    const daysFormatted = restrictions.days.map(day => 
      day.charAt(0).toUpperCase() + day.slice(1)
    ).join(', ');
    result += `<div><i class="fas fa-calendar-day"></i> Only on: <strong>${daysFormatted}</strong></div>`;
  }
  
  if (restrictions.specificDates && Array.isArray(restrictions.specificDates) && restrictions.specificDates.length > 0) {
    const datesFormatted = restrictions.specificDates.join(', ');
    result += `<div><i class="fas fa-calendar-check"></i> Only on dates: <strong>${datesFormatted}</strong></div>`;
  }
  
  return result || 'Active at all times';
}

/**
 * Formats an action for display
 * @param {Object} action - Action object
 * @returns {string} Formatted HTML string
 */
function formatAction(action) {
  // Validate action object
  if (!action || typeof action !== 'object') {
    return 'Invalid action';
  }
  
  const settingLabels = {
    'grid_charge': 'Grid Charge',
    'energy_pattern': 'Energy Pattern',
    'voltage_point': 'Voltage Point',
    'voltage_point_1': 'Voltage Point 1',
    'voltage_point_2': 'Voltage Point 2',
    'voltage_point_3': 'Voltage Point 3',
    'voltage_point_4': 'Voltage Point 4',
    'voltage_point_5': 'Voltage Point 5',
    'voltage_point_6': 'Voltage Point 6',
    'max_discharge_current': 'Max Discharge Current',
    'max_charge_current': 'Max Charge Current',
    'max_grid_charge_current': 'Max Grid Charge Current',
    'battery_float_charge_voltage': 'Float Charge Voltage',
    'work_mode': 'Work Mode',
    'work_mode_timer': 'Timer Mode',
    'remote_switch': 'Remote Switch'
  };
  
  const setting = action.setting || 'Unknown';
  const value = action.value !== undefined ? action.value : 'Unknown';
  const inverter = action.inverter || 'Unknown';
  
  const inverterLabel = inverter === 'all' ? 'All Inverters' : `${inverter}`;
  const settingLabel = settingLabels[setting] || setting;
  
  return `Set <strong>${settingLabel}</strong> to <strong>${value}</strong> on <strong>${inverterLabel}</strong>`;
}

/**
 * Shows empty state when no rules are found
 */
function showEmptyState() {
  rulesList.innerHTML = `
    <div class="empty-state">
      <i class="fas fa-list-alt"></i>
      <h3>No rules found</h3>
      <p>Create your first automation rule to get started</p>
      <button class="btn btn-primary" onclick="window.location.href='${ingressPath}/wizard'">Create Rule</button>
    </div>
  `;
}

/**
 * Shows database error when database is disconnected
 */
function showDatabaseError() {
  rulesList.innerHTML = `
    <div class="error-state">
      <i class="fas fa-database"></i>
      <h3>Database Disconnected</h3>
      <p>Cannot retrieve rules without database connection</p>
      <button class="btn btn-secondary" onclick="window.location.reload()">Try Again</button>
    </div>
  `;
}

/**
 * Shows notification 
 * @param {string} message - Notification message
 * @param {string} type - Notification type: success, error, warning, info, pending
 * @param {number} duration - Duration in milliseconds
 * @returns {HTMLElement} Notification element
 */
function showNotification(message, type = 'success', duration = 5000) {
  // Remove any existing notifications with the same type
  document.querySelectorAll(`.notification.${type}`).forEach(n => n.remove());
  
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  
  let icon = 'check-circle';
  if (type === 'error') icon = 'exclamation-circle';
  if (type === 'warning') icon = 'exclamation-triangle';
  if (type === 'info') icon = 'info-circle';
  if (type === 'pending') icon = 'spinner fa-spin';
  
  notification.innerHTML = `
    <i class="fas fa-${icon}"></i>
    <span>${message}</span>
    ${type !== 'pending' ? '<button class="close-notification">&times;</button>' : ''}
  `;
  
  document.body.appendChild(notification);
  
  // Add event listener to close button (if not pending)
  if (type !== 'pending') {
    notification.querySelector('.close-notification').addEventListener('click', () => {
      notification.classList.add('removing');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.remove();
        }
      }, 300); // Match the animation duration
    });
    
    // Auto-remove after the specified duration
    if (duration > 0) {
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.classList.add('removing');
          setTimeout(() => {
            if (document.body.contains(notification)) {
              notification.remove();
            }
          }, 300);
        }
      }, duration);
    }
  }
  
  return notification;
}

/**
 * Shows error notification
 * @param {string} message - Error message
 * @returns {HTMLElement} Notification element
 */
function showError(message) {
  console.error(message); // Also log to console for debugging
  return showNotification(message, 'error', 8000); // Errors stay longer
}

/**
 * Opens confirmation modal
 * @param {string} message - Confirmation message
 * @param {Function} confirmCallback - Callback function on confirm
 */
function openConfirmationModal(message, confirmCallback) {
  document.getElementById('confirmationMessage').textContent = message;
  confirmationModal.style.display = 'block';
  
  // Set up confirm and cancel buttons
  const confirmBtn = document.getElementById('confirmAction');
  const cancelBtn = document.getElementById('cancelAction');
  
  // Remove any existing event listeners
  const newConfirmBtn = confirmBtn.cloneNode(true);
  const newCancelBtn = cancelBtn.cloneNode(true);
  confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
  cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);
  
  // Add new event listeners
  newConfirmBtn.addEventListener('click', () => {
    confirmCallback();
    closeAllModals();
  });
  
  newCancelBtn.addEventListener('click', closeAllModals);
}

/**
 * Opens execute modal
 * @param {Object} rule - Rule object
 */
function openExecuteModal(rule) {
  // Reset modal state
  document.getElementById('executeStatus').className = 'execute-status';
  document.getElementById('executeMessage').textContent = 'Preparing to execute rule...';
  document.getElementById('executeActions').innerHTML = '';
  
  // Show modal
  executeModal.style.display = 'block';
  
  // Execute the rule
  setTimeout(() => executeRule(rule), 500);
}

/**
 * Closes all modals
 */
function closeAllModals() {
  confirmationModal.style.display = 'none';
  executeModal.style.display = 'none';
}

/**
 * Safe JSON parsing with default value
 * @param {string} jsonString - JSON string to parse
 * @param {*} defaultValue - Default value if parsing fails
 * @returns {*} Parsed object or default value
 */
function safeParseJson(jsonString, defaultValue) {
  try {
    if (!jsonString || jsonString === 'null' || jsonString === 'undefined') {
      return defaultValue;
    }
    return JSON.parse(jsonString);
  } catch (error) {
    console.error('JSON parsing error:', error, jsonString);
    return defaultValue;
  }
}
</script>


<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>

</body>
</html>
