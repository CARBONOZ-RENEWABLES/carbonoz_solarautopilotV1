<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
body {
    font-family: 'Inter', sans-serif;
}
:root {
  /* Light Theme Variables */
  --primary-color: #DEAF0B;
  --primary-color-light: #fff;
  --secondary-color: #3f37c9;
  --success-color: #2ecc71;
  --success-color-light: rgba(46, 204, 113, 0.15);
  --info-color: #3498db;
  --info-color-light: rgba(52, 152, 219, 0.15);
  --warning-color: #f39c12;
  --warning-color-light: rgba(243, 156, 18, 0.15);
  --danger-color: #e74c3c;
  --danger-color-light: rgba(231, 76, 60, 0.15);
  
  --bg-color: #f8f9fa;
  --text-color: #2d3748;
  --text-muted: #718096;
  --border-color: #e2e8f0;
  
  --sidebar-bg: #1a202c;
  --sidebar-text: #e2e8f0;
  --sidebar-active: #4361ee;
  
  --card-bg: #ffffff;
  --card-bg-accent: #f7fafc;
  --card-header-bg: #f8f9fa;
  --card-footer-bg: #f8f9fa;
  
  --btn-hover-bg: #edf2f7;
  --input-bg: #ffffff;
  --dropdown-bg: #ffffff;
  --modal-bg: #ffffff;
  --switch-bg: #cbd5e0;
  --item-bg: #f7fafc;
}

   
   body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    background-color: var(--bg-color);
    
   }
    /* Sidebar styles */
    .sidebar {
        width: 280px;
        height: 100vh;
        background-color: white;
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        transition: width 0.3s ease;
    }
   
           .logo-container {
               padding: 1.5rem;
               border-bottom: 1px solid #e5e7eb;
               display: flex;
               align-items: center;
               gap: 0.75rem;
           }
   
           .logo-icon {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
   }
   
   .logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
   }
   
   .logo-text .highlight {
    color: var(--primary-color);
    margin-left: 10px;
   }
   
   
   nav {
    flex-grow: 1;
   }
   
   nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
   }
   nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
   }
   
   nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
   }
   nav li:hover {
    background-color: var(--bg-color);
   }
   
   nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
   }
   
   .bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
   }
   
   .toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
   }
   
   .toggle-text {
    margin-right: 10px;
   }
   
   .toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
   }
   .toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
   }
   
   .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .toggle-switch.active::before {
    transform: translateX(25px);
   }
   
   .sidebar.collapsed .logo-text,
   .sidebar.collapsed .search,
   .sidebar.collapsed nav li span,
   .sidebar.collapsed .toggle-text {
    display: none;
   }
   
   .sidebar.collapsed .logo {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li i {
    margin-right: 0;
   }
           /* Main content styles */
           .main-content {
               flex: 1;
               margin-left: 280px;
               padding: 2rem;
           }
   
           .content-header {
               margin-bottom: 2rem;
           }
   
           .content-header h2 {
               font-size: 1.875rem;
               font-weight: 700;
               color: #111827;
           }
   
           .metrics-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
               gap: 1.5rem;
               margin-bottom: 2rem;
           }
   
           .metric-card {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .metric-title {
               font-size: 0.875rem;
               font-weight: 600;
               color: #4b5563;
               margin-bottom: 0.5rem;
           }
   
           .metric-value {
               font-size: 1.5rem;
               font-weight: 700;
               margin-bottom: 0.25rem;
           }
   
           .metric-subtitle {
               font-size: 0.875rem;
               color: #6b7280;
           }
   
           .chart-container {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               margin-bottom: 2rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .chart-wrapper {
               height: 400px;
               margin-top: 1rem;
           }
   
           .period-buttons {
               display: flex;
               gap: 0.75rem;
               margin-bottom: 1rem;
           }
   
           .period-btn {
               padding: 0.5rem 1rem;
               border: none;
               background-color: #e5e7eb;
               color: #4b5563;
               border-radius: 6px;
               cursor: pointer;
               font-weight: 500;
               transition: all 0.2s;
           }
   
           .period-btn:hover {
               background-color: #d1d5db;
           }
   
           .period-btn.active {
               background-color: #DEAF0B;
               color: white;
           }
   
           /* Toggle styles */
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .slider {
               position: absolute;
               cursor: pointer;
               top: 0;
               left: 0;
               right: 0;
               bottom: 0;
               background-color: #e5e7eb;
               transition: .4s;
               border-radius: 34px;
           }
   
           .slider:before {
               position: absolute;
               content: "";
               height: 16px;
               width: 16px;
               left: 4px;
               bottom: 4px;
               background-color: white;
               transition: .4s;
               border-radius: 50%;
           }
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           /* Updated and new styles */
           .bottom-controls {
               padding: 1.5rem;
               border-top: 1px solid #e5e7eb;
           }
   
           .control-item {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 1rem;
           }
   
           .control-label {
               font-size: 0.875rem;
               color: #4b5563;
           }
   
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
   }
   
   .sidebar.collapsed {
    width: 80px;
   }
   
   .logo {
    display: flex;
    align-items: center;
    padding: 20px;
   }
   
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           .total-emissions {
               font-size: 1.25rem;
               font-weight: 600;
               margin-bottom: 1rem;
               color: #374151;
           }
   
           .summary-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 1rem;
               margin-bottom: 2rem;
           }
   
           .summary-item {
               background-color: white;
               border-radius: 8px;
               padding: 1rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .summary-label {
               font-size: 0.875rem;
               color: #6b7280;
               display: block;
               margin-bottom: 0.5rem;
           }
   
           .summary-value {
               font-size: 1.25rem;
               font-weight: 600;
           }
   
       
   
           /* Responsive styles */
           @media (max-width: 768px) {
               .sidebar {
                   width: 100%;
                   height: auto;
                   position: static;
                   border-right: none;
                   border-bottom: 1px solid #e5e7eb;
               }
   
               .main-content {
                   margin-left: 0;
               }
   
               body.collapsed-sidebar .sidebar {
                   display: none;
               }
   
               body.collapsed-sidebar .main-content {
                   margin-left: 0;
               }
   
               .metrics-grid,
               .summary-grid {
                   grid-template-columns: 1fr;
               }
   
               .period-buttons {
                   flex-wrap: wrap;
               }
   
               .period-btn {
                   flex: 1 0 calc(50% - 0.375rem);
                   margin-bottom: 0.75rem;
               }
           }

/* loading css */

.loading-overlay {
 position: fixed;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 background-color: #f8f9fa;
 display: flex;
 justify-content: center;
 align-items: center;
 z-index: 9999;
}

.loading-spinner {
 width: 50px;
 height: 50px;
 border: 5px solid #e0e0e0;
 border-top: 5px solid #3498db;
 border-radius: 50%;
 animation: spin 1s linear infinite;
}

@keyframes spin {
 0% { transform: rotate(0deg); }
 100% { transform: rotate(360deg); }
}




@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-overview {
 min-height: 18em;
}
}



@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-battery-soc {
 min-height: 12em;
}
}

/* Dark mode styles */
body.dark-mode {
    background-color: rgba(24, 27, 31, 1);
 color: #f5f6fa;
}

.dark-mode .main-content{
    background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
}

.dark-mode .sidebar {
    background-color: rgba(24, 27, 31, 1);
}

.dark-mode .sidebar .logo-icon {
 color: #2f3640;
}

.dark-mode .sidebar .logo-text {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li:hover {
 background-color: #383838;
}

.dark-mode .sidebar nav li a {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li i {
 color: #dcdde1;
}

.dark-mode .toggle-sidebar,
.dark-mode .toggle-dark-mode {
 color: #f5f6fa;
}

.dark-mode .toggle-switch {
    background-color: var(--primary-color);
}

.dark-mode .toggle-switch.active {
 background-color: var(--primary-color);
}

.dark-mode header {
    background-color: rgb(17, 18, 23);
}

.dark-mode .content-card {
    background-color: rgba(24, 27, 31, 1);
 color: #fff;
}


.dark-mode .loading-overlay{
    background-color: rgba(24, 27, 31, 1);
}

/* Mobile Sidebar Improvements */
@media (max-width: 768px) {
    /* Sidebar base styles */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 280px;
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        z-index: 1000;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        box-shadow: none;
    }

    .sidebar.active {
        transform: translateX(0);
        box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
    }

    /* Improved hamburger button */
    .mobile-toggle {
        display: block;
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 1001;
        background: none;
        border: none;
        cursor: pointer;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 8px;
    }

    .mobile-toggle span {
        display: block;
        width: 24px;
        height: 2px;
        background-color: var(--text-color);
        margin: 5px auto;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    .mobile-toggle.active span:nth-child(1) {
        transform: translateY(7px) rotate(45deg);
    }

    .mobile-toggle.active span:nth-child(2) {
        opacity: 0;
    }

    .mobile-toggle.active span:nth-child(3) {
        transform: translateY(-7px) rotate(-45deg);
    }

    /* Improved nav items */
    .sidebar nav ul {
        padding: 1rem 0;
    }

    .sidebar nav li {
        padding: 0.875rem 1.5rem;
        margin: 0.25rem 1rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
    }

    .sidebar nav li a {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 1rem;
        color: var(--text-color);
    }

    .sidebar nav li i {
        font-size: 1.25rem;
        min-width: 24px;
        text-align: center;
    }

    .sidebar nav li:active {
        background-color: rgba(0, 0, 0, 0.05);
    }

    /* Improved overlay */
    .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        z-index: 999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .sidebar-overlay.active {
        display: block;
        opacity: 1;
    }

    /* Dark mode adjustments */
    .dark-mode .mobile-toggle {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .dark-mode .mobile-toggle span {
        background-color: #f5f6fa;
    }

    .dark-mode .sidebar nav li:active {
        background-color: rgba(255, 255, 255, 0.05);
    }
}

/* Ensure main content adjusts properly */
@media (max-width: 768px) {
  .main-content {
    margin-left: 0;
    padding: 1rem;
    transition: margin-left 0.3s ease;
  }
  
  .main-content .container {
    padding: 0;
  }
  
  .dashboard-cards {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .card-header {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .search-container {
    width: 100%;
    margin-top: 1rem;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .search-input, 
  .select-input {
    width: 100%;
  }
  
  .rules-list {
    padding: 1rem;
  }
  
  .rule-card {
    padding: 0.75rem;
  }
  
  .rule-header {
    flex-wrap: wrap;
    padding: 0.75rem;
  }
  
  .rule-name {
    font-size: 1rem;
    width: 100%;
    margin-top: 0.5rem;
  }
  
  .rule-menu {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
  }
  
  .rule-details {
    padding: 0.75rem;
  }
  
  .main-header {
    flex-direction: column;
    align-items: flex-start;
    margin-bottom: 1.5rem;
  }
  
  .main-header h1 {
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }
  
  .header-actions {
    width: 100%;
    flex-direction: column;
    align-items: flex-start;
    gap: 0.75rem;
  }
  
  .db-status {
    margin-left: 0;
  }
  
  .btn-primary {
    width: 100%;
  }
}


  /* Main content styling */
.main-content {
  flex: 1;
  margin-left: 280px;
  padding: 2rem;
  background-color: var(--bg-color);
  color: var(--text-color);
  transition: margin-left 0.3s ease;
}
.main-content  .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }

    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .page-title {
      color: var(--primary);
      font-size: 1.8rem;
      font-weight: 600;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      background-color: var(--bg-card);
      padding: 0.5rem 1rem;
      border-radius: var(--radius);
      box-shadow: var(--shadow);
    }

    .status-indicator.connected {
      color: var(--success);
    }

    .status-indicator.disconnected {
      color: var(--danger);
    }

    .dashboard-cards {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .card {
      background-color: var(--bg-card);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      padding: 1.5rem;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .card-title {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 1rem;
    }

    .card-title i {
      background-color: rgba(74, 109, 167, 0.1);
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      color: var(--primary);
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--text-dark);
      margin-bottom: 0.5rem;
    }

    .stat-label {
      color: var(--text-light);
      font-size: 0.9rem;
    }

    .dashboard-filters {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .filter-group {
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .search-box {
      position: relative;
    }

    .search-box i {
      position: absolute;
      left: 10px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-light);
    }

    .search-input {
      padding: 0.6rem 1rem 0.6rem 2.5rem;
      border: 1px solid var(--border);
      border-radius: var(--radius);
      width: 300px;
      font-size: 0.9rem;
    }

    .select-filter {
      padding: 0.6rem 1rem;
      border: 1px solid var(--border);
      border-radius: var(--radius);
      background-color: white;
      font-size: 0.9rem;
      cursor: pointer;
      min-width: 150px;
    }

    .btn {
      padding: 0.6rem 1.2rem;
      border-radius: var(--radius);
      border: none;
      font-weight: 600;
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      transition: background-color 0.2s, transform 0.1s;
      font-size: 0.9rem;
    }

    .btn:active {
      transform: scale(0.98);
    }

    .btn-primary {
      background-color: var(--primary);
      color: white;
    }

    .btn-primary:hover {
      background-color: var(--primary-dark);
    }

    .btn-secondary {
      background-color: var(--secondary);
      color: white;
    }

    .btn-secondary:hover {
      background-color: var(--secondary-dark);
    }

    .btn-outline {
      background-color: transparent;
      border: 1px solid var(--primary);
      color: var(--primary);
    }

    .btn-outline:hover {
      background-color: rgba(74, 109, 167, 0.1);
    }

    .history-table {
      width: 100%;
      border-collapse: collapse;
      background-color: var(--bg-card);
      border-radius: var(--radius);
      overflow: hidden;
      box-shadow: var(--shadow);
    }

    .history-table th,
    .history-table td {
      padding: 1rem;
      text-align: left;
      border-bottom: 1px solid var(--border);
    }

    .history-table th {
      background-color: rgba(74, 109, 167, 0.1);
      color: var(--primary);
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.8rem;
      letter-spacing: 0.5px;
    }

    .history-table tr:last-child td {
      border-bottom: none;
    }

    .history-table tbody tr:hover {
      background-color: rgba(74, 109, 167, 0.05);
    }

    .rule-name {
      font-weight: 600;
      color: var(--primary);
    }

    .rule-description {
      color: var(--text-light);
      font-size: 0.9rem;
      max-width: 300px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .timestamp {
      color: var(--text-light);
      font-size: 0.9rem;
      white-space: nowrap;
    }

    .badge {
      display: inline-block;
      padding: 0.2rem 0.6rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      white-space: nowrap;
    }

    .badge-primary {
      background-color: rgba(74, 109, 167, 0.1);
      color: var(--primary);
    }

    .badge-success {
      background-color: rgba(76, 175, 80, 0.1);
      color: var(--success);
    }

    .badge-warning {
      background-color: rgba(255, 152, 0, 0.1);
      color: var(--warning);
    }

    .badge-danger {
      background-color: rgba(244, 67, 54, 0.1);
      color: var(--danger);
    }

    .badge-secondary {
      background-color: rgba(102, 187, 106, 0.1);
      color: var(--secondary);
    }

    .action-links {
      display: flex;
      gap: 0.5rem;
    }

    .action-btn {
      background: none;
      border: none;
      font-size: 1rem;
      cursor: pointer;
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: background-color 0.2s;
    }

    .action-btn:hover {
      background-color: rgba(0, 0, 0, 0.05);
    }

    .action-btn.view {
      color: var(--primary);
    }

    .action-btn.run {
      color: var(--success);
    }

    .pagination {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 1.5rem;
      padding: 1rem;
      background-color: var(--bg-card);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
    }

    .page-info {
      color: var(--text-light);
      font-size: 0.9rem;
    }

    .page-controls {
      display: flex;
      gap: 0.5rem;
    }

    .page-btn {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      border: 1px solid var(--border);
      background-color: white;
      color: var(--text-dark);
      font-weight: 600;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: background-color 0.2s;
    }

    .page-btn:hover:not(:disabled) {
      background-color: rgba(74, 109, 167, 0.1);
      color: var(--primary);
    }

    .page-btn.active {
      background-color: var(--primary);
      color: white;
      border-color: var(--primary);
    }

    .page-btn:disabled {
      cursor: not-allowed;
      opacity: 0.5;
    }

    .empty-state {
      padding: 4rem 2rem;
      text-align: center;
      background-color: var(--bg-card);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
    }

    .empty-icon {
      font-size: 3rem;
      color: var(--text-light);
      margin-bottom: 1rem;
    }

    .empty-title {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--text-dark);
      margin-bottom: 0.5rem;
    }

    .empty-description {
      color: var(--text-light);
      max-width: 400px;
      margin: 0 auto 1.5rem;
    }

    /* Modal styles */
    .modal-backdrop {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      display: none;
    }

    .modal {
      background-color: var(--bg-card);
      border-radius: var(--radius);
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
      max-width: 600px;
      width: 100%;
      max-height: 90vh;
      overflow-y: auto;
    }

    .modal-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--border);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .modal-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary);
    }

    .modal-close {
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--text-light);
      transition: color 0.2s;
    }

    .modal-close:hover {
      color: var(--danger);
    }

    .modal-body {
      padding: 1.5rem;
    }

    .modal-footer {
      padding: 1rem 1.5rem;
      border-top: 1px solid var(--border);
      display: flex;
      justify-content: flex-end;
      gap: 1rem;
    }

    .rule-detail {
      margin-bottom: 1.5rem;
    }

    .rule-detail-title {
      font-size: 0.9rem;
      font-weight: 600;
      color: var(--text-light);
      margin-bottom: 0.5rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .rule-condition {
      background-color: rgba(74, 109, 167, 0.1);
      border-radius: var(--radius);
      padding: 1rem;
      margin-bottom: 0.5rem;
    }

    .rule-action {
      background-color: rgba(102, 187, 106, 0.1);
      border-radius: var(--radius);
      padding: 1rem;
      margin-bottom: 0.5rem;
    }

    .rule-time {
      background-color: rgba(255, 152, 0, 0.1);
      border-radius: var(--radius);
      padding: 1rem;
    }

    /* System state indicator */
    .system-state {
      background-color: var(--bg-card);
      padding: 1rem;
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      margin-bottom: 1.5rem;
    }

    .state-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1rem;
    }

    .state-item {
      display: flex;
      flex-direction: column;
    }

    .state-label {
      font-size: 0.9rem;
      color: var(--text-light);
      margin-bottom: 0.2rem;
    }

    .state-value {
      font-weight: 600;
      font-size: 1.1rem;
    }

    /* Make table responsive */
    @media (max-width: 992px) {
      .dashboard-cards {
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
      }

      .history-table th,
      .history-table td {
        padding: 0.8rem;
      }

      .rule-description {
        max-width: 200px;
      }
    }

    @media (max-width: 768px) {
      .container {
        padding: 1.5rem;
      }

      .dashboard-filters {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .filter-group {
        width: 100%;
      }

      .search-input {
        width: 100%;
      }

      .select-filter {
        width: 100%;
      }

      .history-table {
        display: block;
        overflow-x: auto;
      }

      .rule-description {
        max-width: 150px;
      }
    }

    @media (max-width: 576px) {
      .dashboard-cards {
        grid-template-columns: 1fr;
      }

      .stat-value {
        font-size: 1.5rem;
      }

      .page-title {
        font-size: 1.5rem;
      }

      .modal {
        width: 90%;
      }
    }

    /* Dark mode toggle */
    .theme-toggle {
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      z-index: 100;
      background-color: var(--primary);
      color: white;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 1.2rem;
      cursor: pointer;
      transition: background-color 0.2s, transform 0.2s;
    }

    .theme-toggle:hover {
      background-color: var(--primary-dark);
      transform: scale(1.05);
    }

    /* Loading styles */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      display: none;
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 5px solid rgba(74, 109, 167, 0.2);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

.d-flex.flex-wrap.justify-content-center.gap-3 {
    flex-wrap: nowrap !important;
    overflow-x: auto;
    justify-content: flex-start !important;
    padding-bottom: 10px; /* Add some padding to make scrollbar not overlap content */
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
    scrollbar-width: thin; /* For Firefox */
}

/* Hide scrollbar for Chrome, Safari and Opera */
.d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
    display: none;
}

/* Ensure nav links don't wrap */
.nav-link {
    white-space: nowrap;
    flex-shrink: 0;
}


.main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  display: flex;
  flex-wrap: nowrap !important;
  overflow-x: auto;
  white-space: nowrap;
  gap: 0.75rem;
  padding: 0.75rem;
  margin-bottom: 1.5rem;
  scrollbar-width: thin;
  -webkit-overflow-scrolling: touch;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
  height: 6px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

.main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

.main-content .nav-link {
  display: inline-flex;
  align-items: center;
  white-space: nowrap;
  padding: 0.5rem 1rem;
  color: #4b5563;
  font-weight: 500;
  border-radius: 6px;
  text-decoration: none;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.main-content .nav-link:hover {
  background-color: #e9ecef;
  color: #000;
}

.main-content .nav-link.active {
  color: #fff;
}

.main-content .nav-link i,
.main-content .nav-link svg {
  margin-right: 0.5rem;
  font-size: 1rem;
}

.main-header .title-section {
  display: flex;
  align-items: center;
}

.main-header h1 {
  font-size: 2rem;
  font-weight: 700;
  color: var(--text-color);
  margin: 0;
  display: flex;
  align-items: center;
}

.main-header h1 i {
  margin-right: 0.75rem;
  color: var(--primary-color);
  font-size: 1.8rem;
}

.header-actions {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.btn-create-rule {
  display: flex;
  align-items: center;
  background-color: var(--primary-color);
  color: white;
  padding: 0.6rem 1.2rem;
  border-radius: 8px;
  font-weight: 500;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.btn-create-rule:hover {
  background-color: #c79d0a;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.btn-create-rule i {
  margin-right: 0.5rem;
  font-size: 1rem;
}

.db-status {
  display: flex;
  align-items: center;
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-size: 0.9rem;
  background-color: rgba(46, 204, 113, 0.15);
}

.db-status i {
  margin-right: 0.5rem;
  color: #2ecc71;
}

.db-status.disconnected {
  background-color: rgba(231, 76, 60, 0.15);
}

.db-status.disconnected i {
  color: #e74c3c;
}

/* Card Icons Styling */
.stats-card .card-icon {
  width: 56px;
  height: 56px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 12px;
  margin-right: 1rem;
  font-size: 1.75rem;
}

.stats-card:nth-child(1) .card-icon {
  background-color: rgba(222, 175, 11, 0.15);
  color: #DEAF0B;
}

.stats-card:nth-child(2) .card-icon {
  background-color: rgba(46, 204, 113, 0.15);
  color: #2ecc71;
}

.stats-card:nth-child(3) .card-icon {
  background-color: rgba(52, 152, 219, 0.15);
  color: #3498db;
}

.stats-card:nth-child(4) .card-icon {
  background-color: rgba(243, 156, 18, 0.15);
  color: #f39c12;
}

/* Dark mode adjustments */
.dark-mode .main-header {
  border-bottom-color: rgb(48, 51, 58);
}

.dark-mode .main-header h1 {
  color: #f5f6fa;
}

.dark-mode .main-header h1 i {
  color: var(--primary-color);
}

.dark-mode .db-status {
  color: #f5f6fa;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .main-header {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .header-actions {
    margin-top: 1rem;
    width: 100%;
    justify-content: space-between;
  }
  
  .btn-create-rule {
    padding: 0.5rem 1rem;
  }
}

/* Card Component */
.card {
  background-color: var(--card-bg);
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
  overflow: hidden;
}

/* Button Styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1.25rem;
  font-size: 0.95rem;
  font-weight: 500;
  text-align: center;
  white-space: nowrap;
  border-radius: 6px;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
  user-select: none;
}

.btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.btn:active {
  transform: translateY(0);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.btn i {
  margin-right: 0.5rem;
}

.btn-primary {
  background-color: var(--primary-color);
  color: white;
}

.btn-primary:hover {
  background-color: var(--secondary-color);
}

.btn-secondary {
  background-color: var(--btn-hover-bg);
  color: var(--text-color);
}

.btn-secondary:hover {
  background-color: var(--border-color);
}

.btn-success {
  background-color: var(--success-color);
  color: white;
}

.btn-success:hover {
  background-color: #27ae60;
}

.btn-danger {
  background-color: var(--danger-color);
  color: white;
}

.btn-danger:hover {
  background-color: #c0392b;
}

.btn-info {
  background-color: var(--info-color);
  color: white;
}

.btn-info:hover {
  background-color: #2980b9;
}

.btn-icon-only {
  padding: 0.5rem;
  border-radius: 50%;
}

.btn-icon-only i {
  margin: 0;
}

/* Forms */
.form-group {
  margin-bottom: 1.5rem;
}

.form-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: var(--text-color);
}

.form-control {
  width: 100%;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  line-height: 1.5;
  color: var(--text-color);
  background-color: var(--input-bg);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-control:focus {
  border-color: var(--primary-color);
  outline: 0;
  box-shadow: 0 0 0 0.2rem var(--primary-color-light);
}

.form-text {
  display: block;
  margin-top: 0.25rem;
  font-size: 0.875rem;
  color: var(--text-muted);
}

.form-check {
  position: relative;
  display: block;
  padding-left: 1.5rem;
}

.form-check-input {
  position: absolute;
  margin-top: 0.25rem;
  margin-left: -1.5rem;
}

.form-check-label {
  margin-bottom: 0;
}

/* Utilities */
.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-left {
  text-align: left;
}

.text-primary {
  color: var(--primary-color);
}

.text-success {
  color: var(--success-color);
}

.text-danger {
  color: var(--danger-color);
}

.text-warning {
  color: var(--warning-color);
}

.text-info {
  color: var(--info-color);
}

.text-muted {
  color: var(--text-muted);
}

.d-flex {
  display: flex;
}

.align-items-center {
  align-items: center;
}

.justify-content-center {
  justify-content: center;
}

.justify-content-between {
  justify-content: space-between;
}

.flex-column {
  flex-direction: column;
}

.flex-wrap {
  flex-wrap: wrap;
}

.w-100 {
  width: 100%;
}

.mt-1 { margin-top: 0.25rem; }
.mt-2 { margin-top: 0.5rem; }
.mt-3 { margin-top: 1rem; }
.mt-4 { margin-top: 1.5rem; }
.mt-5 { margin-top: 3rem; }

.mb-1 { margin-bottom: 0.25rem; }
.mb-2 { margin-bottom: 0.5rem; }
.mb-3 { margin-bottom: 1rem; }
.mb-4 { margin-bottom: 1.5rem; }
.mb-5 { margin-bottom: 3rem; }

.ml-1 { margin-left: 0.25rem; }
.ml-2 { margin-left: 0.5rem; }
.ml-3 { margin-left: 1rem; }
.ml-4 { margin-left: 1.5rem; }
.ml-5 { margin-left: 3rem; }

.mr-1 { margin-right: 0.25rem; }
.mr-2 { margin-right: 0.5rem; }
.mr-3 { margin-right: 1rem; }
.mr-4 { margin-right: 1.5rem; }
.mr-5 { margin-right: 3rem; }

.p-1 { padding: 0.25rem; }
.p-2 { padding: 0.5rem; }
.p-3 { padding: 1rem; }
.p-4 { padding: 1.5rem; }
.p-5 { padding: 3rem; }

/* Responsive Design */
@media (max-width: 992px) {
  .sidebar {
    transform: translateX(-100%);
  }
  
  .sidebar.show {
    transform: translateX(0);
  }
  
  .main-content {
    margin-left: 0;
    width: 100%;
  }
  
  /* Add a toggle button for the sidebar on mobile */
  .sidebar-toggle {
    display: block;
    position: fixed;
    top: 1rem;
    left: 1rem;
    z-index: 30;
    background-color: var(--primary-color);
    color: white;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    text-align: center;
    line-height: 40px;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }
}

@media (min-width: 993px) {
  .sidebar-toggle {
    display: none;
  }
}

/* Dashboard Cards */
.dashboard-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .stats-card {
    display: flex;
    align-items: center;
    padding: 1.5rem;
    background: linear-gradient(135deg, var(--card-bg) 0%, var(--card-bg-accent) 100%);
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .stats-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.12);
  }
  
  .card-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
    background-color: var(--primary-color-light);
    color: var(--primary-color);
    border-radius: 50%;
    margin-right: 1rem;
    font-size: 1.5rem;
  }
  
  .card-content h3 {
    font-size: 0.9rem;
    font-weight: 500;
    margin: 0;
    color: var(--text-muted);
  }
  
  .stats-number {
    font-size: 1.6rem;
    font-weight: 700;
    color: var(--text-color);
    margin: 0.2rem 0 0;
  }
  
  /* Rules Container */
  .rules-container {
    margin-bottom: 2rem;
  }
  
  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.25rem 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }
  
  .card-header h2 {
    font-size: 1.25rem;
    margin: 0;
    color: var(--text-color);
  }
  
  .search-container {
    display: flex;
    gap: 0.75rem;
  }
  
  .search-input, .select-input {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background-color: var(--input-bg);
    color: var(--text-color);
    font-size: 0.9rem;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  .search-input:focus, .select-input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px var(--primary-color-light);
    outline: none;
  }
  
  .search-input {
    width: 250px;
  }
  
  .select-input {
    width: 150px;
  }
  
  /* Rules List */
  .rules-list {
    padding: 1.5rem;
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
  
  @media (min-width: 1200px) {
    .rules-list {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  .rule-card {
    background-color: var(--card-bg);
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid var(--border-color);
  }
  
  .rule-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  }
  
  .rule-header {
    display: flex;
    align-items: center;
    padding: 1.25rem 1.5rem;
    background-color: var(--card-header-bg);
    border-bottom: 1px solid var(--border-color);
  }
  
  .rule-status {
    margin-right: 1rem;
  }
  
  .rule-name {
    flex: 1;
    margin: 0;
    font-size: 1.15rem;
    color: var(--text-color);
    font-weight: 600;
  }
  
  .rule-menu {
    position: relative;
  }
  
  .btn-icon {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-muted);
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  .btn-icon:hover {
    background-color: var(--btn-hover-bg);
    color: var(--text-color);
  }
  
  .dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    background-color: var(--dropdown-bg);
    border-radius: 6px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    min-width: 160px;
    z-index: 100;
    display: none;
    border: 1px solid var(--border-color);
  }
  
  .dropdown-menu.show {
    display: block;
  }
  
  .dropdown-menu a {
    display: block;
    padding: 0.75rem 1rem;
    color: var(--text-color);
    text-decoration: none;
    font-size: 0.9rem;
    transition: background-color 0.3s ease;
  }
  
  .dropdown-menu a:hover {
    background-color: var(--btn-hover-bg);
  }
  
  .dropdown-menu a i {
    margin-right: 0.5rem;
    width: 16px;
    text-align: center;
  }
  
  .dropdown-menu a.delete-rule {
    color: var(--danger-color);
  }
  
  .dropdown-menu a.delete-rule:hover {
    background-color: var(--danger-color-light);
  }
  
  .rule-description {
    padding: 0.75rem 1.5rem;
    margin: 0;
    color: var(--text-muted);
    font-size: 0.9rem;
    line-height: 1.5;
    border-bottom: 1px solid var(--border-color);
  }
  
  .rule-details {
    padding: 1rem 1.5rem;
  }
  
  .rule-section {
    margin-bottom: 1.25rem;
  }
  
  .rule-section:last-child {
    margin-bottom: 0;
  }
  
  .rule-section h4 {
    font-size: 0.9rem;
    margin: 0 0 0.75rem;
    color: var(--text-muted);
    font-weight: 600;
    display: flex;
    align-items: center;
  }
  
  .rule-section h4 i {
    margin-right: 0.5rem;
  }
  
  .conditions-list, .time-restrictions, .actions-list {
    font-size: 0.9rem;
    color: var(--text-color);
  }
  
  .condition-item, .time-item, .action-item {
    background-color: var(--item-bg);
    padding: 0.75rem 1rem;
    border-radius: 6px;
    margin-bottom: 0.5rem;
    border: 1px solid var(--border-color);
  }
  
  .condition-item:last-child, .time-item:last-child, .action-item:last-child {
    margin-bottom: 0;
  }
  
  .empty-message {
    color: var(--text-muted);
    font-style: italic;
    margin: 0;
  }
  
  .rule-footer {
    padding: 1rem 1.5rem;
    background-color: var(--card-footer-bg);
    border-top: 1px solid var(--border-color);
  }
  
  .rule-stats {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    font-size: 0.8rem;
    color: var(--text-muted);
  }
  
  .rule-stats i {
    margin-right: 0.25rem;
  }
  
  /* Switch for rule active toggle */
  .switch {
    position: relative;
    display: inline-block;
    width: 36px;
    height: 20px;
  }
  
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--switch-bg);
    transition: .4s;
  }
  
  .slider:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 2px;
    bottom: 2px;
    background-color: white;
    transition: .4s;
  }
  
  input:checked + .slider {
    background-color: var(--primary-color);
  }
  
  input:focus + .slider {
    box-shadow: 0 0 1px var(--primary-color);
  }
  
  input:checked + .slider:before {
    transform: translateX(16px);
  }
  
  .slider.round {
    border-radius: 34px;
  }
  
  .slider.round:before {
    border-radius: 50%;
  }
  
  /* Recent Triggers Table */
  .recent-triggers {
    padding: 1rem 1.5rem;
  }
  
  .data-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .data-table th, .data-table td {
    padding: 0.75rem 1rem;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
  }
  
  .data-table th {
    font-weight: 600;
    color: var(--text-muted);
    font-size: 0.9rem;
  }
  
  .data-table td {
    color: var(--text-color);
    font-size: 0.9rem;
  }
  
  .data-table tr:last-child td {
    border-bottom: none;
  }
  
  /* Empty and Error States */
  .empty-state, .error-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1rem;
    text-align: center;
  }
  
  .empty-state i, .error-state i {
    font-size: 3rem;
    color: var(--text-muted);
    margin-bottom: 1rem;
  }
  
  .empty-state h3, .error-state h3 {
    font-size: 1.25rem;
    margin: 0 0 0.5rem;
    color: var(--text-color);
  }
  
  .empty-state p, .error-state p {
    color: var(--text-muted);
    margin: 0 0 1.5rem;
  }
  
  .error-state i {
    color: var(--danger-color);
  }
  
  
  /* Modals */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.6);
    animation: fadeIn 0.3s;
  }
  
  .modal-content {
    position: relative;
    background-color: var(--modal-bg);
    margin: 10vh auto;
    padding: 0;
    width: 90%;
    max-width: 600px;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    animation: slideIn 0.3s;
  }
  
  .modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .modal-header h2 {
    margin: 0;
    font-size: 1.5rem;
    color: var(--text-color);
  }
  
  .close-modal {
    color: var(--text-muted);
    font-size: 1.75rem;
    font-weight: 700;
    cursor: pointer;
    transition: color 0.3s ease;
  }
  
  .close-modal:hover {
    color: var(--text-color);
  }
  
  .modal-body {
    padding: 1.5rem;
  }
  
  .modal-footer {
    padding: 1rem 1.5rem;
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
  }
  
  /* Execute Modal */
  .execute-status {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1.5rem;
    text-align: center;
    margin-bottom: 1.5rem;
  }
  
  .spinner-container {
    font-size: 2.5rem;
    color: var(--primary-color);
    margin-bottom: 1rem;
  }
  
  .execute-status.pending {
    background-color: var(--info-color-light);
    border-radius: 8px;
  }
  
  .execute-status.success {
    background-color: var(--success-color-light);
    border-radius: 8px;
  }
  
  .execute-status.error {
    background-color: var(--danger-color-light);
    border-radius: 8px;
  }
  
  .execute-status.success .spinner-container,
  .execute-status.error .spinner-container {
    display: none;
  }
  
  .execute-status.success::before {
    content: "\f00c";
    font-family: "Font Awesome 6 Free";
    font-weight: 900;
    font-size: 2.5rem;
    color: var(--success-color);
    margin-bottom: 1rem;
    display: block;
  }
  
  .execute-status.error::before {
    content: "\f00d";
    font-family: "Font Awesome 6 Free";
    font-weight: 900;
    font-size: 2.5rem;
    color: var(--danger-color);
    margin-bottom: 1rem;
    display: block;
  }
  
  .execute-details {
    margin-top: 1.5rem;
  }
  
  .execute-details h3 {
    font-size: 1.1rem;
    margin: 0 0 1rem;
    color: var(--text-color);
  }
  
  .execute-details ul {
    padding-left: 1.5rem;
    margin: 0;
  }
  
  .execute-details li {
    margin-bottom: 0.5rem;
    color: var(--text-color);
  }
  
  /* Notifications */
  .notification {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    display: flex;
    align-items: center;
    max-width: 400px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    animation: slideInRight 0.3s;
    z-index: 1001;
  }
  
  .notification.success {
    background-color: var(--success-color-light);
    border-left: 4px solid var(--success-color);
  }
  
  .notification.error {
    background-color: var(--danger-color-light);
    border-left: 4px solid var(--danger-color);
  }
  
  .notification i {
    font-size: 1.25rem;
    margin-right: 0.75rem;
  }
  
  .notification.success i {
    color: var(--success-color);
  }
  
  .notification.error i {
    color: var(--danger-color);
  }
  
  .notification span {
    flex: 1;
    color: var(--text-color);
  }
  
  .close-notification {
    background: none;
    border: none;
    color: var(--text-muted);
    cursor: pointer;
    font-size: 1.25rem;
    padding: 0;
    margin-left: 0.75rem;
    transition: color 0.3s ease;
  }
  
  .close-notification:hover {
    color: var(--text-color);
  }
  
  /* Database Status */
  .db-status {
    display: flex;
    align-items: center;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    color: var(--text-color);
    font-size: 0.9rem;
    margin-left: 1rem;
  }
  
  .db-status.connected {
    background-color: var(--success-color-light);
  }
  
  .db-status.disconnected {
    background-color: var(--danger-color-light);
  }
  
  .db-status i {
    margin-right: 0.5rem;
  }
  
  .db-status.connected i {
    color: var(--success-color);
  }
  
  .db-status.disconnected i {
    color: var(--danger-color);
  }
  
  /* Animations */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideIn {
    from { transform: translateY(-50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }
  
  @keyframes slideInRight {
    from { transform: translateX(100px); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }
  
  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .card-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .search-container {
      width: 100%;
      margin-top: 1rem;
    }
    
    .search-input, .select-input {
      width: 100%;
    }
    
    .main-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .header-actions {
      margin-top: 1rem;
      width: 100%;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .db-status {
      margin-left: 0;
    }
    
    .rule-stats {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .modal-content {
      width: 95%;
      margin: 5vh auto;
    }
  }
/* Dark Mode CSS for main-content and its components */
.dark-mode .main-content {
  background-color: rgba(24, 27, 31, 1);
  color: #fff;
}

.dark-mode .card,
.dark-mode .stats-card,
.dark-mode .rule-card,
.dark-mode .modal-content {
  background-color: rgb(36, 39, 46);
  border-color: rgb(48, 51, 58);
  color: #fff;
}

.dark-mode .card-header,
.dark-mode .rule-header,
.dark-mode .rule-footer,
.dark-mode .modal-header,
.dark-mode .modal-footer {
  background-color: rgb(30, 33, 40);
  border-color: rgb(48, 51, 58);
}

.dark-mode .search-input,
.dark-mode .select-input,
.dark-mode .form-control {
  background-color: rgb(36, 39, 46);
  border-color: rgb(48, 51, 58);
  color: #fff;
}

.dark-mode .btn-secondary {
  background-color: rgb(48, 51, 58);
  color: #fff;
}

.dark-mode .condition-item,
.dark-mode .time-item,
.dark-mode .action-item {
  background-color: rgb(30, 33, 40);
  border-color: rgb(48, 51, 58);
}

.dark-mode .text-muted,
.dark-mode .rule-description,
.dark-mode .rule-section h4,
.dark-mode .rule-stats,
.dark-mode .empty-message {
  color: #fff;
}

.dark-mode .dropdown-menu {
  background-color: rgb(36, 39, 46);
  border-color: rgb(48, 51, 58);
}

.dark-mode .dropdown-menu a {
  color: #fff;
}

.dark-mode .dropdown-menu a:hover {
  background-color: rgb(48, 51, 58);
}

.dark-mode .btn-icon {
  color: #fff;
}

.dark-mode .btn-icon:hover {
  background-color: rgb(48, 51, 58);
  color: #fff;
}

.dark-mode .data-table th,
.dark-mode .data-table td {
  border-color: rgb(48, 51, 58);
}

.dark-mode .data-table th {
  color: #fff;
}

.dark-mode .data-table td {
  color: #fff;
}

.dark-mode .slider {
  background-color: rgb(48, 51, 58);
}

.dark-mode .card-icon {
  background-color: rgba(222, 175, 11, 0.2);
  color: var(--primary-color);
}

.dark-mode .execute-status.pending {
  background-color: rgba(52, 152, 219, 0.1);
}

.dark-mode .execute-status.success {
  background-color: rgba(46, 204, 113, 0.1);
}

.dark-mode .execute-status.error {
  background-color: rgba(231, 76, 60, 0.1);
}

.dark-mode .notification.success {
  background-color: rgba(46, 204, 113, 0.1);
}

.dark-mode .notification.error {
  background-color: rgba(231, 76, 60, 0.1);
}

/* Improve dark mode for modal overlays */
.dark-mode .modal {
  background-color: rgba(24, 27, 31, 1);
}

/* Improved specificity for main-content in dark mode at small screens */
@media (max-width: 768px) {
  .dark-mode .main-content {
    background-color: rgba(24, 27, 31, 1);
  }
  
  .dark-mode .dashboard-cards .stats-card {
    background: linear-gradient(135deg, rgb(36, 39, 46) 0%, rgb(30, 33, 40) 100%);
  }
  
  .dark-mode .main-header h1 {
    color: #fff;
  }
  
  .dark-mode .btn-primary {
    background-color: var(--primary-color);
    color: #1a1a1a;
  }
}.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
  background-color: #202429;
}

.dark-mode .main-content .nav-link {
  color: #e5e7eb;
}

.dark-mode .main-content .nav-link:hover {
  background-color: #32383e;
  color: #fff;
}

.dark-mode .main-content .nav-link.active {
  color: #fff;
}
.dark-mode strong{
  color: #fff;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: #2a2e35;
}

.dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background: #4a4d53;
}

/* Add these CSS rules to fix the dark mode for dashboard cards */

.dark-mode .dashboard-cards .stats-card {
  background: linear-gradient(135deg, rgb(36, 39, 46) 0%, rgb(30, 33, 40) 100%);
  color: #fff;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.dark-mode .dashboard-cards .card-content h3 {
  color: #fff;
}
.dark-mode .rule-name{
  color: #fff;
}

.dark-mode .action-item strong,
.dark-mode .time-item strong {
  color: #DEAF0B;
}

.dark-mode .time-item,
.dark-mode .action-item {
  color: #fff;
}

.dark-mode .time-restrictions i,
.dark-mode .actions-list i,
.dark-mode .rule-section h4 i {
  color: #fff;
}

.dark-mode .label-text {
  color: #fff;
}

.dark-mode .dashboard-cards .stats-number {
  color: #fff;
}

.dark-mode .dashboard-cards .card-icon {
  background-color: rgba(222, 175, 11, 0.2);
}

/* Fix the stats card colors for each type */
.dark-mode .stats-card:nth-child(1) .card-icon {
  background-color: rgba(222, 175, 11, 0.2);
  color: #DEAF0B;
}
.dark-mode h2{
  color: #fff;
}
.dark-mode .stats-card:nth-child(2) .card-icon {
  background-color: rgba(46, 204, 113, 0.2);
  color: #2ecc71;
}

.dark-mode .stats-card:nth-child(3) .card-icon {
  background-color: rgba(52, 152, 219, 0.2);
  color: #3498db;
}

.dark-mode .stats-card:nth-child(4) .card-icon {
  background-color: rgba(243, 156, 18, 0.2);
  color: #f39c12;
}
</style>
</head>
<body>
      <!-- Add hamburger menu button -->
      <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>
          <%- include('partials/sidebar') %>
     

          <div class="main-content">

            <div class="container">
              <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                <a class="nav-link  text-nowrap" href="<%= ingress_path %>/learner">
                    <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/grid-charge">
                    <i class="fas fa-plug me-1" style="color: #007BFF;"></i>Grid Charge
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/energy-pattern">
                    <i class="fas fa-battery-three-quarters me-1" style="color: #28A745;"></i>Energy Pattern
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/voltage-point">
                    <i class="fas fa-bolt me-1" style="color: #DC3545;"></i>Voltage Points
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/work-mode">
                    <i class="fas fa-cogs me-1" style="color: #FFC107;"></i>Work Mode
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/battery-charging">
                    <i class="fas fa-charging-station me-1" style="color: #17A2B8;"></i>Battery Charging
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rules">
                    <i class="fas fa-tasks me-1" style="color: #6610F2;"></i>Rules
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/wizard">
                    <i class="fas fa-magic me-1" style="color: #20c997;"></i>Rule Wizard
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rule-history">
                    <i class="fas fa-history me-1" style="color: #6f42c1;"></i>Rule History
                </a>
            </div>
                
                <br>
    
                <header class="main-header">
                  <div class="title-section">
                    <h1><i class="fas fa-robot"></i> Automation Rules</h1>
                  </div>
                </header>
                <br>

            
                 <!-- Dashboard Cards -->
<div class="dashboard-cards">
  <div class="card stats-card">
    <div class="card-icon"><i class="fas fa-list-alt"></i></div>
    <div class="card-content">
      <h3>Total Rules</h3>
      <p class="stats-number"><%= rules_count %></p>
    </div>
  </div>
  <div class="card stats-card">
    <div class="card-icon"><i class="fas fa-toggle-on"></i></div>
    <div class="card-content">
      <h3>Active Rules</h3>
      <p class="stats-number"><%= active_rules_count %></p>
    </div>
  </div>
  <div class="card stats-card">
    <div class="card-icon"><i class="fas fa-battery-three-quarters"></i></div>
    <div class="card-content">
      <h3>Battery SOC</h3>
      <p class="stats-number"><%= system_state.battery_soc ? Math.round(system_state.battery_soc) + '%' : 'N/A' %></p>
    </div>
  </div>
  <div class="card stats-card">
    <div class="card-icon"><i class="fas fa-solar-panel"></i></div>
    <div class="card-content">
      <h3>PV Power</h3>
      <p class="stats-number"><%= system_state.pv_power ? Math.round(system_state.pv_power) + 'W' : 'N/A' %></p>
    </div>
  </div>
</div>
            
                  <!-- Rules List Section -->
                  <section class="card rules-container">
                    <div class="card-header">
                      <h2>Your Automation Rules</h2>
                      <div class="search-container">
                        <input type="text" id="searchRules" placeholder="Search rules..." class="search-input">
                        <select id="filterRules" class="select-input">
                          <option value="all">All Rules</option>
                          <option value="active">Active Only</option>
                          <option value="inactive">Inactive Only</option>
                        </select>
                      </div>
                    </div>
                    
                    <div class="rules-list" id="rulesList">
                      <!-- Rules will be loaded here dynamically -->
                      <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Loading rules...</p>
                      </div>
                    </div>
                  </section>
            
                  <!-- Recent Triggers Section -->
                  <section class="card">
                    <div class="card-header">
                      <h2>Recently Triggered Rules</h2>
                    </div>
                    <div class="recent-triggers">
                      <% if (recently_triggered && recently_triggered.length > 0) { %>
                        <table class="data-table">
                          <thead>
                            <tr>
                              <th>Rule Name</th>
                              <th>Last Triggered</th>
                            </tr>
                          </thead>
                          <tbody>
                            <% recently_triggered.forEach(rule => { %>
                              <tr>
                                <td><%= rule.name %></td>
                                <td>
                                  <% if (rule.lastTriggered) { %>
                                    <script>
                                      document.write(new Date('<%= rule.lastTriggered %>').toLocaleString())
                                    </script>
                                  <% } else { %>
                                    Never
                                  <% } %>
                                </td>
                              </tr>
                            <% }); %>
                          </tbody>
                        </table>
                      <% } else { %>
                        <div class="empty-state">
                          <i class="fas fa-clock"></i>
                          <p>No rules have been triggered yet</p>
                        </div>
                      <% } %>
                    </div>
                  </section>


    <!-- Rule Template (for JavaScript) -->
  <template id="ruleTemplate">
    <div class="rule-card">
      <div class="rule-header">
        <div class="rule-status">
          <label class="switch">
            <input type="checkbox" class="rule-active-toggle">
            <span class="slider round"></span>
          </label>
        </div>
        <h3 class="rule-name"></h3>
        <div class="rule-menu">
          <button class="btn-icon dropdown-toggle">
            <i class="fas fa-ellipsis-v"></i>
          </button>
          <div class="dropdown-menu">
            <a href="#" class="edit-rule"><i class="fas fa-edit"></i> Edit</a>
            <a href="#" class="duplicate-rule"><i class="fas fa-copy"></i> Duplicate</a>
            <a href="#" class="execute-rule"><i class="fas fa-play"></i> Execute Now</a>
            <a href="#" class="delete-rule"><i class="fas fa-trash-alt"></i> Delete</a>
          </div>
        </div>
      </div>
      <p class="rule-description"></p>
      <div class="rule-details">
        <div class="rule-section">
          <h4><i class="fas fa-filter"></i> Conditions</h4>
          <div class="conditions-list"></div>
        </div>
        <div class="rule-section">
          <h4><i class="fas fa-calendar-alt"></i> Time Restrictions</h4>
          <div class="time-restrictions"></div>
        </div>
        <div class="rule-section">
          <h4><i class="fas fa-bolt"></i> Actions</h4>
          <div class="actions-list"></div>
        </div>
      </div>
      <div class="rule-footer">
        <div class="rule-stats">
          <span class="rule-created"><i class="fas fa-calendar"></i> Created: <span class="created-date"></span></span>
          <span class="rule-triggered"><i class="fas fa-bolt"></i> Last triggered: <span class="triggered-date"></span></span>
          <span class="rule-count"><i class="fas fa-repeat"></i> Triggered <span class="trigger-count"></span> times</span>
        </div>
      </div>
    </div>
  </template>

  <!-- Modals -->
  <div id="confirmationModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Confirm Action</h2>
        <span class="close-modal">&times;</span>
      </div>
      <div class="modal-body">
        <p id="confirmationMessage">Are you sure you want to proceed?</p>
      </div>
      <div class="modal-footer">
        <button id="cancelAction" class="btn btn-secondary">Cancel</button>
        <button id="confirmAction" class="btn btn-danger">Confirm</button>
      </div>
    </div>
  </div>

  <div id="executeModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Rule Execution</h2>
        <span class="close-modal">&times;</span>
      </div>
      <div class="modal-body">
        <div id="executeStatus" class="execute-status">
          <div class="spinner-container">
            <i class="fas fa-spinner fa-spin"></i>
          </div>
          <p id="executeMessage">Executing rule...</p>
        </div>
        <div id="executeDetails" class="execute-details">
          <h3>Actions being executed:</h3>
          <ul id="executeActions"></ul>
        </div>
      </div>
      <div class="modal-footer">
        <button id="closeExecute" class="btn btn-primary">Close</button>
      </div>
    </div>
  </div>
 </div>

  
  <!-- JavaScript Files -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
  <script>
    // Global variables
    let allRules = [];
    const dbConnected = <%= db_connected %>;
    
    // DOM Elements
    const rulesList = document.getElementById('rulesList');
    const searchInput = document.getElementById('searchRules');
    const filterSelect = document.getElementById('filterRules');
    const btnCreateRule = document.getElementById('btnCreateRule');
    const confirmationModal = document.getElementById('confirmationModal');
    const executeModal = document.getElementById('executeModal');
    
    // Event Listeners
    document.addEventListener('DOMContentLoaded', () => {
      loadRules();
      
      // Search and filter
      searchInput.addEventListener('input', filterRules);
      filterSelect.addEventListener('change', filterRules);
      
      // Create rule button
      btnCreateRule.addEventListener('click', () => {
        window.location.href = '<%= ingress_path %>/wizard';
      });
      
      // Close modals when clicking on X or outside
      document.querySelectorAll('.close-modal').forEach(btn => {
        btn.addEventListener('click', closeAllModals);
      });
      
      document.getElementById('closeExecute').addEventListener('click', closeAllModals);
      
      window.addEventListener('click', (e) => {
        if (e.target === confirmationModal || e.target === executeModal) {
          closeAllModals();
        }
      });
    });
    
    // Function to load rules from API
    async function loadRules() {
      if (!dbConnected) {
        showDatabaseError();
        return;
      }
      
      try {
        const response = await fetch('<%= ingress_path %>/api/rules');
        if (!response.ok) throw new Error('Failed to fetch rules');
        
        allRules = await response.json();
        renderRules(allRules);
      } catch (error) {
        console.error('Error loading rules:', error);
        showError('Failed to load rules. Please try again later.');
      }
    }
    
    // Function to render rules
    function renderRules(rules) {
      rulesList.innerHTML = '';
      
      if (!rules || rules.length === 0) {
        showEmptyState();
        return;
      }
      
      // Sort rules by name
      rules.sort((a, b) => a.name.localeCompare(b.name));
      
      rules.forEach(rule => {
        const ruleCard = createRuleCard(rule);
        rulesList.appendChild(ruleCard);
      });
      
      // Add event listeners to rule cards
      addRuleCardEventListeners();
    }
    
    // Function to create a rule card from template
    function createRuleCard(rule) {
      const template = document.getElementById('ruleTemplate');
      const ruleCard = document.importNode(template.content, true).children[0];
      
      // Set rule data attributes
      ruleCard.setAttribute('data-rule-id', rule.id);
      
      // Set rule status
      const statusToggle = ruleCard.querySelector('.rule-active-toggle');
      statusToggle.checked = rule.active;
      
      // Set rule name and description
      ruleCard.querySelector('.rule-name').textContent = rule.name;
      ruleCard.querySelector('.rule-description').textContent = rule.description || 'No description provided';
      
      // Render conditions
      const conditionsList = ruleCard.querySelector('.conditions-list');
      if (rule.conditions && rule.conditions.length > 0) {
        rule.conditions.forEach(condition => {
          const conditionEl = document.createElement('div');
          conditionEl.className = 'condition-item';
          conditionEl.innerHTML = formatCondition(condition);
          conditionsList.appendChild(conditionEl);
        });
      } else {
        conditionsList.innerHTML = '<p class="empty-message">No conditions (runs unconditionally)</p>';
      }
      
      // Render time restrictions
      const timeRestrictions = ruleCard.querySelector('.time-restrictions');
      if (rule.timeRestrictions && rule.timeRestrictions.enabled) {
        const timeEl = document.createElement('div');
        timeEl.className = 'time-item';
        timeEl.innerHTML = formatTimeRestrictions(rule.timeRestrictions);
        timeRestrictions.appendChild(timeEl);
      } else {
        timeRestrictions.innerHTML = '<p class="empty-message">No time restrictions (runs anytime)</p>';
      }
      
      // Render actions
      const actionsList = ruleCard.querySelector('.actions-list');
      if (rule.actions && rule.actions.length > 0) {
        rule.actions.forEach(action => {
          const actionEl = document.createElement('div');
          actionEl.className = 'action-item';
          actionEl.innerHTML = formatAction(action);
          actionsList.appendChild(actionEl);
        });
      } else {
        actionsList.innerHTML = '<p class="empty-message">No actions defined</p>';
      }
      
      // Set dates and counts
      const createdDate = ruleCard.querySelector('.created-date');
      createdDate.textContent = rule.createdAt ? new Date(rule.createdAt).toLocaleDateString() : 'Unknown';
      
      const triggeredDate = ruleCard.querySelector('.triggered-date');
      triggeredDate.textContent = rule.lastTriggered ? new Date(rule.lastTriggered).toLocaleString() : 'Never';
      
      const triggerCount = ruleCard.querySelector('.trigger-count');
      triggerCount.textContent = rule.triggerCount || 0;
      
      return ruleCard;
    }
    
    // Add event listeners to rule cards
    function addRuleCardEventListeners() {
      // Toggle rule active status
      document.querySelectorAll('.rule-active-toggle').forEach(toggle => {
        toggle.addEventListener('change', async (e) => {
          const ruleCard = e.target.closest('.rule-card');
          const ruleId = ruleCard.getAttribute('data-rule-id');
          const rule = allRules.find(r => r.id === ruleId);
          
          if (rule) {
            try {
              rule.active = e.target.checked;
              await updateRule(rule);
              
              // Show temporary notification
              showNotification(`Rule "${rule.name}" ${e.target.checked ? 'activated' : 'deactivated'}`);
            } catch (error) {
              console.error('Error updating rule status:', error);
              e.target.checked = !e.target.checked; // Revert toggle
              showError('Failed to update rule status');
            }
          }
        });
      });
      
      // Dropdown menus
      document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
        toggle.addEventListener('click', (e) => {
          e.stopPropagation();
          const menu = e.target.closest('.rule-menu').querySelector('.dropdown-menu');
          
          // Close all other open menus
          document.querySelectorAll('.dropdown-menu.show').forEach(m => {
            if (m !== menu) m.classList.remove('show');
          });
          
          // Toggle this menu
          menu.classList.toggle('show');
        });
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', () => {
        document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
          menu.classList.remove('show');
        });
      });
      
      // Edit rule
      document.querySelectorAll('.edit-rule').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const ruleId = e.target.closest('.rule-card').getAttribute('data-rule-id');
          window.location.href = `<%= ingress_path %>/wizard?edit=${ruleId}`;
        });
      });
      
      // Duplicate rule
      document.querySelectorAll('.duplicate-rule').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          e.preventDefault();
          const ruleCard = e.target.closest('.rule-card');
          const ruleId = ruleCard.getAttribute('data-rule-id');
          
          try {
            const response = await fetch(`<%= ingress_path %>/api/rules/${ruleId}/duplicate`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' }
            });
            
            if (!response.ok) throw new Error('Failed to duplicate rule');
            
            const result = await response.json();
            showNotification(`Rule duplicated successfully`);
            
            // Reload rules
            loadRules();
          } catch (error) {
            console.error('Error duplicating rule:', error);
            showError('Failed to duplicate rule');
          }
        });
      });
      
      // Execute rule
      document.querySelectorAll('.execute-rule').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const ruleCard = e.target.closest('.rule-card');
          const ruleId = ruleCard.getAttribute('data-rule-id');
          const rule = allRules.find(r => r.id === ruleId);
          
          if (rule) {
            openExecuteModal(rule);
          }
        });
      });
      
      // Delete rule
      document.querySelectorAll('.delete-rule').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const ruleCard = e.target.closest('.rule-card');
          const ruleId = ruleCard.getAttribute('data-rule-id');
          const rule = allRules.find(r => r.id === ruleId);
          
          if (rule) {
            openConfirmationModal(
              `Are you sure you want to delete the rule "${rule.name}"?`,
              async () => {
                try {
                  const response = await fetch(`<%= ingress_path %>/api/rules/${ruleId}`, {
                    method: 'DELETE'
                  });
                  
                  if (!response.ok) throw new Error('Failed to delete rule');
                  
                  showNotification(`Rule "${rule.name}" deleted successfully`);
                  
                  // Remove rule from list and DOM
                  allRules = allRules.filter(r => r.id !== ruleId);
                  ruleCard.remove();
                  
                  if (allRules.length === 0) {
                    showEmptyState();
                  }
                } catch (error) {
                  console.error('Error deleting rule:', error);
                  showError('Failed to delete rule');
                }
              }
            );
          }
        });
      });
    }
    
    // Function to execute a rule
    async function executeRule(rule) {
      try {
        document.getElementById('executeStatus').classList.add('pending');
        document.getElementById('executeMessage').textContent = `Executing rule "${rule.name}"...`;
        
        // Display actions being executed
        const actionsList = document.getElementById('executeActions');
        actionsList.innerHTML = '';
        
        rule.actions.forEach(action => {
          const li = document.createElement('li');
          li.innerHTML = formatAction(action);
          actionsList.appendChild(li);
        });
        
        // Execute the rule
        const response = await fetch(`<%= ingress_path %>/api/rules/${rule.id}/execute`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || 'Rule execution failed');
        }
        
        const result = await response.json();
        
        // Show success
        document.getElementById('executeStatus').classList.remove('pending');
        document.getElementById('executeStatus').classList.add('success');
        document.getElementById('executeMessage').textContent = result.message;
        
        // Update rule in our array
        const index = allRules.findIndex(r => r.id === rule.id);
        if (index !== -1) {
          allRules[index].lastTriggered = new Date().toISOString();
          allRules[index].triggerCount = (allRules[index].triggerCount || 0) + 1;
        }
        
        // Reload rules to reflect the updated trigger count
        setTimeout(loadRules, 2000);
        
        return true;
      } catch (error) {
        console.error('Error executing rule:', error);
        
        // Show error
        document.getElementById('executeStatus').classList.remove('pending');
        document.getElementById('executeStatus').classList.add('error');
        document.getElementById('executeMessage').textContent = error.message;
        
        return false;
      }
    }
    
    // Function to update rule
    async function updateRule(rule) {
      const response = await fetch(`<%= ingress_path %>/api/rules/${rule.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(rule)
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to update rule');
      }
      
      return await response.json();
    }
    
    // Function to filter rules
    function filterRules() {
      const searchText = searchInput.value.toLowerCase();
      const filterValue = filterSelect.value;
      
      let filteredRules = allRules;
      
      // Filter by status
      if (filterValue === 'active') {
        filteredRules = filteredRules.filter(rule => rule.active);
      } else if (filterValue === 'inactive') {
        filteredRules = filteredRules.filter(rule => !rule.active);
      }
      
      // Filter by search text
      if (searchText) {
        filteredRules = filteredRules.filter(rule => 
          rule.name.toLowerCase().includes(searchText) || 
          (rule.description && rule.description.toLowerCase().includes(searchText))
        );
      }
      
      renderRules(filteredRules);
    }
    
    // Helper function to format conditions
    function formatCondition(condition) {
      const parameterLabels = {
        'battery_soc': 'Battery SOC',
        'pv_power': 'PV Power',
        'load': 'Load',
        'grid_voltage': 'Grid Voltage',
        'grid_power': 'Grid Power'
      };
      
      const operatorLabels = {
        'gt': 'greater than',
        'lt': 'less than',
        'eq': 'equal to',
        'gte': 'greater than or equal to',
        'lte': 'less than or equal to'
      };
      
      const units = {
        'battery_soc': '%',
        'pv_power': 'W',
        'load': 'W',
        'grid_voltage': 'V',
        'grid_power': 'W'
      };
      
      const paramLabel = parameterLabels[condition.parameter] || condition.parameter;
      const opLabel = operatorLabels[condition.operator] || condition.operator;
      const unit = units[condition.parameter] || '';
      
      return `<strong>${paramLabel}</strong> is <strong>${opLabel}</strong> <strong>${condition.value}${unit}</strong>`;
    }
    
    // Helper function to format time restrictions
    function formatTimeRestrictions(restrictions) {
      let result = '';
      
      if (restrictions.startTime && restrictions.endTime) {
        result += `<div><i class="fas fa-clock"></i> From <strong>${restrictions.startTime}</strong> to <strong>${restrictions.endTime}</strong></div>`;
      }
      
      if (restrictions.days && restrictions.days.length > 0) {
        const daysFormatted = restrictions.days.map(day => 
          day.charAt(0).toUpperCase() + day.slice(1)
        ).join(', ');
        result += `<div><i class="fas fa-calendar-day"></i> Only on: <strong>${daysFormatted}</strong></div>`;
      }
      
      if (restrictions.specificDates && restrictions.specificDates.length > 0) {
        const datesFormatted = restrictions.specificDates.join(', ');
        result += `<div><i class="fas fa-calendar-check"></i> Only on dates: <strong>${datesFormatted}</strong></div>`;
      }
      
      return result || 'Active at all times';
    }
    
    // Helper function to format actions
    function formatAction(action) {
      const settingLabels = {
        'grid_charge': 'Grid Charge',
        'energy_pattern': 'Energy Pattern',
        'voltage_point': 'Voltage Point',
        'voltage_point_1': 'Voltage Point 1',
        'voltage_point_2': 'Voltage Point 2',
        'voltage_point_3': 'Voltage Point 3',
        'voltage_point_4': 'Voltage Point 4',
        'voltage_point_5': 'Voltage Point 5',
        'voltage_point_6': 'Voltage Point 6',
        'max_discharge_current': 'Max Discharge Current',
        'max_charge_current': 'Max Charge Current',
        'max_grid_charge_current': 'Max Grid Charge Current',
        'battery_float_charge_voltage': 'Float Charge Voltage',
        'work_mode': 'Work Mode',
        'work_mode_timer': 'Timer Mode',
        'remote_switch': 'Remote Switch'
      };
      
      const inverterLabel = action.inverter === 'all' ? 'All Inverters' : `${action.inverter}`;
      const settingLabel = settingLabels[action.setting] || action.setting;
      
      return `Set <strong>${settingLabel}</strong> to <strong>${action.value}</strong> on <strong>${inverterLabel}</strong>`;
    }
    
    // Function to show empty state
    function showEmptyState() {
      rulesList.innerHTML = `
        <div class="empty-state">
          <i class="fas fa-list-alt"></i>
          <h3>No rules found</h3>
          <p>Create your first automation rule to get started</p>
          <button class="btn btn-primary" onclick="window.location.href='<%= ingress_path %>/wizard'">Create Rule</button>
        </div>
      `;
    }
    
    // Function to show database error
    function showDatabaseError() {
      rulesList.innerHTML = `
        <div class="error-state">
          <i class="fas fa-database"></i>
          <h3>Database Disconnected</h3>
          <p>Cannot retrieve rules without database connection</p>
          <button class="btn btn-secondary" onclick="window.location.reload()">Try Again</button>
        </div>
      `;
    }
    
    // Function to show error
    function showError(message) {
      const notification = document.createElement('div');
      notification.className = 'notification error';
      notification.innerHTML = `
        <i class="fas fa-exclamation-circle"></i>
        <span>${message}</span>
        <button class="close-notification">&times;</button>
      `;
      
      document.body.appendChild(notification);
      
      // Add event listener to close button
      notification.querySelector('.close-notification').addEventListener('click', () => {
        notification.remove();
      });
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.remove();
        }
      }, 5000);
    }
    
    // Function to show notification
    function showNotification(message) {
      const notification = document.createElement('div');
      notification.className = 'notification success';
      notification.innerHTML = `
        <i class="fas fa-check-circle"></i>
        <span>${message}</span>
        <button class="close-notification">&times;</button>
      `;
      
      document.body.appendChild(notification);
      
      // Add event listener to close button
      notification.querySelector('.close-notification').addEventListener('click', () => {
        notification.remove();
      });
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (document.body.contains(notification)) {
          notification.remove();
        }
      }, 5000);
    }
    
    // Function to open confirmation modal
    function openConfirmationModal(message, confirmCallback) {
      document.getElementById('confirmationMessage').textContent = message;
      confirmationModal.style.display = 'block';
      
      // Set up confirm and cancel buttons
      const confirmBtn = document.getElementById('confirmAction');
      const cancelBtn = document.getElementById('cancelAction');
      
      // Remove any existing event listeners
      const newConfirmBtn = confirmBtn.cloneNode(true);
      const newCancelBtn = cancelBtn.cloneNode(true);
      confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
      cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);
      
      // Add new event listeners
      newConfirmBtn.addEventListener('click', () => {
        confirmCallback();
        closeAllModals();
      });
      
      newCancelBtn.addEventListener('click', closeAllModals);
    }
    
    // Function to open execute modal
    function openExecuteModal(rule) {
      // Reset modal state
      document.getElementById('executeStatus').className = 'execute-status';
      document.getElementById('executeMessage').textContent = 'Preparing to execute rule...';
      document.getElementById('executeActions').innerHTML = '';
      
      // Show modal
      executeModal.style.display = 'block';
      
      // Execute the rule
      setTimeout(() => executeRule(rule), 500);
    }
    
    // Function to close all modals
    function closeAllModals() {
      confirmationModal.style.display = 'none';
      executeModal.style.display = 'none';
    }
  </script>


<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>

</body>
</html>
