<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="/css/settings.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
   body {
       font-family: 'Inter', sans-serif;
   }
   :root {
      --primary-color: #DEAF0B;
      --secondary-color: #f0f2f5;
      --text-color: #050505;
      --text-secondary: #65676b;
      --accent-color: #e7f3ff;
      --border-color: #dddfe2;
      --success-color: #42b72a;
      --danger-color: #e41e3f;
    }
   
   body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    background-color: #fff;
    
   }
    /* Sidebar styles */
    .sidebar {
    width: 280px;
    height: 100vh;
    background-color: white;
    border-right: 1px solid #e5e7eb;
    display: flex;
    flex-direction: column;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1000;
    transition: width 0.3s ease;
}
           .logo-container {
               padding: 1.5rem;
               border-bottom: 1px solid #e5e7eb;
               display: flex;
               align-items: center;
               gap: 0.75rem;
           }
   
           .logo-icon {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
   }
   
   .logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
   }
   
   .logo-text .highlight {
    color: var(--primary-color);
    margin-left: 10px;
   }
   
   
   nav {
    flex-grow: 1;
   }
   
   nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
   }
   nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
   }
   
   nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
   }
   nav li:hover {
    background-color: var(--bg-color);
   }
   
   nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
   }
   
   .bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
   }
   
   .toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
   }
   
   .toggle-text {
    margin-right: 10px;
   }
   
   .toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
   }
   .toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
   }
   
   .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .toggle-switch.active::before {
    transform: translateX(25px);
   }
   
   .sidebar.collapsed .logo-text,
   .sidebar.collapsed .search,
   .sidebar.collapsed nav li span,
   .sidebar.collapsed .toggle-text {
    display: none;
   }
   
   .sidebar.collapsed .logo {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li i {
    margin-right: 0;
   }
           /* Main content styles */
           .main-content {
               flex: 1;
               margin-left: 280px;
               padding: 2rem;
           }
   
           .content-header {
               margin-bottom: 2rem;
           }
   
           .content-header h2 {
               font-size: 1.875rem;
               font-weight: 700;
               color: #111827;
           }
   
           .metrics-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
               gap: 1.5rem;
               margin-bottom: 2rem;
           }
   
           .metric-card {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .metric-title {
               font-size: 0.875rem;
               font-weight: 600;
               color: #4b5563;
               margin-bottom: 0.5rem;
           }
   
           .metric-value {
               font-size: 1.5rem;
               font-weight: 700;
               margin-bottom: 0.25rem;
           }
   
           .metric-subtitle {
               font-size: 0.875rem;
               color: #6b7280;
           }
   
           .chart-container {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               margin-bottom: 2rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .chart-wrapper {
               height: 400px;
               margin-top: 1rem;
           }
   
           .period-buttons {
               display: flex;
               gap: 0.75rem;
               margin-bottom: 1rem;
           }
   
           .period-btn {
               padding: 0.5rem 1rem;
               border: none;
               background-color: #e5e7eb;
               color: #4b5563;
               border-radius: 6px;
               cursor: pointer;
               font-weight: 500;
               transition: all 0.2s;
           }
   
           .period-btn:hover {
               background-color: #d1d5db;
           }
   
           .period-btn.active {
               background-color: #DEAF0B;
               color: white;
           }
   
           /* Toggle styles */
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .slider {
               position: absolute;
               cursor: pointer;
               top: 0;
               left: 0;
               right: 0;
               bottom: 0;
               background-color: #e5e7eb;
               transition: .4s;
               border-radius: 34px;
           }
   
           .slider:before {
               position: absolute;
               content: "";
               height: 16px;
               width: 16px;
               left: 4px;
               bottom: 4px;
               background-color: white;
               transition: .4s;
               border-radius: 50%;
           }
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           /* Updated and new styles */
           .bottom-controls {
               padding: 1.5rem;
               border-top: 1px solid #e5e7eb;
           }
   
           .control-item {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 1rem;
           }
   
           .control-label {
               font-size: 0.875rem;
               color: #4b5563;
           }
   
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
   }
   
   .sidebar.collapsed {
    width: 80px;
   }
   
   .logo {
    display: flex;
    align-items: center;
    padding: 20px;
   }
   
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           .total-emissions {
               font-size: 1.25rem;
               font-weight: 600;
               margin-bottom: 1rem;
               color: #374151;
           }
   
           .summary-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 1rem;
               margin-bottom: 2rem;
           }
   
           .summary-item {
               background-color: white;
               border-radius: 8px;
               padding: 1rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .summary-label {
               font-size: 0.875rem;
               color: #6b7280;
               display: block;
               margin-bottom: 0.5rem;
           }
   
           .summary-value {
               font-size: 1.25rem;
               font-weight: 600;
           }
   
       
   
           /* Responsive styles */
           @media (max-width: 768px) {
               .sidebar {
                   width: 100%;
                   height: auto;
                   position: static;
                   border-right: none;
                   border-bottom: 1px solid #e5e7eb;
               }
   
               .main-content {
                   margin-left: 0;
               }
   
               body.collapsed-sidebar .sidebar {
                   display: none;
               }
   
               body.collapsed-sidebar .main-content {
                   margin-left: 0;
               }
   
               .metrics-grid,
               .summary-grid {
                   grid-template-columns: 1fr;
               }
   
               .period-buttons {
                   flex-wrap: wrap;
               }
   
               .period-btn {
                   flex: 1 0 calc(50% - 0.375rem);
                   margin-bottom: 0.75rem;
               }
           }
   /* loading css */
   .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f8f9fa;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
   }
   
   .loading-spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #e0e0e0;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
   }
   
   @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
   } 
           /* Dark mode styles */
   body.dark-mode {
       background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
   }
   
   .dark-mode .sidebar {
       background-color: rgba(24, 27, 31, 1);
   }
   
   .dark-mode .sidebar .logo-icon {
    color: #2f3640;
   }
   
   .dark-mode .sidebar .logo-text {
    color: #f5f6fa;
   }
   
   .dark-mode .sidebar nav li {
    color: #f5f6fa;
   }
   
   .dark-mode .sidebar nav li:hover {
    background-color: #383838;
   }
   
   .dark-mode .sidebar nav li a {
    color: #f5f6fa;
   }
   
   .dark-mode .sidebar nav li i {
    color: #dcdde1;
   }
   
   .dark-mode .toggle-sidebar,
   .dark-mode .toggle-dark-mode {
    color: #f5f6fa;
   }
   
   .dark-mode .toggle-switch {
       background-color: var(--primary-color);
   }
   
   .dark-mode .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .dark-mode header {
       background-color: rgb(17, 18, 23);
   }
   
   .dark-mode .main-content {
       background-color: rgba(24, 27, 31, 1);
    color: #fff;
   }
   
   .dark-mode .metric-card {
     background-color: rgb(32, 36, 41);
   
    color: #fff;
   }
   .dark-mode .chart-container{
     background-color: rgb(32, 36, 41);
   
   color: #fff;
   }
   .dark-mode  .summary-item {
     background-color: rgb(32, 36, 41);
   
   color: #fff;
   }
   .dark-mode .loading-overlay{
       background-color: rgba(24, 27, 31, 1);
   }
   a{
     text-decoration: none;
   } 



/* Mobile Sidebar Improvements */
@media (max-width: 768px) {
    /* Sidebar base styles */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 280px;
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        z-index: 1000;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        box-shadow: none;
    }

    .sidebar.active {
        transform: translateX(0);
        box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
    }

    /* Improved hamburger button */
    .mobile-toggle {
        display: block;
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 1001;
        background: none;
        border: none;
        cursor: pointer;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 8px;
    }

    .mobile-toggle span {
        display: block;
        width: 24px;
        height: 2px;
        background-color: var(--text-color);
        margin: 5px auto;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    .mobile-toggle.active span:nth-child(1) {
        transform: translateY(7px) rotate(45deg);
    }

    .mobile-toggle.active span:nth-child(2) {
        opacity: 0;
    }

    .mobile-toggle.active span:nth-child(3) {
        transform: translateY(-7px) rotate(-45deg);
    }

    /* Improved nav items */
    .sidebar nav ul {
        padding: 1rem 0;
    }

    .sidebar nav li {
        padding: 0.875rem 1.5rem;
        margin: 0.25rem 1rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
    }

    .sidebar nav li a {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 1rem;
        color: var(--text-color);
    }

    .sidebar nav li i {
        font-size: 1.25rem;
        min-width: 24px;
        text-align: center;
    }

    .sidebar nav li:active {
        background-color: rgba(0, 0, 0, 0.05);
    }

    /* Improved overlay */
    .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        z-index: 999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .sidebar-overlay.active {
        display: block;
        opacity: 1;
    }

    /* Dark mode adjustments */
    .dark-mode .mobile-toggle {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .dark-mode .mobile-toggle span {
        background-color: #f5f6fa;
    }

    .dark-mode .sidebar nav li:active {
        background-color: rgba(255, 255, 255, 0.05);
    }
}

/* Ensure main content adjusts properly */
@media (max-width: 768px) {
    .main-content {
        margin-left: 0;
        padding-top: 4.5rem;
        transition: margin-left 0.3s ease;
    }

    body.sidebar-open .main-content {
        filter: blur(2px);
        pointer-events: none;
    }
}


.containere {
      max-width: 1200px;
      padding-left: 15px;
      padding-right: 15px;
    }
    
    .card {
      border-radius: 8px;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
      border: none;
      width: 100%;
    }
    
    .card-header {
      background-color: white;
      border-bottom: 1px solid var(--border-color);
      font-weight: 600;
      padding: 15px 20px;
      border-radius: 8px 8px 0 0 !important;
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
      gap: 10px;
    }
    
    .card-body {
      padding: 15px 20px;
      background-color: white;
    }
    
    h1, h5 {
      font-weight: 700;
      color: var(--text-color);
    }
    
    h1 {
      font-size: calc(1.5rem + 1vw);
      margin-bottom: 1rem;
    }
    
    .btn-primary {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
      font-weight: 600;
    }
    
    .btn-success {
      background-color: var(--success-color);
      border-color: var(--success-color);
      font-weight: 600;
    }
    
    .btn-danger {
      background-color: var(--danger-color);
      border-color: var(--danger-color);
      font-weight: 600;
    }
    
    .btn-outline-primary {
      color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    .btn-outline-primary:hover {
      background-color: var(--accent-color);
      color: var(--primary-color);
      border-color: var(--primary-color);
    }
    
    .status-active {
      color: var(--success-color);
      font-weight: bold;
    }
    
    .status-inactive {
      color: var(--danger-color);
      font-weight: bold;
    }
    
    .metric-box {
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      background-color: white;
      transition: all 0.2s ease;
    }
    
    .metric-box:hover {
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    
    .metric-box h6 {
      color: var(--text-secondary);
      font-weight: 600;
      margin-bottom: 5px;
    }
    
    .metric-box .h3 {
      font-weight: 700;
      margin-bottom: 0;
      font-size: calc(1.2rem + 0.6vw);
      word-break: break-word;
    }
    
    /* Improved Toggle Switch for Learner Mode */
    .toggle-switch-container {
      display: flex;
      align-items: center;
      margin-top: 15px;
      flex-wrap: wrap;
    }
    
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 30px;
      margin-right: 15px;
      flex-shrink: 0;
    }
    
    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
      border-radius: 34px;
    }
    
    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 22px;
      width: 22px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }
    
    input:checked + .toggle-slider {
      background-color: var(--success-color);
    }
    
    input:focus + .toggle-slider {
      box-shadow: 0 0 1px var(--success-color);
    }
    
    input:checked + .toggle-slider:before {
      transform: translateX(30px);
    }
    
    .toggle-label {
      font-weight: 600;
      flex-grow: 1;
    }

    .header-controls {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      gap: 10px;
    }
    
    .notification-container {
      position: relative;
      margin-right: 10px;
    }
    
   /* Dark mode styles for containere and its children */
.dark-mode .containere {
  color: #f5f6fa;
}

.dark-mode .card {
  background-color: rgb(32, 36, 41);
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);
  border: 1px solid rgba(255, 255, 255, 0.05);
}

.dark-mode .card-header {
  background-color: rgb(32, 36, 41);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  color: #f5f6fa;
}

.dark-mode .card-body {
  background-color: rgb(32, 36, 41);
  color: #f5f6fa;
}

.dark-mode h1, 
.dark-mode h5 {
  color: #f5f6fa;
}

.dark-mode .metric-box {
  background-color: rgb(38, 42, 48);
  border-color: rgba(0, 0, 0, 0);
}

.dark-mode .metric-box:hover {
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

.dark-mode .metric-box h6 {
  color: #bec3c9;
}

.dark-mode .toggle-slider {
  background-color: #f0f2f5;
}

.dark-mode .refresh-button {
  background-color: rgb(38, 42, 48);
  border-color: rgba(255, 255, 255, 0.1);
  color: #f5f6fa;
}

.dark-mode .refresh-button:hover {
  background-color: rgb(45, 50, 56);
}

.dark-mode .change-entry {
  background-color: rgb(38, 42, 48);
  border-color: rgba(255, 255, 255, 0.1);
}

.dark-mode .change-entry:hover {
  background-color: rgb(45, 50, 56);
}

.dark-mode .change-entry.new {
  background-color: rgba(222, 175, 11, 0.1);
}

.dark-mode .change-time {
  color: #f0f2f5;
}

.dark-mode .change-value-old {
  color: #f0f2f5;
}

.dark-mode .change-system-state {
  background-color: rgba(24, 27, 31, 1);;
}

.dark-mode .system-state-label {
  color: #f5f5f5;
}

.dark-mode .btn-delete-change:hover {
  background-color: rgba(255, 255, 255, 0.05);
  color: #e41e3f;
}

.dark-mode .no-changes {
  color: #bec3c9;
}

/* Dark mode animation override */
@keyframes darkHighlight {
  from {background-color: rgba(24, 27, 31, 1);;}
  to {background-color: rgba(24, 27, 31, 1);;}
}

.dark-mode .highlight {
  animation: darkHighlight 2s;
}
    
    .refresh-button {
      position: relative;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      background-color: white;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      padding: 8px 12px;
      font-weight: 600;
      color: var(--text-color);
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .refresh-button:hover {
      background-color: var(--secondary-color);
    }
    
    .refresh-button i {
      margin-right: 8px;
    }
    
    .change-feed {
      margin: 0;
      padding: 0;
    }
    
    .change-entry {
      position: relative;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      background-color: white;
      border: 1px solid var(--border-color);
      transition: all 0.2s ease;
    }
    
    .change-entry:hover {
      background-color: var(--secondary-color);
    }
    
    .change-entry.new {
      border-left: 4px solid var(--primary-color);
      background-color: var(--accent-color);
    }
    
    .change-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 10px;
      flex-wrap: wrap;
      gap: 5px;
    }
    
    .change-time {
      color: var(--text-secondary);
      font-size: 0.85rem;
      font-weight: 500;
    }
    
    .change-setting {
      font-weight: 600;
      font-size: 1.1rem;
      margin-bottom: 5px;
      word-break: break-word;
    }
    
    .change-value {
      margin-bottom: 10px;
      word-break: break-word;
    }
    
    .change-value-old {
      text-decoration: line-through;
      color: var(--text-secondary);
      margin-right: 10px;
    }
    
    .change-value-new {
      font-weight: 600;
      color: var(--primary-color);
    }
    
    .change-system-state {
      background-color: var(--secondary-color);
      border-radius: 6px;
      padding: 10px;
      margin-top: 10px;
    }
    
    .change-system-state h6 {
      color: var(--text-secondary);
      font-size: 0.9rem;
      margin-bottom: 8px;
      font-weight: 600;
    }
    
    .system-state-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      gap: 10px;
    }
    
    .system-state-item {
      display: flex;
      flex-direction: column;
    }
    
    .system-state-label {
      font-size: 0.8rem;
      color: var(--text-secondary);
      margin-bottom: 2px;
    }
    
    .system-state-value {
      font-weight: 600;
      word-break: break-word;
    }
    
    .change-actions {
      margin-top: 10px;
      display: flex;
      justify-content: flex-end;
    }
    
    .btn-delete-change {
      color: var(--text-secondary);
      background: none;
      border: none;
      padding: 5px 10px;
      border-radius: 4px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .btn-delete-change:hover {
      background-color: #f5f5f5;
      color: var(--danger-color);
    }
    
    .no-changes {
      padding: 20px;
      text-align: center;
      color: var(--text-secondary);
    }
    
    @keyframes highlight {
      from {background-color: var(--accent-color);}
      to {background-color: white;}
    }
    
    .highlight {
      animation: highlight 2s;
    }
    
    /* Media queries for better responsiveness */
    @media (max-width: 767px) {
      .card-header {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .card-header div {
        margin-top: 10px;
        width: 100%;
        display: flex;
        justify-content: flex-end;
      }

      .toggle-switch-container {
        flex-direction: row;
        justify-content: space-between;
      }
      
      .system-state-grid {
        grid-template-columns: repeat(1, 1fr);
      }
    }
    
    @media (max-width: 576px) {
      .card-body {
        padding: 10px;
      }
      
      .metric-box {
        padding: 10px;
      }
      
      .change-entry {
        padding: 12px;
      }
      
      .btn-outline-primary {
        font-size: 0.8rem;
        padding: 0.25rem 0.5rem;
      }
    }

       </style>
</head>
<body>
   <!-- Add hamburger menu button -->
   <button class="mobile-toggle" id="mobileToggle">
    <span></span>
    <span></span>
    <span></span>
</button>
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-spinner"></div>
</div>
<div id="pageContent">
    <!-- Sidebar -->
    <%- include('partials/sidebar') %>
    <!-- Main Content -->
    <main class="main-content">
        <div class="containere">   
            <div class="row mb-4">
              <div class="col-md-6">
                <div class="card">
                  <div class="card-header">
                    <h5>Learner Mode Status</h5>
                  </div>
                  <div class="card-body">
                    <p>Status: <span id="status-indicator" class="<%= active ? 'status-active' : 'status-inactive' %>">
                      <%= active ? 'ACTIVE' : 'INACTIVE' %>
                    </span></p>
                    <p style="word-break: break-word;">Monitored Settings: <%= monitored_settings.join(', ') %></p>
                    <p>Changes Detected: <span id="changes-count"><%= changes_count %></span></p>
                    
                    <!-- Toggle switch -->
                    <div class="toggle-switch-container">
                      <span class="toggle-label">Learner Mode</span>
                      <label class="toggle-switch">
                        <input type="checkbox" id="toggle-learner" <%= active ? 'checked' : '' %>>
                        <span class="toggle-slider"></span>
                      </label>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="card">
                  <div class="card-header">
                    <h5>Current System State</h5>
                  </div>
                  <div class="card-body">
                    <div id="system-state-container">
                      <p>Loading system state...</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="card mb-4">
              <div class="card-header">
                <h5>Detected Setting Changes</h5>
                <div>
                  <span id="notification-badge" class="notification-badge" style="display: none;">0</span>
                  <button id="mark-all-read" class="btn btn-outline-primary btn-sm me-2" style="display: none;">
                    <i class="fas fa-check-double"></i> Mark All As Read
                  </button>
                  <button id="refresh-changes" class="btn btn-outline-primary btn-sm">
                    <i class="fas fa-sync-alt"></i> Refresh
                  </button>
                </div>
              </div>
              <div class="card-body">
                <div id="changes-container" class="change-feed">
                  <p class="text-center">Loading changes...</p>
                </div>
              </div>
            </div>
            
            <div class="card mb-4">
              <div class="card-header">
                <h5>Analytics & Insights</h5>
              </div>
              <div class="card-body">
                <div id="analytics-container">
                  <p>Insights will be available once enough data is collected.</p>
                </div>
              </div>
            </div>
          </div>
    </main>
</div>
  
<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
      const toggleLearner = document.getElementById('toggle-learner');
      const statusIndicator = document.getElementById('status-indicator');
      const changesCount = document.getElementById('changes-count');
      const systemStateContainer = document.getElementById('system-state-container');
      const changesContainer = document.getElementById('changes-container');
      const refreshChangesButton = document.getElementById('refresh-changes');
      const notificationBadge = document.getElementById('notification-badge');
      const markAllReadButton = document.getElementById('mark-all-read');
      
      // Track viewed changes
      let viewedChanges = JSON.parse(localStorage.getItem('viewedChanges') || '[]');
      let lastChangesData = [];
      
      // Toggle learner mode using checkbox
      toggleLearner.addEventListener('change', function() {
        const isActive = this.checked;
        
        fetch('<%= ingress_path %>/api/learner/toggle', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ active: isActive })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update UI
            statusIndicator.textContent = data.active ? 'ACTIVE' : 'INACTIVE';
            statusIndicator.className = data.active ? 'status-active' : 'status-inactive';
            
            // Make sure toggle matches server state
            toggleLearner.checked = data.active;
            
            // Show success message
            showToast(data.message);
          }
        })
        .catch(error => {
          console.error('Error toggling learner mode:', error);
          showToast('Error toggling learner mode', 'error');
          
          // Revert toggle state on error
          toggleLearner.checked = !isActive;
        });
      });
      
      // Load system state
      function loadSystemState() {
        fetch('<%= ingress_path %>/api/learner/status')
          .then(response => response.json())
          .then(data => {
            if (data.current_system_state) {
              const state = data.current_system_state;
              let stateHtml = `
                <div class="row">
                  <div class="col-sm-6">
                    <div class="metric-box">
                      <h6>Battery SOC</h6>
                      <p class="h3">${state.battery_soc !== null ? state.battery_soc + '%' : 'N/A'}</p>
                    </div>
                  </div>
                  <div class="col-sm-6">
                    <div class="metric-box">
                      <h6>PV Power</h6>
                      <p class="h3">${state.pv_power !== null ? state.pv_power + ' W' : 'N/A'}</p>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-sm-6">
                    <div class="metric-box">
                      <h6>Load</h6>
                      <p class="h3">${state.load !== null ? state.load + ' W' : 'N/A'}</p>
                    </div>
                  </div>
                  <div class="col-sm-6">
                    <div class="metric-box">
                      <h6>Last Update</h6>
                      <p>${formatDate(state.timestamp) || 'Never'}</p>
                    </div>
                  </div>
                </div>
              `;
              systemStateContainer.innerHTML = stateHtml;
            } else {
              systemStateContainer.innerHTML = '<p class="text-center">No system state available</p>';
            }
          })
          .catch(error => {
            console.error('Error loading system state:', error);
            systemStateContainer.innerHTML = '<p class="text-center text-danger">Error loading system state</p>';
          });
      }
      
      // Format date for better display
      function formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleString();
      }
      
      // Load changes
      function loadChanges() {
        fetch('<%= ingress_path %>/api/learner/changes')
          .then(response => response.json())
          .then(changes => {
            lastChangesData = changes;
            
            if (changes && changes.length > 0) {
              changesCount.textContent = changes.length;
              
              // Sort changes by timestamp (newest first)
              changes.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
              
              // Count new changes
              const newChanges = changes.filter(change => !viewedChanges.includes(change.id));
              if (newChanges.length > 0) {
                notificationBadge.textContent = newChanges.length;
                notificationBadge.style.display = 'flex';
                markAllReadButton.style.display = 'inline-block';
              } else {
                notificationBadge.style.display = 'none';
                markAllReadButton.style.display = 'none';
              }
              
              let changesHtml = '';
              changes.forEach(change => {
                const isNew = !viewedChanges.includes(change.id);
                
                changesHtml += `
                  <div class="change-entry ${isNew ? 'new' : ''}" id="change-${change.id}" data-id="${change.id}">
                    <div class="change-header">
                      <span class="change-time">${formatDate(change.timestamp)}</span>
                      ${isNew ? '<span class="badge bg-primary">New</span>' : ''}
                    </div>
                    <p class="change-setting">${change.topic}</p>
                    <div class="change-value">
                      <span class="change-value-old">${change.old_value || 'N/A'}</span>
                      <i class="fas fa-arrow-right"></i>
                      <span class="change-value-new">${change.new_value}</span>
                    </div>
                    <div class="change-system-state">
                      <h6><i class="fas fa-chart-line"></i> System State at Time of Change</h6>
                      <div class="system-state-grid">
                        <div class="system-state-item">
                          <span class="system-state-label">Battery SOC</span>
                          <span class="system-state-value">${change.system_state.battery_soc !== null ? change.system_state.battery_soc + '%' : 'N/A'}</span>
                        </div>
                        <div class="system-state-item">
                          <span class="system-state-label">PV Power</span>
                          <span class="system-state-value">${change.system_state.pv_power !== null ? change.system_state.pv_power + ' W' : 'N/A'}</span>
                        </div>
                        <div class="system-state-item">
                          <span class="system-state-label">Load</span>
                          <span class="system-state-value">${change.system_state.load !== null ? change.system_state.load + ' W' : 'N/A'}</span>
                        </div>
                      </div>
                    </div>
                    <div class="change-actions">
                      <button class="btn-delete-change" data-id="${change.id}">
                        <i class="fas fa-trash-alt"></i> Delete
                      </button>
                    </div>
                  </div>
                `;
              });
              changesContainer.innerHTML = changesHtml;
              
              // Add event listeners to delete buttons
              document.querySelectorAll('.btn-delete-change').forEach(button => {
                button.addEventListener('click', function() {
                  const changeId = this.getAttribute('data-id');
                  deleteChange(changeId);
                });
              });
              
              // Mark as viewed when clicked
              document.querySelectorAll('.change-entry').forEach(entry => {
                entry.addEventListener('click', function(e) {
                  if (!e.target.classList.contains('btn-delete-change') && !e.target.closest('.btn-delete-change')) {
                    const changeId = this.getAttribute('data-id');
                    markAsRead(changeId);
                  }
                });
              });
              
            } else {
              changesContainer.innerHTML = '<p class="no-changes">No changes detected yet</p>';
              notificationBadge.style.display = 'none';
              markAllReadButton.style.display = 'none';
            }
          })
          .catch(error => {
            console.error('Error loading changes:', error);
            changesContainer.innerHTML = '<p class="text-center text-danger">Error loading changes</p>';
          });
      }
      
      // Delete a change
      function deleteChange(id) {
        if (confirm('Are you sure you want to delete this change?')) {
          fetch(`<%= ingress_path %>/api/learner/changes/${id}`, {
            method: 'DELETE'
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Remove from viewed changes
              viewedChanges = viewedChanges.filter(viewedId => viewedId !== id);
              localStorage.setItem('viewedChanges', JSON.stringify(viewedChanges));
              
              // Remove from DOM
              const changeElement = document.getElementById(`change-${id}`);
              if (changeElement) {
                changeElement.remove();
              }
              
              // Update counts
              const newCount = parseInt(changesCount.textContent) - 1;
              changesCount.textContent = newCount;
              
              // If no more changes, update UI
              if (newCount === 0) {
                changesContainer.innerHTML = '<p class="no-changes">No changes detected yet</p>';
                notificationBadge.style.display = 'none';
                markAllReadButton.style.display = 'none';
              }
              
              showToast('Change deleted successfully');
            }
          })
          .catch(error => {
            console.error('Error deleting change:', error);
            showToast('Error deleting change', 'error');
          });
        }
      }
      
      // Mark a change as read
      function markAsRead(id) {
        const changeElement = document.getElementById(`change-${id}`);
        if (changeElement && changeElement.classList.contains('new')) {
          changeElement.classList.remove('new');
          changeElement.querySelector('.badge')?.remove();
          
          // Add to viewed changes
          if (!viewedChanges.includes(id)) {
            viewedChanges.push(id);
            localStorage.setItem('viewedChanges', JSON.stringify(viewedChanges));
          }
          
          // Update notification badge
          const newCount = parseInt(notificationBadge.textContent) - 1;
          if (newCount > 0) {
            notificationBadge.textContent = newCount;
          } else {
            notificationBadge.style.display = 'none';
            markAllReadButton.style.display = 'none';
          }
        }
      }
      
      // Mark all as read
      markAllReadButton.addEventListener('click', function() {
        document.querySelectorAll('.change-entry.new').forEach(entry => {
          const changeId = entry.getAttribute('data-id');
          markAsRead(changeId);
        });
      });
      
      // Simple toast notification
      function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.style.position = 'fixed';
        toast.style.bottom = '20px';
        toast.style.right = '20px';
        toast.style.padding = '10px 20px';
        toast.style.borderRadius = '4px';
        toast.style.color = 'white';
        toast.style.backgroundColor = type === 'success' ? 'var(--success-color)' : 'var(--danger-color)';
        toast.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
        toast.style.zIndex = '1000';
        toast.style.maxWidth = '90%';
        toast.style.wordBreak = 'break-word';
        toast.textContent = message;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
          toast.style.opacity = '0';
          toast.style.transition = 'opacity 0.5s ease';
          setTimeout(() => {
            document.body.removeChild(toast);
          }, 500);
        }, 3000);
      }
      
      // Check for new changes
      function checkNewChanges() {
        fetch('<%= ingress_path %>/api/learner/changes')
          .then(response => response.json())
          .then(changes => {
            if (changes && changes.length > lastChangesData.length) {
              // There are new changes
              const newChangesCount = changes.length - lastChangesData.length;
              showToast(`${newChangesCount} new change${newChangesCount > 1 ? 's' : ''} detected`);
              loadChanges();
            }
          })
          .catch(error => {
            console.error('Error checking for new changes:', error);
          });
      }
      
      // Initial load
      loadSystemState();
      loadChanges();
      
      // Refresh buttons
      refreshChangesButton.addEventListener('click', loadChanges);
      
      // Auto refresh
      setInterval(loadSystemState, 30000);
      setInterval(checkNewChanges, 15000);
    });
  </script>

</body>
</html>
