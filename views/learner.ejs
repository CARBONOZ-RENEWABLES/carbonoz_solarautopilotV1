<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
<style> 
body {
  font-family: 'Inter', sans-serif;
  background: var(--bg-color);
}
  :root {
      --primary-color: #DEAF0B;
      --bg-color: #f5f6fa;
      --text-color: #2f3640;
      --icon-color: #636e72;
      --green: #4CAF50;
      --red: #F44336;
      --blue: #2196F3;
      --amber: #FFC107;
      --gray: #757575;
     }
     
     body, html {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      height: 100%;
      
     }

     body.dark-mode { background-color: rgba(24, 27, 31, 1); color: #f5f6fa; }
      /* Sidebar styles */
      .sidebar {
          width: 280px;
          height: 100vh;
          background-color: white;
          border-right: 1px solid #e5e7eb;
          display: flex;
          flex-direction: column;
          position: fixed;
          top: 0;
          left: 0;
          z-index: 1000;
          transition: width 0.3s ease;
      }
     
             .logo-container {
                 padding: 1.5rem;
                 border-bottom: 1px solid #e5e7eb;
                 display: flex;
                 align-items: center;
                 gap: 0.75rem;
             }
     
             .logo-icon {
      width: 50px;
      height: 50px;
      border-radius: 8px;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-weight: bold;
      font-size: 20px;
     }
     
     .logo-text {
      margin-left: 10px;
      font-weight: bold;
      color: var(--text-color);
      font-size: 18px;
     }
     
     .logo-text .highlight {
      color: var(--primary-color);
      margin-left: 10px;
     }
     
     
     nav {
      flex-grow: 1;
     }
     
     nav ul {
      list-style-type: none;
      padding: 0;
      margin: 0;
     }
     nav li {
      padding: 15px 20px;
      display: flex;
      align-items: center;
      color: var(--text-color);
      cursor: pointer;
      transition: background-color 0.3s;
      font-size: 18px;
     }
     
     nav li a{
      text-decoration: none;
      color: #2f3640;
      font-weight: bold;
     }
     nav li:hover {
      background-color: var(--bg-color);
     }
     
     nav li i {
      margin-right: 15px;
      color: var(--icon-color);
      font-size: 24px;
     }
     
     .bottom-options {
      padding: 20px;
      border-top: 1px solid #dcdde1;
     }
     
     .toggle-sidebar {
      display: flex;
      align-items: center;
      justify-content: space-between;
      cursor: pointer;
      font-size: 16px;
     }
     
     .toggle-text {
      margin-right: 10px;
     }
     
     .toggle-switch {
      width: 50px;
      height: 25px;
      background-color: #dcdde1;
      border-radius: 12.5px;
      position: relative;
      transition: background-color 0.3s;
     }
     .toggle-switch::before {
      content: '';
      position: absolute;
      width: 21px;
      height: 21px;
      border-radius: 50%;
      background-color: white;
      top: 2px;
      left: 2px;
      transition: transform 0.3s;
     }
     
     .toggle-switch.active {
      background-color: var(--primary-color);
     }
     
     .toggle-switch.active::before {
      transform: translateX(25px);
     }
     
     .sidebar.collapsed .logo-text,
     .sidebar.collapsed .search,
     .sidebar.collapsed nav li span,
     .sidebar.collapsed .toggle-text {
      display: none;
     }
     
     .sidebar.collapsed .logo {
      justify-content: center;
     }
     
     .sidebar.collapsed nav li {
      justify-content: center;
     }
     
     .sidebar.collapsed nav li i {
      margin-right: 0;
     }
             /* Main content styles */
             .main-content {
                 flex: 1;
                 margin-left: 280px;
                 padding: 2rem;
             }
     
             .content-header {
                 margin-bottom: 2rem;
             }
     
             .content-header h2 {
                 font-size: 1.875rem;
                 font-weight: 700;
                 color: #111827;
             }
     
             .metrics-grid {
                 display: grid;
                 grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                 gap: 1.5rem;
                 margin-bottom: 2rem;
             }
     
             .metric-card {
                 background: white;
                 border-radius: 12px;
                 padding: 1.5rem;
                 box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
             }
     
             .metric-title {
                 font-size: 0.875rem;
                 font-weight: 600;
                 color: #4b5563;
                 margin-bottom: 0.5rem;
             }
     
             .metric-value {
                 font-size: 1.5rem;
                 font-weight: 700;
                 margin-bottom: 0.25rem;
             }
     
             .metric-subtitle {
                 font-size: 0.875rem;
                 color: #6b7280;
             }
     
             .chart-container {
                 background: white;
                 border-radius: 12px;
                 padding: 1.5rem;
                 margin-bottom: 2rem;
                 box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
             }
     
             .chart-wrapper {
                 height: 400px;
                 margin-top: 1rem;
             }
     
             .period-buttons {
                 display: flex;
                 gap: 0.75rem;
                 margin-bottom: 1rem;
             }
     
             .period-btn {
                 padding: 0.5rem 1rem;
                 border: none;
                 background-color: #e5e7eb;
                 color: #4b5563;
                 border-radius: 6px;
                 cursor: pointer;
                 font-weight: 500;
                 transition: all 0.2s;
             }
     
             .period-btn:hover {
                 background-color: #d1d5db;
             }
     
             .period-btn.active {
                 background-color: #DEAF0B;
                 color: white;
             }
     
             /* Toggle styles */
             .toggle {
                 position: relative;
                 display: inline-block;
                 width: 44px;
                 height: 24px;
             }
     
             .toggle input {
                 opacity: 0;
                 width: 0;
                 height: 0;
             }
     
             .slider {
                 position: absolute;
                 cursor: pointer;
                 top: 0;
                 left: 0;
                 right: 0;
                 bottom: 0;
                 background-color: #e5e7eb;
                 transition: .4s;
                 border-radius: 34px;
             }
     
             .slider:before {
                 position: absolute;
                 content: "";
                 height: 16px;
                 width: 16px;
                 left: 4px;
                 bottom: 4px;
                 background-color: white;
                 transition: .4s;
                 border-radius: 50%;
             }
     
             input:checked + .slider {
                 background-color: #DEAF0B;
             }
     
             input:checked + .slider:before {
                 transform: translateX(20px);
             }
     
             /* Updated and new styles */
             .bottom-controls {
                 padding: 1.5rem;
                 border-top: 1px solid #e5e7eb;
             }
     
             .control-item {
                 display: flex;
                 justify-content: space-between;
                 align-items: center;
                 margin-bottom: 1rem;
             }
     
             .control-label {
                 font-size: 0.875rem;
                 color: #4b5563;
             }
     
             .toggle {
                 position: relative;
                 display: inline-block;
                 width: 44px;
                 height: 24px;
             }
     
             .toggle input {
                 opacity: 0;
                 width: 0;
                 height: 0;
             }
     
             .sidebar {
      width: 280px;
      background-color: white;
      box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      transition: width 0.3s ease;
      z-index: 10;
     }
     
     .sidebar.collapsed {
      width: 80px;
     }
     
     .logo {
      display: flex;
      align-items: center;
      padding: 20px;
     }
     
     
             input:checked + .slider {
                 background-color: #DEAF0B;
             }
     
             input:checked + .slider:before {
                 transform: translateX(20px);
             }
     
             .total-emissions {
                 font-size: 1.25rem;
                 font-weight: 600;
                 margin-bottom: 1rem;
                 color: #374151;
             }
     
             .summary-grid {
                 display: grid;
                 grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                 gap: 1rem;
                 margin-bottom: 2rem;
             }
     
             .summary-item {
                 background-color: white;
                 border-radius: 8px;
                 padding: 1rem;
                 box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
             }
     
             .summary-label {
                 font-size: 0.875rem;
                 color: #6b7280;
                 display: block;
                 margin-bottom: 0.5rem;
             }
     
             .summary-value {
                 font-size: 1.25rem;
                 font-weight: 600;
             }
     
         
     
             /* Responsive styles */
             @media (max-width: 768px) {
                 .sidebar {
                     width: 100%;
                     height: auto;
                     position: static;
                     border-right: none;
                     border-bottom: 1px solid #e5e7eb;
                 }
     
                 .main-content {
                     margin-left: 0;
                 }
     
                 body.collapsed-sidebar .sidebar {
                     display: none;
                 }
     
                 body.collapsed-sidebar .main-content {
                     margin-left: 0;
                 }
     
                 .metrics-grid,
                 .summary-grid {
                     grid-template-columns: 1fr;
                 }
     
                 .period-buttons {
                     flex-wrap: wrap;
                 }
     
                 .period-btn {
                     flex: 1 0 calc(50% - 0.375rem);
                     margin-bottom: 0.75rem;
                 }
             }
  
  /* loading css */
  
  .loading-overlay {
   position: fixed;
   top: 0;
   left: 0;
   width: 100%;
   height: 100%;
   background-color: #f8f9fa;
   display: flex;
   justify-content: center;
   align-items: center;
   z-index: 9999;
  }
  
  .loading-spinner {
   width: 50px;
   height: 50px;
   border: 5px solid #e0e0e0;
   border-top: 5px solid #3498db;
   border-radius: 50%;
   animation: spin 1s linear infinite;
  }
  
  
  @keyframes spin {
   0% { transform: rotate(0deg); }
   100% { transform: rotate(360deg); }
  }
  
  
  .dark-mode .main-content{
      color: #f5f6fa;
  }
  
  .dark-mode .sidebar {
      background-color: rgba(24, 27, 31, 1);
  }
  
  .dark-mode .sidebar .logo-icon {
   color: #2f3640;
  }
  
  .dark-mode .sidebar .logo-text {
   color: #f5f6fa;
  }
  
  .dark-mode .sidebar nav li {
   color: #f5f6fa;
  }
  
  .dark-mode .sidebar nav li:hover {
   background-color: #383838;
  }
  
  .dark-mode .sidebar nav li a {
   color: #f5f6fa;
  }
  
  .dark-mode .sidebar nav li i {
   color: #dcdde1;
  }
  
  .dark-mode .toggle-sidebar,
  .dark-mode .toggle-dark-mode {
   color: #f5f6fa;
  }
  
  .dark-mode .toggle-switch {
      background-color: var(--primary-color);
  }
  
  .dark-mode .toggle-switch.active {
   background-color: var(--primary-color);
  }
  
  .dark-mode header {
      background-color: rgb(17, 18, 23);
  }
  
  .dark-mode .content-card {
      background-color: rgba(24, 27, 31, 1);
   color: #fff;
  }
  
  
  .dark-mode .loading-overlay{
      background-color: rgba(24, 27, 31, 1);
  }
  
  /* Mobile Sidebar Improvements */
  @media (max-width: 768px) {
      /* Sidebar base styles */
      .sidebar {
          position: fixed;
          top: 0;
          left: 0;
          height: 100vh;
          width: 280px;
          transform: translateX(-100%);
          transition: transform 0.3s ease-in-out;
          z-index: 1000;
          overflow-y: auto;
          -webkit-overflow-scrolling: touch;
          box-shadow: none;
      }
  
      .sidebar.active {
          transform: translateX(0);
          box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
      }
  
      /* Improved hamburger button */
      .mobile-toggle {
          display: block;
          position: fixed;
          top: 1rem;
          left: 1rem;
          z-index: 1001;
          background: none;
          border: none;
          cursor: pointer;
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background-color: white;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          padding: 8px;
      }
  
      .mobile-toggle span {
          display: block;
          width: 24px;
          height: 2px;
          background-color: var(--text-color);
          margin: 5px auto;
          transition: transform 0.3s ease, opacity 0.3s ease;
      }
  
      .mobile-toggle.active span:nth-child(1) {
          transform: translateY(7px) rotate(45deg);
      }
  
      .mobile-toggle.active span:nth-child(2) {
          opacity: 0;
      }
  
      .mobile-toggle.active span:nth-child(3) {
          transform: translateY(-7px) rotate(-45deg);
      }
  
      /* Improved nav items */
      .sidebar nav ul {
          padding: 1rem 0;
      }
  
      .sidebar nav li {
          padding: 0.875rem 1.5rem;
          margin: 0.25rem 1rem;
          border-radius: 8px;
          transition: background-color 0.2s ease;
      }
  
      .sidebar nav li a {
          display: flex;
          align-items: center;
          gap: 1rem;
          font-size: 1rem;
          color: var(--text-color);
      }
  
      .sidebar nav li i {
          font-size: 1.25rem;
          min-width: 24px;
          text-align: center;
      }
  
      .sidebar nav li:active {
          background-color: rgba(0, 0, 0, 0.05);
      }
  
      /* Improved overlay */
      .sidebar-overlay {
          display: none;
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: rgba(0, 0, 0, 0.4);
          backdrop-filter: blur(2px);
          z-index: 999;
          opacity: 0;
          transition: opacity 0.3s ease;
      }
  
      .sidebar-overlay.active {
          display: block;
          opacity: 1;
      }
  
      /* Dark mode adjustments */
      .dark-mode .mobile-toggle {
          background-color: rgba(255, 255, 255, 0.1);
      }
  
      .dark-mode .mobile-toggle span {
          background-color: #f5f6fa;
      }
  
      .dark-mode .sidebar nav li:active {
          background-color: rgba(255, 255, 255, 0.05);
      }
  }
  
  /* Ensure main content adjusts properly */
  @media (max-width: 768px) {
      .main-content {
          margin-left: 0;
          padding-top: 4.5rem;
          transition: margin-left 0.3s ease;
      }
  
      body.sidebar-open .main-content {
          filter: blur(2px);
          pointer-events: none;
      }
  }
  
  
    /* Main content styling */
  .main-content {
    flex: 1;
    margin-left: 280px;
    padding: 2rem;
   transition: margin-left 0.3s ease;
   
  }
  
  .main-content .container {
      width: 100%;
      max-width: none;
      padding: 0;
  }
  
  
  .card {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        margin-bottom: 20px;
      }
      .nav-link.active {
              font-weight: bold;
              color: #fff!important;
              background:#DEAF0B;
          }
      
      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
      }
      
      .card-header {
        border-radius: 10px 10px 0 0 !important;
        font-weight: 600;
        background: #DEAF0B;
        
      }
      
      .system-state-card {
        background: #fff;
        color: #000;
        border: none;
      }
      
      .system-state-card .card-header {
        background: #DEAF0B;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        color: #fff;
      }
      
      .state-item {
        padding: 12px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
      }
      
      .state-value {
        font-weight: 600;
        font-size: 1.1rem;
      }
      
      .learner-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
      }
      
      .learner-switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }
      
      .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
      }
      
      .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
      }
      
      input:checked + .slider {
        background-color: #2ecc71;
      }
      
      input:focus + .slider {
        box-shadow: 0 0 1px #2ecc71;
      }
      
      input:checked + .slider:before {
        transform: translateX(26px);
      }
      
      .badge-battery {
        padding: 8px 12px;
        border-radius: 6px;
        font-weight: 600;
      }
      
      .badge-battery-high {
        background-color: #2ecc71;
        color: white;
      }
      
      .badge-battery-medium {
        background-color: #f39c12;
        color: white;
      }
      
      .badge-battery-low {
        background-color: #e74c3c;
        color: white;
      }
      
      .badge-power {
        background-color: #3498db;
        color: white;
      }
      
      .badge-grid {
        background-color: #9b59b6;
        color: white;
      }
      
      .badge-load {
        background-color: #e67e22;
        color: white;
      }
      
      .changes-list {
        max-height: 400px;
        overflow-y: auto;
      }
      
      .monitored-settings-list {
        column-count: 2;
        column-gap: 20px;
      }
  
      @media (max-width: 767px) {
        .monitored-settings-list {
          column-count: 1;
        }
      }
      
      .system-state-gauges {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        padding: 15px;
      }
      
      .gauge-container {
        text-align: center;
        flex: 1 0 30%;
        margin-bottom: 20px;
      }
      
      .gauge {
        width: 150px;
        height: 150px;
        margin: 0 auto;
        position: relative;
        border-radius: 50%;
        overflow: hidden;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
      }
      
      .gauge::before {
        content: "";
        display: block;
        position: absolute;
        top: 10px;
        left: 10px;
        width: calc(100% - 20px);
        height: calc(100% - 20px);
        background: #fff;
        border-radius: 50%;
        z-index: 2;
      }
      
      .gauge-value {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 24px;
        font-weight: bold;
        z-index: 3;
      }
      
      .gauge-fill {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: conic-gradient(var(--fill-color) var(--fill-percent), #ecf0f1 var(--fill-percent));
        z-index: 1;
      }
      
      .gauge-value {
        color: #2c3e50;
        text-shadow: 0 0 5px rgba(255, 255, 255, 0.8);
        font-weight: 700;
      }
      
      .gauge-label {
        margin-top: 10px;
        font-size: 14px;
        font-weight: 600;
      }
      
      .navbar-nav .nav-link.active {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 5px;
      }
      
      .dashboard-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 20px;
      }
      
      .stat-card {
        padding: 15px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        color: white;
      }
      
      .stat-icon {
        font-size: 2rem;
        margin-right: 15px;
      }
      
      .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
      }
      
      .stat-label {
        font-size: 0.9rem;
        opacity: 0.8;
      }
      
      .stat-battery {
        background: linear-gradient(to right, #11998e, #38ef7d);
      }
      
      .stat-pv {
        background: linear-gradient(to right, #f2994a, #f2c94c);
      }
      
      .stat-load {
        background: linear-gradient(to right, #e74c3c, #e84393);
      }
      
      .stat-grid {
        background: linear-gradient(to right, #6a11cb, #2575fc);
      }
      
      .refresh-btn {
        border-radius: 50px;
        padding: 8px 16px;
        transition: all 0.3s ease;
      }
      
      .refresh-btn:hover {
        transform: scale(1.05);
      }
  
      .db-status {
        display: inline-flex;
        align-items: center;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.9rem;
        margin-left: 15px;
        font-weight: bold;
      }
      
      
      /* Animation for system state updates */
      @keyframes pulse {
        0% {
          box-shadow: 0 0 0 0 rgba(52, 152, 219, 0.5);
        }
        70% {
          box-shadow: 0 0 0 10px rgba(52, 152, 219, 0);
        }
        100% {
          box-shadow: 0 0 0 0 rgba(52, 152, 219, 0);
        }
      }
      
      .updated-value {
        animation: pulse 1.5s;
      }
  
      
  /* Enhanced dark mode styles for main-content */
  .dark-mode .main-content {
      background-color: #181b1f;
      color: #f5f6fa;
  }
  
  /* Dark mode styles for cards and components */
  .dark-mode .card {
      background-color: rgb(32, 36, 41);;
      border-color: #393e46;
  }
  
  .dark-mode .card-header {
      background-color: #DEAF0B;
      color: #fff;
      border-bottom-color: #393e46;
  }
  
  .dark-mode .card-body {
      color: #f5f6fa;
  }
  
  .dark-mode .table {
      color: #f5f6fa;
  }
  
  .dark-mode .table-hover tbody tr:hover {
      background-color: rgba(255, 255, 255, 0.075);
  }
  
  .dark-mode .table-striped tbody tr:nth-of-type(odd) {
      background-color: rgba(255, 255, 255, 0.05);
  }
  
  .dark-mode .table-light, 
  .dark-mode .table-light > th, 
  .dark-mode .table-light > td {
      background-color: #2f3542;
      color: #f5f6fa;
  }
  
  .dark-mode .bg-light {
      background-color: #2f3542 !important;
  }
  
  .dark-mode .text-muted {
      color: #a4b0be !important;
  }
  
  .dark-mode .nav-link {
      color: #dcdde1;
  }
  
  .dark-mode .nav-link:hover {
      color: #DEAF0B;
  }
  
  .dark-mode .nav-link.active {
      color: #DEAF0B !important;
      background-color: rgba(222, 175, 11, 0.1);
  }
  
  /* Dark mode gauge customization */
  .dark-mode .gauge::before {
      background-color: #222831;
  }
  
  .dark-mode .gauge-value {
      color: #f5f6fa;
      text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  }
  
  .dark-mode .gauge-label {
      color: #dcdde1;
  }
  
  /* Dark mode toggle switch */
  .dark-mode .slider {
      background-color: #4b4b4b;
  }
  
  .dark-mode input:checked + .slider {
      background-color: #DEAF0B;
  }
  
  .dark-mode .slider:before {
      background-color: #f5f6fa;
  }
  
  /* Dark mode alerts */
  .dark-mode .alert-info {
      background-color: #0d47a1;
      color: #f5f6fa;
      border-color: #0d47a1;
  }
  
  .dark-mode .alert-danger {
      background-color: #b71c1c;
      color: #f5f6fa;
      border-color: #b71c1c;
  }
  
  .dark-mode .alert-success {
      background-color: #1b5e20;
      color: #f5f6fa;
      border-color: #1b5e20;
  }
  
  /* Enhanced dashboard stats for dark mode */
  .dark-mode .dashboard-stats .stat-card {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  }
  
  .dark-mode .stat-battery {
      background: linear-gradient(to right, #0f9b0f, #1db954);
  }
  
  .dark-mode .stat-pv {
      background: linear-gradient(to right, #ff8f00, #ffb74d);
  }
  
  .dark-mode .stat-load {
      background: linear-gradient(to right, #c62828, #e57373);
  }
  
  .dark-mode .stat-grid {
      background: linear-gradient(to right, #1565c0, #64b5f6);
  }
  
  /* Badge styles for dark mode */
  .dark-mode .badge-battery-high {
      background-color: #2e7d32;
  }
  
  .dark-mode .badge-battery-medium {
      background-color: #f57c00;
  }
  
  .dark-mode .badge-battery-low {
      background-color: #c62828;
  }
  
  .dark-mode .badge-power {
      background-color: #0288d1;
  }
  
  .dark-mode .badge-grid {
      background-color: #7b1fa2;
  }
  
  .dark-mode .badge-load {
      background-color: #d84315;
  }
  
  /* Improved responsiveness for all screen sizes */
  @media (max-width: 1200px) {
      .gauge-container {
          flex: 1 0 50%;
      }
      
      .dashboard-stats {
          grid-template-columns: repeat(2, 1fr);
      }
  }
  
  @media (max-width: 992px) {
      .main-content {
          padding: 1.5rem;
      }
      
      .card-header h5 {
          font-size: 1.1rem;
      }
      
      .stat-value {
          font-size: 1.25rem;
      }
  }
  
  @media (max-width: 768px) {
      .main-content {
          padding: 1rem;
          margin-left: 0;
      }
      
      .dashboard-stats {
          grid-template-columns: 1fr;
          gap: 10px;
      }
      
      .gauge-container {
          flex: 1 0 100%;
      }
      
      .gauge {
          width: 120px;
          height: 120px;
      }
      
      .system-state-gauges {
          flex-direction: column;
          align-items: center;
      }
      
      .stat-card {
          padding: 10px;
      }
      
      .stat-icon {
          font-size: 1.5rem;
          margin-right: 10px;
      }
      
      .refresh-btn {
          padding: 4px 8px;
          font-size: 0.8rem;
      }
      
      .card-header {
          padding: 0.75rem;
      }
      
      .card-body {
          padding: 0.75rem;
      }
      
      .table th, .table td {
          padding: 0.5rem;
      }
  }
  
  /* Increase width of content inside main-content */
  .main-content .container {
      width: 100%;
      max-width: none;
      padding: 0;
  }
  
  /* Make navigation links container horizontally scrollable on all screen sizes */
  .d-flex.flex-wrap.justify-content-center.gap-3 {
      flex-wrap: nowrap !important;
      overflow-x: auto;
      justify-content: flex-start !important;
      padding-bottom: 10px; /* Add some padding to make scrollbar not overlap content */
      -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
      scrollbar-width: thin; /* For Firefox */
  }
  
  /* Hide scrollbar for Chrome, Safari and Opera */
  .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
      display: none;
  }
  
  /* Ensure nav links don't wrap */
  .nav-link {
      white-space: nowrap;
      flex-shrink: 0;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
      /* Make the container full width on mobile */
      .main-content {
          padding-left: 0.5rem;
          padding-right: 0.5rem;
      }
  }
  
  /* Ensure card and table content can be scrolled horizontally if too wide */
  .card-body {
      overflow-x: auto;
  }
  @media (max-width: 576px) {
      .main-content {
          padding: 0.75rem;
      }
      
      .mobile-toggle {
          top: 0.5rem;
          left: 0.5rem;
      }
      
      .stat-value {
          font-size: 1.1rem;
      }
      
      .stat-label {
          font-size: 0.8rem;
      }
      
      .gauge {
          width: 100px;
          height: 100px;
      }
      
      .gauge-value {
          font-size: 1.25rem;
      }
      
      .gauge-label {
          font-size: 0.8rem;
      }
      
      .d-flex.flex-wrap.justify-content-center.gap-3 {
          gap: 0.5rem !important;
      }
      
      .nav-link {
          padding: 0.25rem 0.5rem;
          font-size: 0.8rem;
      }
      
      .card-header h5 {
          font-size: 1rem;
      }
      
      .learner-switch {
          width: 50px;
          height: 28px;
      }
      
      .changes-list {
          max-height: 300px;
      }
  }
  
  /* Improved tablet view for learner control panel */
  @media (max-width: 991px) and (min-width: 769px) {
      .col-md-4, .col-md-8 {
          flex: 0 0 100%;
          max-width: 100%;
      }
      
      .col-md-8 {
          margin-top: 1rem;
      }
  }
  
  /* Toast notification improvements */
  .dark-mode .toast {
      background-color: #222831;
      color: #f5f6fa;
  }
  
  .dark-mode .toast-header {
      background-color: rgb(32, 36, 41);
      color: #f5f6fa;
      border-bottom-color: #4a4a4a;
  }
  
  /* .dark-mode .toast-body {
      background-color: #222831;
  } */
  
  /* Loading overlay for dark mode */
  .dark-mode .loading-overlay {
      background-color: #181b1f;
  }
  
  
  /* Focus states for better accessibility */
  .dark-mode button:focus,
  .dark-mode .nav-link:focus,
  .dark-mode input:focus {
      outline: 2px solid #DEAF0B;
      outline-offset: 2px;
  }
  
  /* Print-friendly styles */
  @media print {
      .main-content {
          margin-left: 0;
          padding: 0;
      }
      
      .sidebar, 
      .refresh-btn, 
      .toggle-sidebar, 
      .mobile-toggle, 
      .learner-switch {
          display: none !important;
      }
      
      .card {
          break-inside: avoid;
          border: 1px solid #ddd;
          margin-bottom: 1rem;
      }
      
      .changes-list {
          max-height: none;
      }
  }
  
  /* Basic table styling in dark mode */
  .dark-mode .table {
      color: #f5f6fa;
      background-color: #222831;
      border-color: #393e46;
  }
  
  /* Table cells and headers */
  .dark-mode .table th,
  .dark-mode .table td {
      background-color: rgb(32, 36, 41);
      color: #f5f6fa;
      border-color: #393e46;
  }
  
  /* Table head section */
  .dark-mode .table thead {
      background-color: rgb(32, 36, 41);
  }
  
  .dark-mode .table thead th {
      background-color: rgb(32, 36, 41);;
      color: #f5f6fa;
      border-bottom-color: #393e46;
  }
  
  /* Table hover and striped effects */
  .dark-mode .table-hover tbody tr:hover {
      background-color: #32383e !important;
  }
  
  .dark-mode .table-striped tbody tr:nth-of-type(odd) {
      background-color: #2a3038 !important;
  }
  
  .dark-mode .table-striped tbody tr:nth-of-type(even) {
      background-color: #222831 !important;
  }
  
  /* Table variants */
  .dark-mode .table-light,
  .dark-mode .table-light > th,
  .dark-mode .table-light > td {
      background-color: rgb(32, 36, 41) !important;
      color: #f5f6fa !important;
  }
  
  /* System State Table specific styles */
  .dark-mode #systemStateTable tbody tr td,
  .dark-mode #systemStateTable thead tr th {
      background-color: rgb(32, 36, 41);
      color: #f5f6fa;
      border-color: #393e46;
  }
  
  /* Recent Changes Table specific styles */
  .dark-mode #recentChanges .table {
      background-color: rgb(32, 36, 41);;
  }
  
  .dark-mode #recentChanges .table td,
  .dark-mode #recentChanges .table th {
      background-color: #222831;
      color: #f5f6fa;
      border-color: #393e46;
  }
  
  .dark-mode #recentChanges .table-light th {
      background-color: #2c3440 !important;
      color: #f5f6fa !important;
  }
  
  /* Text colors in dark mode tables */
  .dark-mode .table .text-muted {
      color: #a4b0be !important;
  }
  
  .dark-mode .table .text-decoration-line-through {
      color: #8395a7 !important;
  }
  
  .dark-mode .table .text-success {
      color: #2ecc71 !important;
  }
  
  /* Card containing tables */
  .dark-mode .card .table {
      background-color: #222831;
      color: #f5f6fa;
  }
  
  /* Fix for any tables that might have white background */
  .dark-mode table {
      background-color: #222831 !important;
      color: #f5f6fa !important;
  }
  
  /* Ensure table container also has dark background */
  .dark-mode .table-responsive {
      background-color: #222831;
  }
  
  /* Additional styles for better borders */
  .dark-mode .card .table {
      border-color: #393e46;
  }
  
  .dark-mode .card .table thead th {
      border-top: none;
  }
  
  /* Fix for Bootstrap-specific table classes */
  .dark-mode .table-striped>tbody>tr:nth-of-type(odd)>* {
      background-color: #2a3038 !important;
      color: #f5f6fa;
  }
  
  .dark-mode .table-hover>tbody>tr:hover>* {
      background-color: #32383e !important;
      color: #f5f6fa;
  }
  /* Enhanced Table Styles */
  .main-content table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1.5rem;
    background-color: #fff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .main-content table th,
  .main-content table td {
    padding: 0.75rem 1rem;
    text-align: left;
    border-bottom: 1px solid #e5e7eb;
    vertical-align: middle;
  }
  
  .main-content table th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: #4b5563;
    position: sticky;
    top: 0;
    z-index: 10;
  }
  
  .main-content table tr:last-child td {
    border-bottom: none;
  }
  
  .main-content table tr:hover {
    background-color: rgba(0, 0, 0, 0.02);
  }
  
  .main-content table td .badge {
    font-size: 0.75rem;
    padding: 0.35em 0.65em;
    font-weight: 600;
    display: inline-block;
  }
  
  /* Table container with horizontal scroll for small screens */
  .main-content .table-responsive {
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: thin;
    margin-bottom: 1.5rem;
    border-radius: 8px;
  }
  
  .main-content .table-responsive::-webkit-scrollbar {
    height: 8px;
  }
  
  .main-content .table-responsive::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }
  
  .main-content .table-responsive::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 4px;
  }
  
  .main-content .table-responsive::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
  
  /* Status indicators in tables */
  .main-content table .status-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 6px;
  }
  
  .main-content table .status-active {
    background-color: #4CAF50;
  }
  
  .main-content table .status-inactive {
    background-color: #F44336;
  }
  
  .main-content table .status-warning {
    background-color: #FFC107;
  }
  
  /* Enhanced Navigation Links in main-content */
  /* Horizontal nav links with scroll on smaller screens */
  .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
    display: flex;
    flex-wrap: nowrap !important;
    overflow-x: auto;
    white-space: nowrap;
    gap: 0.75rem;
    padding: 0.75rem;
    margin-bottom: 1.5rem;
    scrollbar-width: thin;
    -webkit-overflow-scrolling: touch;
    background-color: #f8f9fa;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }
  
  .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
    height: 6px;
  }
  
  .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }
  
  .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 4px;
  }
  
  .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
  
  .main-content .nav-link {
    display: inline-flex;
    align-items: center;
    white-space: nowrap;
    padding: 0.5rem 1rem;
    color: #4b5563;
    font-weight: 500;
    border-radius: 6px;
    text-decoration: none;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }
  
  .main-content .nav-link:hover {
    background-color: #e9ecef;
    color: #000;
  }
  
  .main-content .nav-link.active {
    color: #fff;
  }
  
  .main-content .nav-link i,
  .main-content .nav-link svg {
    margin-right: 0.5rem;
    font-size: 1rem;
  }
  
  /* Compact tables for mobile */
  @media (max-width: 768px) {
    .main-content table th,
    .main-content table td {
      padding: 0.5rem 0.75rem;
      font-size: 0.9rem;
    }
    
    .main-content table th {
      position: sticky;
      top: 0;
      background-color: #f8f9fa;
      z-index: 10;
    }
    
    .main-content .table-responsive {
      max-width: 100vw;
      margin-left: -0.5rem;
      margin-right: -0.5rem;
      padding-left: 0.5rem;
      padding-right: 0.5rem;
      border-radius: 0;
    }
    
    .main-content .nav-link {
      padding: 0.4rem 0.75rem;
      font-size: 0.9rem;
    }
    
    .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
      margin-left: -0.5rem;
      margin-right: -0.5rem;
      padding-left: 0.75rem;
      padding-right: 0.75rem;
      gap: 0.5rem !important;
    }
  }
  
  /* Responsive table variant for very small screens */
  @media (max-width: 576px) {
    .main-content .responsive-table-card th {
      display: none;
    }
    
    .main-content .responsive-table-card tr {
      display: block;
      margin-bottom: 1rem;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .main-content .responsive-table-card td {
      display: flex;
      justify-content: space-between;
      text-align: right;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .main-content .responsive-table-card td:last-child {
      border-bottom: none;
    }
    
    .main-content .responsive-table-card td::before {
      content: attr(data-label);
      font-weight: 600;
      text-align: left;
      color: #4b5563;
    }
  }
  
  /* Dark mode adjustments */
  .dark-mode .main-content table {
    background-color: #222831;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  }
  
  .dark-mode .main-content table th {
    background-color: #202429;
    color: #e5e7eb;
    border-bottom-color: #393e46;
  }
  
  .dark-mode .main-content table td {
    border-bottom-color: #393e46;
    color: #f5f6fa;
  }
  
  .dark-mode .main-content table tr:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }
  
  .dark-mode .main-content .table-responsive::-webkit-scrollbar-track {
    background: #2a2e35;
  }
  
  .dark-mode .main-content .table-responsive::-webkit-scrollbar-thumb {
    background: #4a4d53;
  }
  
  .dark-mode .main-content .table-responsive::-webkit-scrollbar-thumb:hover {
    background: #5a5d63;
  }
  
  .dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
    background-color: #202429;
  }
  
  .dark-mode .main-content .nav-link {
    color: #e5e7eb;
  }
  
  .dark-mode .main-content .nav-link:hover {
    background-color: #32383e;
    color: #fff;
  }
  
  .dark-mode .main-content .nav-link.active {
    color: #fff;
  }
  
  .dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
    background: #2a2e35;
  }
  
  .dark-mode .main-content .d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
    background: #4a4d53;
  }
  
  /* Print optimization */
  @media print {
    .main-content .table-responsive {
      overflow: visible;
    }
    
    .main-content table {
      box-shadow: none;
      border: 1px solid #ddd;
    }
    
    .main-content .d-flex.flex-wrap.justify-content-center.gap-3 {
      display: none !important;
    }
  }
  
  /* Learner Mode Control Panel Styles */
  .card {
    border: none;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    margin-bottom: 1.5rem;
    background-color: #fff;
    overflow: hidden;
  }
  
  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
  }
  
  .card-header {
    padding: 1.25rem 1.5rem;
    background-color: #DEAF0B !important;
    border-bottom: none;
    color: white;
  }
  
  .card-header h5 {
    font-weight: 600;
    margin: 0;
    font-size: 1.25rem;
    display: flex;
    align-items: center;
  }
  
  /* System State Card Header - Match the screenshot */
  .system-state-card .card-header {
    background-color: #DEAF0B !important;
    padding: 1.25rem 1.5rem;
    display: flex;
    align-items: center;
    border-radius: 0;
    position: relative;
  }
  
  .system-state-card .card-header h5 {
    color: white;
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0;
  }
  
  /* Last updated timestamp - styled as shown in the screenshot */
  #lastUpdated {
    background-color: rgba(0, 0, 0, 0.2);
    color: white;
    border-radius: 30px;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    font-weight: 500;
    margin-left: auto;
    display: inline-flex;
    align-items: center;
  }
  
  /* Add "Updated:" text before the timestamp */
  #lastUpdated::before {
    content: "Updated: ";
    margin-right: 0.25rem;
  }
  
  /* Responsive adjustments for the System State header */
  @media (max-width: 768px) {
    .system-state-card .card-header {
      padding: 1rem;
      flex-wrap: wrap;
    }
    
    .system-state-card .card-header h5 {
      font-size: 1.25rem;
      margin-bottom: 0.5rem;
    }
    
    #lastUpdated {
      font-size: 0.8rem;
      padding: 0.35rem 0.75rem;
      margin-left: 0;
    }
  }
  
  .card-header h5 i {
    margin-right: 0.75rem;
    font-size: 1.2em;
  }
  
  .card-body {
    padding: 1.5rem;
  }
  
  /* Learner Switch */
  .learner-switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 30px;
  }
  
  .learner-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 34px;
  }
  
  .slider:before {
    position: absolute;
    content: "";
    height: 22px;
    width: 22px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
  }
  
  input:checked + .slider {
    background-color: #2ecc71;
  }
  
  input:focus + .slider {
    box-shadow: 0 0 1px #2ecc71;
  }
  
  input:checked + .slider:before {
    transform: translateX(30px);
  }
  
  .refresh-btn {
    padding: 0.5rem 1rem;
    background-color: rgba(255, 255, 255, 0.9);
    color: #333;
    border: none;
    border-radius: 30px;
    font-weight: 500;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s;
    margin-left: auto; /* Push to right side */
  }
  
  .refresh-btn:hover {
    background-color: white;
    transform: scale(1.05);
  }
  
  .refresh-btn i {
    font-size: 1.1em;
  }
  
  /* System Stats */
  .dashboard-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }
  
  .stat-card {
    display: flex;
    align-items: center;
    padding: 1.25rem;
    border-radius: 8px;
    color: white;
  }
  
  .stat-battery {
    background: linear-gradient(135deg, #11998e, #38ef7d);
  }
  
  .stat-pv {
    background: linear-gradient(135deg, #f2994a, #f2c94c);
  }
  
  .stat-load {
    background: linear-gradient(135deg, #e74c3c, #e84393);
  }
  
  .stat-grid {
    background: linear-gradient(135deg, #6a11cb, #2575fc);
  }
  
  .stat-icon {
    font-size: 2rem;
    margin-right: 1rem;
  }
  
  .stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    line-height: 1.2;
  }
  
  .stat-label {
    font-size: 0.875rem;
    opacity: 0.9;
  }
  
  /* Gauge styling */
  .system-state-gauges {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    padding: 1.5rem 1rem;
    background-color: #f8f9fa;
    border-radius: 8px;
    margin-bottom: 1.5rem;
  }
  
  .gauge-container {
    text-align: center;
    flex: 1 0 160px;
    margin: 0.75rem;
    max-width: 200px;
  }
  
  .gauge {
    width: 140px;
    height: 140px;
    margin: 0 auto;
    position: relative;
    border-radius: 50%;
    overflow: hidden;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
  }
  
  .gauge::before {
    content: "";
    display: block;
    position: absolute;
    top: 10px;
    left: 10px;
    width: calc(100% - 20px);
    height: calc(100% - 20px);
    background: white;
    border-radius: 50%;
    z-index: 2;
  }
  
  .gauge-value {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 1.5rem;
    font-weight: bold;
    color: #2c3e50;
    z-index: 3;
  }
  
  .gauge-fill {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: conic-gradient(var(--fill-color) var(--fill-percent), #ecf0f1 var(--fill-percent));
    z-index: 1;
  }
  
  .gauge-label {
    margin-top: 0.75rem;
    font-size: 0.875rem;
    font-weight: 600;
    color: #4b5563;
  }
  
  /* System state table customization */
  #systemStateTable th:first-child {
    width: 30%;
  }
  
  #systemStateTable th:nth-child(2) {
    width: 20%;
  }
  
  #systemStateTable th:nth-child(3) {
    width: 25%;
  }
  
  #systemStateTable th:last-child {
    width: 25%;
  }
  
  /* Dark mode for control panel */
  .dark-mode .card {
    background-color: #222831;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
  
  .dark-mode .card-body {
    color: #f5f6fa;
  }
  
  .dark-mode .system-state-gauges {
    background-color: #202429;
  }
  
  .dark-mode .gauge::before {
    background-color: #222831;
  }
  
  .dark-mode .gauge-value {
    color: #f5f6fa;
  }
  
  .dark-mode .gauge-label {
    color: #dcdde1;
  }
  
  .dark-mode .slider {
    background-color: #4b4b4b;
  }
  
  .dark-mode input:checked + .slider {
    background-color: #2ecc71;
  }
  
  .dark-mode .refresh-btn {
    background-color: rgba(255, 255, 255, 0.15);
    color: white;
  }
  
  .dark-mode .refresh-btn:hover {
    background-color: rgba(255, 255, 255, 0.25);
  }
  
  /* Responsive adjustments for the control panel */
  @media (max-width: 992px) {
    .dashboard-stats {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .gauge {
      width: 120px;
      height: 120px;
    }
    
    .gauge-value {
      font-size: 1.25rem;
    }
    
    .stat-value {
      font-size: 1.25rem;
    }
  }
  
  @media (max-width: 768px) {
    .card-header {
      padding: 1rem;
    }
    
    .card-body {
      padding: 1rem;
    }
    
    .system-state-gauges {
      padding: 1rem 0.5rem;
    }
    
    .gauge-container {
      flex: 1 0 120px;
      margin: 0.5rem;
    }
    
    /* Adjustments for refresh button on mobile */
    .refresh-btn {
      padding: 0.4rem 0.8rem;
      font-size: 0.8rem;
    }
    
    /* Responsive styles for system state card are defined separately */
  }
  
  @media (max-width: 576px) {
    .dashboard-stats {
      grid-template-columns: 1fr;
    }
    
    .gauge {
      width: 100px;
      height: 100px;
    }
    
    .gauge-container {
      flex: 1 0 100%;
      max-width: none;
    }
    
    .system-state-gauges {
      flex-direction: column;
      align-items: center;
    }
    
    .stat-card {
      padding: 1rem;
    }
    
    .stat-icon {
      font-size: 1.75rem;
      margin-right: 0.75rem;
    }
    
    .stat-value {
      font-size: 1.2rem;
    }
  }
  
</style>
</head>
<body>
      <!-- Add hamburger menu button -->
      <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>

          <%- include('partials/sidebar') %>
          <div class="main-content">
            <div class="container">
              <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                <a class="nav-link  text-nowrap" href="<%= ingress_path %>/learner">
                    <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/grid-charge">
                    <i class="fas fa-plug me-1" style="color: #007BFF;"></i>Grid Charge
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/energy-pattern">
                    <i class="fas fa-battery-three-quarters me-1" style="color: #28A745;"></i>Energy Pattern
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/voltage-point">
                    <i class="fas fa-bolt me-1" style="color: #DC3545;"></i>Voltage Points
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/work-mode">
                    <i class="fas fa-cogs me-1" style="color: #FFC107;"></i>Work Mode
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/battery-charging">
                    <i class="fas fa-charging-station me-1" style="color: #17A2B8;"></i>Battery Charging
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rules">
                    <i class="fas fa-tasks me-1" style="color: #6610F2;"></i>Rules
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/wizard">
                    <i class="fas fa-magic me-1" style="color: #20c997;"></i>Rule Wizard
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rule-history">
                    <i class="fas fa-history me-1" style="color: #6f42c1;"></i>Rule History
                </a>
            </div>
                  <br>
              
                  <!-- Learner Mode Control Panel -->
                  <div class="row mb-4">
                    <div class="col-md-12">
                      <div class="card">
                        <div class="card-header text-white">
                          <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0"><i class="bi bi-toggles me-2"></i>Learner Mode Control</h5>
                            <button id="refreshBtn" class="btn btn-sm btn-light refresh-btn">
                              <i class="bi bi-arrow-clockwise me-1"></i>Refresh Data
                            </button>
                          </div>
                        </div>
                        <div class="card-body">
                          <div class="row align-items-center">
                            <div class="col-md-4">
                              <div class="d-flex align-items-center">
                                <label class="learner-switch me-3">
                                  <input type="checkbox" id="learnerToggle" <%= active ? 'checked' : '' %>>
                                  <span class="slider"></span>
                                </label>
                                <div>
                                  <h5 class="mb-0">Learner Mode</h5>
                                  <p class="mb-0 text-muted" id="learnerStatus">
                                    <% if (active) { %>
                                      <span class="text-success">Active</span> - Recording system changes
                                    <% } else { %>
                                      <span class="text-danger">Inactive</span> - Not recording system changes
                                    <% } %>
                                  </p>
                                </div>
                              </div>
                            </div>
                            <div class="col-md-8 text-center">
                              <div class="d-flex flex-column align-items-center">
                                <h5>Recorded Changes</h5>
                                <span class="badge bg-primary fs-5 p-2"><%= changes_count %></span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
              
                  <!-- System State Dashboard -->
                  <div class="row mb-4">
                    <div class="col-md-12">
                      <div class="card system-state-card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                          <h5 class="mb-0"><i class="bi bi-activity me-2"></i>Current System State</h5>
                          <span id="lastUpdated" class="badge bg-dark"></span>
                        </div>
                        <div class="card-body p-0">
                          <!-- System Stats Dashboard -->
                          <div class="dashboard-stats p-3">
                            <div class="stat-card stat-battery">
                              <div class="stat-icon">
                                <i class="bi bi-battery-full"></i>
                              </div>
                              <div>
                                <div class="stat-value" id="batteryValue">--</div>
                                <div class="stat-label">Battery SOC (%)</div>
                              </div>
                            </div>
                            
                            <div class="stat-card stat-pv">
                              <div class="stat-icon">
                                <i class="bi bi-sun"></i>
                              </div>
                              <div>
                                <div class="stat-value" id="pvValue">--</div>
                                <div class="stat-label">PV Power (kW)</div>
                              </div>
                            </div>
                            
                            <div class="stat-card stat-load">
                              <div class="stat-icon">
                                <i class="bi bi-lightning"></i>
                              </div>
                              <div>
                                <div class="stat-value" id="loadValue">--</div>
                                <div class="stat-label">Load (kW)</div>
                              </div>
                            </div>
                            
                            <div class="stat-card stat-grid">
                              <div class="stat-icon">
                                <i class="bi bi-plug"></i>
                              </div>
                              <div>
                                <div class="stat-value" id="gridVoltageValue">--</div>
                                <div class="stat-label">Grid Voltage (V)</div>
                              </div>
                            </div>
                          </div>
                          
                          <!-- Gauges for visual representation -->
                          <div class="system-state-gauges">
                            <div class="gauge-container">
                              <div class="gauge">
                                <div class="gauge-fill" id="batterySocGauge"></div>
                                <div class="gauge-value" id="batterySocValue">--</div>
                              </div>
                              <div class="gauge-label">Battery SOC (%)</div>
                            </div>
                            
                            <div class="gauge-container">
                              <div class="gauge">
                                <div class="gauge-fill" id="pvPowerGauge"></div>
                                <div class="gauge-value" id="pvPowerValue">--</div>
                              </div>
                              <div class="gauge-label">PV Power (W)</div>
                            </div>
                            
                            <div class="gauge-container">
                              <div class="gauge">
                                <div class="gauge-fill" id="loadGauge"></div>
                                <div class="gauge-value" id="loadValue2">--</div>
                              </div>
                              <div class="gauge-label">Load (W)</div>
                            </div>
                          </div>
                          
                          <!-- Detailed System State Table -->
                          <div class="table-responsive">
                            <table class="table table-hover mb-0" id="systemStateTable">
                              <thead>
                                <tr>
                                  <th>Parameter</th>
                                  <th>Value</th>
                                  <th>Status</th>
                                  <th>Last Change</th>
                                </tr>
                              </thead>
                              <tbody>
                                <tr>
                                  <td>Battery State of Charge</td>
                                  <td id="battery_soc_cell">--</td>
                                  <td id="battery_soc_status">--</td>
                                  <td id="battery_soc_time">--</td>
                                </tr>
                                <tr>
                                  <td>PV Power</td>
                                  <td id="pv_power_cell">--</td>
                                  <td id="pv_power_status">--</td>
                                  <td id="pv_power_time">--</td>
                                </tr>
                                <tr>
                                  <td>Load</td>
                                  <td id="load_cell">--</td>
                                  <td id="load_status">--</td>
                                  <td id="load_time">--</td>
                                </tr>
                                <tr>
                                  <td>Grid Voltage</td>
                                  <td id="grid_voltage_cell">--</td>
                                  <td id="grid_voltage_status">--</td>
                                  <td id="grid_voltage_time">--</td>
                                </tr>
                                <tr>
                                  <td>Grid Power</td>
                                  <td id="grid_power_cell">--</td>
                                  <td id="grid_power_status">--</td>
                                  <td id="grid_power_time">--</td>
                                </tr>
                                <tr>
                                  <td>Inverter State</td>
                                  <td id="inverter_state_cell">--</td>
                                  <td id="inverter_state_status">--</td>
                                  <td id="inverter_state_time">--</td>
                                </tr>
                              </tbody>
                            </table>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
              
                  <!-- Recent Setting Changes -->
                  <div class="row">
                    <div class="col-12">
                      <div class="card">
                        <div class="card-header text-white">
                          <h5 class="mb-0"><i class="bi bi-clock-history me-2"></i>Recent Setting Changes</h5>
                        </div>
                        <div class="card-body p-0">
                          <div class="changes-list" id="recentChanges">
                            <div class="text-center p-5">
                              <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                              </div>
                              <p class="mt-3">Loading recent changes...</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
        
        </div>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
          document.addEventListener('DOMContentLoaded', function() {
      // References to DOM elements
      const learnerToggle = document.getElementById('learnerToggle');
      const learnerStatus = document.getElementById('learnerStatus');
      const recentChanges = document.getElementById('recentChanges');
      const refreshBtn = document.getElementById('refreshBtn');
      const lastUpdated = document.getElementById('lastUpdated');
      
      // Initialize gauges
      updateGauge('batterySocGauge', 0, '#2ecc71');
      updateGauge('pvPowerGauge', 0, '#f39c12');
      updateGauge('loadGauge', 0, '#e74c3c');
      
      // Toggle learner mode
      learnerToggle.addEventListener('change', function() {
        toggleLearnerMode(this.checked);
      });
      
      // Refresh data
      refreshBtn.addEventListener('click', function() {
        fetchSystemState();
        fetchRecentChanges();
      });
      
      // Initial data fetch
      fetchSystemState();
      fetchRecentChanges();
      
      // Set up periodic refresh
      setInterval(fetchSystemState, 2000); // Every 2 seconds
      setInterval(fetchRecentChanges, 60000); // Every minute
      
      // Update timestamp
      updateTimestamp();
      setInterval(updateTimestamp, 10000); // Every 10 seconds
      
      // Functions
      function toggleLearnerMode(active) {
        fetch('<%= ingress_path %>/api/learner/toggle', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const status = data.active ? 
              '<span class="text-success">Active</span> - Recording system changes' : 
              '<span class="text-danger">Inactive</span> - Not recording system changes';
            learnerStatus.innerHTML = status;
            
            // Show toast notification
            showToast(data.active ? 'Learner mode activated' : 'Learner mode deactivated');
          } else {
            showToast('Failed to toggle learner mode', 'error');
            learnerToggle.checked = !active; // Revert toggle
          }
        })
        .catch(error => {
          console.error('Error toggling learner mode:', error);
          showToast('Error toggling learner mode', 'error');
          learnerToggle.checked = !active; // Revert toggle
        });
      }
      
      function fetchSystemState() {
        fetch('<%= ingress_path %>/api/system-state')
        .then(response => response.json())
        .then(data => {
          updateSystemState(data.current_state);
          updateTimestamp();
        })
        .catch(error => {
          console.error('Error fetching system state:', error);
        });
      }
      
      function fetchRecentChanges() {
        fetch('<%= ingress_path %>/api/learner/changes?limit=10')
        .then(response => response.json())
        .then(data => {
          updateRecentChanges(data);
        })
        .catch(error => {
          console.error('Error fetching recent changes:', error);
          recentChanges.innerHTML = `
            <div class="alert alert-danger m-3">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              Error loading recent changes. Please try again later.
            </div>
          `;
        });
      }
      
      function updateSystemState(state) {
        // Make sure we have data before proceeding
        if (!state) {
          console.warn('No system state data received');
          return;
        }
        
        // Update dashboard stats
        updateValue('batteryValue', state.battery_soc !== null && state.battery_soc !== undefined ? state.battery_soc.toFixed(1) : '--');
        updateValue('pvValue', state.pv_power !== null && state.pv_power !== undefined ? state.pv_power.toFixed(1) : '--');
        updateValue('loadValue', state.load !== null && state.load !== undefined ? state.load.toFixed(1) : '--');
        updateValue('gridVoltageValue', state.grid_voltage !== null && state.grid_voltage !== undefined ? state.grid_voltage.toFixed(1) : '--');
        
        // Update detailed table
        updateTableCell('battery_soc', state.battery_soc, '%', state.battery_soc < 20 ? 'danger' : state.battery_soc < 50 ? 'warning' : 'success');
        updateTableCell('pv_power', state.pv_power, 'W', state.pv_power < 1000 ? 'warning' : 'success');
        updateTableCell('load', state.load, 'W', state.load > 10000 ? 'danger' : state.load > 5000 ? 'warning' : 'success');
        updateTableCell('grid_voltage', state.grid_voltage, 'V', state.grid_voltage < 220 ? 'danger' : 'success');
        updateTableCell('grid_power', state.grid_power, 'W', state.grid_power > 0 ? 'warning' : 'success');
        updateTableCell('inverter_state', state.inverter_state, '', '');
        
        // Update gauges
        if (state.battery_soc !== null && state.battery_soc !== undefined) {
          updateGauge('batterySocGauge', state.battery_soc / 100, getBatteryColor(state.battery_soc));
          document.getElementById('batterySocValue').textContent = state.battery_soc.toFixed(1);
        }
        
        if (state.pv_power !== null && state.pv_power !== undefined) {
          // Assuming max PV power is 10000W for gauge scaling
          const pvPowerPercentage = Math.min(state.pv_power / 10000, 1);
          updateGauge('pvPowerGauge', pvPowerPercentage, '#f39c12');
          document.getElementById('pvPowerValue').textContent = state.pv_power.toFixed(1);
        }
        
        if (state.load !== null && state.load !== undefined) {
          // Assuming max load is 15000W for gauge scaling
          const loadPercentage = Math.min(state.load / 15000, 1);
          updateGauge('loadGauge', loadPercentage, '#e74c3c');
          document.getElementById('loadValue2').textContent = state.load.toFixed(1);
        }
      }
      
      function updateRecentChanges(changes) {
        if (!changes || changes.length === 0) {
          recentChanges.innerHTML = `
            <div class="alert alert-info m-3">
              <i class="bi bi-info-circle-fill me-2"></i>
              No setting changes have been recorded yet.
            </div>
          `;
          return;
        }
        
        let html = `
          <table class="table table-hover table-striped mb-0">
            <thead class="table-light">
              <tr>
                <th>Time</th>
                <th>Setting</th>
                <th>Change</th>
                <th>System State</th>
              </tr>
            </thead>
            <tbody>
        `;
        
        changes.forEach(change => {
          // Safely format timestamp - handle both string and date object formats
          let formattedDate = 'N/A';
          try {
            // Check if timestamp is already a string
            if (typeof change.time === 'string') {
              formattedDate = new Date(change.time).toLocaleString();
            } else if (change.timestamp) {
              formattedDate = new Date(change.timestamp).toLocaleString();
            } else if (change.time) {
              // Handle InfluxDB format which could be a Date object or timestamp
              formattedDate = new Date(change.time).toLocaleString();
            }
            
            // Validate the date - if invalid, use a fallback
            if (formattedDate.includes('Invalid Date')) {
              // Try parsing ISO formats that might come from InfluxDB
              if (typeof change.time === 'string' && change.time.includes('T')) {
                formattedDate = new Date(change.time).toLocaleString();
              } else {
                formattedDate = 'Unknown Time';
              }
            }
          } catch (error) {
            console.error('Error formatting date:', error);
            formattedDate = 'Unknown Time';
          }
          
          // Extract setting name from topic
          let settingName = 'Unknown Setting';
          if (change.topic && typeof change.topic === 'string') {
            const parts = change.topic.split('/');
            settingName = parts[parts.length - 1].replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          } else if (change.setting) {
            settingName = change.setting.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          }
          
          // Format the old and new values safely
          let oldValue = change.old_value !== undefined ? change.old_value : 'Not recorded';
          let newValue = change.new_value !== undefined ? change.new_value : 'Not recorded';
          
          // If old or new value is undefined or null, display appropriate text
          if (oldValue === null || oldValue === '') {
            oldValue = '<em>Not set</em>';
          }
          
          if (newValue === null || newValue === '') {
            newValue = '<em>Not set</em>';
          }
          
          // Create badge based on change type
          let typeBadge = '';
          const changeType = change.change_type || 'setting';
          
          switch (changeType.toLowerCase()) {
            case 'grid_charge':
              typeBadge = '<span class="badge bg-danger">Grid Charge</span>';
              break;
            case 'energy_pattern':
              typeBadge = '<span class="badge bg-success">Energy Pattern</span>';
              break;
            case 'voltage_point':
              typeBadge = '<span class="badge bg-warning text-dark">Voltage Point</span>';
              break;
            case 'max_discharge_current':
            case 'max_charge_current':
            case 'max_grid_charge_current':
            case 'max_generator_charge_current':
            case 'battery_float_charge_voltage':
            case 'battery_absorption_charge_voltage':
            case 'battery_equalization_charge_voltage':
              typeBadge = '<span class="badge bg-info">Battery Charging</span>';
              break;
            default:
              typeBadge = '<span class="badge bg-secondary">Setting</span>';
          }
          
          // Format system state compact display - handle missing or null data
          let systemState = '';
          let systemStateData = change.system_state || change;
          
          if (systemStateData) {
            // Check for battery SOC
            const batterySoc = systemStateData.battery_soc;
            const pvPower = systemStateData.pv_power;
            const load = systemStateData.load;
            
            systemState = `<small>`;
            
            if (batterySoc !== undefined && batterySoc !== null) {
              systemState += `<span class="badge ${getBatteryBadgeClass(batterySoc)}">SOC: ${parseFloat(batterySoc).toFixed(1)}%</span> `;
            }
            
            if (pvPower !== undefined && pvPower !== null) {
              systemState += `<span class="badge badge-power">PV: ${parseFloat(pvPower).toFixed(1)}W</span> `;
            }
            
            if (load !== undefined && load !== null) {
              systemState += `<span class="badge badge-load">Load: ${parseFloat(load).toFixed(1)}W</span>`;
            }
            
            systemState += `</small>`;
          }
          
          html += `
            <tr>
              <td><small>${formattedDate}</small></td>
              <td>
                ${typeBadge}
                <div class="mt-1"><strong>${settingName}</strong></div>
              </td>
              <td>
                <div class="text-decoration-line-through text-muted">${oldValue}</div>
                <div class="text-success"><i class="bi bi-arrow-right-short"></i> ${newValue}</div>
              </td>
              <td>${systemState}</td>
            </tr>
          `;
        });
        
        html += `
            </tbody>
          </table>
        `;
        
        recentChanges.innerHTML = html;
      }
      
      function updateTimestamp() {
        const now = new Date();
        lastUpdated.textContent = `Updated: ${now.toLocaleTimeString()}`;
      }
      
      function updateValue(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
          // Only add animation if value is different and both are valid
          const currentValue = element.textContent;
          if (currentValue !== value && currentValue !== '--' && value !== '--') {
            element.classList.add('updated-value');
            setTimeout(() => {
              element.classList.remove('updated-value');
            }, 1500);
          }
          element.textContent = value;
        }
      }
      
      function updateTableCell(parameter, value, unit, statusClass) {
        const valueCell = document.getElementById(`${parameter}_cell`);
        const statusCell = document.getElementById(`${parameter}_status`);
        const timeCell = document.getElementById(`${parameter}_time`);
        
        if (valueCell) {
          if (value !== null && value !== undefined) {
            let displayValue;
            
            if (parameter === 'inverter_state') {
              displayValue = value;
            } else {
              // Check if value is a number and can be fixed
              displayValue = typeof value === 'number' ? 
                `${value.toFixed(1)} ${unit}` : `${value} ${unit}`;
            }
            
            // Add animation if value has changed
            if (valueCell.textContent !== displayValue && valueCell.textContent !== '--') {
              valueCell.classList.add('updated-value');
              setTimeout(() => {
                valueCell.classList.remove('updated-value');
              }, 1500);
            }
            
            valueCell.textContent = displayValue;
          } else {
            valueCell.textContent = '--';
          }
        }
        
        if (statusCell) {
          if (value !== null && value !== undefined) {
            let statusHtml = '';
            
            if (parameter === 'inverter_state') {
              statusHtml = `<span class="badge bg-info">${value}</span>`;
            } else if (parameter === 'grid_power') {
              // Special handling for grid power
              if (value > 1000) {
                statusHtml = '<span class="badge bg-danger">High Grid Draw</span>';
              } else if (value > 0) {
                statusHtml = '<span class="badge bg-warning text-dark">Grid Drawing</span>';
              } else if (value < -1000) {
                statusHtml = '<span class="badge bg-success">High Grid Export</span>';
              } else if (value < 0) {
                statusHtml = '<span class="badge bg-info">Grid Export</span>';
              } else {
                statusHtml = '<span class="badge bg-secondary">Neutral</span>';
              }
            } else if (statusClass === 'danger') {
              statusHtml = '<span class="badge bg-danger">Critical</span>';
            } else if (statusClass === 'warning') {
              statusHtml = '<span class="badge bg-warning text-dark">Warning</span>';
            } else if (statusClass === 'success') {
              statusHtml = '<span class="badge bg-success">Good</span>';
            } else {
              statusHtml = '<span class="badge bg-secondary">Unknown</span>';
            }
            
            statusCell.innerHTML = statusHtml;
          } else {
            statusCell.innerHTML = '<span class="badge bg-secondary">Unknown</span>';
          }
        }
        
        if (timeCell) {
          timeCell.textContent = new Date().toLocaleTimeString();
        }
      }
      
      function updateGauge(gaugeId, percentage, color) {
        const gauge = document.getElementById(gaugeId);
        if (gauge) {
          // Ensure percentage is a valid number
          if (isNaN(percentage)) percentage = 0;
          
          // Clamp percentage between 0 and 1
          percentage = Math.max(0, Math.min(1, percentage));
          
          gauge.style.setProperty('--fill-color', color);
          gauge.style.setProperty('--fill-percent', `${percentage * 100}%`);
        }
      }
      
      function getBatteryColor(percentage) {
        if (percentage < 20) return '#e74c3c'; // Red
        if (percentage < 50) return '#f39c12'; // Orange
        return '#2ecc71'; // Green
      }
      
      function getBatteryBadgeClass(percentage) {
        if (percentage < 20) return 'bg-danger';
        if (percentage < 50) return 'bg-warning text-dark';
        return 'bg-success';
      }
      
      function showToast(message, type = 'success') {
        // Create toast container if it doesn't exist
        let toastContainer = document.querySelector('.toast-container');
        
        if (!toastContainer) {
          toastContainer = document.createElement('div');
          toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
          document.body.appendChild(toastContainer);
        }
        
        // Create toast element
        const toastId = `toast-${Date.now()}`;
        const toastEl = document.createElement('div');
        toastEl.className = `toast ${type === 'error' ? 'bg-danger text-white' : 'bg-success text-white'}`;
        toastEl.setAttribute('role', 'alert');
        toastEl.setAttribute('aria-live', 'assertive');
        toastEl.setAttribute('aria-atomic', 'true');
        toastEl.setAttribute('id', toastId);
        
        toastEl.innerHTML = `
          <div class="toast-header ${type === 'error' ? 'bg-danger text-white' : 'bg-success text-white'}">
            <strong class="me-auto">
              <i class="bi ${type === 'error' ? 'bi-exclamation-triangle-fill' : 'bi-check-circle-fill'} me-2"></i>
              Energy System
            </strong>
            <small>just now</small>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
          <div class="toast-body">
            ${message}
          </div>
        `;
        
        toastContainer.appendChild(toastEl);
        
        // Initialize and show the toast
        const toast = new bootstrap.Toast(toastEl, { autohide: true, delay: 3000 });
        toast.show();
        
        // Remove toast after it's hidden
        toastEl.addEventListener('hidden.bs.toast', function() {
          toastEl.remove();
        });
      }
      
      function exportData() {
        fetch('<%= ingress_path %>/api/learner/changes')
          .then(response => response.json())
          .then(data => {
            // Convert data to CSV or JSON
            const json = JSON.stringify(data, null, 2);
            const blob = new Blob([json], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            // Create and trigger download
            const a = document.createElement('a');
            a.href = url;
            a.download = `energy_system_learner_data_${new Date().toISOString().slice(0, 10)}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showToast('Data exported successfully');
          })
          .catch(error => {
            console.error('Error exporting data:', error);
            showToast('Error exporting data', 'error');
          });
      }
    });
         </script>

<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>

</body>
</html>
