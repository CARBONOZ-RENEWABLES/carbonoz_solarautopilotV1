<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

</head>
<body>
      <!-- Add hamburger menu button -->
      <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>

          <%- include('partials/sidebar') %>
          <div class="main-content">
            <div class="container">
              <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                <a class="nav-link  text-nowrap" href="<%= ingress_path %>/learner">
                    <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/grid-charge">
                    <i class="fas fa-plug me-1" style="color: #007BFF;"></i>Grid Charge
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/energy-pattern">
                    <i class="fas fa-battery-three-quarters me-1" style="color: #28A745;"></i>Energy Pattern
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/voltage-point">
                    <i class="fas fa-bolt me-1" style="color: #DC3545;"></i>Voltage Points
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/work-mode">
                    <i class="fas fa-cogs me-1" style="color: #FFC107;"></i>Work Mode
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/battery-charging">
                    <i class="fas fa-charging-station me-1" style="color: #17A2B8;"></i>Battery Charging
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rules">
                    <i class="fas fa-tasks me-1" style="color: #6610F2;"></i>Rules
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/wizard">
                    <i class="fas fa-magic me-1" style="color: #20c997;"></i>Rule Wizard
                </a>
                <a class="nav-link text-nowrap" href="<%= ingress_path %>/rule-history">
                    <i class="fas fa-history me-1" style="color: #6f42c1;"></i>Rule History
                </a>
            </div>
                  <br>
              
                  <!-- Learner Mode Control Panel -->
                  <div class="row mb-4">
                    <div class="col-md-12">
                      <div class="card">
                        <div class="card-header text-white">
                          <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0"><i class="bi bi-toggles me-2"></i>Learner Mode Control</h5>
                            <button id="refreshBtn" class="btn btn-sm btn-light refresh-btn">
                              <i class="bi bi-arrow-clockwise me-1"></i>Refresh Data
                            </button>
                          </div>
                        </div>
                        <div class="card-body">
                          <div class="row align-items-center">
                            <div class="col-md-4">
                              <div class="d-flex align-items-center">
                                <label class="learner-switch me-3">
                                  <input type="checkbox" id="learnerToggle" <%= active ? 'checked' : '' %>>
                                  <span class="slider"></span>
                                </label>
                                <div>
                                  <h5 class="mb-0">Learner Mode</h5>
                                  <p class="mb-0 text-muted" id="learnerStatus">
                                    <% if (active) { %>
                                      <span class="text-success">Active</span> - Recording system changes
                                    <% } else { %>
                                      <span class="text-danger">Inactive</span> - Not recording system changes
                                    <% } %>
                                  </p>
                                </div>
                              </div>
                            </div>
                            <div class="col-md-8 text-center">
                              <div class="d-flex flex-column align-items-center">
                                <h5>Recorded Changes</h5>
                                <span class="badge bg-primary fs-5 p-2"><%= changes_count %></span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
              
                  <!-- System State Dashboard -->
                  <div class="row mb-4">
                    <div class="col-md-12">
                      <div class="card system-state-card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                          <h5 class="mb-0"><i class="bi bi-activity me-2"></i>Current System State</h5>
                          <span id="lastUpdated" class="badge bg-dark"></span>
                        </div>
                        <div class="card-body p-0">
                          <!-- System Stats Dashboard -->
                          <div class="dashboard-stats p-3">
                            <div class="stat-card stat-battery">
                              <div class="stat-icon">
                                <i class="bi bi-battery-full"></i>
                              </div>
                              <div>
                                <div class="stat-value" id="batteryValue">--</div>
                                <div class="stat-label">Battery SOC (%)</div>
                              </div>
                            </div>
                            
                            <div class="stat-card stat-pv">
                              <div class="stat-icon">
                                <i class="bi bi-sun"></i>
                              </div>
                              <div>
                                <div class="stat-value" id="pvValue">--</div>
                                <div class="stat-label">PV Power (W)</div>
                              </div>
                            </div>
                            
                            <div class="stat-card stat-load">
                              <div class="stat-icon">
                                <i class="bi bi-lightning"></i>
                              </div>
                              <div>
                                <div class="stat-value" id="loadValue">--</div>
                                <div class="stat-label">Load (W)</div>
                              </div>
                            </div>
                            
                            <div class="stat-card stat-grid">
                              <div class="stat-icon">
                                <i class="bi bi-plug"></i>
                              </div>
                              <div>
                                <div class="stat-value" id="gridVoltageValue">--</div>
                                <div class="stat-label">Grid Voltage (V)</div>
                              </div>
                            </div>
                          </div>
                          
                          <!-- Gauges for visual representation -->
                          <div class="system-state-gauges">
                            <div class="gauge-container">
                              <div class="gauge">
                                <div class="gauge-fill" id="batterySocGauge"></div>
                                <div class="gauge-value" id="batterySocValue">--</div>
                              </div>
                              <div class="gauge-label">Battery SOC (%)</div>
                            </div>
                            
                            <div class="gauge-container">
                              <div class="gauge">
                                <div class="gauge-fill" id="pvPowerGauge"></div>
                                <div class="gauge-value" id="pvPowerValue">--</div>
                              </div>
                              <div class="gauge-label">PV Power (W)</div>
                            </div>
                            
                            <div class="gauge-container">
                              <div class="gauge">
                                <div class="gauge-fill" id="loadGauge"></div>
                                <div class="gauge-value" id="loadValue2">--</div>
                              </div>
                              <div class="gauge-label">Load (W)</div>
                            </div>
                          </div>
                          
                          <!-- Detailed System State Table -->
                          <div class="table-responsive">
                            <table class="table table-hover mb-0" id="systemStateTable">
                              <thead>
                                <tr>
                                  <th>Parameter</th>
                                  <th>Value</th>
                                  <th>Status</th>
                                  <th>Last Change</th>
                                </tr>
                              </thead>
                              <tbody>
                                <tr>
                                  <td>Battery State of Charge</td>
                                  <td id="battery_soc_cell">--</td>
                                  <td id="battery_soc_status">--</td>
                                  <td id="battery_soc_time">--</td>
                                </tr>
                                <tr>
                                  <td>PV Power</td>
                                  <td id="pv_power_cell">--</td>
                                  <td id="pv_power_status">--</td>
                                  <td id="pv_power_time">--</td>
                                </tr>
                                <tr>
                                  <td>Load</td>
                                  <td id="load_cell">--</td>
                                  <td id="load_status">--</td>
                                  <td id="load_time">--</td>
                                </tr>
                                <tr>
                                  <td>Grid Voltage</td>
                                  <td id="grid_voltage_cell">--</td>
                                  <td id="grid_voltage_status">--</td>
                                  <td id="grid_voltage_time">--</td>
                                </tr>
                                <tr>
                                  <td>Grid Power</td>
                                  <td id="grid_power_cell">--</td>
                                  <td id="grid_power_status">--</td>
                                  <td id="grid_power_time">--</td>
                                </tr>
                                <tr>
                                  <td>Inverter State</td>
                                  <td id="inverter_state_cell">--</td>
                                  <td id="inverter_state_status">--</td>
                                  <td id="inverter_state_time">--</td>
                                </tr>
                              </tbody>
                            </table>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
              
                  <!-- Recent Setting Changes -->
                  <div class="row">
                    <div class="col-12">
                      <div class="card">
                        <div class="card-header text-white">
                          <h5 class="mb-0"><i class="bi bi-clock-history me-2"></i>Recent Setting Changes</h5>
                        </div>
                        <div class="card-body p-0">
                          <div class="changes-list" id="recentChanges">
                            <div class="text-center p-5">
                              <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                              </div>
                              <p class="mt-3">Loading recent changes...</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
        
        </div>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
          document.addEventListener('DOMContentLoaded', function() {
      // References to DOM elements
      const learnerToggle = document.getElementById('learnerToggle');
      const learnerStatus = document.getElementById('learnerStatus');
      const recentChanges = document.getElementById('recentChanges');
      const refreshBtn = document.getElementById('refreshBtn');
      const lastUpdated = document.getElementById('lastUpdated');
      
      // Initialize gauges
      updateGauge('batterySocGauge', 0, '#2ecc71');
      updateGauge('pvPowerGauge', 0, '#f39c12');
      updateGauge('loadGauge', 0, '#e74c3c');
      
      // Toggle learner mode
      learnerToggle.addEventListener('change', function() {
        toggleLearnerMode(this.checked);
      });
      
      // Refresh data
      refreshBtn.addEventListener('click', function() {
        fetchSystemState();
        fetchRecentChanges();
      });
      
      // Initial data fetch
      fetchSystemState();
      fetchRecentChanges();
      
      // Set up periodic refresh
      setInterval(fetchSystemState, 2000); // Every 2 seconds
      setInterval(fetchRecentChanges, 60000); // Every minute
      
      // Update timestamp
      updateTimestamp();
      setInterval(updateTimestamp, 10000); // Every 10 seconds
      
      // Functions
      function toggleLearnerMode(active) {
        fetch('<%= ingress_path %>/api/learner/toggle', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const status = data.active ? 
              '<span class="text-success">Active</span> - Recording system changes' : 
              '<span class="text-danger">Inactive</span> - Not recording system changes';
            learnerStatus.innerHTML = status;
            
            // Show toast notification
            showToast(data.active ? 'Learner mode activated' : 'Learner mode deactivated');
          } else {
            showToast('Failed to toggle learner mode', 'error');
            learnerToggle.checked = !active; // Revert toggle
          }
        })
        .catch(error => {
          console.error('Error toggling learner mode:', error);
          showToast('Error toggling learner mode', 'error');
          learnerToggle.checked = !active; // Revert toggle
        });
      }
      
      function fetchSystemState() {
        fetch('<%= ingress_path %>/api/system-state')
        .then(response => response.json())
        .then(data => {
          updateSystemState(data.current_state);
          updateTimestamp();
        })
        .catch(error => {
          console.error('Error fetching system state:', error);
        });
      }
      
      function fetchRecentChanges() {
        fetch('<%= ingress_path %>/api/learner/changes?limit=10')
        .then(response => response.json())
        .then(data => {
          updateRecentChanges(data);
        })
        .catch(error => {
          console.error('Error fetching recent changes:', error);
          recentChanges.innerHTML = `
            <div class="alert alert-danger m-3">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              Error loading recent changes. Please try again later.
            </div>
          `;
        });
      }
      
      function updateSystemState(state) {
        // Make sure we have data before proceeding
        if (!state) {
          console.warn('No system state data received');
          return;
        }
        
        // Update dashboard stats
        updateValue('batteryValue', state.battery_soc !== null && state.battery_soc !== undefined ? state.battery_soc.toFixed(1) : '--');
        updateValue('pvValue', state.pv_power !== null && state.pv_power !== undefined ? state.pv_power.toFixed(1) : '--');
        updateValue('loadValue', state.load !== null && state.load !== undefined ? state.load.toFixed(1) : '--');
        updateValue('gridVoltageValue', state.grid_voltage !== null && state.grid_voltage !== undefined ? state.grid_voltage.toFixed(1) : '--');
        
        // Update detailed table
        updateTableCell('battery_soc', state.battery_soc, '%', state.battery_soc < 20 ? 'danger' : state.battery_soc < 50 ? 'warning' : 'success');
        updateTableCell('pv_power', state.pv_power, 'W', state.pv_power < 1000 ? 'warning' : 'success');
        updateTableCell('load', state.load, 'W', state.load > 10000 ? 'danger' : state.load > 5000 ? 'warning' : 'success');
        updateTableCell('grid_voltage', state.grid_voltage, 'V', state.grid_voltage < 220 ? 'danger' : 'success');
        updateTableCell('grid_power', state.grid_power, 'W', state.grid_power > 0 ? 'warning' : 'success');
        updateTableCell('inverter_state', state.inverter_state, '', '');
        
        // Update gauges
        if (state.battery_soc !== null && state.battery_soc !== undefined) {
          updateGauge('batterySocGauge', state.battery_soc / 100, getBatteryColor(state.battery_soc));
          document.getElementById('batterySocValue').textContent = state.battery_soc.toFixed(1);
        }
        
        if (state.pv_power !== null && state.pv_power !== undefined) {
          // Assuming max PV power is 10000W for gauge scaling
          const pvPowerPercentage = Math.min(state.pv_power / 10000, 1);
          updateGauge('pvPowerGauge', pvPowerPercentage, '#f39c12');
          document.getElementById('pvPowerValue').textContent = state.pv_power.toFixed(1);
        }
        
        if (state.load !== null && state.load !== undefined) {
          // Assuming max load is 15000W for gauge scaling
          const loadPercentage = Math.min(state.load / 15000, 1);
          updateGauge('loadGauge', loadPercentage, '#e74c3c');
          document.getElementById('loadValue2').textContent = state.load.toFixed(1);
        }
      }
      
      function updateRecentChanges(changes) {
        if (!changes || changes.length === 0) {
          recentChanges.innerHTML = `
            <div class="alert alert-info m-3">
              <i class="bi bi-info-circle-fill me-2"></i>
              No setting changes have been recorded yet.
            </div>
          `;
          return;
        }
        
        let html = `
          <table class="table table-hover table-striped mb-0">
            <thead class="table-light">
              <tr>
                <th>Time</th>
                <th>Setting</th>
                <th>Change</th>
                <th>System State</th>
              </tr>
            </thead>
            <tbody>
        `;
        
        changes.forEach(change => {
          // Safely format timestamp - handle both string and date object formats
          let formattedDate = 'N/A';
          try {
            // Check if timestamp is already a string
            if (typeof change.time === 'string') {
              formattedDate = new Date(change.time).toLocaleString();
            } else if (change.timestamp) {
              formattedDate = new Date(change.timestamp).toLocaleString();
            } else if (change.time) {
              // Handle InfluxDB format which could be a Date object or timestamp
              formattedDate = new Date(change.time).toLocaleString();
            }
            
            // Validate the date - if invalid, use a fallback
            if (formattedDate.includes('Invalid Date')) {
              // Try parsing ISO formats that might come from InfluxDB
              if (typeof change.time === 'string' && change.time.includes('T')) {
                formattedDate = new Date(change.time).toLocaleString();
              } else {
                formattedDate = 'Unknown Time';
              }
            }
          } catch (error) {
            console.error('Error formatting date:', error);
            formattedDate = 'Unknown Time';
          }
          
          // Extract setting name from topic
          let settingName = 'Unknown Setting';
          if (change.topic && typeof change.topic === 'string') {
            const parts = change.topic.split('/');
            settingName = parts[parts.length - 1].replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          } else if (change.setting) {
            settingName = change.setting.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          }
          
          // Format the old and new values safely
          let oldValue = change.old_value !== undefined ? change.old_value : 'Not recorded';
          let newValue = change.new_value !== undefined ? change.new_value : 'Not recorded';
          
          // If old or new value is undefined or null, display appropriate text
          if (oldValue === null || oldValue === '') {
            oldValue = '<em>Not set</em>';
          }
          
          if (newValue === null || newValue === '') {
            newValue = '<em>Not set</em>';
          }
          
          // Create badge based on change type
          let typeBadge = '';
          const changeType = change.change_type || 'setting';
          
          switch (changeType.toLowerCase()) {
            case 'grid_charge':
              typeBadge = '<span class="badge bg-danger">Grid Charge</span>';
              break;
            case 'energy_pattern':
              typeBadge = '<span class="badge bg-success">Energy Pattern</span>';
              break;
            case 'voltage_point':
              typeBadge = '<span class="badge bg-warning text-dark">Voltage Point</span>';
              break;
            case 'max_discharge_current':
            case 'max_charge_current':
            case 'max_grid_charge_current':
            case 'max_generator_charge_current':
            case 'battery_float_charge_voltage':
            case 'battery_absorption_charge_voltage':
            case 'battery_equalization_charge_voltage':
              typeBadge = '<span class="badge bg-info">Battery Charging</span>';
              break;
            default:
              typeBadge = '<span class="badge bg-secondary">Setting</span>';
          }
          
          // Format system state compact display - handle missing or null data
          let systemState = '';
          let systemStateData = change.system_state || change;
          
          if (systemStateData) {
            // Check for battery SOC
            const batterySoc = systemStateData.battery_soc;
            const pvPower = systemStateData.pv_power;
            const load = systemStateData.load;
            
            systemState = `<small>`;
            
            if (batterySoc !== undefined && batterySoc !== null) {
              systemState += `<span class="badge ${getBatteryBadgeClass(batterySoc)}">SOC: ${parseFloat(batterySoc).toFixed(1)}%</span> `;
            }
            
            if (pvPower !== undefined && pvPower !== null) {
              systemState += `<span class="badge badge-power">PV: ${parseFloat(pvPower).toFixed(1)}W</span> `;
            }
            
            if (load !== undefined && load !== null) {
              systemState += `<span class="badge badge-load">Load: ${parseFloat(load).toFixed(1)}W</span>`;
            }
            
            systemState += `</small>`;
          }
          
          html += `
            <tr>
              <td><small>${formattedDate}</small></td>
              <td>
                ${typeBadge}
                <div class="mt-1"><strong>${settingName}</strong></div>
              </td>
              <td>
                <div class="text-decoration-line-through text-muted">${oldValue}</div>
                <div class="text-success"><i class="bi bi-arrow-right-short"></i> ${newValue}</div>
              </td>
              <td>${systemState}</td>
            </tr>
          `;
        });
        
        html += `
            </tbody>
          </table>
        `;
        
        recentChanges.innerHTML = html;
      }
      
      function updateTimestamp() {
        const now = new Date();
        lastUpdated.textContent = `Updated: ${now.toLocaleTimeString()}`;
      }
      
      function updateValue(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
          // Only add animation if value is different and both are valid
          const currentValue = element.textContent;
          if (currentValue !== value && currentValue !== '--' && value !== '--') {
            element.classList.add('updated-value');
            setTimeout(() => {
              element.classList.remove('updated-value');
            }, 1500);
          }
          element.textContent = value;
        }
      }
      
      function updateTableCell(parameter, value, unit, statusClass) {
        const valueCell = document.getElementById(`${parameter}_cell`);
        const statusCell = document.getElementById(`${parameter}_status`);
        const timeCell = document.getElementById(`${parameter}_time`);
        
        if (valueCell) {
          if (value !== null && value !== undefined) {
            let displayValue;
            
            if (parameter === 'inverter_state') {
              displayValue = value;
            } else {
              // Check if value is a number and can be fixed
              displayValue = typeof value === 'number' ? 
                `${value.toFixed(1)} ${unit}` : `${value} ${unit}`;
            }
            
            // Add animation if value has changed
            if (valueCell.textContent !== displayValue && valueCell.textContent !== '--') {
              valueCell.classList.add('updated-value');
              setTimeout(() => {
                valueCell.classList.remove('updated-value');
              }, 1500);
            }
            
            valueCell.textContent = displayValue;
          } else {
            valueCell.textContent = '--';
          }
        }
        
        if (statusCell) {
          if (value !== null && value !== undefined) {
            let statusHtml = '';
            
            if (parameter === 'inverter_state') {
              statusHtml = `<span class="badge bg-info">${value}</span>`;
            } else if (parameter === 'grid_power') {
              // Special handling for grid power
              if (value > 1000) {
                statusHtml = '<span class="badge bg-danger">High Grid Draw</span>';
              } else if (value > 0) {
                statusHtml = '<span class="badge bg-warning text-dark">Grid Drawing</span>';
              } else if (value < -1000) {
                statusHtml = '<span class="badge bg-success">High Grid Export</span>';
              } else if (value < 0) {
                statusHtml = '<span class="badge bg-info">Grid Export</span>';
              } else {
                statusHtml = '<span class="badge bg-secondary">Neutral</span>';
              }
            } else if (statusClass === 'danger') {
              statusHtml = '<span class="badge bg-danger">Critical</span>';
            } else if (statusClass === 'warning') {
              statusHtml = '<span class="badge bg-warning text-dark">Warning</span>';
            } else if (statusClass === 'success') {
              statusHtml = '<span class="badge bg-success">Good</span>';
            } else {
              statusHtml = '<span class="badge bg-secondary">Unknown</span>';
            }
            
            statusCell.innerHTML = statusHtml;
          } else {
            statusCell.innerHTML = '<span class="badge bg-secondary">Unknown</span>';
          }
        }
        
        if (timeCell) {
          timeCell.textContent = new Date().toLocaleTimeString();
        }
      }
      
      function updateGauge(gaugeId, percentage, color) {
        const gauge = document.getElementById(gaugeId);
        if (gauge) {
          // Ensure percentage is a valid number
          if (isNaN(percentage)) percentage = 0;
          
          // Clamp percentage between 0 and 1
          percentage = Math.max(0, Math.min(1, percentage));
          
          gauge.style.setProperty('--fill-color', color);
          gauge.style.setProperty('--fill-percent', `${percentage * 100}%`);
        }
      }
      
      function getBatteryColor(percentage) {
        if (percentage < 20) return '#e74c3c'; // Red
        if (percentage < 50) return '#f39c12'; // Orange
        return '#2ecc71'; // Green
      }
      
      function getBatteryBadgeClass(percentage) {
        if (percentage < 20) return 'bg-danger';
        if (percentage < 50) return 'bg-warning text-dark';
        return 'bg-success';
      }
      
      function showToast(message, type = 'success') {
        // Create toast container if it doesn't exist
        let toastContainer = document.querySelector('.toast-container');
        
        if (!toastContainer) {
          toastContainer = document.createElement('div');
          toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
          document.body.appendChild(toastContainer);
        }
        
        // Create toast element
        const toastId = `toast-${Date.now()}`;
        const toastEl = document.createElement('div');
        toastEl.className = `toast ${type === 'error' ? 'bg-danger text-white' : 'bg-success text-white'}`;
        toastEl.setAttribute('role', 'alert');
        toastEl.setAttribute('aria-live', 'assertive');
        toastEl.setAttribute('aria-atomic', 'true');
        toastEl.setAttribute('id', toastId);
        
        toastEl.innerHTML = `
          <div class="toast-header ${type === 'error' ? 'bg-danger text-white' : 'bg-success text-white'}">
            <strong class="me-auto">
              <i class="bi ${type === 'error' ? 'bi-exclamation-triangle-fill' : 'bi-check-circle-fill'} me-2"></i>
              Energy System
            </strong>
            <small>just now</small>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
          <div class="toast-body">
            ${message}
          </div>
        `;
        
        toastContainer.appendChild(toastEl);
        
        // Initialize and show the toast
        const toast = new bootstrap.Toast(toastEl, { autohide: true, delay: 3000 });
        toast.show();
        
        // Remove toast after it's hidden
        toastEl.addEventListener('hidden.bs.toast', function() {
          toastEl.remove();
        });
      }
      
      function exportData() {
        fetch('<%= ingress_path %>/api/learner/changes')
          .then(response => response.json())
          .then(data => {
            // Convert data to CSV or JSON
            const json = JSON.stringify(data, null, 2);
            const blob = new Blob([json], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            // Create and trigger download
            const a = document.createElement('a');
            a.href = url;
            a.download = `energy_system_learner_data_${new Date().toISOString().slice(0, 10)}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showToast('Data exported successfully');
          })
          .catch(error => {
            console.error('Error exporting data:', error);
            showToast('Error exporting data', 'error');
          });
      }
    });
         </script>

<script src="<%= ingress_path %>/js/loading.js"></script>
<script src="<%= ingress_path %>/js/dark-mode.js"></script>
<script src="<%= ingress_path %>/js/mobile.js"></script>

</body>
</html>
