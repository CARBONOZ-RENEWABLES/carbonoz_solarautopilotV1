<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot - Notifications</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
  
        body {
          font-family: 'Inter', sans-serif;
          background: var(--bg-color);
        }
        :root {
            --primary-color: #DEAF0B;
            --bg-color: #f5f6fa;
            --text-color: #2f3640;
            --icon-color: #636e72;
            --green: #4CAF50;
            --red: #F44336;
            --blue: #2196F3;
            --amber: #FFC107;
            --gray: #757575;
            --primary: #DEAF0B;
                    --primary-dark: #DEAF0B;
                    --secondary: #2ecc71;
                    --secondary-dark: #27ae60;
                    --warning: #f39c12;
                    --danger: #e74c3c;
                    --light: #ecf0f1;
                    --dark: #34495e;
                    --background: #f8f9fa;
                    --card: #ffffff;
                    --text: #2c3e50;
                    --border: #dfe4ea;
                    --success: #2ecc71;
           }
           
           body, html {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100%;
            
           }
            /* Sidebar styles */
            .sidebar {
                width: 280px;
                height: 100vh;
                background-color: white;
                border-right: 1px solid #e5e7eb;
                display: flex;
                flex-direction: column;
                position: fixed;
                top: 0;
                left: 0;
                z-index: 1000;
                transition: width 0.3s ease;
            }
           
                   .logo-container {
                       padding: 1.5rem;
                       border-bottom: 1px solid #e5e7eb;
                       display: flex;
                       align-items: center;
                       gap: 0.75rem;
                   }
           
                   .logo-icon {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-weight: bold;
            font-size: 20px;
           }
           
           .logo-text {
            margin-left: 10px;
            font-weight: bold;
            color: var(--text-color);
            font-size: 18px;
           }
           
           .logo-text .highlight {
            color: var(--primary-color);
            margin-left: 10px;
           }
           
           
           nav {
            flex-grow: 1;
           }
           
           nav ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
           }
           nav li {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            color: var(--text-color);
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 18px;
           }
           
           nav li a{
            text-decoration: none;
            color: #2f3640;
            font-weight: bold;
           }
           nav li:hover {
            background-color: var(--bg-color);
           }
           
           nav li i {
            margin-right: 15px;
            color: var(--icon-color);
            font-size: 24px;
           }
           
           .bottom-options {
            padding: 20px;
            border-top: 1px solid #dcdde1;
           }
           
           .toggle-sidebar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            font-size: 16px;
           }
           
           .toggle-text {
            margin-right: 10px;
           }
           
           .toggle-switch {
            width: 50px;
            height: 25px;
            background-color: #dcdde1;
            border-radius: 12.5px;
            position: relative;
            transition: background-color 0.3s;
           }
           .toggle-switch::before {
            content: '';
            position: absolute;
            width: 21px;
            height: 21px;
            border-radius: 50%;
            background-color: white;
            top: 2px;
            left: 2px;
            transition: transform 0.3s;
           }
           
           .toggle-switch.active {
            background-color: var(--primary-color);
           }
           
           .toggle-switch.active::before {
            transform: translateX(25px);
           }
           
           .sidebar.collapsed .logo-text,
           .sidebar.collapsed .search,
           .sidebar.collapsed nav li span,
           .sidebar.collapsed .toggle-text {
            display: none;
           }
           
           .sidebar.collapsed .logo {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li {
            justify-content: center;
           }
           
           .sidebar.collapsed nav li i {
            margin-right: 0;
           }
                   /* Main content styles */
                   .main-content {
                       flex: 1;
                       margin-left: 280px;
                       padding: 2rem;
                   }
           
                   .content-header {
                       margin-bottom: 2rem;
                   }
           
                   .content-header h2 {
                       font-size: 1.875rem;
                       font-weight: 700;
                       color: #111827;
                   }
           
                   .metrics-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                       gap: 1.5rem;
                       margin-bottom: 2rem;
                   }
           
                   .metric-card {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .metric-title {
                       font-size: 0.875rem;
                       font-weight: 600;
                       color: #4b5563;
                       margin-bottom: 0.5rem;
                   }
           
                   .metric-value {
                       font-size: 1.5rem;
                       font-weight: 700;
                       margin-bottom: 0.25rem;
                   }
           
                   .metric-subtitle {
                       font-size: 0.875rem;
                       color: #6b7280;
                   }
           
                   .chart-container {
                       background: white;
                       border-radius: 12px;
                       padding: 1.5rem;
                       margin-bottom: 2rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .chart-wrapper {
                       height: 400px;
                       margin-top: 1rem;
                   }
           
                   .period-buttons {
                       display: flex;
                       gap: 0.75rem;
                       margin-bottom: 1rem;
                   }
           
                   .period-btn {
                       padding: 0.5rem 1rem;
                       border: none;
                       background-color: #e5e7eb;
                       color: #4b5563;
                       border-radius: 6px;
                       cursor: pointer;
                       font-weight: 500;
                       transition: all 0.2s;
                   }
           
                   .period-btn:hover {
                       background-color: #d1d5db;
                   }
           
                   .period-btn.active {
                       background-color: #DEAF0B;
                       color: white;
                   }
           
                   /* Toggle styles */
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .slider {
                       position: absolute;
                       cursor: pointer;
                       top: 0;
                       left: 0;
                       right: 0;
                       bottom: 0;
                       background-color: #e5e7eb;
                       transition: .4s;
                       border-radius: 34px;
                   }
           
                   .slider:before {
                       position: absolute;
                       content: "";
                       height: 16px;
                       width: 16px;
                       left: 4px;
                       bottom: 4px;
                       background-color: white;
                       transition: .4s;
                       border-radius: 50%;
                   }
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   /* Updated and new styles */
                   .bottom-controls {
                       padding: 1.5rem;
                       border-top: 1px solid #e5e7eb;
                   }
           
                   .control-item {
                       display: flex;
                       justify-content: space-between;
                       align-items: center;
                       margin-bottom: 1rem;
                   }
           
                   .control-label {
                       font-size: 0.875rem;
                       color: #4b5563;
                   }
           
                   .toggle {
                       position: relative;
                       display: inline-block;
                       width: 44px;
                       height: 24px;
                   }
           
                   .toggle input {
                       opacity: 0;
                       width: 0;
                       height: 0;
                   }
           
                   .sidebar {
            width: 280px;
            background-color: white;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            transition: width 0.3s ease;
            z-index: 10;
           }
           
           .sidebar.collapsed {
            width: 80px;
           }
           
           .logo {
            display: flex;
            align-items: center;
            padding: 20px;
           }
           
           
                   input:checked + .slider {
                       background-color: #DEAF0B;
                   }
           
                   input:checked + .slider:before {
                       transform: translateX(20px);
                   }
           
                   .total-emissions {
                       font-size: 1.25rem;
                       font-weight: 600;
                       margin-bottom: 1rem;
                       color: #374151;
                   }
           
                   .summary-grid {
                       display: grid;
                       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                       gap: 1rem;
                       margin-bottom: 2rem;
                   }
           
                   .summary-item {
                       background-color: white;
                       border-radius: 8px;
                       padding: 1rem;
                       box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                   }
           
                   .summary-label {
                       font-size: 0.875rem;
                       color: #6b7280;
                       display: block;
                       margin-bottom: 0.5rem;
                   }
           
                   .summary-value {
                       font-size: 1.25rem;
                       font-weight: 600;
                   }
           
               
           
                   /* Responsive styles */
                   @media (max-width: 768px) {
                       .sidebar {
                           width: 100%;
                           height: auto;
                           position: static;
                           border-right: none;
                           border-bottom: 1px solid #e5e7eb;
                       }
           
                       .main-content {
                           margin-left: 0;
                       }
           
                       body.collapsed-sidebar .sidebar {
                           display: none;
                       }
           
                       body.collapsed-sidebar .main-content {
                           margin-left: 0;
                       }
           
                       .metrics-grid,
                       .summary-grid {
                           grid-template-columns: 1fr;
                       }
           
                       .period-buttons {
                           flex-wrap: wrap;
                       }
           
                       .period-btn {
                           flex: 1 0 calc(50% - 0.375rem);
                           margin-bottom: 0.75rem;
                       }
                   }
        
        /* loading css */
        
        .loading-overlay {
         position: fixed;
         top: 0;
         left: 0;
         width: 100%;
         height: 100%;
         background-color: #f8f9fa;
         display: flex;
         justify-content: center;
         align-items: center;
         z-index: 9999;
        }
        
        .loading-spinner {
         width: 50px;
         height: 50px;
         border: 5px solid #e0e0e0;
         border-top: 5px solid #3498db;
         border-radius: 50%;
         animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
         0% { transform: rotate(0deg); }
         100% { transform: rotate(360deg); }
        }
        
        .dashboard-column {
        flex-basis: calc(33.33333% - 2px);
        margin-right: 2px;
        margin-bottom: 2px;
        }
        
        @media only screen and (max-width: 128em) {
        .dashboard-column {
         flex-basis: calc(50% - 2px);
        }
        }
        
        @media only screen and (max-width: 62em) {
        .dashboard-column {
         flex-basis: calc(100% - 2px);
        }
        }
        
        .dashboard-column .card {
        border: 0;
        }
        
        .dashboard-column .card .iframe-moving {
        display: block;
        height: 100%;
        min-height: 33em;
        position: relative;
        width: 100%;
        }
        
        @media only screen and (max-width: 46em) {
        .dashboard-column .card .iframe-moving {
         min-height: 107em;
        }
        }
        .dashboard-column .card .iframe-overview {
        display: block;
        height: 100%;
        min-height: 22em;
        width: 100%;
        }
        
        @media only screen and (max-width: 46em) {
        .dashboard-column .card .iframe-overview {
         min-height: 18em;
        }
        }
        
        .dashboard-column .card .iframe-battery-power {
        display: block;
        height: 60%;
        min-height: 18em;
        width: 100%;
        }
        
        @media only screen and (max-width: 46em) {
        .dashboard-column .card .iframe-battery-power {
         min-height: 15em;
        }
        }
        
        .dashboard-column .card .iframe-battery-soc {
        display: block;
        height: 40%;
        min-height: 14em;
        width: 100%;
        }
        
        @media only screen and (max-width: 46em) {
        .dashboard-column .card .iframe-battery-soc {
         min-height: 12em;
        }
        }
        
        /* Dark mode styles */
        body.dark-mode {
            background-color: rgba(24, 27, 31, 1);
         color: #f5f6fa;
        }
        
        .dark-mode .main-content{
            background-color: rgba(24, 27, 31, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .sidebar {
            background-color: rgba(24, 27, 31, 1);
        }
        
        .dark-mode .sidebar .logo-icon {
         color: #2f3640;
        }
        
        .dark-mode .sidebar .logo-text {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li:hover {
         background-color: #383838;
        }
        
        .dark-mode .sidebar nav li a {
         color: #f5f6fa;
        }
        
        .dark-mode .sidebar nav li i {
         color: #dcdde1;
        }
        
        .dark-mode .toggle-sidebar,
        .dark-mode .toggle-dark-mode {
         color: #f5f6fa;
        }
        
        .dark-mode .toggle-switch {
            background-color: var(--primary-color);
        }
        
        .dark-mode .toggle-switch.active {
         background-color: var(--primary-color);
        }
        
        .dark-mode header {
            background-color: rgb(17, 18, 23);
        }
        
        .dark-mode .content-card {
            background-color: rgba(24, 27, 31, 1);
         color: #fff;
        }
        
        
        .dark-mode .loading-overlay{
            background-color: rgba(24, 27, 31, 1);
        }
        
        /* Mobile Sidebar Improvements */
        @media (max-width: 768px) {
            /* Sidebar base styles */
            .sidebar {
                position: fixed;
                top: 0;
                left: 0;
                height: 100vh;
                width: 280px;
                transform: translateX(-100%);
                transition: transform 0.3s ease-in-out;
                z-index: 1000;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
                box-shadow: none;
            }
        
            .sidebar.active {
                transform: translateX(0);
                box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
            }
        
            /* Improved hamburger button */
            .mobile-toggle {
                display: block;
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 1001;
                background: none;
                border: none;
                cursor: pointer;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background-color: white;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                padding: 8px;
            }
        
            .mobile-toggle span {
                display: block;
                width: 24px;
                height: 2px;
                background-color: var(--text-color);
                margin: 5px auto;
                transition: transform 0.3s ease, opacity 0.3s ease;
            }
        
            .mobile-toggle.active span:nth-child(1) {
                transform: translateY(7px) rotate(45deg);
            }
        
            .mobile-toggle.active span:nth-child(2) {
                opacity: 0;
            }
        
            .mobile-toggle.active span:nth-child(3) {
                transform: translateY(-7px) rotate(-45deg);
            }
        
            /* Improved nav items */
            .sidebar nav ul {
                padding: 1rem 0;
            }
        
            .sidebar nav li {
                padding: 0.875rem 1.5rem;
                margin: 0.25rem 1rem;
                border-radius: 8px;
                transition: background-color 0.2s ease;
            }
        
            .sidebar nav li a {
                display: flex;
                align-items: center;
                gap: 1rem;
                font-size: 1rem;
                color: var(--text-color);
            }
        
            .sidebar nav li i {
                font-size: 1.25rem;
                min-width: 24px;
                text-align: center;
            }
        
            .sidebar nav li:active {
                background-color: rgba(0, 0, 0, 0.05);
            }
        
            /* Improved overlay */
            .sidebar-overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(0, 0, 0, 0.4);
                backdrop-filter: blur(2px);
                z-index: 999;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
        
            .sidebar-overlay.active {
                display: block;
                opacity: 1;
            }
        
            /* Dark mode adjustments */
            .dark-mode .mobile-toggle {
                background-color: rgba(255, 255, 255, 0.1);
            }
        
            .dark-mode .mobile-toggle span {
                background-color: #f5f6fa;
            }
        
            .dark-mode .sidebar nav li:active {
                background-color: rgba(255, 255, 255, 0.05);
            }
        }
        
        /* Ensure main content adjusts properly */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding-top: 4.5rem;
                transition: margin-left 0.3s ease;
            }
        
            body.sidebar-open .main-content {
                filter: blur(2px);
                pointer-events: none;
            }
        }
        
        
          /* Main content styling */
        .main-content {
          flex: 1;
          margin-left: 280px;
          padding: 2rem;
          color: var(--text-color);
          transition: margin-left 0.3s ease;
        }
        
        .main-content .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0;
        }
        
        header {
                    background-color: var(--dark);
                    color: white;
                    padding: 1rem 0;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                }
                
                h1, h2, h3, h4 {
                    margin-bottom: 1rem;
                    color: #111827;
                }
        
                .dark-mode   h1, h2, h3, h4 {
                    margin-bottom: 1rem;
                    color: #fff;
                }
                
                .page-title {
                    display: flex;
                    align-items: center;
                    margin-bottom: 2rem;
                }
                
                .page-title h1 {
                    margin-bottom: 0;
                    margin-left: 10px;
                }
                
                
                .tabs {
                    display: flex;
                    background: white;
                    border-radius: 8px;
                    overflow: hidden;
                    margin-bottom: 2rem;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
                }
                
                .tab {
                    flex: 1;
                    text-align: center;
                    padding: 1rem;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    border-bottom: 3px solid transparent;
                    font-weight: 500;
                }
                
                .tab:hover {
                    background-color: var(--light);
                }
                
                .tab.active {
                    border-bottom: 3px solid var(--primary);
                    color: var(--primary);
                    background-color: rgba(52, 152, 219, 0.05);
                }
                
                .tab-content {
                    display: none;
                }
                
                .tab-content.active {
                    display: block;
                }
                
                .panel {
                    background-color: var(--card);
                    border-radius: 8px;
                    padding: 2rem;
                    margin-bottom: 2rem;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
                }
                
                .panel-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 1.5rem;
                    padding-bottom: 1rem;
                    border-bottom: 1px solid var(--border);
                }
                
                .btn {
                    display: inline-block;
                    padding: 0.5rem 1rem;
                    border-radius: 4px;
                    cursor: pointer;
                    border: none;
                    font-weight: 500;
                    transition: all 0.3s ease;
                    text-decoration: none;
                }
                
                .btn-primary {
                    background-color: var(--primary);
                    color: white;
                }
                
                .btn-primary:hover {
                    background-color: var(--primary-dark);
                }
                
                .btn-secondary {
                    background-color: var(--secondary);
                    color: white;
                }
                
                .btn-secondary:hover {
                    background-color: var(--secondary-dark);
                }
                
                .btn-danger {
                    background-color: var(--danger);
                    color: white;
                }
                
                .btn-danger:hover {
                    background-color: #c0392b;
                }
                
                .btn-sm {
                    padding: 0.3rem 0.7rem;
                    font-size: 0.875rem;
                }
                
                .form-group {
                    margin-bottom: 1.5rem;
                }
                
                .form-group label {
                    display: block;
                    margin-bottom: 0.5rem;
                    font-weight: 500;
                }
                
                .form-control {
                    width: 100%;
                    padding: 0.75rem;
                    border: 1px solid var(--border);
                    border-radius: 4px;
                    font-size: 1rem;
                    outline: none;
                    transition: border 0.3s ease;
                }
                
                .form-control:focus {
                    border-color: var(--primary);
                }
                
                select.form-control {
                    appearance: none;
                    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%232c3e50' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
                    background-repeat: no-repeat;
                    background-position: right 0.75rem center;
                    padding-right: 2.5rem;
                }
                
                .switch {
                    position: relative;
                    display: inline-block;
                    width: 60px;
                    height: 30px;
                }
                
                .switch input {
                    opacity: 0;
                    width: 0;
                    height: 0;
                }
                
                .slider {
                    position: absolute;
                    cursor: pointer;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background-color: #ccc;
                    transition: .4s;
                    border-radius: 34px;
                }
                
                .slider:before {
                    position: absolute;
                    content: "";
                    height: 22px;
                    width: 22px;
                    left: 4px;
                    bottom: 4px;
                    background-color: white;
                    transition: .4s;
                    border-radius: 50%;
                }
                
                input:checked + .slider {
                    background-color: var(--primary);
                }
                
                input:focus + .slider {
                    box-shadow: 0 0 1px var(--primary);
                }
                
                input:checked + .slider:before {
                    transform: translateX(30px);
                }
                
                .notification-list {
                    margin-top: 1.5rem;
                }
                
                .notification-item {
                    padding: 1.25rem;
                    background-color: white;
                    border-radius: 8px;
                    margin-bottom: 1rem;
                    border-left: 4px solid var(--primary);
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                    position: relative;
                }
                
                .notification-item.warning {
                    border-left-color: var(--warning);
                }
                
                .notification-item.rule {
                    border-left-color: var(--secondary);
                }
                
                .notification-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 0.75rem;
                }
                
                .notification-title {
                    display: flex;
                    align-items: center;
                    font-weight: 600;
                    font-size: 1.1rem;
                    
                }
                
                .notification-title svg {
                    margin-right: 10px;
                    fill: var(--primary);
                }
                
                .notification-item.warning .notification-title svg {
                    fill: var(--warning);
                }
                
                .notification-item.rule .notification-title svg {
                    fill: var(--secondary);
                }
                
                .notification-actions {
                    display: flex;
                    gap: 8px;
                }
                
                .notification-description {
                    color: #666;
                    margin-bottom: 0.75rem;
                }
                
                .notification-meta {
                    display: flex;
                    align-items: center;
                    gap: 16px;
                    font-size: 0.875rem;
                    color: #888;
                }
                
                .notification-tag {
                    display: inline-block;
                    padding: 0.2rem 0.5rem;
                    background-color: #eee;
                    border-radius: 4px;
                    font-size: 0.75rem;
                    font-weight: 500;
                }
                
                .notification-toggle {
                    margin-left: auto;
                }
                
                .toast {
                    position: fixed;
                    bottom: 20px;
                    right: 20px;
                    padding: 1rem 1.5rem;
                    background-color: var(--success);
                    color: white;
                    border-radius: 4px;
                    transform: translateY(100%);
                    opacity: 0;
                    transition: all 0.3s ease;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                    z-index: 1000;
                }
                
                .toast.show {
                    transform: translateY(0);
                    opacity: 1;
                }
                
                .toast.error {
                    background-color: var(--danger);
                }
                
                .rules-select {
                    max-height: 250px;
                    overflow-y: auto;
                    border: 1px solid var(--border);
                    border-radius: 4px;
                    margin-top: 0.5rem;
                }
                
                .rule-option {
                    padding: 0.75rem 1rem;
                    border-bottom: 1px solid var(--border);
                    cursor: pointer;
                    transition: background-color 0.2s ease;
                }
                
                .rule-option:last-child {
                    border-bottom: none;
                }
                
                .rule-option:hover {
                    background-color: rgba(52, 152, 219, 0.05);
                }
                
                .rule-option.selected {
                    background-color: rgba(52, 152, 219, 0.1);
                    position: relative;
                }
                
                .rule-option.selected::after {
                    content: "✓";
                    position: absolute;
                    right: 1rem;
                    color: var(--primary);
                    font-weight: bold;
                }
                
                .badge {
                    display: inline-block;
                    padding: 0.25em 0.75em;
                    border-radius: 20px;
                    font-size: 0.75rem;
                    font-weight: 600;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }
                
                .badge-primary {
                    background-color: rgba(52, 152, 219, 0.1);
                    color: var(--primary);
                }
                
                .badge-success {
                    background-color: rgba(46, 204, 113, 0.1);
                    color: var(--secondary);
                }
                
                .badge-warning {
                    background-color: rgba(243, 156, 18, 0.1);
                    color: var(--warning);
                }
                
                .badge-danger {
                    background-color: rgba(231, 76, 60, 0.1);
                    color: var(--danger);
                }
                
                .modal {
                    display: none;
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0, 0, 0, 0.5);
                    z-index: 1000;
                    overflow: auto;
                    justify-content: center;
                    align-items: center;
                }
                
                .modal.show {
                    display: flex;
                }
                
                .modal-content {
                    background-color: white;
                    border-radius: 8px;
                    width: 100%;
                    max-width: 550px;
                    position: relative;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                    animation: modalFadeIn 0.3s ease;
                }
                
                @keyframes modalFadeIn {
                    from {
                        opacity: 0;
                        transform: translateY(-20px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
                
                .modal-header {
                    padding: 1.5rem;
                    border-bottom: 1px solid var(--border);
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                
                .modal-header h3 {
                    margin-bottom: 0;
                }
                
                .modal-close {
                    cursor: pointer;
                    background: none;
                    border: none;
                    font-size: 1.25rem;
                    color: #888;
                    transition: color 0.2s ease;
                }
                
                .modal-close:hover {
                    color: var(--danger);
                }
                
                .modal-body {
                    padding: 1.5rem;
                }
                
                .modal-footer {
                    padding: 1rem 1.5rem;
                    border-top: 1px solid var(--border);
                    text-align: right;
                }
                
                .modal-footer .btn {
                    margin-left: 0.5rem;
                }
                
                .loader {
                    display: none;
                    width: 100%;
                    text-align: center;
                    padding: 2rem 0;
                }
                
                .loader.show {
                    display: block;
                }
                
                .loader-spinner {
                    display: inline-block;
                    width: 40px;
                    height: 40px;
                    border: 4px solid rgba(0, 0, 0, 0.1);
                    border-left-color: var(--primary);
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                }
                
                @keyframes spin {
                    0% {
                        transform: rotate(0deg);
                    }
                    100% {
                        transform: rotate(360deg);
                    }
                }
                
                .empty-state {
                    text-align: center;
                    padding: 3rem 0;
                    color: #888;
                }
                
                .empty-state svg {
                    width: 80px;
                    height: 80px;
                    margin-bottom: 1rem;
                    fill: #ccc;
                }
                
                .empty-state-text {
                    font-size: 1.1rem;
                    margin-bottom: 1.5rem;
                }
                
                /* Grid layout for two-column forms */
                .form-grid {
                    display: grid;
                    grid-template-columns: 1fr 1fr;
                    gap: 1rem;
                }
                
                /* Responsive design */
                @media (max-width: 768px) {
                    .panel {
                        padding: 1.5rem;
                    }
                    
                    .form-grid {
                        grid-template-columns: 1fr;
                    }
                    
                    .tabs {
                        flex-direction: column;
                    }
                    
                    .tab {
                        border-bottom: none;
                        border-left: 3px solid transparent;
                    }
                    
                    .tab.active {
                        border-bottom: none;
                        border-left: 3px solid var(--primary);
                    }
                }
        
        
                /* Enhanced Responsive Styles for Main Content */
        .main-content {
            transition: margin-left 0.3s ease, background-color 0.3s ease, color 0.3s ease;
            padding: 1.5rem;
        }
        
        @media (max-width: 768px) {
            .main-content {
                padding: 1rem;
                margin-left: 0;
                padding-top: 4.5rem;
            }
            
            .page-title {
                flex-direction: column;
                align-items: flex-start;
                margin-bottom: 1.5rem;
            }
            
            .page-title h1 {
                margin-top: 0.5rem;
                font-size: 1.75rem;
            }
        }
        
        /* Tabs Responsive Improvements */
        .tabs {
            display: flex;
            flex-wrap: wrap;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
        }
        
        .tab {
            flex: 1 1 auto;
            min-width: 120px;
            text-align: center;
            padding: 0.75rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
            font-weight: 500;
        }
        
        @media (max-width: 576px) {
            .tabs {
                flex-direction: column;
                border-radius: 8px;
            }
            
            .tab {
                border-left: 3px solid transparent;
                border-bottom: none;
                text-align: left;
                padding: 0.75rem 1rem;
            }
            
            .tab.active {
                border-left: 3px solid var(--primary-color);
                border-bottom: none;
            }
        }
        
        /* Panel Responsive Improvements */
        .panel {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
        }
        
        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 0.75rem;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border);
            transition: border-color 0.3s ease;
        }
        
        @media (max-width: 576px) {
            .panel {
                padding: 1rem;
            }
            
            .panel-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .panel-header h2 {
                margin-bottom: 0.75rem;
                width: 100%;
            }
        }
        
        /* Form Group Responsive Improvements */
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }
        
        .form-group {
            margin-bottom: 1.25rem;
        }
        
        @media (max-width: 576px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            #chat-ids-container {
                flex-direction: column;
            }
            
            #chat-ids-container .btn {
                margin-top: 0.5rem;
                margin-left: 0 !important;
            }
        }
        
        /* Notification Items Responsive Improvements */
        .notification-item {
            padding: 1.25rem;
            background-color: white;
            border-radius: 8px;
            margin-bottom: 1rem;
            border-left: 4px solid var(--primary-color);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            position: relative;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
        }
        
        .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 0.75rem;
            margin-bottom: 0.75rem;
        }
        
        .notification-title {
            display: flex;
            align-items: center;
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .notification-meta {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 0.5rem;
            font-size: 0.875rem;
            color: #888;
        }
        
        .notification-toggle {
            margin-top: 0.75rem;
            display: flex;
            justify-content: flex-end;
        }
        
        @media (max-width: 576px) {
            .notification-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .notification-actions {
                width: 100%;
                display: flex;
                gap: 0.5rem;
            }
            
            .notification-meta {
                margin-bottom: 0.5rem;
            }
            
            .notification-toggle {
                width: 100%;
                justify-content: flex-start;
            }
        }
        
        /* Modal Responsive Improvements */
        .modal-content {
            width: 90%;
            max-width: 550px;
            max-height: 90vh;
            overflow-y: auto;
            border-radius: 8px;
            transition: background-color 0.3s ease;
        }
        
        .modal-header, .modal-body, .modal-footer {
            padding: 1.25rem;
            transition: border-color 0.3s ease;
        }
        
        @media (max-width: 576px) {
            .modal-content {
                width: 95%;
            }
            
            .modal-header, .modal-body, .modal-footer {
                padding: 1rem;
            }
            
            .modal-footer {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .modal-footer .btn {
                width: 100%;
                margin-left: 0;
                text-align: center;
            }
        }
        
        /* Button Group Responsive Improvements */
        .btn-group {
            display: flex;
            gap: 0.5rem;
        }
        
        @media (max-width: 576px) {
            .btn-group {
                flex-direction: column;
                width: 100%;
            }
            
            .btn-group .btn {
                width: 100%;
                text-align: center;
            }
        }
        
        /* Improved Chat IDs Container */
        #chat-ids-container {
            display: flex;
            margin-bottom: 0.5rem;
        }
        
        #new-chat-id {
            flex-grow: 1;
        }
        
        @media (max-width: 576px) {
            #chat-ids-container {
                flex-direction: column;
            }
            
            #chat-ids-container button {
                margin-top: 0.5rem;
                width: 100%;
            }
        }
        
        /* Dark Mode Enhancements */
        .dark-mode .tabs {
            background-color: rgba(32, 35, 41, 1);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }
        
        .dark-mode .tab {
            color: #f5f6fa;
        }
        
        .dark-mode .tab:hover {
            background-color: rgba(45, 50, 58, 1);
        }
        
        .dark-mode .tab.active {
            color: var(--primary-color);
            background-color: rgba(45, 50, 58, 0.5);
        }
        
        .dark-mode .panel {
            background-color: rgba(32, 35, 41, 1);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }
        
        .dark-mode .panel-header {
            border-bottom: 1px solid rgba(54, 60, 70, 1);
        }
        
        .dark-mode .panel-header h2 {
            color: #f5f6fa;
        }
        
        .dark-mode .notification-item {
            background-color: rgba(32, 35, 41, 1);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }
        
        .dark-mode .notification-title {
            color: #f5f6fa;
        }
        
        .dark-mode .notification-description {
            color: #c8cdd4;
        }
        
        .dark-mode .notification-meta {
            color: #a3a9b5;
        }
        
        .dark-mode .notification-tag {
            background-color: rgba(45, 50, 58, 1);
            color: #d2d6db;
        }
        
        .dark-mode .form-control {
            background-color: rgba(45, 50, 58, 1);
            border-color: rgba(54, 60, 70, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .form-control:focus {
            border-color: var(--primary-color);
        }
        
        .dark-mode select.form-control {
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f6fa' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
        }
        
        .dark-mode .rules-select {
            border-color: rgba(54, 60, 70, 1);
            background-color: rgba(45, 50, 58, 1);
        }
        
        .dark-mode .rule-option {
            border-bottom: 1px solid rgba(54, 60, 70, 1);
            color: #f5f6fa;
        }
        
        .dark-mode .rule-option:hover {
            background-color: rgba(45, 50, 58, 0.7);
        }
        
        .dark-mode .rule-option.selected {
            background-color: rgba(45, 50, 58, 1);
        }
        
        .dark-mode .modal-content {
            background-color: rgba(32, 35, 41, 1);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);
        }
        
        .dark-mode .modal-header {
            border-bottom: 1px solid rgba(54, 60, 70, 1);
        }
        
        .dark-mode .modal-header h3 {
            color: #f5f6fa;
        }
        
        .dark-mode .modal-footer {
            border-top: 1px solid rgba(54, 60, 70, 1);
        }
        
        .dark-mode .form-group label {
            color: #f5f6fa;
        }
        
        .dark-mode small, 
        .dark-mode .form-group small {
            color: #a3a9b5 !important;
        }
        
        .dark-mode small a, 
        .dark-mode .form-group small a {
            color: var(--primary-color) !important;
        }
        
        .dark-mode .empty-state {
            color: #a3a9b5;
        }
        
        .dark-mode .empty-state svg {
            fill: #515962;
        }
        
        .dark-mode .loader-spinner {
            border: 4px solid rgba(255, 255, 255, 0.1);
            border-left-color: var(--primary-color);
        }
        
        .dark-mode .modal-close {
            color: #a3a9b5;
        }
        
        .dark-mode .modal-close:hover {
            color: #f5f6fa;
        }
        
        /* Fixed color for rule and warning notification items in dark mode */
        .dark-mode .notification-item.warning {
            border-left-color: var(--warning);
        }
        
        .dark-mode .notification-item.rule {
            border-left-color: var(--secondary);
        }
        
        .dark-mode .notification-item.warning .notification-title svg {
            fill: var(--warning);
        }
        
        .dark-mode .notification-item.rule .notification-title svg {
            fill: var(--secondary);
        }
        
        /* Improved badges in dark mode */
        .dark-mode .badge-primary {
            background-color: rgba(22, 92, 143, 0.3);
            color: #64b5f6;
        }
        
        .dark-mode .badge-success {
            background-color: rgba(46, 125, 50, 0.3);
            color: #81c784;
        }
        
        .dark-mode .badge-warning {
            background-color: rgba(237, 108, 2, 0.3);
            color: #ffb74d;
        }
        
        .dark-mode .badge-danger {
            background-color: rgba(211, 47, 47, 0.3);
            color: #e57373;
        }
        
        /* Responsive adjustments for buttons */
        @media (max-width: 576px) {
            .btn {
                padding: 0.5rem 0.75rem;
            }
            
            .panel-header .btn {
                width: 100%;
                margin-bottom: 0.5rem;
            }
        }
        
        /* Additional mobile improvements */
        @media (max-width: 576px) {
            h1 {
                font-size: 1.75rem;
            }
            
            h2 {
                font-size: 1.5rem;
            }
            
            .notification-actions {
                display: flex;
                flex-direction: column;
                align-items: stretch;
                gap: 0.5rem;
                width: 100%;
            }
            
            .notification-actions .btn {
                width: 100%;
                margin: 0;
            }
        }
        
        /* Toast responsive improvements */
        .toast {
            max-width: 90%;
            width: 320px;
        }
        
        @media (max-width: 576px) {
            .toast {
                left: 50%;
                transform: translateX(-50%) translateY(100%);
                right: auto;
            }
            
            .toast.show {
                transform: translateX(-50%) translateY(0);
            }
        }

        /* Dark mode for Setup Instructions info-box */
.dark-mode .info-box {
    background-color: rgb(32, 36, 41);
    border-left: 4px solid #DEAF0B !important;
    border-radius: 8px !important;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2) !important;
}

.info-box {
    background-color: rgb(32, 36, 41);
    border-left: 4px solid #DEAF0B !important;
    border-radius: 8px !important;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2) !important;
}

.info-box h4 {
    color: #DEAF0B !important;
}

.dark-mode .info-box h4 {
    color: #DEAF0B !important;
}

.dark-mode .info-box ol {
    color: #000 !important;
}

.dark-mode .info-box li {
    color: #000 !important;
   
}

.dark-mode .info-box a {
    color: #DEAF0B !important;
    text-decoration: none;
    font-weight: 500;
}

.dark-mode .info-box a:hover {
    color: #DEAF0E !important;
    text-decoration: underline;
}
         </style>
</head>
<body>
    <!-- Add hamburger menu button -->
    <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="pageContent"> </div>

        <%- include('partials/sidebar') %>
          
        <div class="main-content">
            <div class="container" style="padding-top: 2rem;">
                <div class="page-title">
                    <h1>Notifications</h1>
            
                </div>
                
                <div class="tabs">
                    <div class="tab active" data-tab="telegram">Telegram Setup</div>
                    <div class="tab" data-tab="rules">Rule Notifications</div>
                    <div class="tab" data-tab="warnings">Warning Notifications</div>
                    <div class="tab" data-tab="history">Notification History</div>
                </div>
                
                <div class="tab-content active" id="telegram-tab">
                    <div class="panel">
                        <div class="panel-header">
                            <h2>Telegram Configuration</h2>
                            <div>
                                <button id="test-telegram" class="btn btn-secondary">Test Connection</button>
                            </div>
                        </div>
                        
                        <div class="info-box" style="margin-bottom: 1.5rem; padding: 1rem; background: #e8f4fd; border-left: 4px solid #2196F3; border-radius: 4px;">
                            <h4 style="margin: 0 0 0.5rem 0; color: #1976D2;">
                                <i class="fas fa-robot"></i> Setup Instructions
                            </h4>
                            <ol style="margin: 0; padding-left: 1.5rem;">
                                <li>Create a Telegram bot by messaging <a href="https://t.me/BotFather" target="_blank">@BotFather</a></li>
                                <li>Copy the bot token and paste it below</li>
                                <li>Add your chat ID(s) where you want to receive notifications</li>
                                <li>Enable Telegram notifications using the toggle</li>
                                <li>Configure specific rule and warning notifications in the other tabs</li>
                            </ol>
                        </div>
                        
                        <form id="telegram-config-form">
                            <div class="form-group">
                                <label class="switch">
                                    <input type="checkbox" id="telegram-enabled">
                                    <span class="slider"></span>
                                </label>
                                <label for="telegram-enabled" style="display: inline-block; margin-left: 10px;">Enable Telegram Notifications</label>
                            </div>
                            
                            <div class="form-group">
                                <label for="telegram-token">Bot Token</label>
                                <input type="text" id="telegram-token" class="form-control" placeholder="Enter your Telegram bot token">
                                <small style="color: #888; display: block; margin-top: 0.5rem;">Create a bot with <a href="https://t.me/BotFather" target="_blank">@BotFather</a> and paste the token here.</small>
                            </div>
                            
                            <div class="form-group">
                                <label>Chat IDs</label>
                                <div id="chat-ids-container">
                                    <div style="display: flex; margin-bottom: 0.5rem;">
                                        <input type="text" id="new-chat-id" class="form-control" placeholder="Enter chat ID">
                                        <button type="button" id="add-chat-id" class="btn btn-primary" style="margin-left: 0.5rem;">Add</button>
                                    </div>
                                    <small style="color: #888; display: block; margin-top: 0.5rem;">
                                        To get your chat ID, send a message to <a href="https://t.me/userinfobot" target="_blank">@userinfobot</a>
                                    </small>
                                </div>
                                
                                <div id="chat-ids-list" style="margin-top: 1rem;">
                                    <!-- Chat IDs will be dynamically added here -->
                                </div>
                            </div>
                            
                            <button type="submit" class="btn btn-primary">Save Configuration</button>
                        </form>
                    </div>
                </div>
                
                <div class="tab-content" id="rules-tab">
                    <div class="panel">
                        <div class="panel-header">
                            <h2>Rule Notifications</h2>
                            <button id="add-rule-notification" class="btn btn-primary">Add New</button>
                        </div>
                        
                        <div class="info-box" style="margin-bottom: 1.5rem; padding: 1rem; background: #fff3cd; border-left: 4px solid #ffc107; border-radius: 4px;">
                            <h4 style="margin: 0 0 0.5rem 0; color: #856404;">
                                <i class="fas fa-exclamation-triangle"></i> Manual Configuration Required
                            </h4>
                            <p style="margin: 0; color: #856404;">
                                Rule notifications are disabled by default. You must manually add notification rules for each automation rule you want to be notified about.
                            </p>
                        </div>
                        
                        <div class="loader" id="rules-loader">
                            <div class="loader-spinner"></div>
                            <p>Loading rule notifications...</p>
                        </div>
                        
                        <div class="notification-list" id="rule-notifications-list">
                            <!-- Rule notifications will be dynamically added here -->
                        </div>
                        
                        <div class="empty-state" id="rule-notifications-empty" style="display: none;">
                            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
                            </svg>
                            <div class="empty-state-text">No rule notifications configured</div>
                            <p style="color: #666; margin: 0.5rem 0;">Add notification rules to get notified when your automation rules trigger.</p>
                            <button id="add-rule-notification-empty" class="btn btn-primary">Add Rule Notification</button>
                        </div>
                    </div>
                </div>
                
                <div class="tab-content" id="warnings-tab">
                    <div class="panel">
                        <div class="panel-header">
                            <h2>Warning Notifications</h2>
                            <button id="add-warning-notification" class="btn btn-primary">Add New</button>
                        </div>
                        
                        <div class="info-box" style="margin-bottom: 1.5rem; padding: 1rem; background: #f8d7da; border-left: 4px solid #dc3545; border-radius: 4px;">
                            <h4 style="margin: 0 0 0.5rem 0; color: #721c24;">
                                <i class="fas fa-shield-alt"></i> Warning System Information
                            </h4>
                            <p style="margin: 0; color: #721c24;">
                                All warning notifications are disabled by default. You must manually enable the specific warnings you want to receive notifications for.
                            </p>
                        </div>
                        
                        <div class="loader" id="warnings-loader">
                            <div class="loader-spinner"></div>
                            <p>Loading warning notifications...</p>
                        </div>
                        
                        <div class="notification-list" id="warning-notifications-list">
                            <!-- Warning notifications will be dynamically added here -->
                        </div>
                        
                        <div class="empty-state" id="warning-notifications-empty" style="display: none;">
                            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
                            </svg>
                            <div class="empty-state-text">No warning notifications configured</div>
                            <p style="color: #666; margin: 0.5rem 0;">Add warning notifications to get alerted about system issues.</p>
                            <button id="add-warning-notification-empty" class="btn btn-primary">Add Warning Notification</button>
                        </div>
                    </div>
                </div>
                
                <div class="tab-content" id="history-tab">
                    <div class="panel">
                        <div class="panel-header">
                            <h2>Notification History</h2>
                            <button id="clear-history" class="btn btn-danger">Clear History</button>
                        </div>
                        
                        <div class="loader" id="history-loader">
                            <div class="loader-spinner"></div>
                            <p>Loading notification history...</p>
                        </div>
                        
                        <div class="notification-list" id="notification-history-list">
                            <!-- Notification history will be dynamically added here -->
                        </div>
                        
                        <div class="empty-state" id="notification-history-empty" style="display: none;">
                            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
                            </svg>
                            <div class="empty-state-text">No notification history available</div>
                            <p style="color: #666; margin: 0.5rem 0;">History will appear here once you start receiving notifications.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Add Rule Notification Modal -->
            <div class="modal" id="rule-notification-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 id="rule-modal-title">Add Rule Notification</h3>
                        <button class="modal-close" id="close-rule-modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form id="rule-notification-form">
                            <input type="hidden" id="rule-notification-id">
                            <div class="form-group">
                                <label for="rule-notification-name">Name</label>
                                <input type="text" id="rule-notification-name" class="form-control" placeholder="E.g., Battery Low Rule Notification" required>
                            </div>
                            <div class="form-group">
                                <label for="rule-notification-description">Description</label>
                                <textarea id="rule-notification-description" class="form-control" rows="3" placeholder="Describe this notification rule"></textarea>
                            </div>
                            <div class="form-group">
                                <label for="rule-select">Select Rule</label>
                                <div class="rules-select" id="rule-select">
                                    <!-- Rules will be dynamically added here -->
                                    <div class="loader" id="rule-select-loader">
                                        <div class="loader-spinner"></div>
                                        <p>Loading rules...</p>
                                    </div>
                                    <div id="rule-select-list"></div>
                                    <div class="empty-state" id="rule-select-empty" style="display: none;">
                                        <div class="empty-state-text">No rules available</div>
                                        <p style="color: #666; margin: 0.5rem 0;">Create automation rules first, then add notifications for them.</p>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="switch">
                                    <input type="checkbox" id="rule-notification-enabled" checked>
                                    <span class="slider"></span>
                                </label>
                                <label for="rule-notification-enabled" style="display: inline-block; margin-left: 10px;">Enable notifications for this rule</label>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" id="cancel-rule-notification">Cancel</button>
                        <button type="button" class="btn btn-primary" id="save-rule-notification">Save</button>
                    </div>
                </div>
            </div>
            
            <!-- Add Warning Notification Modal -->
            <div class="modal" id="warning-notification-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 id="warning-modal-title">Add Warning Notification</h3>
                        <button class="modal-close" id="close-warning-modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form id="warning-notification-form">
                            <input type="hidden" id="warning-notification-id">
                            <div class="form-group">
                                <label for="warning-notification-name">Name</label>
                                <input type="text" id="warning-notification-name" class="form-control" placeholder="E.g., Low Battery Warning Notification" required>
                            </div>
                            <div class="form-group">
                                <label for="warning-notification-description">Description</label>
                                <textarea id="warning-notification-description" class="form-control" rows="3" placeholder="Describe this warning notification"></textarea>
                            </div>
                            <div class="form-group">
                                <label for="warning-type-select">Warning Type</label>
                                <select id="warning-type-select" class="form-control" required>
                                    <option value="">Select Warning Type</option>
                                    <!-- Warning types will be dynamically added here -->
                                </select>
                                <small style="color: #888; display: block; margin-top: 0.5rem;">
                                    Warning types must be enabled first in the warning system configuration.
                                </small>
                            </div>
                            <div class="form-group">
                                <label class="switch">
                                    <input type="checkbox" id="warning-notification-enabled" checked>
                                    <span class="slider"></span>
                                </label>
                                <label for="warning-notification-enabled" style="display: inline-block; margin-left: 10px;">Enable notifications for this warning type</label>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" id="cancel-warning-notification">Cancel</button>
                        <button type="button" class="btn btn-primary" id="save-warning-notification">Save</button>
                    </div>
                </div>
            </div>
            
            <!-- Test Notification Modal -->
            <div class="modal" id="test-notification-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Test Notification</h3>
                        <button class="modal-close" id="close-test-modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form id="test-notification-form">
                            <div class="form-group">
                                <label for="test-message">Test Message</label>
                                <textarea id="test-message" class="form-control" rows="5" placeholder="Enter test message to send"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" id="cancel-test">Cancel</button>
                        <button type="button" class="btn btn-primary" id="send-test">Send Test</button>
                    </div>
                </div>
            </div>
            
            <!-- Toast notifications -->
            <div class="toast" id="toast-notification"></div>
        </div>
    </div>

    <script>
        // DOM ready function
        document.addEventListener('DOMContentLoaded', function() {
            // Tabs functionality
            const tabs = document.querySelectorAll('.tab');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    const tabId = tab.getAttribute('data-tab');
                    
                    // Remove active class from all tabs and tab contents
                    tabs.forEach(t => t.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));
                    
                    // Add active class to current tab and tab content
                    tab.classList.add('active');
                    document.getElementById(`${tabId}-tab`).classList.add('active');
                });
            });
            
            // Toast notification function
            function showToast(message, isError = false) {
                const toast = document.getElementById('toast-notification');
                toast.textContent = message;
                toast.className = 'toast';
                
                if (isError) {
                    toast.classList.add('error');
                }
                
                toast.classList.add('show');
                
                setTimeout(() => {
                    toast.classList.remove('show');
                }, 3000);
            }
            
            // Modal functions
            function openModal(modalId) {
                document.getElementById(modalId).classList.add('show');
            }
            
            function closeModal(modalId) {
                document.getElementById(modalId).classList.remove('show');
            }
            
            // Close modals with X button or Cancel button
            document.getElementById('close-rule-modal').addEventListener('click', () => closeModal('rule-notification-modal'));
            document.getElementById('cancel-rule-notification').addEventListener('click', () => closeModal('rule-notification-modal'));
            
            document.getElementById('close-warning-modal').addEventListener('click', () => closeModal('warning-notification-modal'));
            document.getElementById('cancel-warning-notification').addEventListener('click', () => closeModal('warning-notification-modal'));
            
            document.getElementById('close-test-modal').addEventListener('click', () => closeModal('test-notification-modal'));
            document.getElementById('cancel-test').addEventListener('click', () => closeModal('test-notification-modal'));
            
            // Test Telegram connection
            document.getElementById('test-telegram').addEventListener('click', () => {
                openModal('test-notification-modal');
                document.getElementById('test-message').value = 'This is a test notification from CARBONOZ SolarAutopilot Add-on!';
            });
            
            // Send test notification
            document.getElementById('send-test').addEventListener('click', async () => {
                const testMessage = document.getElementById('test-message').value;
                if (!testMessage) {
                    showToast('Please enter a test message', true);
                    return;
                }
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/telegram/test', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ message: testMessage })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast('Test message sent successfully!');
                        closeModal('test-notification-modal');
                    } else {
                        showToast(result.error || 'Failed to send test message', true);
                    }
                } catch (error) {
                    showToast('Error sending test message', true);
                    console.error('Error:', error);
                }
            });
            
            // Telegram configuration form
            const telegramConfigForm = document.getElementById('telegram-config-form');
            const telegramEnabled = document.getElementById('telegram-enabled');
            const telegramToken = document.getElementById('telegram-token');
            const chatIdsContainer = document.getElementById('chat-ids-container');
            const chatIdsList = document.getElementById('chat-ids-list');
            
            // Load Telegram configuration
            async function loadTelegramConfig() {
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/telegram/config');
                    const config = await response.json();
                    
                    telegramEnabled.checked = config.enabled;
                    telegramToken.value = config.botToken;
                    
                    // Render chat IDs
                    renderChatIds(config.chatIds || []);
                } catch (error) {
                    showToast('Error loading Telegram configuration', true);
                    console.error('Error:', error);
                }
            }
            
            // Render chat IDs list
            function renderChatIds(chatIds) {
                chatIdsList.innerHTML = '';
                
                if (chatIds.length === 0) {
                    chatIdsList.innerHTML = '<p style="color: #888;">No chat IDs added yet.</p>';
                    return;
                }
                
                chatIds.forEach(chatId => {
                    const chatIdItem = document.createElement('div');
                    chatIdItem.className = 'notification-item';
                    chatIdItem.style.padding = '0.75rem';
                    chatIdItem.innerHTML = `
                        <div class="notification-header">
                            <div class="notification-title">
                                <svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M12 2a10 10 0 1 0 10 10A10 10 0 0 0 12 2zm0 18a8 8 0 1 1 8-8 8 8 0 0 1-8 8z"/>
                                    <path d="M12 7a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h3a1 1 0 0 0 0-2h-2V8a1 1 0 0 0-1-1z"/>
                                </svg>
                                Chat ID: ${chatId}
                            </div>
                            <div class="notification-actions">
                                <button class="btn btn-danger btn-sm delete-chat-id" data-chat-id="${chatId}">Remove</button>
                            </div>
                        </div>
                    `;
                    
                    chatIdsList.appendChild(chatIdItem);
                });
                
                // Add event listeners to delete buttons
                document.querySelectorAll('.delete-chat-id').forEach(button => {
                    button.addEventListener('click', async () => {
                        const chatId = button.getAttribute('data-chat-id');
                        await deleteChatId(chatId);
                    });
                });
            }
            
            // Add chat ID
            document.getElementById('add-chat-id').addEventListener('click', async () => {
                const newChatId = document.getElementById('new-chat-id').value.trim();
                
                if (!newChatId) {
                    showToast('Please enter a valid chat ID', true);
                    return;
                }
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/telegram/chat-ids', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ chatId: newChatId })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast('Chat ID added successfully!');
                        document.getElementById('new-chat-id').value = '';
                        loadTelegramConfig(); // Reload to show the new chat ID
                    } else {
                        showToast(result.error || 'Failed to add chat ID', true);
                    }
                } catch (error) {
                    showToast('Error adding chat ID', true);
                    console.error('Error:', error);
                }
            });
            
            // Delete chat ID
            async function deleteChatId(chatId) {
                try {
                    const response = await fetch(`<%= ingress_path %>/api/notifications/telegram/chat-ids/${chatId}`, {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast('Chat ID removed successfully!');
                        loadTelegramConfig(); // Reload to update the list
                    } else {
                        showToast(result.error || 'Failed to remove chat ID', true);
                    }
                } catch (error) {
                    showToast('Error removing chat ID', true);
                    console.error('Error:', error);
                }
            }
            
            // Save Telegram configuration
            telegramConfigForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/telegram/config', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            enabled: telegramEnabled.checked,
                            botToken: telegramToken.value
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast('Telegram configuration saved successfully!');
                        loadTelegramConfig(); // Reload to show any updates
                    } else {
                        showToast(result.error || 'Failed to save Telegram configuration', true);
                    }
                } catch (error) {
                    showToast('Error saving Telegram configuration', true);
                    console.error('Error:', error);
                }
            });
            
            // Rule Notifications
            
            // Add rule notification button
            document.getElementById('add-rule-notification').addEventListener('click', () => {
                document.getElementById('rule-modal-title').textContent = 'Add Rule Notification';
                document.getElementById('rule-notification-id').value = '';
                document.getElementById('rule-notification-name').value = '';
                document.getElementById('rule-notification-description').value = '';
                document.getElementById('rule-notification-enabled').checked = true;
                
                // Load rules for selection
                loadRules();
                
                openModal('rule-notification-modal');
            });
            
            document.getElementById('add-rule-notification-empty').addEventListener('click', () => {
                document.getElementById('add-rule-notification').click();
            });
            
            // Load rules from SQLite database for selection
            async function loadRules() {
                const ruleSelectLoader = document.getElementById('rule-select-loader');
                const ruleSelectList = document.getElementById('rule-select-list');
                const ruleSelectEmpty = document.getElementById('rule-select-empty');
                
                ruleSelectLoader.classList.add('show');
                ruleSelectList.innerHTML = '';
                ruleSelectEmpty.style.display = 'none';
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/rules');
                    const rules = await response.json();
                    
                    ruleSelectLoader.classList.remove('show');
                    
                    if (rules.length === 0) {
                        ruleSelectEmpty.style.display = 'block';
                        return;
                    }
                    
                    rules.forEach(rule => {
                        const ruleOption = document.createElement('div');
                        ruleOption.className = 'rule-option';
                        ruleOption.setAttribute('data-rule-id', rule.id);
                        ruleOption.innerHTML = `
                            <strong>${rule.name}</strong>
                            ${rule.description ? `<p style="margin: 0.25rem 0 0; color: #666; font-size: 0.9rem;">${rule.description}</p>` : ''}
                            <div style="margin-top: 0.5rem;">
                                <span class="badge ${rule.active ? 'badge-success' : 'badge-danger'}">${rule.active ? 'Active' : 'Inactive'}</span>
                                <span class="badge badge-primary">Rule ID: ${rule.id}</span>
                            </div>
                        `;
                        
                        ruleOption.addEventListener('click', () => {
                            // Toggle selection
                            document.querySelectorAll('.rule-option').forEach(opt => {
                                opt.classList.remove('selected');
                            });
                            
                            ruleOption.classList.add('selected');
                        });
                        
                        ruleSelectList.appendChild(ruleOption);
                    });
                } catch (error) {
                    ruleSelectLoader.classList.remove('show');
                    ruleSelectEmpty.style.display = 'block';
                    ruleSelectEmpty.querySelector('.empty-state-text').textContent = 'Error loading rules';
                    console.error('Error loading rules:', error);
                }
            }
            
            // Save rule notification
            document.getElementById('save-rule-notification').addEventListener('click', async () => {
                const id = document.getElementById('rule-notification-id').value;
                const name = document.getElementById('rule-notification-name').value;
                const description = document.getElementById('rule-notification-description').value;
                const enabled = document.getElementById('rule-notification-enabled').checked;
                
                // Get selected rule
                const selectedRule = document.querySelector('.rule-option.selected');
                if (!selectedRule) {
                    showToast('Please select a rule', true);
                    return;
                }
                
                const ruleId = selectedRule.getAttribute('data-rule-id');
                
                // Prepare notification rule data
                const notificationRule = {
                    type: 'rule',
                    name,
                    description,
                    enabled,
                    ruleId
                };
                
                try {
                    let url = '<%= ingress_path %>/api/notifications/rules';
                    let method = 'POST';
                    
                    // If editing an existing rule
                    if (id) {
                        url = `<%= ingress_path %>/api/notifications/rules/${id}`;
                        method = 'PUT';
                        notificationRule.id = id;
                    }
                    
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(notificationRule)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast(`Rule notification ${id ? 'updated' : 'added'} successfully!`);
                        closeModal('rule-notification-modal');
                        loadRuleNotifications(); // Reload to show changes
                    } else {
                        showToast(result.error || 'Failed to save rule notification', true);
                    }
                } catch (error) {
                    showToast('Error saving rule notification', true);
                    console.error('Error:', error);
                }
            });
            
            // Load rule notifications
            async function loadRuleNotifications() {
                const rulesLoader = document.getElementById('rules-loader');
                const ruleNotificationsList = document.getElementById('rule-notifications-list');
                const ruleNotificationsEmpty = document.getElementById('rule-notifications-empty');
                
                rulesLoader.classList.add('show');
                ruleNotificationsList.innerHTML = '';
                ruleNotificationsEmpty.style.display = 'none';
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/rules');
                    const result = await response.json();
                    
                    rulesLoader.classList.remove('show');
                    
                    if (!result.success || !result.rules || result.rules.length === 0) {
                        ruleNotificationsEmpty.style.display = 'block';
                        return;
                    }
                    
                    // Filter only rule-type notifications
                    const ruleNotifications = result.rules.filter(rule => rule.type === 'rule');
                    
                    if (ruleNotifications.length === 0) {
                        ruleNotificationsEmpty.style.display = 'block';
                        return;
                    }
                    
                    ruleNotifications.forEach(rule => {
                        const ruleItem = document.createElement('div');
                        ruleItem.className = 'notification-item rule';
                        ruleItem.innerHTML = `
                            <div class="notification-header">
                                <div class="notification-title">
                                    <svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M16 2H8C4.691 2 2 4.691 2 8v13a1 1 0 0 0 1 1h5v-7h8v7h5a1 1 0 0 0 1-1V8c0-3.309-2.691-6-6-6z"/>
                                    </svg>
                                    ${rule.name}
                                </div>
                                <div class="notification-actions">
                                    <button class="btn btn-secondary btn-sm edit-rule" data-id="${rule.id}">Edit</button>
                                    <button class="btn btn-danger btn-sm delete-rule" data-id="${rule.id}">Delete</button>
                                </div>
                            </div>
                            ${rule.description ? `<div class="notification-description">${rule.description}</div>` : ''}
                            <div class="notification-meta">
                                <span class="notification-tag">Rule ID: ${rule.ruleId}</span>
                                <span class="notification-tag">${rule.enabled ? 'Enabled' : 'Disabled'}</span>
                            </div>
                            <div class="notification-toggle">
                                <label class="switch">
                                    <input type="checkbox" class="toggle-rule" data-id="${rule.id}" ${rule.enabled ? 'checked' : ''}>
                                    <span class="slider"></span>
                                </label>
                            </div>
                        `;
                        
                        ruleNotificationsList.appendChild(ruleItem);
                    });
                    
                    // Add event listeners for actions
                    document.querySelectorAll('.edit-rule').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = e.target.getAttribute('data-id');
                            editRuleNotification(id);
                        });
                    });
                    
                    document.querySelectorAll('.delete-rule').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = e.target.getAttribute('data-id');
                            deleteRuleNotification(id);
                        });
                    });
                    
                    document.querySelectorAll('.toggle-rule').forEach(checkbox => {
                        checkbox.addEventListener('change', (e) => {
                            const id = e.target.getAttribute('data-id');
                            toggleRuleNotification(id, e.target.checked);
                        });
                    });
                } catch (error) {
                    rulesLoader.classList.remove('show');
                    ruleNotificationsEmpty.style.display = 'block';
                    ruleNotificationsEmpty.querySelector('.empty-state-text').textContent = 'Error loading rule notifications';
                    console.error('Error loading rule notifications:', error);
                }
            }
            
            // Edit rule notification
            async function editRuleNotification(id) {
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/rules');
                    const result = await response.json();
                    
                    if (!result.success) {
                        showToast('Failed to load rule notification', true);
                        return;
                    }
                    
                    const rule = result.rules.find(r => r.id === id);
                    
                    if (!rule) {
                        showToast('Rule notification not found', true);
                        return;
                    }
                    
                    // Fill the form
                    document.getElementById('rule-modal-title').textContent = 'Edit Rule Notification';
                    document.getElementById('rule-notification-id').value = rule.id;
                    document.getElementById('rule-notification-name').value = rule.name;
                    document.getElementById('rule-notification-description').value = rule.description || '';
                    document.getElementById('rule-notification-enabled').checked = rule.enabled;
                    
                    // Load rules and select the current one
                    await loadRules();
                    
                    // Select the current rule
                    setTimeout(() => {
                        const ruleOption = document.querySelector(`.rule-option[data-rule-id="${rule.ruleId}"]`);
                        if (ruleOption) {
                            ruleOption.classList.add('selected');
                        }
                    }, 100);
                    
                    openModal('rule-notification-modal');
                } catch (error) {
                    showToast('Error loading rule notification', true);
                    console.error('Error:', error);
                }
            }
            
            // Delete rule notification
            async function deleteRuleNotification(id) {
                if (!confirm('Are you sure you want to delete this rule notification?')) {
                    return;
                }
                
                try {
                    const response = await fetch(`<%= ingress_path %>/api/notifications/rules/${id}`, {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast('Rule notification deleted successfully!');
                        loadRuleNotifications(); // Reload to update the list
                    } else {
                        showToast(result.error || 'Failed to delete rule notification', true);
                    }
                } catch (error) {
                    showToast('Error deleting rule notification', true);
                    console.error('Error:', error);
                }
            }
            
            // Toggle rule notification enabled state
            async function toggleRuleNotification(id, enabled) {
                try {
                    // First, get the current rule data
                    const response = await fetch('<%= ingress_path %>/api/notifications/rules');
                    const result = await response.json();
                    
                    if (!result.success) {
                        showToast('Failed to load rule notification', true);
                        return;
                    }
                    
                    const rule = result.rules.find(r => r.id === id);
                    
                    if (!rule) {
                        showToast('Rule notification not found', true);
                        return;
                    }
                    
                    // Update the rule with new enabled state
                    const updateResponse = await fetch(`<%= ingress_path %>/api/notifications/rules/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            ...rule,
                            enabled
                        })
                    });
                    
                    const updateResult = await updateResponse.json();
                    
                    if (updateResult.success) {
                        showToast(`Rule notification ${enabled ? 'enabled' : 'disabled'} successfully!`);
                    } else {
                        showToast(updateResult.error || 'Failed to update rule notification', true);
                        // Revert checkbox state
                        loadRuleNotifications();
                    }
                } catch (error) {
                    showToast('Error updating rule notification', true);
                    console.error('Error:', error);
                    // Revert checkbox state
                    loadRuleNotifications();
                }
            }
            
            // Warning Notifications
            
            // Add warning notification button
            document.getElementById('add-warning-notification').addEventListener('click', () => {
                document.getElementById('warning-modal-title').textContent = 'Add Warning Notification';
                document.getElementById('warning-notification-id').value = '';
                document.getElementById('warning-notification-name').value = '';
                document.getElementById('warning-notification-description').value = '';
                document.getElementById('warning-notification-enabled').checked = true;
                
                // Load warning types
                loadWarningTypes();
                
                openModal('warning-notification-modal');
            });
            
            document.getElementById('add-warning-notification-empty').addEventListener('click', () => {
                document.getElementById('add-warning-notification').click();
            });
            
            // Load warning types
            async function loadWarningTypes() {
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/warnings/types');
                    const result = await response.json();
                    
                    if (!result.success) {
                        showToast('Failed to load warning types', true);
                        return;
                    }
                    
                    const warningTypeSelect = document.getElementById('warning-type-select');
                    warningTypeSelect.innerHTML = '<option value="">Select Warning Type</option>';
                    
                    result.warningTypes.forEach(warningType => {
                        const option = document.createElement('option');
                        option.value = warningType.id;
                        option.textContent = `${warningType.name} (${warningType.description})`;
                        warningTypeSelect.appendChild(option);
                    });
                } catch (error) {
                    showToast('Error loading warning types', true);
                    console.error('Error:', error);
                }
            }
            
            // Save warning notification
            document.getElementById('save-warning-notification').addEventListener('click', async () => {
                const id = document.getElementById('warning-notification-id').value;
                const name = document.getElementById('warning-notification-name').value;
                const description = document.getElementById('warning-notification-description').value;
                const enabled = document.getElementById('warning-notification-enabled').checked;
                const warningType = document.getElementById('warning-type-select').value;
                
                if (!warningType) {
                    showToast('Please select a warning type', true);
                    return;
                }
                
                // Prepare warning notification data
                const warningNotification = {
                    type: 'warning',
                    name,
                    description,
                    enabled,
                    warningType
                };
                
                try {
                    let url = '<%= ingress_path %>/api/notifications/rules';
                    let method = 'POST';
                    
                    // If editing an existing rule
                    if (id) {
                        url = `<%= ingress_path %>/api/notifications/rules/${id}`;
                        method = 'PUT';
                        warningNotification.id = id;
                    }
                    
                    const response = await fetch(url, {
                        method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(warningNotification)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast(`Warning notification ${id ? 'updated' : 'added'} successfully!`);
                        closeModal('warning-notification-modal');
                        loadWarningNotifications(); // Reload to show changes
                    } else {
                        showToast(result.error || 'Failed to save warning notification', true);
                    }
                } catch (error) {
                    showToast('Error saving warning notification', true);
                    console.error('Error:', error);
                }
            });
            
            // Load warning notifications
            async function loadWarningNotifications() {
                const warningsLoader = document.getElementById('warnings-loader');
                const warningNotificationsList = document.getElementById('warning-notifications-list');
                const warningNotificationsEmpty = document.getElementById('warning-notifications-empty');
                
                warningsLoader.classList.add('show');
                warningNotificationsList.innerHTML = '';
                warningNotificationsEmpty.style.display = 'none';
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/rules');
                    const result = await response.json();
                    
                    warningsLoader.classList.remove('show');
                    
                    if (!result.success || !result.rules || result.rules.length === 0) {
                        warningNotificationsEmpty.style.display = 'block';
                        return;
                    }
                    
                    // Filter only warning-type notifications
                    const warningNotifications = result.rules.filter(rule => rule.type === 'warning');
                    
                    if (warningNotifications.length === 0) {
                        warningNotificationsEmpty.style.display = 'block';
                        return;
                    }
                    
                    warningNotifications.forEach(warning => {
                        const warningItem = document.createElement('div');
                        warningItem.className = 'notification-item warning';
                        warningItem.innerHTML = `
                            <div class="notification-header">
                                <div class="notification-title">
                                    <svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 22c5.514 0 10-4.486 10-10S17.514 2 12 2 2 6.486 2 12s4.486 10 10 10zm0-15v6m0 4v.01"/>
                                    </svg>
                                    ${warning.name}
                                </div>
                                <div class="notification-actions">
                                    <button class="btn btn-secondary btn-sm edit-warning" data-id="${warning.id}">Edit</button>
                                    <button class="btn btn-danger btn-sm delete-warning" data-id="${warning.id}">Delete</button>
                                </div>
                            </div>
                            ${warning.description ? `<div class="notification-description">${warning.description}</div>` : ''}
                            <div class="notification-meta">
                                <span class="notification-tag">Warning Type: ${warning.warningType}</span>
                                <span class="notification-tag">${warning.enabled ? 'Enabled' : 'Disabled'}</span>
                            </div>
                            <div class="notification-toggle">
                                <label class="switch">
                                    <input type="checkbox" class="toggle-warning" data-id="${warning.id}" ${warning.enabled ? 'checked' : ''}>
                                    <span class="slider"></span>
                                </label>
                            </div>
                        `;
                        
                        warningNotificationsList.appendChild(warningItem);
                    });
                    
                    // Add event listeners for actions
                    document.querySelectorAll('.edit-warning').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = e.target.getAttribute('data-id');
                            editWarningNotification(id);
                        });
                    });
                    
                    document.querySelectorAll('.delete-warning').forEach(button => {
                        button.addEventListener('click', (e) => {
                            const id = e.target.getAttribute('data-id');
                            deleteWarningNotification(id);
                        });
                    });
                    
                    document.querySelectorAll('.toggle-warning').forEach(checkbox => {
                        checkbox.addEventListener('change', (e) => {
                            const id = e.target.getAttribute('data-id');
                            toggleWarningNotification(id, e.target.checked);
                        });
                    });
                } catch (error) {
                    warningsLoader.classList.remove('show');
                    warningNotificationsEmpty.style.display = 'block';
                    warningNotificationsEmpty.querySelector('.empty-state-text').textContent = 'Error loading warning notifications';
                    console.error('Error loading warning notifications:', error);
                }
            }
            
            // Edit warning notification
            async function editWarningNotification(id) {
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/rules');
                    const result = await response.json();
                    
                    if (!result.success) {
                        showToast('Failed to load warning notification', true);
                        return;
                    }
                    
                    const warning = result.rules.find(w => w.id === id);
                    
                    if (!warning) {
                        showToast('Warning notification not found', true);
                        return;
                    }
                    
                    // Fill the form
                    document.getElementById('warning-modal-title').textContent = 'Edit Warning Notification';
                    document.getElementById('warning-notification-id').value = warning.id;
                    document.getElementById('warning-notification-name').value = warning.name;
                    document.getElementById('warning-notification-description').value = warning.description || '';
                    document.getElementById('warning-notification-enabled').checked = warning.enabled;
                    
                    // Load warning types and select the current one
                    await loadWarningTypes();
                    
                    // Select the current warning type
                    setTimeout(() => {
                        document.getElementById('warning-type-select').value = warning.warningType;
                    }, 100);
                    
                    openModal('warning-notification-modal');
                } catch (error) {
                    showToast('Error loading warning notification', true);
                    console.error('Error:', error);
                }
            }
            
            // Delete warning notification
            async function deleteWarningNotification(id) {
                if (!confirm('Are you sure you want to delete this warning notification?')) {
                    return;
                }
                
                try {
                    const response = await fetch(`<%= ingress_path %>/api/notifications/rules/${id}`, {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast('Warning notification deleted successfully!');
                        loadWarningNotifications(); // Reload to update the list
                    } else {
                        showToast(result.error || 'Failed to delete warning notification', true);
                    }
                } catch (error) {
                    showToast('Error deleting warning notification', true);
                    console.error('Error:', error);
                }
            }
            
            // Toggle warning notification enabled state
            async function toggleWarningNotification(id, enabled) {
                try {
                    // First, get the current warning data
                    const response = await fetch('<%= ingress_path %>/api/notifications/rules');
                    const result = await response.json();
                    
                    if (!result.success) {
                        showToast('Failed to load warning notification', true);
                        return;
                    }
                    
                    const warning = result.rules.find(w => w.id === id);
                    
                    if (!warning) {
                        showToast('Warning notification not found', true);
                        return;
                    }
                    
                    // Update the warning with new enabled state
                    const updateResponse = await fetch(`<%= ingress_path %>/api/notifications/rules/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            ...warning,
                            enabled
                        })
                    });
                    
                    const updateResult = await updateResponse.json();
                    
                    if (updateResult.success) {
                        showToast(`Warning notification ${enabled ? 'enabled' : 'disabled'} successfully!`);
                    } else {
                        showToast(updateResult.error || 'Failed to update warning notification', true);
                        // Revert checkbox state
                        loadWarningNotifications();
                    }
                } catch (error) {
                    showToast('Error updating warning notification', true);
                    console.error('Error:', error);
                    // Revert checkbox state
                    loadWarningNotifications();
                }
            }
            
            // Notification History
            
            // Load notification history
            async function loadNotificationHistory() {
                const historyLoader = document.getElementById('history-loader');
                const historyList = document.getElementById('notification-history-list');
                const historyEmpty = document.getElementById('notification-history-empty');
                
                historyLoader.classList.add('show');
                historyList.innerHTML = '';
                historyEmpty.style.display = 'none';
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/warnings/history');
                    const result = await response.json();
                    
                    historyLoader.classList.remove('show');
                    
                    if (!result.success || !result.warnings || result.warnings.length === 0) {
                        historyEmpty.style.display = 'block';
                        return;
                    }
                    
                    result.warnings.forEach(notification => {
                        const notificationItem = document.createElement('div');
                        notificationItem.className = 'notification-item warning';
                        
                        const formattedDate = new Date(notification.timestamp).toLocaleString();
                        
                        notificationItem.innerHTML = `
                            <div class="notification-header">
                                <div class="notification-title">
                                    <svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 22c5.514 0 10-4.486 10-10S17.514 2 12 2 2 6.486 2 12s4.486 10 10 10zm0-15v6m0 4v.01"/>
                                    </svg>
                                    ${notification.title}
                                </div>
                                <span style="font-size: 0.875rem; color: #888;">${formattedDate}</span>
                            </div>
                            ${notification.description ? `<div class="notification-description">${notification.description}</div>` : ''}
                            <div class="notification-meta">
                                <span class="notification-tag">Warning Type: ${notification.warningTypeId}</span>
                                <span class="notification-tag">Priority: ${notification.priority}</span>
                            </div>
                        `;
                        
                        historyList.appendChild(notificationItem);
                    });
                } catch (error) {
                    historyLoader.classList.remove('show');
                    historyEmpty.style.display = 'block';
                    historyEmpty.querySelector('.empty-state-text').textContent = 'Error loading notification history';
                    console.error('Error loading notification history:', error);
                }
            }
            
            // Clear notification history
            document.getElementById('clear-history').addEventListener('click', async () => {
                if (!confirm('Are you sure you want to clear all notification history? This action cannot be undone.')) {
                    return;
                }
                
                try {
                    const response = await fetch('<%= ingress_path %>/api/notifications/warnings/history', {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showToast('Notification history cleared successfully!');
                        loadNotificationHistory(); // Reload to update the list
                    } else {
                        showToast(result.error || 'Failed to clear notification history', true);
                    }
                } catch (error) {
                    showToast('Error clearing notification history', true);
                    console.error('Error:', error);
                }
            });
            
            // Initialize the page
            function initPage() {
                // Load Telegram configuration
                loadTelegramConfig();
                
                // Load rule notifications
                loadRuleNotifications();
                
                // Load warning notifications
                loadWarningNotifications();
                
                // Load notification history
                loadNotificationHistory();
                
                // Show initial guidance
                showToast('Configure your notification preferences manually - no notifications are sent by default.');
            }
            
            // Initialize on page load
            initPage();
        });
    </script>

    <script src="<%= ingress_path %>/js/loading.js"></script>
    <script src="<%= ingress_path %>/js/dark-mode.js"></script>
    <script src="<%= ingress_path %>/js/mobile.js"></script>
</body>
</html>
