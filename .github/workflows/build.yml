name: Build and Push Multi-Arch Containers

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      packages: write
    
    strategy:
      # Don't cancel other jobs if one fails
      fail-fast: false
      matrix:
        # Only build for architectures where Grafana/InfluxDB are available
        arch: [aarch64, amd64]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Map architecture to Docker platform
      id: arch-map
      run: |
        case "${{ matrix.arch }}" in
          aarch64) echo "platform=linux/arm64" >> $GITHUB_OUTPUT ;;
          amd64) echo "platform=linux/amd64" >> $GITHUB_OUTPUT ;;
        esac
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ steps.arch-map.outputs.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}-${{ matrix.arch }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_FROM=ghcr.io/home-assistant/${{ matrix.arch }}-base:3.16
          BUILD_ARCH=${{ matrix.arch }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-manifest:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: always() && contains(needs.build.result, 'success')
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Create and push manifest
      env:
        TAGS: ${{ steps.meta.outputs.tags }}
      run: |
        echo "Available tags:"
        echo "$TAGS"
        
        echo "$TAGS" | while IFS= read -r tag; do
          [ -z "$tag" ] && continue
          
          echo "Creating manifest for tag: $tag"
          
          available_images=""
          
          # Only check for the architectures we're actually building
          for arch in aarch64 amd64; do
            image_tag="$tag-$arch"
            echo "Checking for image: $image_tag"
            
            if docker manifest inspect "$image_tag" >/dev/null 2>&1; then
              echo "✓ Found image: $image_tag"
              if [ -z "$available_images" ]; then
                available_images="$image_tag"
              else
                available_images="$available_images $image_tag"
              fi
            else
              echo "✗ Image not found: $image_tag"
            fi
          done
          
          if [ -n "$available_images" ]; then
            echo "Creating manifest with images: $available_images"
            
            docker manifest rm "$tag" 2>/dev/null || true
            
            if docker manifest create "$tag" $available_images; then
              echo "✓ Manifest created successfully"
              
              if docker manifest push "$tag"; then
                echo "✓ Successfully pushed manifest for $tag"
              else
                echo "✗ Failed to push manifest for $tag"
                exit 1
              fi
            else
              echo "✗ Failed to create manifest for $tag"
              exit 1
            fi
          else
            echo "✗ No images available for $tag, skipping manifest creation"
            exit 1
          fi
        done
